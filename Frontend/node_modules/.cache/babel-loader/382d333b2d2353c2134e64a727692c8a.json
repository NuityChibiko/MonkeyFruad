{"ast":null,"code":"/**\n * Helper function. Gets or populates srcset breakpoints using provided parameters\n * Either the breakpoints or min_width, max_width, max_images must be provided.\n *\n * @module utils\n * @private\n * @param {srcset} srcset Options with either `breakpoints` or `min_width`, `max_width`, and `max_images`\n *\n * @return {number[]} Array of breakpoints\n *\n */\nfunction generateBreakpoints(srcset) {\n  let breakpoints = srcset.breakpoints || [];\n\n  if (breakpoints.length) {\n    return breakpoints;\n  }\n\n  let [min_width, max_width, max_images] = [srcset.min_width, srcset.max_width, srcset.max_images].map(Number);\n\n  if ([min_width, max_width, max_images].some(Number.isNaN)) {\n    throw 'Either (min_width, max_width, max_images) ' + 'or breakpoints must be provided to the image srcset attribute';\n  }\n\n  if (min_width > max_width) {\n    throw 'min_width must be less than max_width';\n  }\n\n  if (max_images <= 0) {\n    throw 'max_images must be a positive integer';\n  } else if (max_images === 1) {\n    min_width = max_width;\n  }\n\n  let stepSize = Math.ceil((max_width - min_width) / Math.max(max_images - 1, 1));\n\n  for (let current = min_width; current < max_width; current += stepSize) {\n    breakpoints.push(current);\n  }\n\n  breakpoints.push(max_width);\n  return breakpoints;\n}\n\nmodule.exports = generateBreakpoints;","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Frontend/node_modules/cloudinary/lib/utils/generateBreakpoints.js"],"names":["generateBreakpoints","srcset","breakpoints","length","min_width","max_width","max_images","map","Number","some","isNaN","stepSize","Math","ceil","max","current","push","module","exports"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,mBAAT,CAA6BC,MAA7B,EAAqC;AACnC,MAAIC,WAAW,GAAGD,MAAM,CAACC,WAAP,IAAsB,EAAxC;;AACA,MAAIA,WAAW,CAACC,MAAhB,EAAwB;AACtB,WAAOD,WAAP;AACD;;AACD,MAAI,CAACE,SAAD,EAAYC,SAAZ,EAAuBC,UAAvB,IAAqC,CAACL,MAAM,CAACG,SAAR,EAAmBH,MAAM,CAACI,SAA1B,EAAqCJ,MAAM,CAACK,UAA5C,EAAwDC,GAAxD,CAA4DC,MAA5D,CAAzC;;AACA,MAAI,CAACJ,SAAD,EAAYC,SAAZ,EAAuBC,UAAvB,EAAmCG,IAAnC,CAAwCD,MAAM,CAACE,KAA/C,CAAJ,EAA2D;AACzD,UAAM,+CACJ,+DADF;AAED;;AAED,MAAIN,SAAS,GAAGC,SAAhB,EAA2B;AACzB,UAAM,uCAAN;AACD;;AAED,MAAIC,UAAU,IAAI,CAAlB,EAAqB;AACnB,UAAM,uCAAN;AACD,GAFD,MAEO,IAAIA,UAAU,KAAK,CAAnB,EAAsB;AAC3BF,IAAAA,SAAS,GAAGC,SAAZ;AACD;;AAED,MAAIM,QAAQ,GAAGC,IAAI,CAACC,IAAL,CAAU,CAACR,SAAS,GAAGD,SAAb,IAA0BQ,IAAI,CAACE,GAAL,CAASR,UAAU,GAAG,CAAtB,EAAyB,CAAzB,CAApC,CAAf;;AACA,OAAK,IAAIS,OAAO,GAAGX,SAAnB,EAA8BW,OAAO,GAAGV,SAAxC,EAAmDU,OAAO,IAAIJ,QAA9D,EAAwE;AACtET,IAAAA,WAAW,CAACc,IAAZ,CAAiBD,OAAjB;AACD;;AACDb,EAAAA,WAAW,CAACc,IAAZ,CAAiBX,SAAjB;AACA,SAAOH,WAAP;AACD;;AACDe,MAAM,CAACC,OAAP,GAAiBlB,mBAAjB","sourcesContent":["\n/**\n * Helper function. Gets or populates srcset breakpoints using provided parameters\n * Either the breakpoints or min_width, max_width, max_images must be provided.\n *\n * @module utils\n * @private\n * @param {srcset} srcset Options with either `breakpoints` or `min_width`, `max_width`, and `max_images`\n *\n * @return {number[]} Array of breakpoints\n *\n */\nfunction generateBreakpoints(srcset) {\n  let breakpoints = srcset.breakpoints || [];\n  if (breakpoints.length) {\n    return breakpoints;\n  }\n  let [min_width, max_width, max_images] = [srcset.min_width, srcset.max_width, srcset.max_images].map(Number);\n  if ([min_width, max_width, max_images].some(Number.isNaN)) {\n    throw 'Either (min_width, max_width, max_images) '\n    + 'or breakpoints must be provided to the image srcset attribute';\n  }\n\n  if (min_width > max_width) {\n    throw 'min_width must be less than max_width';\n  }\n\n  if (max_images <= 0) {\n    throw 'max_images must be a positive integer';\n  } else if (max_images === 1) {\n    min_width = max_width;\n  }\n\n  let stepSize = Math.ceil((max_width - min_width) / Math.max(max_images - 1, 1));\n  for (let current = min_width; current < max_width; current += stepSize) {\n    breakpoints.push(current);\n  }\n  breakpoints.push(max_width);\n  return breakpoints;\n}\nmodule.exports = generateBreakpoints;\n"]},"metadata":{},"sourceType":"script"}