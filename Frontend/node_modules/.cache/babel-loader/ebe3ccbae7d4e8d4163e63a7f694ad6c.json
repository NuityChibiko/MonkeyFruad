{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CustomCondition = void 0;\n\nconst base_1 = require(\"../base\");\n\nclass CustomCondition {\n  constructor(condition) {\n    this.condition = condition;\n  }\n\n  async run(_context, value, meta) {\n    try {\n      const result = this.condition(value, meta);\n      await result; // if the promise resolved or the result is truthy somehow, then there's no validation halt.\n\n      if (!result) {\n        // the error thrown here is symbolic, it will be re-thrown in the catch clause anyway.\n        throw new Error();\n      }\n    } catch (e) {\n      throw new base_1.ValidationHalt();\n    }\n  }\n\n}\n\nexports.CustomCondition = CustomCondition;","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Backend/node_modules/express-validator/src/context-items/custom-condition.js"],"names":["Object","defineProperty","exports","value","CustomCondition","base_1","require","constructor","condition","run","_context","meta","result","Error","e","ValidationHalt"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,eAAR,GAA0B,KAAK,CAA/B;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,SAAD,CAAtB;;AACA,MAAMF,eAAN,CAAsB;AAClBG,EAAAA,WAAW,CAACC,SAAD,EAAY;AACnB,SAAKA,SAAL,GAAiBA,SAAjB;AACH;;AACD,QAAMC,GAAN,CAAUC,QAAV,EAAoBP,KAApB,EAA2BQ,IAA3B,EAAiC;AAC7B,QAAI;AACA,YAAMC,MAAM,GAAG,KAAKJ,SAAL,CAAeL,KAAf,EAAsBQ,IAAtB,CAAf;AACA,YAAMC,MAAN,CAFA,CAGA;;AACA,UAAI,CAACA,MAAL,EAAa;AACT;AACA,cAAM,IAAIC,KAAJ,EAAN;AACH;AACJ,KARD,CASA,OAAOC,CAAP,EAAU;AACN,YAAM,IAAIT,MAAM,CAACU,cAAX,EAAN;AACH;AACJ;;AAjBiB;;AAmBtBb,OAAO,CAACE,eAAR,GAA0BA,eAA1B","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.CustomCondition = void 0;\r\nconst base_1 = require(\"../base\");\r\nclass CustomCondition {\r\n    constructor(condition) {\r\n        this.condition = condition;\r\n    }\r\n    async run(_context, value, meta) {\r\n        try {\r\n            const result = this.condition(value, meta);\r\n            await result;\r\n            // if the promise resolved or the result is truthy somehow, then there's no validation halt.\r\n            if (!result) {\r\n                // the error thrown here is symbolic, it will be re-thrown in the catch clause anyway.\r\n                throw new Error();\r\n            }\r\n        }\r\n        catch (e) {\r\n            throw new base_1.ValidationHalt();\r\n        }\r\n    }\r\n}\r\nexports.CustomCondition = CustomCondition;\r\n"]},"metadata":{},"sourceType":"script"}