{"ast":null,"code":"\"use strict\";\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ResourceCollector = void 0;\n/**\r\n * ResourceCollector class implements asynchronous logic of calling the API call that supports pagination,\r\n * page by page, collecting all resources (up to `maxResults`) in the array.\r\n *\r\n * Usage:\r\n *   const resourceCollector = new ResourceCollector(apiCall, maxResults); // -1 for unlimited\r\n *   resourceCollector.processAllPages(request).then(resources => ...);\r\n */\n\nclass ResourceCollector {\n  constructor(apiCall, maxResults = -1) {\n    this.apiCall = apiCall;\n    this.resources = [];\n    this.maxResults = maxResults;\n  }\n\n  callback(err, resources, nextPageRequest) {\n    if (err) {\n      // Something went wrong with this request - failing everything\n      this.rejectCallback(err);\n      return;\n    } // Process one page\n\n\n    for (const resource of resources) {\n      this.resources.push(resource);\n\n      if (this.resources.length === this.maxResults) {\n        nextPageRequest = null;\n        break;\n      }\n    } // All done?\n\n\n    if (!nextPageRequest) {\n      this.resolveCallback(this.resources);\n      return;\n    } // Schedule the next call\n\n\n    const callback = (...args) => this.callback(...args);\n\n    setImmediate(this.apiCall, nextPageRequest, callback);\n  }\n\n  processAllPages(firstRequest) {\n    return new Promise((resolve, reject) => {\n      this.resolveCallback = resolve;\n      this.rejectCallback = reject; // Schedule the first call\n\n      const callback = (...args) => this.callback(...args);\n\n      setImmediate(this.apiCall, firstRequest, callback);\n    });\n  }\n\n}\n\nexports.ResourceCollector = ResourceCollector;","map":{"version":3,"sources":["../../../src/paginationCalls/resourceCollector.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;AAcG;;;;;;AAQH;;;;;;;AAOG;;AACH,MAAa,iBAAb,CAA8B;AAO5B,EAAA,WAAA,CAAY,OAAZ,EAA6C,UAAU,GAAG,CAAC,CAA3D,EAA4D;AAC1D,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,SAAL,GAAiB,EAAjB;AACA,SAAK,UAAL,GAAkB,UAAlB;AACD;;AAEO,EAAA,QAAQ,CACd,GADc,EAEd,SAFc,EAGd,eAHc,EAGsB;AAEpC,QAAI,GAAJ,EAAS;AACP;AACA,WAAK,cAAL,CAAqB,GAArB;AACA;AACD,KANmC,CAQpC;;;AACA,SAAK,MAAM,QAAX,IAAuB,SAAvB,EAAkC;AAChC,WAAK,SAAL,CAAe,IAAf,CAAoB,QAApB;;AACA,UAAI,KAAK,SAAL,CAAe,MAAf,KAA0B,KAAK,UAAnC,EAA+C;AAC7C,QAAA,eAAe,GAAG,IAAlB;AACA;AACD;AACF,KAfmC,CAiBpC;;;AACA,QAAI,CAAC,eAAL,EAAsB;AACpB,WAAK,eAAL,CAAsB,KAAK,SAA3B;AACA;AACD,KArBmC,CAuBpC;;;AACA,UAAM,QAAQ,GAAG,CACf,GAAG,IADY,KAEZ,KAAK,QAAL,CAAc,GAAG,IAAjB,CAFL;;AAGA,IAAA,YAAY,CAAC,KAAK,OAAN,EAAe,eAAf,EAAgC,QAAhC,CAAZ;AACD;;AAED,EAAA,eAAe,CAAC,YAAD,EAA0B;AACvC,WAAO,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,KAAoB;AACrC,WAAK,eAAL,GAAuB,OAAvB;AACA,WAAK,cAAL,GAAsB,MAAtB,CAFqC,CAIrC;;AACA,YAAM,QAAQ,GAAG,CACf,GAAG,IADY,KAEZ,KAAK,QAAL,CAAc,GAAG,IAAjB,CAFL;;AAGA,MAAA,YAAY,CAAC,KAAK,OAAN,EAAe,YAAf,EAA6B,QAA7B,CAAZ;AACD,KATM,CAAP;AAUD;;AAzD2B;;AAA9B,OAAA,CAAA,iBAAA,GAAA,iBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\r\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ResourceCollector = void 0;\r\n/**\r\n * ResourceCollector class implements asynchronous logic of calling the API call that supports pagination,\r\n * page by page, collecting all resources (up to `maxResults`) in the array.\r\n *\r\n * Usage:\r\n *   const resourceCollector = new ResourceCollector(apiCall, maxResults); // -1 for unlimited\r\n *   resourceCollector.processAllPages(request).then(resources => ...);\r\n */\r\nclass ResourceCollector {\r\n    constructor(apiCall, maxResults = -1) {\r\n        this.apiCall = apiCall;\r\n        this.resources = [];\r\n        this.maxResults = maxResults;\r\n    }\r\n    callback(err, resources, nextPageRequest) {\r\n        if (err) {\r\n            // Something went wrong with this request - failing everything\r\n            this.rejectCallback(err);\r\n            return;\r\n        }\r\n        // Process one page\r\n        for (const resource of resources) {\r\n            this.resources.push(resource);\r\n            if (this.resources.length === this.maxResults) {\r\n                nextPageRequest = null;\r\n                break;\r\n            }\r\n        }\r\n        // All done?\r\n        if (!nextPageRequest) {\r\n            this.resolveCallback(this.resources);\r\n            return;\r\n        }\r\n        // Schedule the next call\r\n        const callback = (...args) => this.callback(...args);\r\n        setImmediate(this.apiCall, nextPageRequest, callback);\r\n    }\r\n    processAllPages(firstRequest) {\r\n        return new Promise((resolve, reject) => {\r\n            this.resolveCallback = resolve;\r\n            this.rejectCallback = reject;\r\n            // Schedule the first call\r\n            const callback = (...args) => this.callback(...args);\r\n            setImmediate(this.apiCall, firstRequest, callback);\r\n        });\r\n    }\r\n}\r\nexports.ResourceCollector = ResourceCollector;\r\n//# sourceMappingURL=resourceCollector.js.map"]},"metadata":{},"sourceType":"script"}