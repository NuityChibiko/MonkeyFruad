{"ast":null,"code":"'use strict';\n\nconst utils = require('./utils');\n\nmodule.exports = (ast, options = {}) => {\n  let stringify = (node, parent = {}) => {\n    let invalidBlock = options.escapeInvalid && utils.isInvalidBrace(parent);\n    let invalidNode = node.invalid === true && options.escapeInvalid === true;\n    let output = '';\n\n    if (node.value) {\n      if ((invalidBlock || invalidNode) && utils.isOpenOrClose(node)) {\n        return '\\\\' + node.value;\n      }\n\n      return node.value;\n    }\n\n    if (node.value) {\n      return node.value;\n    }\n\n    if (node.nodes) {\n      for (let child of node.nodes) {\n        output += stringify(child);\n      }\n    }\n\n    return output;\n  };\n\n  return stringify(ast);\n};","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Frontend/node_modules/braces/lib/stringify.js"],"names":["utils","require","module","exports","ast","options","stringify","node","parent","invalidBlock","escapeInvalid","isInvalidBrace","invalidNode","invalid","output","value","isOpenOrClose","nodes","child"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,SAAD,CAArB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,CAACC,GAAD,EAAMC,OAAO,GAAG,EAAhB,KAAuB;AACtC,MAAIC,SAAS,GAAG,CAACC,IAAD,EAAOC,MAAM,GAAG,EAAhB,KAAuB;AACrC,QAAIC,YAAY,GAAGJ,OAAO,CAACK,aAAR,IAAyBV,KAAK,CAACW,cAAN,CAAqBH,MAArB,CAA5C;AACA,QAAII,WAAW,GAAGL,IAAI,CAACM,OAAL,KAAiB,IAAjB,IAAyBR,OAAO,CAACK,aAAR,KAA0B,IAArE;AACA,QAAII,MAAM,GAAG,EAAb;;AAEA,QAAIP,IAAI,CAACQ,KAAT,EAAgB;AACd,UAAI,CAACN,YAAY,IAAIG,WAAjB,KAAiCZ,KAAK,CAACgB,aAAN,CAAoBT,IAApB,CAArC,EAAgE;AAC9D,eAAO,OAAOA,IAAI,CAACQ,KAAnB;AACD;;AACD,aAAOR,IAAI,CAACQ,KAAZ;AACD;;AAED,QAAIR,IAAI,CAACQ,KAAT,EAAgB;AACd,aAAOR,IAAI,CAACQ,KAAZ;AACD;;AAED,QAAIR,IAAI,CAACU,KAAT,EAAgB;AACd,WAAK,IAAIC,KAAT,IAAkBX,IAAI,CAACU,KAAvB,EAA8B;AAC5BH,QAAAA,MAAM,IAAIR,SAAS,CAACY,KAAD,CAAnB;AACD;AACF;;AACD,WAAOJ,MAAP;AACD,GAtBD;;AAwBA,SAAOR,SAAS,CAACF,GAAD,CAAhB;AACD,CA1BD","sourcesContent":["'use strict';\r\n\r\nconst utils = require('./utils');\r\n\r\nmodule.exports = (ast, options = {}) => {\r\n  let stringify = (node, parent = {}) => {\r\n    let invalidBlock = options.escapeInvalid && utils.isInvalidBrace(parent);\r\n    let invalidNode = node.invalid === true && options.escapeInvalid === true;\r\n    let output = '';\r\n\r\n    if (node.value) {\r\n      if ((invalidBlock || invalidNode) && utils.isOpenOrClose(node)) {\r\n        return '\\\\' + node.value;\r\n      }\r\n      return node.value;\r\n    }\r\n\r\n    if (node.value) {\r\n      return node.value;\r\n    }\r\n\r\n    if (node.nodes) {\r\n      for (let child of node.nodes) {\r\n        output += stringify(child);\r\n      }\r\n    }\r\n    return output;\r\n  };\r\n\r\n  return stringify(ast);\r\n};\r\n\r\n"]},"metadata":{},"sourceType":"script"}