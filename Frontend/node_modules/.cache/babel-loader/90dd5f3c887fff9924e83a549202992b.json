{"ast":null,"code":"\"use strict\"; // Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AclRoleAccessorMethods = exports.Acl = void 0;\n\nconst promisify_1 = require(\"@google-cloud/promisify\");\n\nconst arrify = require(\"arrify\");\n/**\r\n * Attach functionality to a {@link Storage.acl} instance. This will add an\r\n * object for each role group (owners, readers, and writers), with each object\r\n * containing methods to add or delete a type of entity.\r\n *\r\n * As an example, here are a few methods that are created.\r\n *\r\n *   myBucket.acl.readers.deleteGroup('groupId', function(err) {});\r\n *\r\n *   myBucket.acl.owners.addUser('email@example.com', function(err, acl) {});\r\n *\r\n *   myBucket.acl.writers.addDomain('example.com', function(err, acl) {});\r\n *\r\n * @private\r\n */\n\n\nclass AclRoleAccessorMethods {\n  constructor() {\n    this.owners = {};\n    this.readers = {};\n    this.writers = {};\n    /**\r\n     * An object of convenience methods to add or delete owner ACL permissions\r\n     * for a given entity.\r\n     *\r\n     * The supported methods include:\r\n     *\r\n     *   - `myFile.acl.owners.addAllAuthenticatedUsers`\r\n     *   - `myFile.acl.owners.deleteAllAuthenticatedUsers`\r\n     *   - `myFile.acl.owners.addAllUsers`\r\n     *   - `myFile.acl.owners.deleteAllUsers`\r\n     *   - `myFile.acl.owners.addDomain`\r\n     *   - `myFile.acl.owners.deleteDomain`\r\n     *   - `myFile.acl.owners.addGroup`\r\n     *   - `myFile.acl.owners.deleteGroup`\r\n     *   - `myFile.acl.owners.addProject`\r\n     *   - `myFile.acl.owners.deleteProject`\r\n     *   - `myFile.acl.owners.addUser`\r\n     *   - `myFile.acl.owners.deleteUser`\r\n     *\r\n     * @name Acl#owners\r\n     *\r\n     * @example\r\n     * const storage = require('@google-cloud/storage')();\r\n     * const myBucket = storage.bucket('my-bucket');\r\n     * const myFile = myBucket.file('my-file');\r\n     *\r\n     * //-\r\n     * // Add a user as an owner of a file.\r\n     * //-\r\n     * const myBucket = gcs.bucket('my-bucket');\r\n     * const myFile = myBucket.file('my-file');\r\n     * myFile.acl.owners.addUser('email@example.com', function(err, aclObject)\r\n     * {});\r\n     *\r\n     * //-\r\n     * // For reference, the above command is the same as running the following.\r\n     * //-\r\n     * myFile.acl.add({\r\n     *   entity: 'user-email@example.com',\r\n     *   role: gcs.acl.OWNER_ROLE\r\n     * }, function(err, aclObject) {});\r\n     *\r\n     * //-\r\n     * // If the callback is omitted, we'll return a Promise.\r\n     * //-\r\n     * myFile.acl.owners.addUser('email@example.com').then(function(data) {\r\n     *   const aclObject = data[0];\r\n     *   const apiResponse = data[1];\r\n     * });\r\n     */\n\n    this.owners = {};\n    /**\r\n     * An object of convenience methods to add or delete reader ACL permissions\r\n     * for a given entity.\r\n     *\r\n     * The supported methods include:\r\n     *\r\n     *   - `myFile.acl.readers.addAllAuthenticatedUsers`\r\n     *   - `myFile.acl.readers.deleteAllAuthenticatedUsers`\r\n     *   - `myFile.acl.readers.addAllUsers`\r\n     *   - `myFile.acl.readers.deleteAllUsers`\r\n     *   - `myFile.acl.readers.addDomain`\r\n     *   - `myFile.acl.readers.deleteDomain`\r\n     *   - `myFile.acl.readers.addGroup`\r\n     *   - `myFile.acl.readers.deleteGroup`\r\n     *   - `myFile.acl.readers.addProject`\r\n     *   - `myFile.acl.readers.deleteProject`\r\n     *   - `myFile.acl.readers.addUser`\r\n     *   - `myFile.acl.readers.deleteUser`\r\n     *\r\n     * @name Acl#readers\r\n     *\r\n     * @example\r\n     * const storage = require('@google-cloud/storage')();\r\n     * const myBucket = storage.bucket('my-bucket');\r\n     * const myFile = myBucket.file('my-file');\r\n     *\r\n     * //-\r\n     * // Add a user as a reader of a file.\r\n     * //-\r\n     * myFile.acl.readers.addUser('email@example.com', function(err, aclObject)\r\n     * {});\r\n     *\r\n     * //-\r\n     * // For reference, the above command is the same as running the following.\r\n     * //-\r\n     * myFile.acl.add({\r\n     *   entity: 'user-email@example.com',\r\n     *   role: gcs.acl.READER_ROLE\r\n     * }, function(err, aclObject) {});\r\n     *\r\n     * //-\r\n     * // If the callback is omitted, we'll return a Promise.\r\n     * //-\r\n     * myFile.acl.readers.addUser('email@example.com').then(function(data) {\r\n     *   const aclObject = data[0];\r\n     *   const apiResponse = data[1];\r\n     * });\r\n     */\n\n    this.readers = {};\n    /**\r\n     * An object of convenience methods to add or delete writer ACL permissions\r\n     * for a given entity.\r\n     *\r\n     * The supported methods include:\r\n     *\r\n     *   - `myFile.acl.writers.addAllAuthenticatedUsers`\r\n     *   - `myFile.acl.writers.deleteAllAuthenticatedUsers`\r\n     *   - `myFile.acl.writers.addAllUsers`\r\n     *   - `myFile.acl.writers.deleteAllUsers`\r\n     *   - `myFile.acl.writers.addDomain`\r\n     *   - `myFile.acl.writers.deleteDomain`\r\n     *   - `myFile.acl.writers.addGroup`\r\n     *   - `myFile.acl.writers.deleteGroup`\r\n     *   - `myFile.acl.writers.addProject`\r\n     *   - `myFile.acl.writers.deleteProject`\r\n     *   - `myFile.acl.writers.addUser`\r\n     *   - `myFile.acl.writers.deleteUser`\r\n     *\r\n     * @name Acl#writers\r\n     *\r\n     * @example\r\n     * const storage = require('@google-cloud/storage')();\r\n     * const myBucket = storage.bucket('my-bucket');\r\n     * const myFile = myBucket.file('my-file');\r\n     *\r\n     * //-\r\n     * // Add a user as a writer of a file.\r\n     * //-\r\n     * myFile.acl.writers.addUser('email@example.com', function(err, aclObject)\r\n     * {});\r\n     *\r\n     * //-\r\n     * // For reference, the above command is the same as running the following.\r\n     * //-\r\n     * myFile.acl.add({\r\n     *   entity: 'user-email@example.com',\r\n     *   role: gcs.acl.WRITER_ROLE\r\n     * }, function(err, aclObject) {});\r\n     *\r\n     * //-\r\n     * // If the callback is omitted, we'll return a Promise.\r\n     * //-\r\n     * myFile.acl.writers.addUser('email@example.com').then(function(data) {\r\n     *   const aclObject = data[0];\r\n     *   const apiResponse = data[1];\r\n     * });\r\n     */\n\n    this.writers = {};\n    AclRoleAccessorMethods.roles.forEach(this._assignAccessMethods.bind(this));\n  }\n\n  _assignAccessMethods(role) {\n    const accessMethods = AclRoleAccessorMethods.accessMethods;\n    const entities = AclRoleAccessorMethods.entities;\n    const roleGroup = role.toLowerCase() + 's'; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    this[roleGroup] = entities.reduce((acc, entity) => {\n      const isPrefix = entity.charAt(entity.length - 1) === '-';\n      accessMethods.forEach(accessMethod => {\n        let method = accessMethod + entity[0].toUpperCase() + entity.substr(1);\n\n        if (isPrefix) {\n          method = method.replace('-', '');\n        } // Wrap the parent accessor method (e.g. `add` or `delete`) to avoid the\n        // more complex API of specifying an `entity` and `role`.\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n        acc[method] = (entityId, options, callback) => {\n          let apiEntity;\n\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n\n          if (isPrefix) {\n            apiEntity = entity + entityId;\n          } else {\n            // If the entity is not a prefix, it is a special entity group\n            // that does not require further details. The accessor methods\n            // only accept a callback.\n            apiEntity = entity;\n            callback = entityId;\n          }\n\n          options = Object.assign({\n            entity: apiEntity,\n            role\n          }, options);\n          const args = [options];\n\n          if (typeof callback === 'function') {\n            args.push(callback);\n          } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n          return this[accessMethod].apply(this, args);\n        };\n      });\n      return acc;\n    }, {});\n  }\n\n}\n\nexports.AclRoleAccessorMethods = AclRoleAccessorMethods;\nAclRoleAccessorMethods.accessMethods = ['add', 'delete'];\nAclRoleAccessorMethods.entities = [// Special entity groups that do not require further specification.\n'allAuthenticatedUsers', 'allUsers', // Entity groups that require specification, e.g. `user-email@example.com`.\n'domain-', 'group-', 'project-', 'user-'];\nAclRoleAccessorMethods.roles = ['OWNER', 'READER', 'WRITER'];\n/**\r\n * Cloud Storage uses access control lists (ACLs) to manage object and\r\n * bucket access. ACLs are the mechanism you use to share objects with other\r\n * users and allow other users to access your buckets and objects.\r\n *\r\n * An ACL consists of one or more entries, where each entry grants permissions\r\n * to an entity. Permissions define the actions that can be performed against an\r\n * object or bucket (for example, `READ` or `WRITE`); the entity defines who the\r\n * permission applies to (for example, a specific user or group of users).\r\n *\r\n * Where an `entity` value is accepted, we follow the format the Cloud Storage\r\n * API expects.\r\n *\r\n * Refer to\r\n * https://cloud.google.com/storage/docs/json_api/v1/defaultObjectAccessControls\r\n * for the most up-to-date values.\r\n *\r\n *   - `user-userId`\r\n *   - `user-email`\r\n *   - `group-groupId`\r\n *   - `group-email`\r\n *   - `domain-domain`\r\n *   - `project-team-projectId`\r\n *   - `allUsers`\r\n *   - `allAuthenticatedUsers`\r\n *\r\n * Examples:\r\n *\r\n *   - The user \"liz@example.com\" would be `user-liz@example.com`.\r\n *   - The group \"example@googlegroups.com\" would be\r\n *     `group-example@googlegroups.com`.\r\n *   - To refer to all members of the Google Apps for Business domain\r\n *     \"example.com\", the entity would be `domain-example.com`.\r\n *\r\n * For more detailed information, see\r\n * [About Access Control Lists](http://goo.gl/6qBBPO).\r\n *\r\n * @constructor Acl\r\n * @mixin\r\n * @param {object} options Configuration options.\r\n */\n\nclass Acl extends AclRoleAccessorMethods {\n  constructor(options) {\n    super();\n    this.pathPrefix = options.pathPrefix;\n    this.request_ = options.request;\n  }\n  /**\r\n   * @typedef {array} AddAclResponse\r\n   * @property {object} 0 The Acl Objects.\r\n   * @property {object} 1 The full API response.\r\n   */\n\n  /**\r\n   * @callback AddAclCallback\r\n   * @param {?Error} err Request error, if any.\r\n   * @param {object} acl The Acl Objects.\r\n   * @param {object} apiResponse The full API response.\r\n   */\n\n  /**\r\n   * Add access controls on a {@link Bucket} or {@link File}.\r\n   *\r\n   * @see [BucketAccessControls: insert API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/bucketAccessControls/insert}\r\n   * @see [ObjectAccessControls: insert API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/objectAccessControls/insert}\r\n   *\r\n   * @param {object} options Configuration options.\r\n   * @param {string} options.entity Whose permissions will be added.\r\n   * @param {string} options.role Permissions allowed for the defined entity.\r\n   *     See {@link https://cloud.google.com/storage/docs/access-control Access\r\n   * Control}.\r\n   * @param {number} [options.generation] **File Objects Only** Select a specific\r\n   *     revision of this file (as opposed to the latest version, the default).\r\n   * @param {string} [options.userProject] The ID of the project which will be\r\n   *     billed for the request.\r\n   * @param {AddAclCallback} [callback] Callback function.\r\n   * @returns {Promise<AddAclResponse>}\r\n   *\r\n   * @example\r\n   * const storage = require('@google-cloud/storage')();\r\n   * const myBucket = storage.bucket('my-bucket');\r\n   * const myFile = myBucket.file('my-file');\r\n   *\r\n   * const options = {\r\n   *   entity: 'user-useremail@example.com',\r\n   *   role: gcs.acl.OWNER_ROLE\r\n   * };\r\n   *\r\n   * myBucket.acl.add(options, function(err, aclObject, apiResponse) {});\r\n   *\r\n   * //-\r\n   * // For file ACL operations, you can also specify a `generation` property.\r\n   * // Here is how you would grant ownership permissions to a user on a\r\n   * specific\r\n   * // revision of a file.\r\n   * //-\r\n   * myFile.acl.add({\r\n   *   entity: 'user-useremail@example.com',\r\n   *   role: gcs.acl.OWNER_ROLE,\r\n   *   generation: 1\r\n   * }, function(err, aclObject, apiResponse) {});\r\n   *\r\n   * //-\r\n   * // If the callback is omitted, we'll return a Promise.\r\n   * //-\r\n   * myBucket.acl.add(options).then(function(data) {\r\n   *   const aclObject = data[0];\r\n   *   const apiResponse = data[1];\r\n   * });\r\n   *\r\n   * @example <caption>include:samples/acl.js</caption>\r\n   * region_tag:storage_add_file_owner\r\n   * Example of adding an owner to a file:\r\n   *\r\n   * @example <caption>include:samples/acl.js</caption>\r\n   * region_tag:storage_add_bucket_owner\r\n   * Example of adding an owner to a bucket:\r\n   *\r\n   * @example <caption>include:samples/acl.js</caption>\r\n   * region_tag:storage_add_bucket_default_owner\r\n   * Example of adding a default owner to a bucket:\r\n   */\n\n\n  add(options, callback) {\n    const query = {};\n\n    if (options.generation) {\n      query.generation = options.generation;\n    }\n\n    if (options.userProject) {\n      query.userProject = options.userProject;\n    }\n\n    this.request({\n      method: 'POST',\n      uri: '',\n      qs: query,\n      json: {\n        entity: options.entity,\n        role: options.role.toUpperCase()\n      }\n    }, (err, resp) => {\n      if (err) {\n        callback(err, null, resp);\n        return;\n      }\n\n      callback(null, this.makeAclObject_(resp), resp);\n    });\n  }\n  /**\r\n   * @typedef {array} RemoveAclResponse\r\n   * @property {object} 0 The full API response.\r\n   */\n\n  /**\r\n   * @callback RemoveAclCallback\r\n   * @param {?Error} err Request error, if any.\r\n   * @param {object} apiResponse The full API response.\r\n   */\n\n  /**\r\n   * Delete access controls on a {@link Bucket} or {@link File}.\r\n   *\r\n   * @see [BucketAccessControls: delete API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/bucketAccessControls/delete}\r\n   * @see [ObjectAccessControls: delete API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/objectAccessControls/delete}\r\n   *\r\n   * @param {object} options Configuration object.\r\n   * @param {string} options.entity Whose permissions will be revoked.\r\n   * @param {int} [options.generation] **File Objects Only** Select a specific\r\n   *     revision of this file (as opposed to the latest version, the default).\r\n   * @param {string} [options.userProject] The ID of the project which will be\r\n   *     billed for the request.\r\n   * @param {RemoveAclCallback} callback The callback function.\r\n   * @returns {Promise<RemoveAclResponse>}\r\n   *\r\n   * @example\r\n   * const storage = require('@google-cloud/storage')();\r\n   * const myBucket = storage.bucket('my-bucket');\r\n   * const myFile = myBucket.file('my-file');\r\n   *\r\n   * myBucket.acl.delete({\r\n   *   entity: 'user-useremail@example.com'\r\n   * }, function(err, apiResponse) {});\r\n   *\r\n   * //-\r\n   * // For file ACL operations, you can also specify a `generation` property.\r\n   * //-\r\n   * myFile.acl.delete({\r\n   *   entity: 'user-useremail@example.com',\r\n   *   generation: 1\r\n   * }, function(err, apiResponse) {});\r\n   *\r\n   * //-\r\n   * // If the callback is omitted, we'll return a Promise.\r\n   * //-\r\n   * myFile.acl.delete().then(function(data) {\r\n   *   const apiResponse = data[0];\r\n   * });\r\n   *\r\n   * @example <caption>include:samples/acl.js</caption>\r\n   * region_tag:storage_remove_bucket_owner\r\n   * Example of removing an owner from a bucket:\r\n   *\r\n   * @example <caption>include:samples/acl.js</caption>\r\n   * region_tag:storage_remove_bucket_default_owner\r\n   * Example of removing a default owner from a bucket:\r\n   *\r\n   * @example <caption>include:samples/acl.js</caption>\r\n   * region_tag:storage_remove_file_owner\r\n   * Example of removing an owner from a bucket:\r\n   */\n\n\n  delete(options, callback) {\n    const query = {};\n\n    if (options.generation) {\n      query.generation = options.generation;\n    }\n\n    if (options.userProject) {\n      query.userProject = options.userProject;\n    }\n\n    this.request({\n      method: 'DELETE',\n      uri: '/' + encodeURIComponent(options.entity),\n      qs: query\n    }, (err, resp) => {\n      callback(err, resp);\n    });\n  }\n  /**\r\n   * @typedef {array} GetAclResponse\r\n   * @property {object|object[]} 0 Single or array of Acl Objects.\r\n   * @property {object} 1 The full API response.\r\n   */\n\n  /**\r\n   * @callback GetAclCallback\r\n   * @param {?Error} err Request error, if any.\r\n   * @param {object|object[]} acl Single or array of Acl Objects.\r\n   * @param {object} apiResponse The full API response.\r\n   */\n\n  /**\r\n   * Get access controls on a {@link Bucket} or {@link File}. If\r\n   * an entity is omitted, you will receive an array of all applicable access\r\n   * controls.\r\n   *\r\n   * @see [BucketAccessControls: get API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/bucketAccessControls/get}\r\n   * @see [ObjectAccessControls: get API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/objectAccessControls/get}\r\n   *\r\n   * @param {object|function} [options] Configuration options. If you want to\r\n   *     receive a list of all access controls, pass the callback function as\r\n   * the only argument.\r\n   * @param {string} [options.entity] Whose permissions will be fetched.\r\n   * @param {number} [options.generation] **File Objects Only** Select a specific\r\n   *     revision of this file (as opposed to the latest version, the default).\r\n   * @param {string} [options.userProject] The ID of the project which will be\r\n   *     billed for the request.\r\n   * @param {GetAclCallback} [callback] Callback function.\r\n   * @returns {Promise<GetAclResponse>}\r\n   *\r\n   * @example\r\n   * const storage = require('@google-cloud/storage')();\r\n   * const myBucket = storage.bucket('my-bucket');\r\n   * const myFile = myBucket.file('my-file');\r\n   *\r\n   * myBucket.acl.get({\r\n   *   entity: 'user-useremail@example.com'\r\n   * }, function(err, aclObject, apiResponse) {});\r\n   *\r\n   * //-\r\n   * // Get all access controls.\r\n   * //-\r\n   * myBucket.acl.get(function(err, aclObjects, apiResponse) {\r\n   *   // aclObjects = [\r\n   *   //   {\r\n   *   //     entity: 'user-useremail@example.com',\r\n   *   //     role: 'owner'\r\n   *   //   }\r\n   *   // ]\r\n   * });\r\n   *\r\n   * //-\r\n   * // For file ACL operations, you can also specify a `generation` property.\r\n   * //-\r\n   * myFile.acl.get({\r\n   *   entity: 'user-useremail@example.com',\r\n   *   generation: 1\r\n   * }, function(err, aclObject, apiResponse) {});\r\n   *\r\n   * //-\r\n   * // If the callback is omitted, we'll return a Promise.\r\n   * //-\r\n   * myBucket.acl.get().then(function(data) {\r\n   *   const aclObject = data[0];\r\n   *   const apiResponse = data[1];\r\n   * });\r\n   *\r\n   * @example <caption>include:samples/acl.js</caption>\r\n   * region_tag:storage_print_file_acl\r\n   * Example of printing a file's ACL:\r\n   *\r\n   * @example <caption>include:samples/acl.js</caption>\r\n   * region_tag:storage_print_file_acl_for_user\r\n   * Example of printing a file's ACL for a specific user:\r\n   *\r\n   * @example <caption>include:samples/acl.js</caption>\r\n   * region_tag:storage_print_bucket_acl\r\n   * Example of printing a bucket's ACL:\r\n   *\r\n   * @example <caption>include:samples/acl.js</caption>\r\n   * region_tag:storage_print_bucket_acl_for_user\r\n   * Example of printing a bucket's ACL for a specific user:\r\n   */\n\n\n  get(optionsOrCallback, cb) {\n    const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : null;\n    const callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : cb;\n    let path = '';\n    const query = {};\n\n    if (options) {\n      path = '/' + encodeURIComponent(options.entity);\n\n      if (options.generation) {\n        query.generation = options.generation;\n      }\n\n      if (options.userProject) {\n        query.userProject = options.userProject;\n      }\n    }\n\n    this.request({\n      uri: path,\n      qs: query\n    }, (err, resp) => {\n      if (err) {\n        callback(err, null, resp);\n        return;\n      }\n\n      let results;\n\n      if (resp.items) {\n        results = arrify(resp.items).map(this.makeAclObject_);\n      } else {\n        results = this.makeAclObject_(resp);\n      }\n\n      callback(null, results, resp);\n    });\n  }\n  /**\r\n   * @typedef {array} UpdateAclResponse\r\n   * @property {object} 0 The updated Acl Objects.\r\n   * @property {object} 1 The full API response.\r\n   */\n\n  /**\r\n   * @callback UpdateAclCallback\r\n   * @param {?Error} err Request error, if any.\r\n   * @param {object} acl The updated Acl Objects.\r\n   * @param {object} apiResponse The full API response.\r\n   */\n\n  /**\r\n   * Update access controls on a {@link Bucket} or {@link File}.\r\n   *\r\n   * @see [BucketAccessControls: update API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/bucketAccessControls/update}\r\n   * @see [ObjectAccessControls: update API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/objectAccessControls/update}\r\n   *\r\n   * @param {object} options Configuration options.\r\n   * @param {string} options.entity Whose permissions will be updated.\r\n   * @param {string} options.role Permissions allowed for the defined entity.\r\n   *     See {@link Storage.acl}.\r\n   * @param {number} [options.generation] **File Objects Only** Select a specific\r\n   *     revision of this file (as opposed to the latest version, the default).\r\n   * @param {string} [options.userProject] The ID of the project which will be\r\n   *     billed for the request.\r\n   * @param {UpdateAclCallback} [callback] Callback function.\r\n   * @returns {Promise<UpdateAclResponse>}\r\n   *\r\n   * @example\r\n   * const storage = require('@google-cloud/storage')();\r\n   * const myBucket = storage.bucket('my-bucket');\r\n   * const myFile = myBucket.file('my-file');\r\n   *\r\n   * const options = {\r\n   *   entity: 'user-useremail@example.com',\r\n   *   role: gcs.acl.WRITER_ROLE\r\n   * };\r\n   *\r\n   * myBucket.acl.update(options, function(err, aclObject, apiResponse) {});\r\n   *\r\n   * //-\r\n   * // For file ACL operations, you can also specify a `generation` property.\r\n   * //-\r\n   * myFile.acl.update({\r\n   *   entity: 'user-useremail@example.com',\r\n   *   role: gcs.acl.WRITER_ROLE,\r\n   *   generation: 1\r\n   * }, function(err, aclObject, apiResponse) {});\r\n   *\r\n   * //-\r\n   * // If the callback is omitted, we'll return a Promise.\r\n   * //-\r\n   * myFile.acl.update(options).then(function(data) {\r\n   *   const aclObject = data[0];\r\n   *   const apiResponse = data[1];\r\n   * });\r\n   */\n\n\n  update(options, callback) {\n    const query = {};\n\n    if (options.generation) {\n      query.generation = options.generation;\n    }\n\n    if (options.userProject) {\n      query.userProject = options.userProject;\n    }\n\n    this.request({\n      method: 'PUT',\n      uri: '/' + encodeURIComponent(options.entity),\n      qs: query,\n      json: {\n        role: options.role.toUpperCase()\n      }\n    }, (err, resp) => {\n      if (err) {\n        callback(err, null, resp);\n        return;\n      }\n\n      callback(null, this.makeAclObject_(resp), resp);\n    });\n  }\n  /**\r\n   * Transform API responses to a consistent object format.\r\n   *\r\n   * @private\r\n   */\n\n\n  makeAclObject_(accessControlObject) {\n    const obj = {\n      entity: accessControlObject.entity,\n      role: accessControlObject.role\n    };\n\n    if (accessControlObject.projectTeam) {\n      obj.projectTeam = accessControlObject.projectTeam;\n    }\n\n    return obj;\n  }\n  /**\r\n   * Patch requests up to the bucket's request object.\r\n   *\r\n   * @private\r\n   *\r\n   * @param {string} method Action.\r\n   * @param {string} path Request path.\r\n   * @param {*} query Request query object.\r\n   * @param {*} body Request body contents.\r\n   * @param {function} callback Callback function.\r\n   */\n\n\n  request(reqOpts, callback) {\n    reqOpts.uri = this.pathPrefix + reqOpts.uri;\n    this.request_(reqOpts, callback);\n  }\n\n}\n\nexports.Acl = Acl;\n/*! Developer Documentation\r\n *\r\n * All async methods (except for streams) will return a Promise in the event\r\n * that a callback is omitted.\r\n */\n\npromisify_1.promisifyAll(Acl, {\n  exclude: ['request']\n});","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Backend/node_modules/@google-cloud/storage/build/src/acl.js"],"names":["Object","defineProperty","exports","value","AclRoleAccessorMethods","Acl","promisify_1","require","arrify","constructor","owners","readers","writers","roles","forEach","_assignAccessMethods","bind","role","accessMethods","entities","roleGroup","toLowerCase","reduce","acc","entity","isPrefix","charAt","length","accessMethod","method","toUpperCase","substr","replace","entityId","options","callback","apiEntity","assign","args","push","apply","pathPrefix","request_","request","add","query","generation","userProject","uri","qs","json","err","resp","makeAclObject_","delete","encodeURIComponent","get","optionsOrCallback","cb","path","results","items","map","update","accessControlObject","obj","projectTeam","reqOpts","promisifyAll","exclude"],"mappings":"AAAA,a,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,sBAAR,GAAiCF,OAAO,CAACG,GAAR,GAAc,KAAK,CAApD;;AACA,MAAMC,WAAW,GAAGC,OAAO,CAAC,yBAAD,CAA3B;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMH,sBAAN,CAA6B;AACzBK,EAAAA,WAAW,GAAG;AACV,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,OAAL,GAAe,EAAf;AACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACQ,SAAKF,MAAL,GAAc,EAAd;AACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACQ,SAAKC,OAAL,GAAe,EAAf;AACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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ACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,GAAG,CAACV,OAAD,EAAUC,QAAV,EAAoB;AACnB,UAAMU,KAAK,GAAG,EAAd;;AACA,QAAIX,OAAO,CAACY,UAAZ,EAAwB;AACpBD,MAAAA,KAAK,CAACC,UAAN,GAAmBZ,OAAO,CAACY,UAA3B;AACH;;AACD,QAAIZ,OAAO,CAACa,WAAZ,EAAyB;AACrBF,MAAAA,KAAK,CAACE,WAAN,GAAoBb,OAAO,CAACa,WAA5B;AACH;;AACD,SAAKJ,OAAL,CAAa;AACTd,MAAAA,MAAM,EAAE,MADC;AAETmB,MAAAA,GAAG,EAAE,EAFI;AAGTC,MAAAA,EAAE,EAAEJ,KAHK;AAITK,MAAAA,IAAI,EAAE;AACF1B,QAAAA,MAAM,EAAEU,OAAO,CAACV,MADd;AAEFP,QAAAA,IAAI,EAAEiB,OAAO,CAACjB,IAAR,CAAaa,WAAb;AAFJ;AAJG,KAAb,EAQG,CAACqB,GAAD,EAAMC,IAAN,KAAe;AACd,UAAID,GAAJ,EAAS;AACLhB,QAAAA,QAAQ,CAACgB,GAAD,EAAM,IAAN,EAAYC,IAAZ,CAAR;AACA;AACH;;AACDjB,MAAAA,QAAQ,CAAC,IAAD,EAAO,KAAKkB,cAAL,CAAoBD,IAApB,CAAP,EAAkCA,IAAlC,CAAR;AACH,KAdD;AAeH;AACD;AACJ;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIE,EAAAA,MAAM,CAACpB,OAAD,EAAUC,QAAV,EAAoB;AACtB,UAAMU,KAAK,GAAG,EAAd;;AACA,QAAIX,OAAO,CAACY,UAAZ,EAAwB;AACpBD,MAAAA,KAAK,CAACC,UAAN,GAAmBZ,OAAO,CAACY,UAA3B;AACH;;AACD,QAAIZ,OAAO,CAACa,WAAZ,EAAyB;AACrBF,MAAAA,KAAK,CAACE,WAAN,GAAoBb,OAAO,CAACa,WAA5B;AACH;;AACD,SAAKJ,OAAL,CAAa;AACTd,MAAAA,MAAM,EAAE,QADC;AAETmB,MAAAA,GAAG,EAAE,MAAMO,kBAAkB,CAACrB,OAAO,CAACV,MAAT,CAFpB;AAGTyB,MAAAA,EAAE,EAAEJ;AAHK,KAAb,EAIG,CAACM,GAAD,EAAMC,IAAN,KAAe;AACdjB,MAAAA,QAAQ,CAACgB,GAAD,EAAMC,IAAN,CAAR;AACH,KAND;AAOH;AACD;AACJ;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACII,EAAAA,GAAG,CAACC,iBAAD,EAAoBC,EAApB,EAAwB;AACvB,UAAMxB,OAAO,GAAG,OAAOuB,iBAAP,KAA6B,QAA7B,GAAwCA,iBAAxC,GAA4D,IAA5E;AACA,UAAMtB,QAAQ,GAAG,OAAOsB,iBAAP,KAA6B,UAA7B,GAA0CA,iBAA1C,GAA8DC,EAA/E;AACA,QAAIC,IAAI,GAAG,EAAX;AACA,UAAMd,KAAK,GAAG,EAAd;;AACA,QAAIX,O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","sourcesContent":["\"use strict\";\r\n// Copyright 2019 Google LLC\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.AclRoleAccessorMethods = exports.Acl = void 0;\r\nconst promisify_1 = require(\"@google-cloud/promisify\");\r\nconst arrify = require(\"arrify\");\r\n/**\r\n * Attach functionality to a {@link Storage.acl} instance. This will add an\r\n * object for each role group (owners, readers, and writers), with each object\r\n * containing methods to add or delete a type of entity.\r\n *\r\n * As an example, here are a few methods that are created.\r\n *\r\n *   myBucket.acl.readers.deleteGroup('groupId', function(err) {});\r\n *\r\n *   myBucket.acl.owners.addUser('email@example.com', function(err, acl) {});\r\n *\r\n *   myBucket.acl.writers.addDomain('example.com', function(err, acl) {});\r\n *\r\n * @private\r\n */\r\nclass AclRoleAccessorMethods {\r\n    constructor() {\r\n        this.owners = {};\r\n        this.readers = {};\r\n        this.writers = {};\r\n        /**\r\n         * An object of convenience methods to add or delete owner ACL permissions\r\n         * for a given entity.\r\n         *\r\n         * The supported methods include:\r\n         *\r\n         *   - `myFile.acl.owners.addAllAuthenticatedUsers`\r\n         *   - `myFile.acl.owners.deleteAllAuthenticatedUsers`\r\n         *   - `myFile.acl.owners.addAllUsers`\r\n         *   - `myFile.acl.owners.deleteAllUsers`\r\n         *   - `myFile.acl.owners.addDomain`\r\n         *   - `myFile.acl.owners.deleteDomain`\r\n         *   - `myFile.acl.owners.addGroup`\r\n         *   - `myFile.acl.owners.deleteGroup`\r\n         *   - `myFile.acl.owners.addProject`\r\n         *   - `myFile.acl.owners.deleteProject`\r\n         *   - `myFile.acl.owners.addUser`\r\n         *   - `myFile.acl.owners.deleteUser`\r\n         *\r\n         * @name Acl#owners\r\n         *\r\n         * @example\r\n         * const storage = require('@google-cloud/storage')();\r\n         * const myBucket = storage.bucket('my-bucket');\r\n         * const myFile = myBucket.file('my-file');\r\n         *\r\n         * //-\r\n         * // Add a user as an owner of a file.\r\n         * //-\r\n         * const myBucket = gcs.bucket('my-bucket');\r\n         * const myFile = myBucket.file('my-file');\r\n         * myFile.acl.owners.addUser('email@example.com', function(err, aclObject)\r\n         * {});\r\n         *\r\n         * //-\r\n         * // For reference, the above command is the same as running the following.\r\n         * //-\r\n         * myFile.acl.add({\r\n         *   entity: 'user-email@example.com',\r\n         *   role: gcs.acl.OWNER_ROLE\r\n         * }, function(err, aclObject) {});\r\n         *\r\n         * //-\r\n         * // If the callback is omitted, we'll return a Promise.\r\n         * //-\r\n         * myFile.acl.owners.addUser('email@example.com').then(function(data) {\r\n         *   const aclObject = data[0];\r\n         *   const apiResponse = data[1];\r\n         * });\r\n         */\r\n        this.owners = {};\r\n        /**\r\n         * An object of convenience methods to add or delete reader ACL permissions\r\n         * for a given entity.\r\n         *\r\n         * The supported methods include:\r\n         *\r\n         *   - `myFile.acl.readers.addAllAuthenticatedUsers`\r\n         *   - `myFile.acl.readers.deleteAllAuthenticatedUsers`\r\n         *   - `myFile.acl.readers.addAllUsers`\r\n         *   - `myFile.acl.readers.deleteAllUsers`\r\n         *   - `myFile.acl.readers.addDomain`\r\n         *   - `myFile.acl.readers.deleteDomain`\r\n         *   - `myFile.acl.readers.addGroup`\r\n         *   - `myFile.acl.readers.deleteGroup`\r\n         *   - `myFile.acl.readers.addProject`\r\n         *   - `myFile.acl.readers.deleteProject`\r\n         *   - `myFile.acl.readers.addUser`\r\n         *   - `myFile.acl.readers.deleteUser`\r\n         *\r\n         * @name Acl#readers\r\n         *\r\n         * @example\r\n         * const storage = require('@google-cloud/storage')();\r\n         * const myBucket = storage.bucket('my-bucket');\r\n         * const myFile = myBucket.file('my-file');\r\n         *\r\n         * //-\r\n         * // Add a user as a reader of a file.\r\n         * //-\r\n         * myFile.acl.readers.addUser('email@example.com', function(err, aclObject)\r\n         * {});\r\n         *\r\n         * //-\r\n         * // For reference, the above command is the same as running the following.\r\n         * //-\r\n         * myFile.acl.add({\r\n         *   entity: 'user-email@example.com',\r\n         *   role: gcs.acl.READER_ROLE\r\n         * }, function(err, aclObject) {});\r\n         *\r\n         * //-\r\n         * // If the callback is omitted, we'll return a Promise.\r\n         * //-\r\n         * myFile.acl.readers.addUser('email@example.com').then(function(data) {\r\n         *   const aclObject = data[0];\r\n         *   const apiResponse = data[1];\r\n         * });\r\n         */\r\n        this.readers = {};\r\n        /**\r\n         * An object of convenience methods to add or delete writer ACL permissions\r\n         * for a given entity.\r\n         *\r\n         * The supported methods include:\r\n         *\r\n         *   - `myFile.acl.writers.addAllAuthenticatedUsers`\r\n         *   - `myFile.acl.writers.deleteAllAuthenticatedUsers`\r\n         *   - `myFile.acl.writers.addAllUsers`\r\n         *   - `myFile.acl.writers.deleteAllUsers`\r\n         *   - `myFile.acl.writers.addDomain`\r\n         *   - `myFile.acl.writers.deleteDomain`\r\n         *   - `myFile.acl.writers.addGroup`\r\n         *   - `myFile.acl.writers.deleteGroup`\r\n         *   - `myFile.acl.writers.addProject`\r\n         *   - `myFile.acl.writers.deleteProject`\r\n         *   - `myFile.acl.writers.addUser`\r\n         *   - `myFile.acl.writers.deleteUser`\r\n         *\r\n         * @name Acl#writers\r\n         *\r\n         * @example\r\n         * const storage = require('@google-cloud/storage')();\r\n         * const myBucket = storage.bucket('my-bucket');\r\n         * const myFile = myBucket.file('my-file');\r\n         *\r\n         * //-\r\n         * // Add a user as a writer of a file.\r\n         * //-\r\n         * myFile.acl.writers.addUser('email@example.com', function(err, aclObject)\r\n         * {});\r\n         *\r\n         * //-\r\n         * // For reference, the above command is the same as running the following.\r\n         * //-\r\n         * myFile.acl.add({\r\n         *   entity: 'user-email@example.com',\r\n         *   role: gcs.acl.WRITER_ROLE\r\n         * }, function(err, aclObject) {});\r\n         *\r\n         * //-\r\n         * // If the callback is omitted, we'll return a Promise.\r\n         * //-\r\n         * myFile.acl.writers.addUser('email@example.com').then(function(data) {\r\n         *   const aclObject = data[0];\r\n         *   const apiResponse = data[1];\r\n         * });\r\n         */\r\n        this.writers = {};\r\n        AclRoleAccessorMethods.roles.forEach(this._assignAccessMethods.bind(this));\r\n    }\r\n    _assignAccessMethods(role) {\r\n        const accessMethods = AclRoleAccessorMethods.accessMethods;\r\n        const entities = AclRoleAccessorMethods.entities;\r\n        const roleGroup = role.toLowerCase() + 's';\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        this[roleGroup] = entities.reduce((acc, entity) => {\r\n            const isPrefix = entity.charAt(entity.length - 1) === '-';\r\n            accessMethods.forEach(accessMethod => {\r\n                let method = accessMethod + entity[0].toUpperCase() + entity.substr(1);\r\n                if (isPrefix) {\r\n                    method = method.replace('-', '');\r\n                }\r\n                // Wrap the parent accessor method (e.g. `add` or `delete`) to avoid the\r\n                // more complex API of specifying an `entity` and `role`.\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                acc[method] = (entityId, options, callback) => {\r\n                    let apiEntity;\r\n                    if (typeof options === 'function') {\r\n                        callback = options;\r\n                        options = {};\r\n                    }\r\n                    if (isPrefix) {\r\n                        apiEntity = entity + entityId;\r\n                    }\r\n                    else {\r\n                        // If the entity is not a prefix, it is a special entity group\r\n                        // that does not require further details. The accessor methods\r\n                        // only accept a callback.\r\n                        apiEntity = entity;\r\n                        callback = entityId;\r\n                    }\r\n                    options = Object.assign({\r\n                        entity: apiEntity,\r\n                        role,\r\n                    }, options);\r\n                    const args = [options];\r\n                    if (typeof callback === 'function') {\r\n                        args.push(callback);\r\n                    }\r\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                    return this[accessMethod].apply(this, args);\r\n                };\r\n            });\r\n            return acc;\r\n        }, {});\r\n    }\r\n}\r\nexports.AclRoleAccessorMethods = AclRoleAccessorMethods;\r\nAclRoleAccessorMethods.accessMethods = ['add', 'delete'];\r\nAclRoleAccessorMethods.entities = [\r\n    // Special entity groups that do not require further specification.\r\n    'allAuthenticatedUsers',\r\n    'allUsers',\r\n    // Entity groups that require specification, e.g. `user-email@example.com`.\r\n    'domain-',\r\n    'group-',\r\n    'project-',\r\n    'user-',\r\n];\r\nAclRoleAccessorMethods.roles = ['OWNER', 'READER', 'WRITER'];\r\n/**\r\n * Cloud Storage uses access control lists (ACLs) to manage object and\r\n * bucket access. ACLs are the mechanism you use to share objects with other\r\n * users and allow other users to access your buckets and objects.\r\n *\r\n * An ACL consists of one or more entries, where each entry grants permissions\r\n * to an entity. Permissions define the actions that can be performed against an\r\n * object or bucket (for example, `READ` or `WRITE`); the entity defines who the\r\n * permission applies to (for example, a specific user or group of users).\r\n *\r\n * Where an `entity` value is accepted, we follow the format the Cloud Storage\r\n * API expects.\r\n *\r\n * Refer to\r\n * https://cloud.google.com/storage/docs/json_api/v1/defaultObjectAccessControls\r\n * for the most up-to-date values.\r\n *\r\n *   - `user-userId`\r\n *   - `user-email`\r\n *   - `group-groupId`\r\n *   - `group-email`\r\n *   - `domain-domain`\r\n *   - `project-team-projectId`\r\n *   - `allUsers`\r\n *   - `allAuthenticatedUsers`\r\n *\r\n * Examples:\r\n *\r\n *   - The user \"liz@example.com\" would be `user-liz@example.com`.\r\n *   - The group \"example@googlegroups.com\" would be\r\n *     `group-example@googlegroups.com`.\r\n *   - To refer to all members of the Google Apps for Business domain\r\n *     \"example.com\", the entity would be `domain-example.com`.\r\n *\r\n * For more detailed information, see\r\n * [About Access Control Lists](http://goo.gl/6qBBPO).\r\n *\r\n * @constructor Acl\r\n * @mixin\r\n * @param {object} options Configuration options.\r\n */\r\nclass Acl extends AclRoleAccessorMethods {\r\n    constructor(options) {\r\n        super();\r\n        this.pathPrefix = options.pathPrefix;\r\n        this.request_ = options.request;\r\n    }\r\n    /**\r\n     * @typedef {array} AddAclResponse\r\n     * @property {object} 0 The Acl Objects.\r\n     * @property {object} 1 The full API response.\r\n     */\r\n    /**\r\n     * @callback AddAclCallback\r\n     * @param {?Error} err Request error, if any.\r\n     * @param {object} acl The Acl Objects.\r\n     * @param {object} apiResponse The full API response.\r\n     */\r\n    /**\r\n     * Add access controls on a {@link Bucket} or {@link File}.\r\n     *\r\n     * @see [BucketAccessControls: insert API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/bucketAccessControls/insert}\r\n     * @see [ObjectAccessControls: insert API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/objectAccessControls/insert}\r\n     *\r\n     * @param {object} options Configuration options.\r\n     * @param {string} options.entity Whose permissions will be added.\r\n     * @param {string} options.role Permissions allowed for the defined entity.\r\n     *     See {@link https://cloud.google.com/storage/docs/access-control Access\r\n     * Control}.\r\n     * @param {number} [options.generation] **File Objects Only** Select a specific\r\n     *     revision of this file (as opposed to the latest version, the default).\r\n     * @param {string} [options.userProject] The ID of the project which will be\r\n     *     billed for the request.\r\n     * @param {AddAclCallback} [callback] Callback function.\r\n     * @returns {Promise<AddAclResponse>}\r\n     *\r\n     * @example\r\n     * const storage = require('@google-cloud/storage')();\r\n     * const myBucket = storage.bucket('my-bucket');\r\n     * const myFile = myBucket.file('my-file');\r\n     *\r\n     * const options = {\r\n     *   entity: 'user-useremail@example.com',\r\n     *   role: gcs.acl.OWNER_ROLE\r\n     * };\r\n     *\r\n     * myBucket.acl.add(options, function(err, aclObject, apiResponse) {});\r\n     *\r\n     * //-\r\n     * // For file ACL operations, you can also specify a `generation` property.\r\n     * // Here is how you would grant ownership permissions to a user on a\r\n     * specific\r\n     * // revision of a file.\r\n     * //-\r\n     * myFile.acl.add({\r\n     *   entity: 'user-useremail@example.com',\r\n     *   role: gcs.acl.OWNER_ROLE,\r\n     *   generation: 1\r\n     * }, function(err, aclObject, apiResponse) {});\r\n     *\r\n     * //-\r\n     * // If the callback is omitted, we'll return a Promise.\r\n     * //-\r\n     * myBucket.acl.add(options).then(function(data) {\r\n     *   const aclObject = data[0];\r\n     *   const apiResponse = data[1];\r\n     * });\r\n     *\r\n     * @example <caption>include:samples/acl.js</caption>\r\n     * region_tag:storage_add_file_owner\r\n     * Example of adding an owner to a file:\r\n     *\r\n     * @example <caption>include:samples/acl.js</caption>\r\n     * region_tag:storage_add_bucket_owner\r\n     * Example of adding an owner to a bucket:\r\n     *\r\n     * @example <caption>include:samples/acl.js</caption>\r\n     * region_tag:storage_add_bucket_default_owner\r\n     * Example of adding a default owner to a bucket:\r\n     */\r\n    add(options, callback) {\r\n        const query = {};\r\n        if (options.generation) {\r\n            query.generation = options.generation;\r\n        }\r\n        if (options.userProject) {\r\n            query.userProject = options.userProject;\r\n        }\r\n        this.request({\r\n            method: 'POST',\r\n            uri: '',\r\n            qs: query,\r\n            json: {\r\n                entity: options.entity,\r\n                role: options.role.toUpperCase(),\r\n            },\r\n        }, (err, resp) => {\r\n            if (err) {\r\n                callback(err, null, resp);\r\n                return;\r\n            }\r\n            callback(null, this.makeAclObject_(resp), resp);\r\n        });\r\n    }\r\n    /**\r\n     * @typedef {array} RemoveAclResponse\r\n     * @property {object} 0 The full API response.\r\n     */\r\n    /**\r\n     * @callback RemoveAclCallback\r\n     * @param {?Error} err Request error, if any.\r\n     * @param {object} apiResponse The full API response.\r\n     */\r\n    /**\r\n     * Delete access controls on a {@link Bucket} or {@link File}.\r\n     *\r\n     * @see [BucketAccessControls: delete API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/bucketAccessControls/delete}\r\n     * @see [ObjectAccessControls: delete API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/objectAccessControls/delete}\r\n     *\r\n     * @param {object} options Configuration object.\r\n     * @param {string} options.entity Whose permissions will be revoked.\r\n     * @param {int} [options.generation] **File Objects Only** Select a specific\r\n     *     revision of this file (as opposed to the latest version, the default).\r\n     * @param {string} [options.userProject] The ID of the project which will be\r\n     *     billed for the request.\r\n     * @param {RemoveAclCallback} callback The callback function.\r\n     * @returns {Promise<RemoveAclResponse>}\r\n     *\r\n     * @example\r\n     * const storage = require('@google-cloud/storage')();\r\n     * const myBucket = storage.bucket('my-bucket');\r\n     * const myFile = myBucket.file('my-file');\r\n     *\r\n     * myBucket.acl.delete({\r\n     *   entity: 'user-useremail@example.com'\r\n     * }, function(err, apiResponse) {});\r\n     *\r\n     * //-\r\n     * // For file ACL operations, you can also specify a `generation` property.\r\n     * //-\r\n     * myFile.acl.delete({\r\n     *   entity: 'user-useremail@example.com',\r\n     *   generation: 1\r\n     * }, function(err, apiResponse) {});\r\n     *\r\n     * //-\r\n     * // If the callback is omitted, we'll return a Promise.\r\n     * //-\r\n     * myFile.acl.delete().then(function(data) {\r\n     *   const apiResponse = data[0];\r\n     * });\r\n     *\r\n     * @example <caption>include:samples/acl.js</caption>\r\n     * region_tag:storage_remove_bucket_owner\r\n     * Example of removing an owner from a bucket:\r\n     *\r\n     * @example <caption>include:samples/acl.js</caption>\r\n     * region_tag:storage_remove_bucket_default_owner\r\n     * Example of removing a default owner from a bucket:\r\n     *\r\n     * @example <caption>include:samples/acl.js</caption>\r\n     * region_tag:storage_remove_file_owner\r\n     * Example of removing an owner from a bucket:\r\n     */\r\n    delete(options, callback) {\r\n        const query = {};\r\n        if (options.generation) {\r\n            query.generation = options.generation;\r\n        }\r\n        if (options.userProject) {\r\n            query.userProject = options.userProject;\r\n        }\r\n        this.request({\r\n            method: 'DELETE',\r\n            uri: '/' + encodeURIComponent(options.entity),\r\n            qs: query,\r\n        }, (err, resp) => {\r\n            callback(err, resp);\r\n        });\r\n    }\r\n    /**\r\n     * @typedef {array} GetAclResponse\r\n     * @property {object|object[]} 0 Single or array of Acl Objects.\r\n     * @property {object} 1 The full API response.\r\n     */\r\n    /**\r\n     * @callback GetAclCallback\r\n     * @param {?Error} err Request error, if any.\r\n     * @param {object|object[]} acl Single or array of Acl Objects.\r\n     * @param {object} apiResponse The full API response.\r\n     */\r\n    /**\r\n     * Get access controls on a {@link Bucket} or {@link File}. If\r\n     * an entity is omitted, you will receive an array of all applicable access\r\n     * controls.\r\n     *\r\n     * @see [BucketAccessControls: get API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/bucketAccessControls/get}\r\n     * @see [ObjectAccessControls: get API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/objectAccessControls/get}\r\n     *\r\n     * @param {object|function} [options] Configuration options. If you want to\r\n     *     receive a list of all access controls, pass the callback function as\r\n     * the only argument.\r\n     * @param {string} [options.entity] Whose permissions will be fetched.\r\n     * @param {number} [options.generation] **File Objects Only** Select a specific\r\n     *     revision of this file (as opposed to the latest version, the default).\r\n     * @param {string} [options.userProject] The ID of the project which will be\r\n     *     billed for the request.\r\n     * @param {GetAclCallback} [callback] Callback function.\r\n     * @returns {Promise<GetAclResponse>}\r\n     *\r\n     * @example\r\n     * const storage = require('@google-cloud/storage')();\r\n     * const myBucket = storage.bucket('my-bucket');\r\n     * const myFile = myBucket.file('my-file');\r\n     *\r\n     * myBucket.acl.get({\r\n     *   entity: 'user-useremail@example.com'\r\n     * }, function(err, aclObject, apiResponse) {});\r\n     *\r\n     * //-\r\n     * // Get all access controls.\r\n     * //-\r\n     * myBucket.acl.get(function(err, aclObjects, apiResponse) {\r\n     *   // aclObjects = [\r\n     *   //   {\r\n     *   //     entity: 'user-useremail@example.com',\r\n     *   //     role: 'owner'\r\n     *   //   }\r\n     *   // ]\r\n     * });\r\n     *\r\n     * //-\r\n     * // For file ACL operations, you can also specify a `generation` property.\r\n     * //-\r\n     * myFile.acl.get({\r\n     *   entity: 'user-useremail@example.com',\r\n     *   generation: 1\r\n     * }, function(err, aclObject, apiResponse) {});\r\n     *\r\n     * //-\r\n     * // If the callback is omitted, we'll return a Promise.\r\n     * //-\r\n     * myBucket.acl.get().then(function(data) {\r\n     *   const aclObject = data[0];\r\n     *   const apiResponse = data[1];\r\n     * });\r\n     *\r\n     * @example <caption>include:samples/acl.js</caption>\r\n     * region_tag:storage_print_file_acl\r\n     * Example of printing a file's ACL:\r\n     *\r\n     * @example <caption>include:samples/acl.js</caption>\r\n     * region_tag:storage_print_file_acl_for_user\r\n     * Example of printing a file's ACL for a specific user:\r\n     *\r\n     * @example <caption>include:samples/acl.js</caption>\r\n     * region_tag:storage_print_bucket_acl\r\n     * Example of printing a bucket's ACL:\r\n     *\r\n     * @example <caption>include:samples/acl.js</caption>\r\n     * region_tag:storage_print_bucket_acl_for_user\r\n     * Example of printing a bucket's ACL for a specific user:\r\n     */\r\n    get(optionsOrCallback, cb) {\r\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : null;\r\n        const callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : cb;\r\n        let path = '';\r\n        const query = {};\r\n        if (options) {\r\n            path = '/' + encodeURIComponent(options.entity);\r\n            if (options.generation) {\r\n                query.generation = options.generation;\r\n            }\r\n            if (options.userProject) {\r\n                query.userProject = options.userProject;\r\n            }\r\n        }\r\n        this.request({\r\n            uri: path,\r\n            qs: query,\r\n        }, (err, resp) => {\r\n            if (err) {\r\n                callback(err, null, resp);\r\n                return;\r\n            }\r\n            let results;\r\n            if (resp.items) {\r\n                results = arrify(resp.items).map(this.makeAclObject_);\r\n            }\r\n            else {\r\n                results = this.makeAclObject_(resp);\r\n            }\r\n            callback(null, results, resp);\r\n        });\r\n    }\r\n    /**\r\n     * @typedef {array} UpdateAclResponse\r\n     * @property {object} 0 The updated Acl Objects.\r\n     * @property {object} 1 The full API response.\r\n     */\r\n    /**\r\n     * @callback UpdateAclCallback\r\n     * @param {?Error} err Request error, if any.\r\n     * @param {object} acl The updated Acl Objects.\r\n     * @param {object} apiResponse The full API response.\r\n     */\r\n    /**\r\n     * Update access controls on a {@link Bucket} or {@link File}.\r\n     *\r\n     * @see [BucketAccessControls: update API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/bucketAccessControls/update}\r\n     * @see [ObjectAccessControls: update API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/objectAccessControls/update}\r\n     *\r\n     * @param {object} options Configuration options.\r\n     * @param {string} options.entity Whose permissions will be updated.\r\n     * @param {string} options.role Permissions allowed for the defined entity.\r\n     *     See {@link Storage.acl}.\r\n     * @param {number} [options.generation] **File Objects Only** Select a specific\r\n     *     revision of this file (as opposed to the latest version, the default).\r\n     * @param {string} [options.userProject] The ID of the project which will be\r\n     *     billed for the request.\r\n     * @param {UpdateAclCallback} [callback] Callback function.\r\n     * @returns {Promise<UpdateAclResponse>}\r\n     *\r\n     * @example\r\n     * const storage = require('@google-cloud/storage')();\r\n     * const myBucket = storage.bucket('my-bucket');\r\n     * const myFile = myBucket.file('my-file');\r\n     *\r\n     * const options = {\r\n     *   entity: 'user-useremail@example.com',\r\n     *   role: gcs.acl.WRITER_ROLE\r\n     * };\r\n     *\r\n     * myBucket.acl.update(options, function(err, aclObject, apiResponse) {});\r\n     *\r\n     * //-\r\n     * // For file ACL operations, you can also specify a `generation` property.\r\n     * //-\r\n     * myFile.acl.update({\r\n     *   entity: 'user-useremail@example.com',\r\n     *   role: gcs.acl.WRITER_ROLE,\r\n     *   generation: 1\r\n     * }, function(err, aclObject, apiResponse) {});\r\n     *\r\n     * //-\r\n     * // If the callback is omitted, we'll return a Promise.\r\n     * //-\r\n     * myFile.acl.update(options).then(function(data) {\r\n     *   const aclObject = data[0];\r\n     *   const apiResponse = data[1];\r\n     * });\r\n     */\r\n    update(options, callback) {\r\n        const query = {};\r\n        if (options.generation) {\r\n            query.generation = options.generation;\r\n        }\r\n        if (options.userProject) {\r\n            query.userProject = options.userProject;\r\n        }\r\n        this.request({\r\n            method: 'PUT',\r\n            uri: '/' + encodeURIComponent(options.entity),\r\n            qs: query,\r\n            json: {\r\n                role: options.role.toUpperCase(),\r\n            },\r\n        }, (err, resp) => {\r\n            if (err) {\r\n                callback(err, null, resp);\r\n                return;\r\n            }\r\n            callback(null, this.makeAclObject_(resp), resp);\r\n        });\r\n    }\r\n    /**\r\n     * Transform API responses to a consistent object format.\r\n     *\r\n     * @private\r\n     */\r\n    makeAclObject_(accessControlObject) {\r\n        const obj = {\r\n            entity: accessControlObject.entity,\r\n            role: accessControlObject.role,\r\n        };\r\n        if (accessControlObject.projectTeam) {\r\n            obj.projectTeam = accessControlObject.projectTeam;\r\n        }\r\n        return obj;\r\n    }\r\n    /**\r\n     * Patch requests up to the bucket's request object.\r\n     *\r\n     * @private\r\n     *\r\n     * @param {string} method Action.\r\n     * @param {string} path Request path.\r\n     * @param {*} query Request query object.\r\n     * @param {*} body Request body contents.\r\n     * @param {function} callback Callback function.\r\n     */\r\n    request(reqOpts, callback) {\r\n        reqOpts.uri = this.pathPrefix + reqOpts.uri;\r\n        this.request_(reqOpts, callback);\r\n    }\r\n}\r\nexports.Acl = Acl;\r\n/*! Developer Documentation\r\n *\r\n * All async methods (except for streams) will return a Promise in the event\r\n * that a callback is omitted.\r\n */\r\npromisify_1.promisifyAll(Acl, {\r\n    exclude: ['request'],\r\n});\r\n//# sourceMappingURL=acl.js.map"]},"metadata":{},"sourceType":"script"}