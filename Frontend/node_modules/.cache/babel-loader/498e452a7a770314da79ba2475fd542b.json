{"ast":null,"code":"let PRELOADED_CLOUDINARY_PATH, config, utils;\nutils = require(\"./utils\");\nconfig = require(\"./config\");\nPRELOADED_CLOUDINARY_PATH = /^([^\\/]+)\\/([^\\/]+)\\/v(\\d+)\\/([^#]+)#([^\\/]+)$/;\n\nclass PreloadedFile {\n  constructor(file_info) {\n    let matches, public_id_and_format;\n    matches = file_info.match(PRELOADED_CLOUDINARY_PATH);\n\n    if (!matches) {\n      throw \"Invalid preloaded file info\";\n    }\n\n    this.resource_type = matches[1];\n    this.type = matches[2];\n    this.version = matches[3];\n    this.filename = matches[4];\n    this.signature = matches[5];\n    public_id_and_format = PreloadedFile.split_format(this.filename);\n    this.public_id = public_id_and_format[0];\n    this.format = public_id_and_format[1];\n  }\n\n  is_valid() {\n    let expected_signature;\n    expected_signature = utils.api_sign_request({\n      public_id: this.public_id,\n      version: this.version\n    }, config().api_secret);\n    return this.signature === expected_signature;\n  }\n\n  static split_format(identifier) {\n    let format, last_dot, public_id;\n    last_dot = identifier.lastIndexOf(\".\");\n\n    if (last_dot === -1) {\n      return [identifier, null];\n    }\n\n    public_id = identifier.substr(0, last_dot);\n    format = identifier.substr(last_dot + 1);\n    return [public_id, format];\n  }\n\n  identifier() {\n    return `v${this.version}/${this.filename}`;\n  }\n\n  toString() {\n    return `${this.resource_type}/${this.type}/v${this.version}/${this.filename}#${this.signature}`;\n  }\n\n  toJSON() {\n    let result = {};\n    Object.getOwnPropertyNames(this).forEach(key => {\n      let val = this[key];\n\n      if (typeof val !== 'function') {\n        result[key] = val;\n      }\n    });\n    return result;\n  }\n\n}\n\nmodule.exports = PreloadedFile;","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Frontend/node_modules/cloudinary/lib/preloaded_file.js"],"names":["PRELOADED_CLOUDINARY_PATH","config","utils","require","PreloadedFile","constructor","file_info","matches","public_id_and_format","match","resource_type","type","version","filename","signature","split_format","public_id","format","is_valid","expected_signature","api_sign_request","api_secret","identifier","last_dot","lastIndexOf","substr","toString","toJSON","result","Object","getOwnPropertyNames","forEach","key","val","module","exports"],"mappings":"AAAA,IAAIA,yBAAJ,EAA+BC,MAA/B,EAAuCC,KAAvC;AAEAA,KAAK,GAAGC,OAAO,CAAC,SAAD,CAAf;AAEAF,MAAM,GAAGE,OAAO,CAAC,UAAD,CAAhB;AAEAH,yBAAyB,GAAG,gDAA5B;;AAEA,MAAMI,aAAN,CAAoB;AAClBC,EAAAA,WAAW,CAACC,SAAD,EAAY;AACrB,QAAIC,OAAJ,EAAaC,oBAAb;AACAD,IAAAA,OAAO,GAAGD,SAAS,CAACG,KAAV,CAAgBT,yBAAhB,CAAV;;AACA,QAAI,CAACO,OAAL,EAAc;AACZ,YAAM,6BAAN;AACD;;AACD,SAAKG,aAAL,GAAqBH,OAAO,CAAC,CAAD,CAA5B;AACA,SAAKI,IAAL,GAAYJ,OAAO,CAAC,CAAD,CAAnB;AACA,SAAKK,OAAL,GAAeL,OAAO,CAAC,CAAD,CAAtB;AACA,SAAKM,QAAL,GAAgBN,OAAO,CAAC,CAAD,CAAvB;AACA,SAAKO,SAAL,GAAiBP,OAAO,CAAC,CAAD,CAAxB;AACAC,IAAAA,oBAAoB,GAAGJ,aAAa,CAACW,YAAd,CAA2B,KAAKF,QAAhC,CAAvB;AACA,SAAKG,SAAL,GAAiBR,oBAAoB,CAAC,CAAD,CAArC;AACA,SAAKS,MAAL,GAAcT,oBAAoB,CAAC,CAAD,CAAlC;AACD;;AAEDU,EAAAA,QAAQ,GAAG;AACT,QAAIC,kBAAJ;AACAA,IAAAA,kBAAkB,GAAGjB,KAAK,CAACkB,gBAAN,CAAuB;AAC1CJ,MAAAA,SAAS,EAAE,KAAKA,SAD0B;AAE1CJ,MAAAA,OAAO,EAAE,KAAKA;AAF4B,KAAvB,EAGlBX,MAAM,GAAGoB,UAHS,CAArB;AAIA,WAAO,KAAKP,SAAL,KAAmBK,kBAA1B;AACD;;AAED,SAAOJ,YAAP,CAAoBO,UAApB,EAAgC;AAC9B,QAAIL,MAAJ,EAAYM,QAAZ,EAAsBP,SAAtB;AACAO,IAAAA,QAAQ,GAAGD,UAAU,CAACE,WAAX,CAAuB,GAAvB,CAAX;;AACA,QAAID,QAAQ,KAAK,CAAC,CAAlB,EAAqB;AACnB,aAAO,CAACD,UAAD,EAAa,IAAb,CAAP;AACD;;AACDN,IAAAA,SAAS,GAAGM,UAAU,CAACG,MAAX,CAAkB,CAAlB,EAAqBF,QAArB,CAAZ;AACAN,IAAAA,MAAM,GAAGK,UAAU,CAACG,MAAX,CAAkBF,QAAQ,GAAG,CAA7B,CAAT;AACA,WAAO,CAACP,SAAD,EAAYC,MAAZ,CAAP;AACD;;AAEDK,EAAAA,UAAU,GAAG;AACX,WAAQ,IAAG,KAAKV,OAAQ,IAAG,KAAKC,QAAS,EAAzC;AACD;;AAEDa,EAAAA,QAAQ,GAAG;AACT,WAAQ,GAAE,KAAKhB,aAAc,IAAG,KAAKC,IAAK,KAAI,KAAKC,OAAQ,IAAG,KAAKC,QAAS,IAAG,KAAKC,SAAU,EAA9F;AACD;;AAEDa,EAAAA,MAAM,GAAG;AACP,QAAIC,MAAM,GAAG,EAAb;AACAC,IAAAA,MAAM,CAACC,mBAAP,CAA2B,IAA3B,EAAiCC,OAAjC,CAA0CC,GAAD,IAAS;AAChD,UAAIC,GAAG,GAAG,KAAKD,GAAL,CAAV;;AACA,UAAI,OAAOC,GAAP,KAAe,UAAnB,EAA+B;AAC7BL,QAAAA,MAAM,CAACI,GAAD,CAAN,GAAcC,GAAd;AACD;AACF,KALD;AAMA,WAAOL,MAAP;AACD;;AAtDiB;;AAyDpBM,MAAM,CAACC,OAAP,GAAiB/B,aAAjB","sourcesContent":["let PRELOADED_CLOUDINARY_PATH, config, utils;\n\nutils = require(\"./utils\");\n\nconfig = require(\"./config\");\n\nPRELOADED_CLOUDINARY_PATH = /^([^\\/]+)\\/([^\\/]+)\\/v(\\d+)\\/([^#]+)#([^\\/]+)$/;\n\nclass PreloadedFile {\n  constructor(file_info) {\n    let matches, public_id_and_format;\n    matches = file_info.match(PRELOADED_CLOUDINARY_PATH);\n    if (!matches) {\n      throw \"Invalid preloaded file info\";\n    }\n    this.resource_type = matches[1];\n    this.type = matches[2];\n    this.version = matches[3];\n    this.filename = matches[4];\n    this.signature = matches[5];\n    public_id_and_format = PreloadedFile.split_format(this.filename);\n    this.public_id = public_id_and_format[0];\n    this.format = public_id_and_format[1];\n  }\n\n  is_valid() {\n    let expected_signature;\n    expected_signature = utils.api_sign_request({\n      public_id: this.public_id,\n      version: this.version\n    }, config().api_secret);\n    return this.signature === expected_signature;\n  }\n\n  static split_format(identifier) {\n    let format, last_dot, public_id;\n    last_dot = identifier.lastIndexOf(\".\");\n    if (last_dot === -1) {\n      return [identifier, null];\n    }\n    public_id = identifier.substr(0, last_dot);\n    format = identifier.substr(last_dot + 1);\n    return [public_id, format];\n  }\n\n  identifier() {\n    return `v${this.version}/${this.filename}`;\n  }\n\n  toString() {\n    return `${this.resource_type}/${this.type}/v${this.version}/${this.filename}#${this.signature}`;\n  }\n\n  toJSON() {\n    let result = {};\n    Object.getOwnPropertyNames(this).forEach((key) => {\n      let val = this[key];\n      if (typeof val !== 'function') {\n        result[key] = val;\n      }\n    });\n    return result;\n  }\n}\n\nmodule.exports = PreloadedFile;\n"]},"metadata":{},"sourceType":"script"}