{"ast":null,"code":"/*! firebase-admin v9.4.2 */\n\"use strict\";\n/*!\r\n * Copyright 2018 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ProjectManagement = void 0;\n\nvar error_1 = require(\"../utils/error\");\n\nvar utils = require(\"../utils/index\");\n\nvar validator = require(\"../utils/validator\");\n\nvar android_app_1 = require(\"./android-app\");\n\nvar ios_app_1 = require(\"./ios-app\");\n\nvar project_management_api_request_internal_1 = require(\"./project-management-api-request-internal\");\n\nvar index_1 = require(\"./index\");\n\nvar AppPlatform = index_1.projectManagement.AppPlatform;\n/**\r\n * Internals of a Project Management instance.\r\n */\n\nvar ProjectManagementInternals =\n/** @class */\nfunction () {\n  function ProjectManagementInternals() {}\n  /**\r\n   * Deletes the service and its associated resources.\r\n   *\r\n   * @return {Promise<void>} An empty Promise that will be resolved when the service is deleted.\r\n   */\n\n\n  ProjectManagementInternals.prototype.delete = function () {\n    // There are no resources to clean up.\n    return Promise.resolve();\n  };\n\n  return ProjectManagementInternals;\n}();\n/**\r\n * The Firebase ProjectManagement service interface.\r\n *\r\n * Do not call this constructor directly. Instead, use\r\n * [`admin.projectManagement()`](projectManagement#projectManagement).\r\n */\n\n\nvar ProjectManagement =\n/** @class */\nfunction () {\n  /**\r\n   * @param {object} app The app for this ProjectManagement service.\r\n   * @constructor\r\n   */\n  function ProjectManagement(app) {\n    this.app = app;\n    this.INTERNAL = new ProjectManagementInternals();\n\n    if (!validator.isNonNullObject(app) || !('options' in app)) {\n      throw new error_1.FirebaseProjectManagementError('invalid-argument', 'First argument passed to admin.projectManagement() must be a valid Firebase app ' + 'instance.');\n    }\n\n    this.requestHandler = new project_management_api_request_internal_1.ProjectManagementRequestHandler(app);\n  }\n  /**\r\n   * Lists up to 100 Firebase Android apps associated with this Firebase project.\r\n   *\r\n   * @return The list of Android apps.\r\n   */\n\n\n  ProjectManagement.prototype.listAndroidApps = function () {\n    return this.listPlatformApps('android', 'listAndroidApps()');\n  };\n  /**\r\n   * Lists up to 100 Firebase iOS apps associated with this Firebase project.\r\n   *\r\n   * @return The list of iOS apps.\r\n   */\n\n\n  ProjectManagement.prototype.listIosApps = function () {\n    return this.listPlatformApps('ios', 'listIosApps()');\n  };\n  /**\r\n   * Creates an `AndroidApp` object, referencing the specified Android app within\r\n   * this Firebase project.\r\n   *\r\n   * This method does not perform an RPC.\r\n   *\r\n   * @param appId The `appId` of the Android app to reference.\r\n   *\r\n   * @return An `AndroidApp` object that references the specified Firebase Android app.\r\n   */\n\n\n  ProjectManagement.prototype.androidApp = function (appId) {\n    return new android_app_1.AndroidApp(appId, this.requestHandler);\n  };\n  /**\r\n   * Creates an `iOSApp` object, referencing the specified iOS app within\r\n   * this Firebase project.\r\n   *\r\n   * This method does not perform an RPC.\r\n   *\r\n   * @param appId The `appId` of the iOS app to reference.\r\n   *\r\n   * @return An `iOSApp` object that references the specified Firebase iOS app.\r\n   */\n\n\n  ProjectManagement.prototype.iosApp = function (appId) {\n    return new ios_app_1.IosApp(appId, this.requestHandler);\n  };\n  /**\r\n   * Creates a `ShaCertificate` object.\r\n   *\r\n   * This method does not perform an RPC.\r\n   *\r\n   * @param shaHash The SHA-1 or SHA-256 hash for this certificate.\r\n   *\r\n   * @return A `ShaCertificate` object contains the specified SHA hash.\r\n   */\n\n\n  ProjectManagement.prototype.shaCertificate = function (shaHash) {\n    return new android_app_1.ShaCertificate(shaHash);\n  };\n  /**\r\n   * Creates a new Firebase Android app associated with this Firebase project.\r\n   *\r\n   * @param packageName The canonical package name of the Android App,\r\n   *     as would appear in the Google Play Developer Console.\r\n   * @param displayName An optional user-assigned display name for this\r\n   *     new app.\r\n   *\r\n   * @return A promise that resolves to the newly created Android app.\r\n   */\n\n\n  ProjectManagement.prototype.createAndroidApp = function (packageName, displayName) {\n    var _this = this;\n\n    return this.getResourceName().then(function (resourceName) {\n      return _this.requestHandler.createAndroidApp(resourceName, packageName, displayName);\n    }).then(function (responseData) {\n      project_management_api_request_internal_1.assertServerResponse(validator.isNonNullObject(responseData), responseData, 'createAndroidApp()\\'s responseData must be a non-null object.');\n      project_management_api_request_internal_1.assertServerResponse(validator.isNonEmptyString(responseData.appId), responseData, '\"responseData.appId\" field must be present in createAndroidApp()\\'s response data.');\n      return new android_app_1.AndroidApp(responseData.appId, _this.requestHandler);\n    });\n  };\n  /**\r\n   * Creates a new Firebase iOS app associated with this Firebase project.\r\n   *\r\n   * @param bundleId The iOS app bundle ID to use for this new app.\r\n   * @param displayName An optional user-assigned display name for this\r\n   *     new app.\r\n   *\r\n   * @return A promise that resolves to the newly created iOS app.\r\n   */\n\n\n  ProjectManagement.prototype.createIosApp = function (bundleId, displayName) {\n    var _this = this;\n\n    return this.getResourceName().then(function (resourceName) {\n      return _this.requestHandler.createIosApp(resourceName, bundleId, displayName);\n    }).then(function (responseData) {\n      project_management_api_request_internal_1.assertServerResponse(validator.isNonNullObject(responseData), responseData, 'createIosApp()\\'s responseData must be a non-null object.');\n      project_management_api_request_internal_1.assertServerResponse(validator.isNonEmptyString(responseData.appId), responseData, '\"responseData.appId\" field must be present in createIosApp()\\'s response data.');\n      return new ios_app_1.IosApp(responseData.appId, _this.requestHandler);\n    });\n  };\n  /**\r\n   * Lists up to 100 Firebase apps associated with this Firebase project.\r\n   *\r\n   * @return A promise that resolves to the metadata list of the apps.\r\n   */\n\n\n  ProjectManagement.prototype.listAppMetadata = function () {\n    var _this = this;\n\n    return this.getResourceName().then(function (resourceName) {\n      return _this.requestHandler.listAppMetadata(resourceName);\n    }).then(function (responseData) {\n      return _this.getProjectId().then(function (projectId) {\n        return _this.transformResponseToAppMetadata(responseData, projectId);\n      });\n    });\n  };\n  /**\r\n   * Update the display name of this Firebase project.\r\n   *\r\n   * @param newDisplayName The new display name to be updated.\r\n   *\r\n   * @return A promise that resolves when the project display name has been updated.\r\n   */\n\n\n  ProjectManagement.prototype.setDisplayName = function (newDisplayName) {\n    var _this = this;\n\n    return this.getResourceName().then(function (resourceName) {\n      return _this.requestHandler.setDisplayName(resourceName, newDisplayName);\n    });\n  };\n\n  ProjectManagement.prototype.transformResponseToAppMetadata = function (responseData, projectId) {\n    this.assertListAppsResponseData(responseData, 'listAppMetadata()');\n\n    if (!responseData.apps) {\n      return [];\n    }\n\n    return responseData.apps.map(function (appJson) {\n      project_management_api_request_internal_1.assertServerResponse(validator.isNonEmptyString(appJson.appId), responseData, '\"apps[].appId\" field must be present in the listAppMetadata() response data.');\n      project_management_api_request_internal_1.assertServerResponse(validator.isNonEmptyString(appJson.platform), responseData, '\"apps[].platform\" field must be present in the listAppMetadata() response data.');\n      var metadata = {\n        appId: appJson.appId,\n        platform: AppPlatform[appJson.platform] || AppPlatform.PLATFORM_UNKNOWN,\n        projectId: projectId,\n        resourceName: appJson.name\n      };\n\n      if (appJson.displayName) {\n        metadata.displayName = appJson.displayName;\n      }\n\n      return metadata;\n    });\n  };\n\n  ProjectManagement.prototype.getResourceName = function () {\n    return this.getProjectId().then(function (projectId) {\n      return \"projects/\" + projectId;\n    });\n  };\n\n  ProjectManagement.prototype.getProjectId = function () {\n    var _this = this;\n\n    if (this.projectId) {\n      return Promise.resolve(this.projectId);\n    }\n\n    return utils.findProjectId(this.app).then(function (projectId) {\n      // Assert that a specific project ID was provided within the app.\n      if (!validator.isNonEmptyString(projectId)) {\n        throw new error_1.FirebaseProjectManagementError('invalid-project-id', 'Failed to determine project ID. Initialize the SDK with service account credentials, or ' + 'set project ID as an app option. Alternatively, set the GOOGLE_CLOUD_PROJECT ' + 'environment variable.');\n      }\n\n      _this.projectId = projectId;\n      return _this.projectId;\n    });\n  };\n  /**\r\n   * Lists up to 100 Firebase apps for a specified platform, associated with this Firebase project.\r\n   */\n\n\n  ProjectManagement.prototype.listPlatformApps = function (platform, callerName) {\n    var _this = this;\n\n    return this.getResourceName().then(function (resourceName) {\n      return platform === 'android' ? _this.requestHandler.listAndroidApps(resourceName) : _this.requestHandler.listIosApps(resourceName);\n    }).then(function (responseData) {\n      _this.assertListAppsResponseData(responseData, callerName);\n\n      if (!responseData.apps) {\n        return [];\n      }\n\n      return responseData.apps.map(function (appJson) {\n        project_management_api_request_internal_1.assertServerResponse(validator.isNonEmptyString(appJson.appId), responseData, \"\\\"apps[].appId\\\" field must be present in the \" + callerName + \" response data.\");\n\n        if (platform === 'android') {\n          return new android_app_1.AndroidApp(appJson.appId, _this.requestHandler);\n        } else {\n          return new ios_app_1.IosApp(appJson.appId, _this.requestHandler);\n        }\n      });\n    });\n  };\n\n  ProjectManagement.prototype.assertListAppsResponseData = function (responseData, callerName) {\n    project_management_api_request_internal_1.assertServerResponse(validator.isNonNullObject(responseData), responseData, callerName + \"'s responseData must be a non-null object.\");\n\n    if (responseData.apps) {\n      project_management_api_request_internal_1.assertServerResponse(validator.isArray(responseData.apps), responseData, \"\\\"apps\\\" field must be present in the \" + callerName + \" response data.\");\n    }\n  };\n\n  return ProjectManagement;\n}();\n\nexports.ProjectManagement = ProjectManagement;","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Backend/node_modules/firebase-admin/lib/project-management/project-management.js"],"names":["Object","defineProperty","exports","value","ProjectManagement","error_1","require","utils","validator","android_app_1","ios_app_1","project_management_api_request_internal_1","index_1","AppPlatform","projectManagement","ProjectManagementInternals","prototype","delete","Promise","resolve","app","INTERNAL","isNonNullObject","FirebaseProjectManagementError","requestHandler","ProjectManagementRequestHandler","listAndroidApps","listPlatformApps","listIosApps","androidApp","appId","AndroidApp","iosApp","IosApp","shaCertificate","shaHash","ShaCertificate","createAndroidApp","packageName","displayName","_this","getResourceName","then","resourceName","responseData","assertServerResponse","isNonEmptyString","createIosApp","bundleId","listAppMetadata","getProjectId","projectId","transformResponseToAppMetadata","setDisplayName","newDisplayName","assertListAppsResponseData","apps","map","appJson","platform","metadata","PLATFORM_UNKNOWN","name","findProjectId","callerName","isArray"],"mappings":"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","sourcesContent":["/*! firebase-admin v9.4.2 */\r\n\"use strict\";\r\n/*!\r\n * Copyright 2018 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ProjectManagement = void 0;\r\nvar error_1 = require(\"../utils/error\");\r\nvar utils = require(\"../utils/index\");\r\nvar validator = require(\"../utils/validator\");\r\nvar android_app_1 = require(\"./android-app\");\r\nvar ios_app_1 = require(\"./ios-app\");\r\nvar project_management_api_request_internal_1 = require(\"./project-management-api-request-internal\");\r\nvar index_1 = require(\"./index\");\r\nvar AppPlatform = index_1.projectManagement.AppPlatform;\r\n/**\r\n * Internals of a Project Management instance.\r\n */\r\nvar ProjectManagementInternals = /** @class */ (function () {\r\n    function ProjectManagementInternals() {\r\n    }\r\n    /**\r\n     * Deletes the service and its associated resources.\r\n     *\r\n     * @return {Promise<void>} An empty Promise that will be resolved when the service is deleted.\r\n     */\r\n    ProjectManagementInternals.prototype.delete = function () {\r\n        // There are no resources to clean up.\r\n        return Promise.resolve();\r\n    };\r\n    return ProjectManagementInternals;\r\n}());\r\n/**\r\n * The Firebase ProjectManagement service interface.\r\n *\r\n * Do not call this constructor directly. Instead, use\r\n * [`admin.projectManagement()`](projectManagement#projectManagement).\r\n */\r\nvar ProjectManagement = /** @class */ (function () {\r\n    /**\r\n     * @param {object} app The app for this ProjectManagement service.\r\n     * @constructor\r\n     */\r\n    function ProjectManagement(app) {\r\n        this.app = app;\r\n        this.INTERNAL = new ProjectManagementInternals();\r\n        if (!validator.isNonNullObject(app) || !('options' in app)) {\r\n            throw new error_1.FirebaseProjectManagementError('invalid-argument', 'First argument passed to admin.projectManagement() must be a valid Firebase app '\r\n                + 'instance.');\r\n        }\r\n        this.requestHandler = new project_management_api_request_internal_1.ProjectManagementRequestHandler(app);\r\n    }\r\n    /**\r\n     * Lists up to 100 Firebase Android apps associated with this Firebase project.\r\n     *\r\n     * @return The list of Android apps.\r\n     */\r\n    ProjectManagement.prototype.listAndroidApps = function () {\r\n        return this.listPlatformApps('android', 'listAndroidApps()');\r\n    };\r\n    /**\r\n     * Lists up to 100 Firebase iOS apps associated with this Firebase project.\r\n     *\r\n     * @return The list of iOS apps.\r\n     */\r\n    ProjectManagement.prototype.listIosApps = function () {\r\n        return this.listPlatformApps('ios', 'listIosApps()');\r\n    };\r\n    /**\r\n     * Creates an `AndroidApp` object, referencing the specified Android app within\r\n     * this Firebase project.\r\n     *\r\n     * This method does not perform an RPC.\r\n     *\r\n     * @param appId The `appId` of the Android app to reference.\r\n     *\r\n     * @return An `AndroidApp` object that references the specified Firebase Android app.\r\n     */\r\n    ProjectManagement.prototype.androidApp = function (appId) {\r\n        return new android_app_1.AndroidApp(appId, this.requestHandler);\r\n    };\r\n    /**\r\n     * Creates an `iOSApp` object, referencing the specified iOS app within\r\n     * this Firebase project.\r\n     *\r\n     * This method does not perform an RPC.\r\n     *\r\n     * @param appId The `appId` of the iOS app to reference.\r\n     *\r\n     * @return An `iOSApp` object that references the specified Firebase iOS app.\r\n     */\r\n    ProjectManagement.prototype.iosApp = function (appId) {\r\n        return new ios_app_1.IosApp(appId, this.requestHandler);\r\n    };\r\n    /**\r\n     * Creates a `ShaCertificate` object.\r\n     *\r\n     * This method does not perform an RPC.\r\n     *\r\n     * @param shaHash The SHA-1 or SHA-256 hash for this certificate.\r\n     *\r\n     * @return A `ShaCertificate` object contains the specified SHA hash.\r\n     */\r\n    ProjectManagement.prototype.shaCertificate = function (shaHash) {\r\n        return new android_app_1.ShaCertificate(shaHash);\r\n    };\r\n    /**\r\n     * Creates a new Firebase Android app associated with this Firebase project.\r\n     *\r\n     * @param packageName The canonical package name of the Android App,\r\n     *     as would appear in the Google Play Developer Console.\r\n     * @param displayName An optional user-assigned display name for this\r\n     *     new app.\r\n     *\r\n     * @return A promise that resolves to the newly created Android app.\r\n     */\r\n    ProjectManagement.prototype.createAndroidApp = function (packageName, displayName) {\r\n        var _this = this;\r\n        return this.getResourceName()\r\n            .then(function (resourceName) {\r\n            return _this.requestHandler.createAndroidApp(resourceName, packageName, displayName);\r\n        })\r\n            .then(function (responseData) {\r\n            project_management_api_request_internal_1.assertServerResponse(validator.isNonNullObject(responseData), responseData, 'createAndroidApp()\\'s responseData must be a non-null object.');\r\n            project_management_api_request_internal_1.assertServerResponse(validator.isNonEmptyString(responseData.appId), responseData, '\"responseData.appId\" field must be present in createAndroidApp()\\'s response data.');\r\n            return new android_app_1.AndroidApp(responseData.appId, _this.requestHandler);\r\n        });\r\n    };\r\n    /**\r\n     * Creates a new Firebase iOS app associated with this Firebase project.\r\n     *\r\n     * @param bundleId The iOS app bundle ID to use for this new app.\r\n     * @param displayName An optional user-assigned display name for this\r\n     *     new app.\r\n     *\r\n     * @return A promise that resolves to the newly created iOS app.\r\n     */\r\n    ProjectManagement.prototype.createIosApp = function (bundleId, displayName) {\r\n        var _this = this;\r\n        return this.getResourceName()\r\n            .then(function (resourceName) {\r\n            return _this.requestHandler.createIosApp(resourceName, bundleId, displayName);\r\n        })\r\n            .then(function (responseData) {\r\n            project_management_api_request_internal_1.assertServerResponse(validator.isNonNullObject(responseData), responseData, 'createIosApp()\\'s responseData must be a non-null object.');\r\n            project_management_api_request_internal_1.assertServerResponse(validator.isNonEmptyString(responseData.appId), responseData, '\"responseData.appId\" field must be present in createIosApp()\\'s response data.');\r\n            return new ios_app_1.IosApp(responseData.appId, _this.requestHandler);\r\n        });\r\n    };\r\n    /**\r\n     * Lists up to 100 Firebase apps associated with this Firebase project.\r\n     *\r\n     * @return A promise that resolves to the metadata list of the apps.\r\n     */\r\n    ProjectManagement.prototype.listAppMetadata = function () {\r\n        var _this = this;\r\n        return this.getResourceName()\r\n            .then(function (resourceName) {\r\n            return _this.requestHandler.listAppMetadata(resourceName);\r\n        })\r\n            .then(function (responseData) {\r\n            return _this.getProjectId()\r\n                .then(function (projectId) {\r\n                return _this.transformResponseToAppMetadata(responseData, projectId);\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Update the display name of this Firebase project.\r\n     *\r\n     * @param newDisplayName The new display name to be updated.\r\n     *\r\n     * @return A promise that resolves when the project display name has been updated.\r\n     */\r\n    ProjectManagement.prototype.setDisplayName = function (newDisplayName) {\r\n        var _this = this;\r\n        return this.getResourceName()\r\n            .then(function (resourceName) {\r\n            return _this.requestHandler.setDisplayName(resourceName, newDisplayName);\r\n        });\r\n    };\r\n    ProjectManagement.prototype.transformResponseToAppMetadata = function (responseData, projectId) {\r\n        this.assertListAppsResponseData(responseData, 'listAppMetadata()');\r\n        if (!responseData.apps) {\r\n            return [];\r\n        }\r\n        return responseData.apps.map(function (appJson) {\r\n            project_management_api_request_internal_1.assertServerResponse(validator.isNonEmptyString(appJson.appId), responseData, '\"apps[].appId\" field must be present in the listAppMetadata() response data.');\r\n            project_management_api_request_internal_1.assertServerResponse(validator.isNonEmptyString(appJson.platform), responseData, '\"apps[].platform\" field must be present in the listAppMetadata() response data.');\r\n            var metadata = {\r\n                appId: appJson.appId,\r\n                platform: AppPlatform[appJson.platform] || AppPlatform.PLATFORM_UNKNOWN,\r\n                projectId: projectId,\r\n                resourceName: appJson.name,\r\n            };\r\n            if (appJson.displayName) {\r\n                metadata.displayName = appJson.displayName;\r\n            }\r\n            return metadata;\r\n        });\r\n    };\r\n    ProjectManagement.prototype.getResourceName = function () {\r\n        return this.getProjectId()\r\n            .then(function (projectId) {\r\n            return \"projects/\" + projectId;\r\n        });\r\n    };\r\n    ProjectManagement.prototype.getProjectId = function () {\r\n        var _this = this;\r\n        if (this.projectId) {\r\n            return Promise.resolve(this.projectId);\r\n        }\r\n        return utils.findProjectId(this.app)\r\n            .then(function (projectId) {\r\n            // Assert that a specific project ID was provided within the app.\r\n            if (!validator.isNonEmptyString(projectId)) {\r\n                throw new error_1.FirebaseProjectManagementError('invalid-project-id', 'Failed to determine project ID. Initialize the SDK with service account credentials, or '\r\n                    + 'set project ID as an app option. Alternatively, set the GOOGLE_CLOUD_PROJECT '\r\n                    + 'environment variable.');\r\n            }\r\n            _this.projectId = projectId;\r\n            return _this.projectId;\r\n        });\r\n    };\r\n    /**\r\n     * Lists up to 100 Firebase apps for a specified platform, associated with this Firebase project.\r\n     */\r\n    ProjectManagement.prototype.listPlatformApps = function (platform, callerName) {\r\n        var _this = this;\r\n        return this.getResourceName()\r\n            .then(function (resourceName) {\r\n            return (platform === 'android') ?\r\n                _this.requestHandler.listAndroidApps(resourceName)\r\n                : _this.requestHandler.listIosApps(resourceName);\r\n        })\r\n            .then(function (responseData) {\r\n            _this.assertListAppsResponseData(responseData, callerName);\r\n            if (!responseData.apps) {\r\n                return [];\r\n            }\r\n            return responseData.apps.map(function (appJson) {\r\n                project_management_api_request_internal_1.assertServerResponse(validator.isNonEmptyString(appJson.appId), responseData, \"\\\"apps[].appId\\\" field must be present in the \" + callerName + \" response data.\");\r\n                if (platform === 'android') {\r\n                    return new android_app_1.AndroidApp(appJson.appId, _this.requestHandler);\r\n                }\r\n                else {\r\n                    return new ios_app_1.IosApp(appJson.appId, _this.requestHandler);\r\n                }\r\n            });\r\n        });\r\n    };\r\n    ProjectManagement.prototype.assertListAppsResponseData = function (responseData, callerName) {\r\n        project_management_api_request_internal_1.assertServerResponse(validator.isNonNullObject(responseData), responseData, callerName + \"'s responseData must be a non-null object.\");\r\n        if (responseData.apps) {\r\n            project_management_api_request_internal_1.assertServerResponse(validator.isArray(responseData.apps), responseData, \"\\\"apps\\\" field must be present in the \" + callerName + \" response data.\");\r\n        }\r\n    };\r\n    return ProjectManagement;\r\n}());\r\nexports.ProjectManagement = ProjectManagement;\r\n"]},"metadata":{},"sourceType":"script"}