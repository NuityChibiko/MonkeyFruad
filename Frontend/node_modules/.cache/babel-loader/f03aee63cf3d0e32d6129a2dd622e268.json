{"ast":null,"code":"const api = require('./api');\n\nconst {\n  isEmpty,\n  isNumber\n} = require('../utils');\n\nconst Search = class Search {\n  constructor() {\n    this.query_hash = {\n      sort_by: [],\n      aggregate: [],\n      with_field: []\n    };\n  }\n\n  static instance() {\n    return new Search();\n  }\n\n  static expression(value) {\n    return this.instance().expression(value);\n  }\n\n  static max_results(value) {\n    return this.instance().max_results(value);\n  }\n\n  static next_cursor(value) {\n    return this.instance().next_cursor(value);\n  }\n\n  static aggregate(value) {\n    return this.instance().aggregate(value);\n  }\n\n  static with_field(value) {\n    return this.instance().with_field(value);\n  }\n\n  static sort_by(field_name, dir = 'asc') {\n    return this.instance().sort_by(field_name, dir);\n  }\n\n  expression(value) {\n    this.query_hash.expression = value;\n    return this;\n  }\n\n  max_results(value) {\n    this.query_hash.max_results = value;\n    return this;\n  }\n\n  next_cursor(value) {\n    this.query_hash.next_cursor = value;\n    return this;\n  }\n\n  aggregate(value) {\n    this.query_hash.aggregate.push(value);\n    return this;\n  }\n\n  with_field(value) {\n    this.query_hash.with_field.push(value);\n    return this;\n  }\n\n  sort_by(field_name, dir = \"desc\") {\n    let sort_bucket;\n    sort_bucket = {};\n    sort_bucket[field_name] = dir;\n    this.query_hash.sort_by.push(sort_bucket);\n    return this;\n  }\n\n  to_query() {\n    Object.keys(this.query_hash).forEach(k => {\n      let v = this.query_hash[k];\n\n      if (!isNumber(v) && isEmpty(v)) {\n        delete this.query_hash[k];\n      }\n    });\n    return this.query_hash;\n  }\n\n  execute(options, callback) {\n    if (callback === null) {\n      callback = options;\n    }\n\n    options = options || {};\n    return api.search(this.to_query(), options, callback);\n  }\n\n};\nmodule.exports = Search;","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Frontend/node_modules/cloudinary/lib/v2/search.js"],"names":["api","require","isEmpty","isNumber","Search","constructor","query_hash","sort_by","aggregate","with_field","instance","expression","value","max_results","next_cursor","field_name","dir","push","sort_bucket","to_query","Object","keys","forEach","k","v","execute","options","callback","search","module","exports"],"mappings":"AAAA,MAAMA,GAAG,GAAGC,OAAO,CAAC,OAAD,CAAnB;;AACA,MAAM;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,IAAwBF,OAAO,CAAC,UAAD,CAArC;;AAEA,MAAMG,MAAM,GAAG,MAAMA,MAAN,CAAa;AAC1BC,EAAAA,WAAW,GAAG;AACZ,SAAKC,UAAL,GAAkB;AAChBC,MAAAA,OAAO,EAAE,EADO;AAEhBC,MAAAA,SAAS,EAAE,EAFK;AAGhBC,MAAAA,UAAU,EAAE;AAHI,KAAlB;AAKD;;AAED,SAAOC,QAAP,GAAkB;AAChB,WAAO,IAAIN,MAAJ,EAAP;AACD;;AAED,SAAOO,UAAP,CAAkBC,KAAlB,EAAyB;AACvB,WAAO,KAAKF,QAAL,GAAgBC,UAAhB,CAA2BC,KAA3B,CAAP;AACD;;AAED,SAAOC,WAAP,CAAmBD,KAAnB,EAA0B;AACxB,WAAO,KAAKF,QAAL,GAAgBG,WAAhB,CAA4BD,KAA5B,CAAP;AACD;;AAED,SAAOE,WAAP,CAAmBF,KAAnB,EAA0B;AACxB,WAAO,KAAKF,QAAL,GAAgBI,WAAhB,CAA4BF,KAA5B,CAAP;AACD;;AAED,SAAOJ,SAAP,CAAiBI,KAAjB,EAAwB;AACtB,WAAO,KAAKF,QAAL,GAAgBF,SAAhB,CAA0BI,KAA1B,CAAP;AACD;;AAED,SAAOH,UAAP,CAAkBG,KAAlB,EAAyB;AACvB,WAAO,KAAKF,QAAL,GAAgBD,UAAhB,CAA2BG,KAA3B,CAAP;AACD;;AAED,SAAOL,OAAP,CAAeQ,UAAf,EAA2BC,GAAG,GAAG,KAAjC,EAAwC;AACtC,WAAO,KAAKN,QAAL,GAAgBH,OAAhB,CAAwBQ,UAAxB,EAAoCC,GAApC,CAAP;AACD;;AAEDL,EAAAA,UAAU,CAACC,KAAD,EAAQ;AAChB,SAAKN,UAAL,CAAgBK,UAAhB,GAA6BC,KAA7B;AACA,WAAO,IAAP;AACD;;AAEDC,EAAAA,WAAW,CAACD,KAAD,EAAQ;AACjB,SAAKN,UAAL,CAAgBO,WAAhB,GAA8BD,KAA9B;AACA,WAAO,IAAP;AACD;;AAEDE,EAAAA,WAAW,CAACF,KAAD,EAAQ;AACjB,SAAKN,UAAL,CAAgBQ,WAAhB,GAA8BF,KAA9B;AACA,WAAO,IAAP;AACD;;AAEDJ,EAAAA,SAAS,CAACI,KAAD,EAAQ;AACf,SAAKN,UAAL,CAAgBE,SAAhB,CAA0BS,IAA1B,CAA+BL,KAA/B;AACA,WAAO,IAAP;AACD;;AAEDH,EAAAA,UAAU,CAACG,KAAD,EAAQ;AAChB,SAAKN,UAAL,CAAgBG,UAAhB,CAA2BQ,IAA3B,CAAgCL,KAAhC;AACA,WAAO,IAAP;AACD;;AAEDL,EAAAA,OAAO,CAACQ,UAAD,EAAaC,GAAG,GAAG,MAAnB,EAA2B;AAChC,QAAIE,WAAJ;AACAA,IAAAA,WAAW,GAAG,EAAd;AACAA,IAAAA,WAAW,CAACH,UAAD,CAAX,GAA0BC,GAA1B;AACA,SAAKV,UAAL,CAAgBC,OAAhB,CAAwBU,IAAxB,CAA6BC,WAA7B;AACA,WAAO,IAAP;AACD;;AAEDC,EAAAA,QAAQ,GAAG;AACTC,IAAAA,MAAM,CAACC,IAAP,CAAY,KAAKf,UAAjB,EAA6BgB,OAA7B,CAAsCC,CAAD,IAAO;AAC1C,UAAIC,CAAC,GAAG,KAAKlB,UAAL,CAAgBiB,CAAhB,CAAR;;AACA,UAAI,CAACpB,QAAQ,CAACqB,CAAD,CAAT,IAAgBtB,OAAO,CAACsB,CAAD,CAA3B,EAAgC;AAC9B,eAAO,KAAKlB,UAAL,CAAgBiB,CAAhB,CAAP;AACD;AACF,KALD;AAMA,WAAO,KAAKjB,UAAZ;AACD;;AAEDmB,EAAAA,OAAO,CAACC,OAAD,EAAUC,QAAV,EAAoB;AACzB,QAAIA,QAAQ,KAAK,IAAjB,EAAuB;AACrBA,MAAAA,QAAQ,GAAGD,OAAX;AACD;;AACDA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,WAAO1B,GAAG,CAAC4B,MAAJ,CAAW,KAAKT,QAAL,EAAX,EAA4BO,OAA5B,EAAqCC,QAArC,CAAP;AACD;;AAtFyB,CAA5B;AAyFAE,MAAM,CAACC,OAAP,GAAiB1B,MAAjB","sourcesContent":["const api = require('./api');\nconst { isEmpty, isNumber } = require('../utils');\n\nconst Search = class Search {\n  constructor() {\n    this.query_hash = {\n      sort_by: [],\n      aggregate: [],\n      with_field: []\n    };\n  }\n\n  static instance() {\n    return new Search();\n  }\n\n  static expression(value) {\n    return this.instance().expression(value);\n  }\n\n  static max_results(value) {\n    return this.instance().max_results(value);\n  }\n\n  static next_cursor(value) {\n    return this.instance().next_cursor(value);\n  }\n\n  static aggregate(value) {\n    return this.instance().aggregate(value);\n  }\n\n  static with_field(value) {\n    return this.instance().with_field(value);\n  }\n\n  static sort_by(field_name, dir = 'asc') {\n    return this.instance().sort_by(field_name, dir);\n  }\n\n  expression(value) {\n    this.query_hash.expression = value;\n    return this;\n  }\n\n  max_results(value) {\n    this.query_hash.max_results = value;\n    return this;\n  }\n\n  next_cursor(value) {\n    this.query_hash.next_cursor = value;\n    return this;\n  }\n\n  aggregate(value) {\n    this.query_hash.aggregate.push(value);\n    return this;\n  }\n\n  with_field(value) {\n    this.query_hash.with_field.push(value);\n    return this;\n  }\n\n  sort_by(field_name, dir = \"desc\") {\n    let sort_bucket;\n    sort_bucket = {};\n    sort_bucket[field_name] = dir;\n    this.query_hash.sort_by.push(sort_bucket);\n    return this;\n  }\n\n  to_query() {\n    Object.keys(this.query_hash).forEach((k) => {\n      let v = this.query_hash[k];\n      if (!isNumber(v) && isEmpty(v)) {\n        delete this.query_hash[k];\n      }\n    });\n    return this.query_hash;\n  }\n\n  execute(options, callback) {\n    if (callback === null) {\n      callback = options;\n    }\n    options = options || {};\n    return api.search(this.to_query(), options, callback);\n  }\n};\n\nmodule.exports = Search;\n"]},"metadata":{},"sourceType":"script"}