{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.selectFields = void 0;\n\nconst _ = require(\"lodash\");\n\nexports.selectFields = (req, fields, locations) => _(fields).flatMap(field => _.flatMap(locations, location => {\n  return expandField(req, field, location);\n})) // Avoid duplicates if multiple field selections would return the same field twice.\n// E.g. with fields = ['*.foo', 'bar.foo'] and req.body = { bar: { foo: 1 }, baz: { foo: 2 } },\n// the instance bla.foo would appear twice, and baz.foo once.\n.uniqWith(isSameFieldInstance).value();\n\nfunction isSameFieldInstance(a, b) {\n  return a.path === b.path && a.location === b.location;\n}\n\nfunction expandField(req, field, location) {\n  const originalPath = field;\n  const pathToExpand = location === 'headers' ? field.toLowerCase() : field;\n  const paths = [];\n  expandPath(req[location], pathToExpand, paths);\n  return paths.map(path => {\n    const value = path === '' ? req[location] : _.get(req[location], path);\n    return {\n      location,\n      path,\n      originalPath,\n      value,\n      originalValue: value\n    };\n  });\n}\n\nfunction expandPath(object, path, accumulator) {\n  const segments = _.toPath(path);\n\n  const wildcardPos = segments.indexOf('*');\n\n  if (wildcardPos > -1) {\n    const subObject = wildcardPos === 0 ? object : _.get(object, segments.slice(0, wildcardPos));\n\n    if (!subObject || !_.isObjectLike(subObject)) {\n      return;\n    }\n\n    Object.keys(subObject).map(key => segments // Before the *\n    .slice(0, wildcardPos) // The part that the * matched\n    .concat(key) // After the *\n    .concat(segments.slice(wildcardPos + 1))).forEach(subPath => {\n      expandPath(object, subPath, accumulator);\n    });\n  } else {\n    const reconstructedPath = segments.reduce((prev, segment) => {\n      let part = ''; // TODO: Handle brackets?\n\n      if (segment.includes('.')) {\n        // Special char key access\n        part = `[\"${segment}\"]`;\n      } else if (/^\\d+$/.test(segment)) {\n        // Index access\n        part = `[${segment}]`;\n      } else if (prev) {\n        // Object key access\n        part = `.${segment}`;\n      } else {\n        // Top level key\n        part = segment;\n      }\n\n      return prev + part;\n    }, '');\n    accumulator.push(reconstructedPath);\n  }\n}","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Backend/node_modules/express-validator/src/select-fields.js"],"names":["Object","defineProperty","exports","value","selectFields","_","require","req","fields","locations","flatMap","field","location","expandField","uniqWith","isSameFieldInstance","a","b","path","originalPath","pathToExpand","toLowerCase","paths","expandPath","map","get","originalValue","object","accumulator","segments","toPath","wildcardPos","indexOf","subObject","slice","isObjectLike","keys","key","concat","forEach","subPath","reconstructedPath","reduce","prev","segment","part","includes","test","push"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.selectFields = void 0;\r\nconst _ = require(\"lodash\");\r\nexports.selectFields = (req, fields, locations) => _(fields)\r\n    .flatMap(field => _.flatMap(locations, location => {\r\n    return expandField(req, field, location);\r\n}))\r\n    // Avoid duplicates if multiple field selections would return the same field twice.\r\n    // E.g. with fields = ['*.foo', 'bar.foo'] and req.body = { bar: { foo: 1 }, baz: { foo: 2 } },\r\n    // the instance bla.foo would appear twice, and baz.foo once.\r\n    .uniqWith(isSameFieldInstance)\r\n    .value();\r\nfunction isSameFieldInstance(a, b) {\r\n    return a.path === b.path && a.location === b.location;\r\n}\r\nfunction expandField(req, field, location) {\r\n    const originalPath = field;\r\n    const pathToExpand = location === 'headers' ? field.toLowerCase() : field;\r\n    const paths = [];\r\n    expandPath(req[location], pathToExpand, paths);\r\n    return paths.map(path => {\r\n        const value = path === '' ? req[location] : _.get(req[location], path);\r\n        return {\r\n            location,\r\n            path,\r\n            originalPath,\r\n            value,\r\n            originalValue: value,\r\n        };\r\n    });\r\n}\r\nfunction expandPath(object, path, accumulator) {\r\n    const segments = _.toPath(path);\r\n    const wildcardPos = segments.indexOf('*');\r\n    if (wildcardPos > -1) {\r\n        const subObject = wildcardPos === 0 ? object : _.get(object, segments.slice(0, wildcardPos));\r\n        if (!subObject || !_.isObjectLike(subObject)) {\r\n            return;\r\n        }\r\n        Object.keys(subObject)\r\n            .map(key => segments\r\n            // Before the *\r\n            .slice(0, wildcardPos)\r\n            // The part that the * matched\r\n            .concat(key)\r\n            // After the *\r\n            .concat(segments.slice(wildcardPos + 1)))\r\n            .forEach(subPath => {\r\n            expandPath(object, subPath, accumulator);\r\n        });\r\n    }\r\n    else {\r\n        const reconstructedPath = segments.reduce((prev, segment) => {\r\n            let part = '';\r\n            // TODO: Handle brackets?\r\n            if (segment.includes('.')) {\r\n                // Special char key access\r\n                part = `[\"${segment}\"]`;\r\n            }\r\n            else if (/^\\d+$/.test(segment)) {\r\n                // Index access\r\n                part = `[${segment}]`;\r\n            }\r\n            else if (prev) {\r\n                // Object key access\r\n                part = `.${segment}`;\r\n            }\r\n            else {\r\n                // Top level key\r\n                part = segment;\r\n            }\r\n            return prev + part;\r\n        }, '');\r\n        accumulator.push(reconstructedPath);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}