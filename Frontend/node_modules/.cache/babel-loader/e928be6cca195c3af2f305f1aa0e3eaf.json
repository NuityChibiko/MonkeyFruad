{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ContextRunnerImpl = void 0;\n\nconst _ = require(\"lodash\");\n\nconst base_1 = require(\"../base\");\n\nconst context_1 = require(\"../context\");\n\nconst select_fields_1 = require(\"../select-fields\");\n\nconst validation_result_1 = require(\"../validation-result\");\n\nclass ResultWithContext extends validation_result_1.Result {\n  constructor(context) {\n    super(error => error, context.errors);\n    this.context = context;\n  }\n\n}\n\nclass ContextRunnerImpl {\n  constructor(builderOrContext, selectFields = select_fields_1.selectFields) {\n    this.builderOrContext = builderOrContext;\n    this.selectFields = selectFields;\n  }\n\n  async run(req, options = {}) {\n    const context = this.builderOrContext instanceof context_1.Context ? this.builderOrContext : this.builderOrContext.build();\n    const instances = this.selectFields(req, context.fields, context.locations);\n    context.addFieldInstances(instances);\n    const haltedInstances = new Set();\n\n    for (const contextItem of context.stack) {\n      const promises = context.getData({\n        requiredOnly: true\n      }).map(async instance => {\n        const {\n          location,\n          path\n        } = instance;\n        const instanceKey = `${location}:${path}`;\n\n        if (haltedInstances.has(instanceKey)) {\n          return;\n        }\n\n        try {\n          await contextItem.run(context, instance.value, {\n            req,\n            location,\n            path\n          }); // An instance is mutable, so if an item changed its value, there's no need to call getData again\n\n          const newValue = instance.value; // Checks whether the value changed.\n          // Avoids e.g. undefined values being set on the request if it didn't have the key initially.\n\n          const reqValue = path !== '' ? _.get(req[location], path) : req[location];\n\n          if (!options.dryRun && reqValue !== instance.value) {\n            path !== '' ? _.set(req[location], path, newValue) : _.set(req, location, newValue);\n          }\n        } catch (e) {\n          if (e instanceof base_1.ValidationHalt) {\n            haltedInstances.add(instanceKey);\n            return;\n          }\n\n          throw e;\n        }\n      });\n      await Promise.all(promises);\n    }\n\n    if (!options.dryRun) {\n      const internalReq = req;\n      internalReq[base_1.contextsKey] = (internalReq[base_1.contextsKey] || []).concat(context);\n    }\n\n    return new ResultWithContext(context);\n  }\n\n}\n\nexports.ContextRunnerImpl = ContextRunnerImpl;","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Backend/node_modules/express-validator/src/chain/context-runner-impl.js"],"names":["Object","defineProperty","exports","value","ContextRunnerImpl","_","require","base_1","context_1","select_fields_1","validation_result_1","ResultWithContext","Result","constructor","context","error","errors","builderOrContext","selectFields","run","req","options","Context","build","instances","fields","locations","addFieldInstances","haltedInstances","Set","contextItem","stack","promises","getData","requiredOnly","map","instance","location","path","instanceKey","has","newValue","reqValue","get","dryRun","set","e","ValidationHalt","add","Promise","all","internalReq","contextsKey","concat"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ContextRunnerImpl = void 0;\r\nconst _ = require(\"lodash\");\r\nconst base_1 = require(\"../base\");\r\nconst context_1 = require(\"../context\");\r\nconst select_fields_1 = require(\"../select-fields\");\r\nconst validation_result_1 = require(\"../validation-result\");\r\nclass ResultWithContext extends validation_result_1.Result {\r\n    constructor(context) {\r\n        super(error => error, context.errors);\r\n        this.context = context;\r\n    }\r\n}\r\nclass ContextRunnerImpl {\r\n    constructor(builderOrContext, selectFields = select_fields_1.selectFields) {\r\n        this.builderOrContext = builderOrContext;\r\n        this.selectFields = selectFields;\r\n    }\r\n    async run(req, options = {}) {\r\n        const context = this.builderOrContext instanceof context_1.Context\r\n            ? this.builderOrContext\r\n            : this.builderOrContext.build();\r\n        const instances = this.selectFields(req, context.fields, context.locations);\r\n        context.addFieldInstances(instances);\r\n        const haltedInstances = new Set();\r\n        for (const contextItem of context.stack) {\r\n            const promises = context.getData({ requiredOnly: true }).map(async (instance) => {\r\n                const { location, path } = instance;\r\n                const instanceKey = `${location}:${path}`;\r\n                if (haltedInstances.has(instanceKey)) {\r\n                    return;\r\n                }\r\n                try {\r\n                    await contextItem.run(context, instance.value, {\r\n                        req,\r\n                        location,\r\n                        path,\r\n                    });\r\n                    // An instance is mutable, so if an item changed its value, there's no need to call getData again\r\n                    const newValue = instance.value;\r\n                    // Checks whether the value changed.\r\n                    // Avoids e.g. undefined values being set on the request if it didn't have the key initially.\r\n                    const reqValue = path !== '' ? _.get(req[location], path) : req[location];\r\n                    if (!options.dryRun && reqValue !== instance.value) {\r\n                        path !== '' ? _.set(req[location], path, newValue) : _.set(req, location, newValue);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    if (e instanceof base_1.ValidationHalt) {\r\n                        haltedInstances.add(instanceKey);\r\n                        return;\r\n                    }\r\n                    throw e;\r\n                }\r\n            });\r\n            await Promise.all(promises);\r\n        }\r\n        if (!options.dryRun) {\r\n            const internalReq = req;\r\n            internalReq[base_1.contextsKey] = (internalReq[base_1.contextsKey] || []).concat(context);\r\n        }\r\n        return new ResultWithContext(context);\r\n    }\r\n}\r\nexports.ContextRunnerImpl = ContextRunnerImpl;\r\n"]},"metadata":{},"sourceType":"script"}