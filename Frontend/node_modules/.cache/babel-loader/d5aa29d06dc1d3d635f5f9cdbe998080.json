{"ast":null,"code":"/*! firebase-admin v9.4.2 */\n\"use strict\";\n/*!\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FirebaseMessagingRequestHandler = void 0;\n\nvar api_request_1 = require(\"../utils/api-request\");\n\nvar messaging_errors_internal_1 = require(\"./messaging-errors-internal\");\n\nvar batch_request_internal_1 = require(\"./batch-request-internal\");\n\nvar index_1 = require(\"../utils/index\"); // FCM backend constants\n\n\nvar FIREBASE_MESSAGING_TIMEOUT = 10000;\nvar FIREBASE_MESSAGING_BATCH_URL = 'https://fcm.googleapis.com/batch';\nvar FIREBASE_MESSAGING_HTTP_METHOD = 'POST';\nvar FIREBASE_MESSAGING_HEADERS = {\n  'X-Firebase-Client': \"fire-admin-node/\" + index_1.getSdkVersion()\n};\nvar LEGACY_FIREBASE_MESSAGING_HEADERS = {\n  'X-Firebase-Client': \"fire-admin-node/\" + index_1.getSdkVersion(),\n  'access_token_auth': 'true'\n};\n/**\r\n * Class that provides a mechanism to send requests to the Firebase Cloud Messaging backend.\r\n */\n\nvar FirebaseMessagingRequestHandler =\n/** @class */\nfunction () {\n  /**\r\n   * @param {FirebaseApp} app The app used to fetch access tokens to sign API requests.\r\n   * @constructor\r\n   */\n  function FirebaseMessagingRequestHandler(app) {\n    this.httpClient = new api_request_1.AuthorizedHttpClient(app);\n    this.batchClient = new batch_request_internal_1.BatchRequestClient(this.httpClient, FIREBASE_MESSAGING_BATCH_URL, FIREBASE_MESSAGING_HEADERS);\n  }\n  /**\r\n   * Invokes the request handler with the provided request data.\r\n   *\r\n   * @param {string} host The host to which to send the request.\r\n   * @param {string} path The path to which to send the request.\r\n   * @param {object} requestData The request data.\r\n   * @return {Promise<object>} A promise that resolves with the response.\r\n   */\n\n\n  FirebaseMessagingRequestHandler.prototype.invokeRequestHandler = function (host, path, requestData) {\n    var request = {\n      method: FIREBASE_MESSAGING_HTTP_METHOD,\n      url: \"https://\" + host + path,\n      data: requestData,\n      headers: LEGACY_FIREBASE_MESSAGING_HEADERS,\n      timeout: FIREBASE_MESSAGING_TIMEOUT\n    };\n    return this.httpClient.send(request).then(function (response) {\n      // Send non-JSON responses to the catch() below where they will be treated as errors.\n      if (!response.isJson()) {\n        throw new api_request_1.HttpError(response);\n      } // Check for backend errors in the response.\n\n\n      var errorCode = messaging_errors_internal_1.getErrorCode(response.data);\n\n      if (errorCode) {\n        throw new api_request_1.HttpError(response);\n      } // Return entire response.\n\n\n      return response.data;\n    }).catch(function (err) {\n      if (err instanceof api_request_1.HttpError) {\n        throw messaging_errors_internal_1.createFirebaseError(err);\n      } // Re-throw the error if it already has the proper format.\n\n\n      throw err;\n    });\n  };\n  /**\r\n   * Sends the given array of sub requests as a single batch to FCM, and parses the result into\r\n   * a BatchResponse object.\r\n   *\r\n   * @param {SubRequest[]} requests An array of sub requests to send.\r\n   * @return {Promise<BatchResponse>} A promise that resolves when the send operation is complete.\r\n   */\n\n\n  FirebaseMessagingRequestHandler.prototype.sendBatchRequest = function (requests) {\n    var _this = this;\n\n    return this.batchClient.send(requests).then(function (responses) {\n      return responses.map(function (part) {\n        return _this.buildSendResponse(part);\n      });\n    }).then(function (responses) {\n      var successCount = responses.filter(function (resp) {\n        return resp.success;\n      }).length;\n      return {\n        responses: responses,\n        successCount: successCount,\n        failureCount: responses.length - successCount\n      };\n    }).catch(function (err) {\n      if (err instanceof api_request_1.HttpError) {\n        throw messaging_errors_internal_1.createFirebaseError(err);\n      } // Re-throw the error if it already has the proper format.\n\n\n      throw err;\n    });\n  };\n\n  FirebaseMessagingRequestHandler.prototype.buildSendResponse = function (response) {\n    var result = {\n      success: response.status === 200\n    };\n\n    if (result.success) {\n      result.messageId = response.data.name;\n    } else {\n      result.error = messaging_errors_internal_1.createFirebaseError(new api_request_1.HttpError(response));\n    }\n\n    return result;\n  };\n\n  return FirebaseMessagingRequestHandler;\n}();\n\nexports.FirebaseMessagingRequestHandler = FirebaseMessagingRequestHandler;","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Backend/node_modules/firebase-admin/lib/messaging/messaging-api-request-internal.js"],"names":["Object","defineProperty","exports","value","FirebaseMessagingRequestHandler","api_request_1","require","messaging_errors_internal_1","batch_request_internal_1","index_1","FIREBASE_MESSAGING_TIMEOUT","FIREBASE_MESSAGING_BATCH_URL","FIREBASE_MESSAGING_HTTP_METHOD","FIREBASE_MESSAGING_HEADERS","getSdkVersion","LEGACY_FIREBASE_MESSAGING_HEADERS","app","httpClient","AuthorizedHttpClient","batchClient","BatchRequestClient","prototype","invokeRequestHandler","host","path","requestData","request","method","url","data","headers","timeout","send","then","response","isJson","HttpError","errorCode","getErrorCode","catch","err","createFirebaseError","sendBatchRequest","requests","_this","responses","map","part","buildSendResponse","successCount","filter","resp","success","length","failureCount","result","status","messageId","name","error"],"mappings":"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","sourcesContent":["/*! firebase-admin v9.4.2 */\r\n\"use strict\";\r\n/*!\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.FirebaseMessagingRequestHandler = void 0;\r\nvar api_request_1 = require(\"../utils/api-request\");\r\nvar messaging_errors_internal_1 = require(\"./messaging-errors-internal\");\r\nvar batch_request_internal_1 = require(\"./batch-request-internal\");\r\nvar index_1 = require(\"../utils/index\");\r\n// FCM backend constants\r\nvar FIREBASE_MESSAGING_TIMEOUT = 10000;\r\nvar FIREBASE_MESSAGING_BATCH_URL = 'https://fcm.googleapis.com/batch';\r\nvar FIREBASE_MESSAGING_HTTP_METHOD = 'POST';\r\nvar FIREBASE_MESSAGING_HEADERS = {\r\n    'X-Firebase-Client': \"fire-admin-node/\" + index_1.getSdkVersion(),\r\n};\r\nvar LEGACY_FIREBASE_MESSAGING_HEADERS = {\r\n    'X-Firebase-Client': \"fire-admin-node/\" + index_1.getSdkVersion(),\r\n    'access_token_auth': 'true',\r\n};\r\n/**\r\n * Class that provides a mechanism to send requests to the Firebase Cloud Messaging backend.\r\n */\r\nvar FirebaseMessagingRequestHandler = /** @class */ (function () {\r\n    /**\r\n     * @param {FirebaseApp} app The app used to fetch access tokens to sign API requests.\r\n     * @constructor\r\n     */\r\n    function FirebaseMessagingRequestHandler(app) {\r\n        this.httpClient = new api_request_1.AuthorizedHttpClient(app);\r\n        this.batchClient = new batch_request_internal_1.BatchRequestClient(this.httpClient, FIREBASE_MESSAGING_BATCH_URL, FIREBASE_MESSAGING_HEADERS);\r\n    }\r\n    /**\r\n     * Invokes the request handler with the provided request data.\r\n     *\r\n     * @param {string} host The host to which to send the request.\r\n     * @param {string} path The path to which to send the request.\r\n     * @param {object} requestData The request data.\r\n     * @return {Promise<object>} A promise that resolves with the response.\r\n     */\r\n    FirebaseMessagingRequestHandler.prototype.invokeRequestHandler = function (host, path, requestData) {\r\n        var request = {\r\n            method: FIREBASE_MESSAGING_HTTP_METHOD,\r\n            url: \"https://\" + host + path,\r\n            data: requestData,\r\n            headers: LEGACY_FIREBASE_MESSAGING_HEADERS,\r\n            timeout: FIREBASE_MESSAGING_TIMEOUT,\r\n        };\r\n        return this.httpClient.send(request).then(function (response) {\r\n            // Send non-JSON responses to the catch() below where they will be treated as errors.\r\n            if (!response.isJson()) {\r\n                throw new api_request_1.HttpError(response);\r\n            }\r\n            // Check for backend errors in the response.\r\n            var errorCode = messaging_errors_internal_1.getErrorCode(response.data);\r\n            if (errorCode) {\r\n                throw new api_request_1.HttpError(response);\r\n            }\r\n            // Return entire response.\r\n            return response.data;\r\n        })\r\n            .catch(function (err) {\r\n            if (err instanceof api_request_1.HttpError) {\r\n                throw messaging_errors_internal_1.createFirebaseError(err);\r\n            }\r\n            // Re-throw the error if it already has the proper format.\r\n            throw err;\r\n        });\r\n    };\r\n    /**\r\n     * Sends the given array of sub requests as a single batch to FCM, and parses the result into\r\n     * a BatchResponse object.\r\n     *\r\n     * @param {SubRequest[]} requests An array of sub requests to send.\r\n     * @return {Promise<BatchResponse>} A promise that resolves when the send operation is complete.\r\n     */\r\n    FirebaseMessagingRequestHandler.prototype.sendBatchRequest = function (requests) {\r\n        var _this = this;\r\n        return this.batchClient.send(requests)\r\n            .then(function (responses) {\r\n            return responses.map(function (part) {\r\n                return _this.buildSendResponse(part);\r\n            });\r\n        }).then(function (responses) {\r\n            var successCount = responses.filter(function (resp) { return resp.success; }).length;\r\n            return {\r\n                responses: responses,\r\n                successCount: successCount,\r\n                failureCount: responses.length - successCount,\r\n            };\r\n        }).catch(function (err) {\r\n            if (err instanceof api_request_1.HttpError) {\r\n                throw messaging_errors_internal_1.createFirebaseError(err);\r\n            }\r\n            // Re-throw the error if it already has the proper format.\r\n            throw err;\r\n        });\r\n    };\r\n    FirebaseMessagingRequestHandler.prototype.buildSendResponse = function (response) {\r\n        var result = {\r\n            success: response.status === 200,\r\n        };\r\n        if (result.success) {\r\n            result.messageId = response.data.name;\r\n        }\r\n        else {\r\n            result.error = messaging_errors_internal_1.createFirebaseError(new api_request_1.HttpError(response));\r\n        }\r\n        return result;\r\n    };\r\n    return FirebaseMessagingRequestHandler;\r\n}());\r\nexports.FirebaseMessagingRequestHandler = FirebaseMessagingRequestHandler;\r\n"]},"metadata":{},"sourceType":"script"}