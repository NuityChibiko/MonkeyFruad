{"ast":null,"code":"/*! firebase-admin v9.4.2 */\n\"use strict\";\n/*!\r\n * Copyright 2020 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DatabaseService = void 0;\n\nvar url_1 = require(\"url\");\n\nvar path = require(\"path\");\n\nvar error_1 = require(\"../utils/error\");\n\nvar validator = require(\"../utils/validator\");\n\nvar api_request_1 = require(\"../utils/api-request\");\n\nvar index_1 = require(\"../utils/index\");\n/**\r\n * Internals of a Database instance.\r\n */\n\n\nvar DatabaseInternals =\n/** @class */\nfunction () {\n  function DatabaseInternals() {\n    this.databases = {};\n  }\n  /**\r\n   * Deletes the service and its associated resources.\r\n   *\r\n   * @return {Promise<()>} An empty Promise that will be fulfilled when the service is deleted.\r\n   */\n\n\n  DatabaseInternals.prototype.delete = function () {\n    for (var _i = 0, _a = Object.keys(this.databases); _i < _a.length; _i++) {\n      var dbUrl = _a[_i];\n      var db = this.databases[dbUrl];\n      db.INTERNAL.delete();\n    }\n\n    return Promise.resolve(undefined);\n  };\n\n  return DatabaseInternals;\n}();\n\nvar DatabaseService =\n/** @class */\nfunction () {\n  function DatabaseService(app) {\n    this.INTERNAL = new DatabaseInternals();\n\n    if (!validator.isNonNullObject(app) || !('options' in app)) {\n      throw new error_1.FirebaseDatabaseError({\n        code: 'invalid-argument',\n        message: 'First argument passed to admin.database() must be a valid Firebase app instance.'\n      });\n    }\n\n    this.appInternal = app;\n  }\n\n  Object.defineProperty(DatabaseService.prototype, \"app\", {\n    /**\r\n     * Returns the app associated with this DatabaseService instance.\r\n     *\r\n     * @return {FirebaseApp} The app associated with this DatabaseService instance.\r\n     */\n    get: function () {\n      return this.appInternal;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  DatabaseService.prototype.getDatabase = function (url) {\n    var dbUrl = this.ensureUrl(url);\n\n    if (!validator.isNonEmptyString(dbUrl)) {\n      throw new error_1.FirebaseDatabaseError({\n        code: 'invalid-argument',\n        message: 'Database URL must be a valid, non-empty URL string.'\n      });\n    }\n\n    var db = this.INTERNAL.databases[dbUrl];\n\n    if (typeof db === 'undefined') {\n      var rtdb = require('@firebase/database'); // eslint-disable-line @typescript-eslint/no-var-requires\n\n\n      db = rtdb.initStandalone(this.appInternal, dbUrl, index_1.getSdkVersion()).instance;\n      var rulesClient_1 = new DatabaseRulesClient(this.app, dbUrl);\n\n      db.getRules = function () {\n        return rulesClient_1.getRules();\n      };\n\n      db.getRulesJSON = function () {\n        return rulesClient_1.getRulesJSON();\n      };\n\n      db.setRules = function (source) {\n        return rulesClient_1.setRules(source);\n      };\n\n      this.INTERNAL.databases[dbUrl] = db;\n    }\n\n    return db;\n  };\n\n  DatabaseService.prototype.ensureUrl = function (url) {\n    if (typeof url !== 'undefined') {\n      return url;\n    } else if (typeof this.appInternal.options.databaseURL !== 'undefined') {\n      return this.appInternal.options.databaseURL;\n    }\n\n    throw new error_1.FirebaseDatabaseError({\n      code: 'invalid-argument',\n      message: 'Can\\'t determine Firebase Database URL.'\n    });\n  };\n\n  return DatabaseService;\n}();\n\nexports.DatabaseService = DatabaseService;\nvar RULES_URL_PATH = '.settings/rules.json';\n/**\r\n * A helper client for managing RTDB security rules.\r\n */\n\nvar DatabaseRulesClient =\n/** @class */\nfunction () {\n  function DatabaseRulesClient(app, dbUrl) {\n    var parsedUrl = new url_1.URL(dbUrl);\n    parsedUrl.pathname = path.join(parsedUrl.pathname, RULES_URL_PATH);\n    this.dbUrl = parsedUrl.toString();\n    this.httpClient = new api_request_1.AuthorizedHttpClient(app);\n  }\n  /**\r\n   * Gets the currently applied security rules as a string. The return value consists of\r\n   * the rules source including comments.\r\n   *\r\n   * @return {Promise<string>} A promise fulfilled with the rules as a raw string.\r\n   */\n\n\n  DatabaseRulesClient.prototype.getRules = function () {\n    var _this = this;\n\n    var req = {\n      method: 'GET',\n      url: this.dbUrl\n    };\n    return this.httpClient.send(req).then(function (resp) {\n      if (!resp.text) {\n        throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INTERNAL_ERROR, 'HTTP response missing data.');\n      }\n\n      return resp.text;\n    }).catch(function (err) {\n      throw _this.handleError(err);\n    });\n  };\n  /**\r\n   * Gets the currently applied security rules as a parsed JSON object. Any comments in\r\n   * the original source are stripped away.\r\n   *\r\n   * @return {Promise<object>} A promise fulfilled with the parsed rules source.\r\n   */\n\n\n  DatabaseRulesClient.prototype.getRulesJSON = function () {\n    var _this = this;\n\n    var req = {\n      method: 'GET',\n      url: this.dbUrl,\n      data: {\n        format: 'strict'\n      }\n    };\n    return this.httpClient.send(req).then(function (resp) {\n      return resp.data;\n    }).catch(function (err) {\n      throw _this.handleError(err);\n    });\n  };\n  /**\r\n   * Sets the specified rules on the Firebase Database instance. If the rules source is\r\n   * specified as a string or a Buffer, it may include comments.\r\n   *\r\n   * @param {string|Buffer|object} source Source of the rules to apply. Must not be `null`\r\n   *  or empty.\r\n   * @return {Promise<void>} Resolves when the rules are set on the Database.\r\n   */\n\n\n  DatabaseRulesClient.prototype.setRules = function (source) {\n    var _this = this;\n\n    if (!validator.isNonEmptyString(source) && !validator.isBuffer(source) && !validator.isNonNullObject(source)) {\n      var error = new error_1.FirebaseDatabaseError({\n        code: 'invalid-argument',\n        message: 'Source must be a non-empty string, Buffer or an object.'\n      });\n      return Promise.reject(error);\n    }\n\n    var req = {\n      method: 'PUT',\n      url: this.dbUrl,\n      data: source,\n      headers: {\n        'content-type': 'application/json; charset=utf-8'\n      }\n    };\n    return this.httpClient.send(req).then(function () {\n      return;\n    }).catch(function (err) {\n      throw _this.handleError(err);\n    });\n  };\n\n  DatabaseRulesClient.prototype.handleError = function (err) {\n    if (err instanceof api_request_1.HttpError) {\n      return new error_1.FirebaseDatabaseError({\n        code: error_1.AppErrorCodes.INTERNAL_ERROR,\n        message: this.getErrorMessage(err)\n      });\n    }\n\n    return err;\n  };\n\n  DatabaseRulesClient.prototype.getErrorMessage = function (err) {\n    var intro = 'Error while accessing security rules';\n\n    try {\n      var body = err.response.data;\n\n      if (body && body.error) {\n        return intro + \": \" + body.error.trim();\n      }\n    } catch (_a) {// Ignore parsing errors\n    }\n\n    return intro + \": \" + err.response.text;\n  };\n\n  return DatabaseRulesClient;\n}();","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Backend/node_modules/firebase-admin/lib/database/database-internal.js"],"names":["Object","defineProperty","exports","value","DatabaseService","url_1","require","path","error_1","validator","api_request_1","index_1","DatabaseInternals","databases","prototype","delete","_i","_a","keys","length","dbUrl","db","INTERNAL","Promise","resolve","undefined","app","isNonNullObject","FirebaseDatabaseError","code","message","appInternal","get","enumerable","configurable","getDatabase","url","ensureUrl","isNonEmptyString","rtdb","initStandalone","getSdkVersion","instance","rulesClient_1","DatabaseRulesClient","getRules","getRulesJSON","setRules","source","options","databaseURL","RULES_URL_PATH","parsedUrl","URL","pathname","join","toString","httpClient","AuthorizedHttpClient","_this","req","method","send","then","resp","text","FirebaseAppError","AppErrorCodes","INTERNAL_ERROR","catch","err","handleError","data","format","isBuffer","error","reject","headers","HttpError","getErrorMessage","intro","body","response","trim"],"mappings":"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","sourcesContent":["/*! firebase-admin v9.4.2 */\r\n\"use strict\";\r\n/*!\r\n * Copyright 2020 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DatabaseService = void 0;\r\nvar url_1 = require(\"url\");\r\nvar path = require(\"path\");\r\nvar error_1 = require(\"../utils/error\");\r\nvar validator = require(\"../utils/validator\");\r\nvar api_request_1 = require(\"../utils/api-request\");\r\nvar index_1 = require(\"../utils/index\");\r\n/**\r\n * Internals of a Database instance.\r\n */\r\nvar DatabaseInternals = /** @class */ (function () {\r\n    function DatabaseInternals() {\r\n        this.databases = {};\r\n    }\r\n    /**\r\n     * Deletes the service and its associated resources.\r\n     *\r\n     * @return {Promise<()>} An empty Promise that will be fulfilled when the service is deleted.\r\n     */\r\n    DatabaseInternals.prototype.delete = function () {\r\n        for (var _i = 0, _a = Object.keys(this.databases); _i < _a.length; _i++) {\r\n            var dbUrl = _a[_i];\r\n            var db = this.databases[dbUrl];\r\n            db.INTERNAL.delete();\r\n        }\r\n        return Promise.resolve(undefined);\r\n    };\r\n    return DatabaseInternals;\r\n}());\r\nvar DatabaseService = /** @class */ (function () {\r\n    function DatabaseService(app) {\r\n        this.INTERNAL = new DatabaseInternals();\r\n        if (!validator.isNonNullObject(app) || !('options' in app)) {\r\n            throw new error_1.FirebaseDatabaseError({\r\n                code: 'invalid-argument',\r\n                message: 'First argument passed to admin.database() must be a valid Firebase app instance.',\r\n            });\r\n        }\r\n        this.appInternal = app;\r\n    }\r\n    Object.defineProperty(DatabaseService.prototype, \"app\", {\r\n        /**\r\n         * Returns the app associated with this DatabaseService instance.\r\n         *\r\n         * @return {FirebaseApp} The app associated with this DatabaseService instance.\r\n         */\r\n        get: function () {\r\n            return this.appInternal;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    DatabaseService.prototype.getDatabase = function (url) {\r\n        var dbUrl = this.ensureUrl(url);\r\n        if (!validator.isNonEmptyString(dbUrl)) {\r\n            throw new error_1.FirebaseDatabaseError({\r\n                code: 'invalid-argument',\r\n                message: 'Database URL must be a valid, non-empty URL string.',\r\n            });\r\n        }\r\n        var db = this.INTERNAL.databases[dbUrl];\r\n        if (typeof db === 'undefined') {\r\n            var rtdb = require('@firebase/database'); // eslint-disable-line @typescript-eslint/no-var-requires\r\n            db = rtdb.initStandalone(this.appInternal, dbUrl, index_1.getSdkVersion()).instance;\r\n            var rulesClient_1 = new DatabaseRulesClient(this.app, dbUrl);\r\n            db.getRules = function () {\r\n                return rulesClient_1.getRules();\r\n            };\r\n            db.getRulesJSON = function () {\r\n                return rulesClient_1.getRulesJSON();\r\n            };\r\n            db.setRules = function (source) {\r\n                return rulesClient_1.setRules(source);\r\n            };\r\n            this.INTERNAL.databases[dbUrl] = db;\r\n        }\r\n        return db;\r\n    };\r\n    DatabaseService.prototype.ensureUrl = function (url) {\r\n        if (typeof url !== 'undefined') {\r\n            return url;\r\n        }\r\n        else if (typeof this.appInternal.options.databaseURL !== 'undefined') {\r\n            return this.appInternal.options.databaseURL;\r\n        }\r\n        throw new error_1.FirebaseDatabaseError({\r\n            code: 'invalid-argument',\r\n            message: 'Can\\'t determine Firebase Database URL.',\r\n        });\r\n    };\r\n    return DatabaseService;\r\n}());\r\nexports.DatabaseService = DatabaseService;\r\nvar RULES_URL_PATH = '.settings/rules.json';\r\n/**\r\n * A helper client for managing RTDB security rules.\r\n */\r\nvar DatabaseRulesClient = /** @class */ (function () {\r\n    function DatabaseRulesClient(app, dbUrl) {\r\n        var parsedUrl = new url_1.URL(dbUrl);\r\n        parsedUrl.pathname = path.join(parsedUrl.pathname, RULES_URL_PATH);\r\n        this.dbUrl = parsedUrl.toString();\r\n        this.httpClient = new api_request_1.AuthorizedHttpClient(app);\r\n    }\r\n    /**\r\n     * Gets the currently applied security rules as a string. The return value consists of\r\n     * the rules source including comments.\r\n     *\r\n     * @return {Promise<string>} A promise fulfilled with the rules as a raw string.\r\n     */\r\n    DatabaseRulesClient.prototype.getRules = function () {\r\n        var _this = this;\r\n        var req = {\r\n            method: 'GET',\r\n            url: this.dbUrl,\r\n        };\r\n        return this.httpClient.send(req)\r\n            .then(function (resp) {\r\n            if (!resp.text) {\r\n                throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INTERNAL_ERROR, 'HTTP response missing data.');\r\n            }\r\n            return resp.text;\r\n        })\r\n            .catch(function (err) {\r\n            throw _this.handleError(err);\r\n        });\r\n    };\r\n    /**\r\n     * Gets the currently applied security rules as a parsed JSON object. Any comments in\r\n     * the original source are stripped away.\r\n     *\r\n     * @return {Promise<object>} A promise fulfilled with the parsed rules source.\r\n     */\r\n    DatabaseRulesClient.prototype.getRulesJSON = function () {\r\n        var _this = this;\r\n        var req = {\r\n            method: 'GET',\r\n            url: this.dbUrl,\r\n            data: { format: 'strict' },\r\n        };\r\n        return this.httpClient.send(req)\r\n            .then(function (resp) {\r\n            return resp.data;\r\n        })\r\n            .catch(function (err) {\r\n            throw _this.handleError(err);\r\n        });\r\n    };\r\n    /**\r\n     * Sets the specified rules on the Firebase Database instance. If the rules source is\r\n     * specified as a string or a Buffer, it may include comments.\r\n     *\r\n     * @param {string|Buffer|object} source Source of the rules to apply. Must not be `null`\r\n     *  or empty.\r\n     * @return {Promise<void>} Resolves when the rules are set on the Database.\r\n     */\r\n    DatabaseRulesClient.prototype.setRules = function (source) {\r\n        var _this = this;\r\n        if (!validator.isNonEmptyString(source) &&\r\n            !validator.isBuffer(source) &&\r\n            !validator.isNonNullObject(source)) {\r\n            var error = new error_1.FirebaseDatabaseError({\r\n                code: 'invalid-argument',\r\n                message: 'Source must be a non-empty string, Buffer or an object.',\r\n            });\r\n            return Promise.reject(error);\r\n        }\r\n        var req = {\r\n            method: 'PUT',\r\n            url: this.dbUrl,\r\n            data: source,\r\n            headers: {\r\n                'content-type': 'application/json; charset=utf-8',\r\n            },\r\n        };\r\n        return this.httpClient.send(req)\r\n            .then(function () {\r\n            return;\r\n        })\r\n            .catch(function (err) {\r\n            throw _this.handleError(err);\r\n        });\r\n    };\r\n    DatabaseRulesClient.prototype.handleError = function (err) {\r\n        if (err instanceof api_request_1.HttpError) {\r\n            return new error_1.FirebaseDatabaseError({\r\n                code: error_1.AppErrorCodes.INTERNAL_ERROR,\r\n                message: this.getErrorMessage(err),\r\n            });\r\n        }\r\n        return err;\r\n    };\r\n    DatabaseRulesClient.prototype.getErrorMessage = function (err) {\r\n        var intro = 'Error while accessing security rules';\r\n        try {\r\n            var body = err.response.data;\r\n            if (body && body.error) {\r\n                return intro + \": \" + body.error.trim();\r\n            }\r\n        }\r\n        catch (_a) {\r\n            // Ignore parsing errors\r\n        }\r\n        return intro + \": \" + err.response.text;\r\n    };\r\n    return DatabaseRulesClient;\r\n}());\r\n"]},"metadata":{},"sourceType":"script"}