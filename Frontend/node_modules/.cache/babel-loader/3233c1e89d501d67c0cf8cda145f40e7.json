{"ast":null,"code":"\"use strict\";\n/*!\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst util = require(\"util\");\n\nconst validate_1 = require(\"./validate\");\n/*! The Firestore library version */\n\n\nlet libVersion;\n/*! The external function used to emit logs. */\n\nlet logFunction = null;\n/**\r\n * Log function to use for debug output. By default, we don't perform any\r\n * logging.\r\n *\r\n * @private\r\n */\n\nfunction logger(methodName, requestTag, logMessage, ...additionalArgs) {\n  requestTag = requestTag || '#####';\n\n  if (logFunction) {\n    const formattedMessage = util.format(logMessage, ...additionalArgs);\n    const time = new Date().toISOString();\n    logFunction(`Firestore (${libVersion}) ${time} ${requestTag} [${methodName}]: ` + formattedMessage);\n  }\n}\n\nexports.logger = logger;\n/**\r\n * Sets or disables the log function for all active Firestore instances.\r\n *\r\n * @param logger A log function that takes a message (such as `console.log`) or\r\n * `null` to turn off logging.\r\n */\n\nfunction setLogFunction(logger) {\n  if (logger !== null) validate_1.validateFunction('logger', logger);\n  logFunction = logger;\n}\n\nexports.setLogFunction = setLogFunction;\n/**\r\n * Sets the library version to be used in log messages.\r\n *\r\n * @private\r\n */\n\nfunction setLibVersion(version) {\n  libVersion = version;\n}\n\nexports.setLibVersion = setLibVersion;","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Backend/node_modules/@google-cloud/firestore/build/src/logger.js"],"names":["Object","defineProperty","exports","value","util","require","validate_1","libVersion","logFunction","logger","methodName","requestTag","logMessage","additionalArgs","formattedMessage","format","time","Date","toISOString","setLogFunction","validateFunction","setLibVersion","version"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,YAAD,CAA1B;AACA;;;AACA,IAAIE,UAAJ;AACA;;AACA,IAAIC,WAAW,GAAG,IAAlB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,MAAT,CAAgBC,UAAhB,EAA4BC,UAA5B,EAAwCC,UAAxC,EAAoD,GAAGC,cAAvD,EAAuE;AACnEF,EAAAA,UAAU,GAAGA,UAAU,IAAI,OAA3B;;AACA,MAAIH,WAAJ,EAAiB;AACb,UAAMM,gBAAgB,GAAGV,IAAI,CAACW,MAAL,CAAYH,UAAZ,EAAwB,GAAGC,cAA3B,CAAzB;AACA,UAAMG,IAAI,GAAG,IAAIC,IAAJ,GAAWC,WAAX,EAAb;AACAV,IAAAA,WAAW,CAAE,cAAaD,UAAW,KAAIS,IAAK,IAAGL,UAAW,KAAID,UAAW,KAA/D,GACRI,gBADO,CAAX;AAEH;AACJ;;AACDZ,OAAO,CAACO,MAAR,GAAiBA,MAAjB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASU,cAAT,CAAwBV,MAAxB,EAAgC;AAC5B,MAAIA,MAAM,KAAK,IAAf,EACIH,UAAU,CAACc,gBAAX,CAA4B,QAA5B,EAAsCX,MAAtC;AACJD,EAAAA,WAAW,GAAGC,MAAd;AACH;;AACDP,OAAO,CAACiB,cAAR,GAAyBA,cAAzB;AACA;AACA;AACA;AACA;AACA;;AACA,SAASE,aAAT,CAAuBC,OAAvB,EAAgC;AAC5Bf,EAAAA,UAAU,GAAGe,OAAb;AACH;;AACDpB,OAAO,CAACmB,aAAR,GAAwBA,aAAxB","sourcesContent":["\"use strict\";\r\n/*!\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst util = require(\"util\");\r\nconst validate_1 = require(\"./validate\");\r\n/*! The Firestore library version */\r\nlet libVersion;\r\n/*! The external function used to emit logs. */\r\nlet logFunction = null;\r\n/**\r\n * Log function to use for debug output. By default, we don't perform any\r\n * logging.\r\n *\r\n * @private\r\n */\r\nfunction logger(methodName, requestTag, logMessage, ...additionalArgs) {\r\n    requestTag = requestTag || '#####';\r\n    if (logFunction) {\r\n        const formattedMessage = util.format(logMessage, ...additionalArgs);\r\n        const time = new Date().toISOString();\r\n        logFunction(`Firestore (${libVersion}) ${time} ${requestTag} [${methodName}]: ` +\r\n            formattedMessage);\r\n    }\r\n}\r\nexports.logger = logger;\r\n/**\r\n * Sets or disables the log function for all active Firestore instances.\r\n *\r\n * @param logger A log function that takes a message (such as `console.log`) or\r\n * `null` to turn off logging.\r\n */\r\nfunction setLogFunction(logger) {\r\n    if (logger !== null)\r\n        validate_1.validateFunction('logger', logger);\r\n    logFunction = logger;\r\n}\r\nexports.setLogFunction = setLogFunction;\r\n/**\r\n * Sets the library version to be used in log messages.\r\n *\r\n * @private\r\n */\r\nfunction setLibVersion(version) {\r\n    libVersion = version;\r\n}\r\nexports.setLibVersion = setLibVersion;\r\n//# sourceMappingURL=logger.js.map"]},"metadata":{},"sourceType":"script"}