{"ast":null,"code":"/**\n * Assign a value to a nested object\n * @function putNestedValue\n * @param params the parent object - this argument will be modified!\n * @param key key in the form nested[innerkey]\n * @param value the value to assign\n * @return the modified params object\n */\nconst url = require('url');\n\nconst extend = require(\"lodash/extend\");\n\nconst isObject = require(\"lodash/isObject\");\n\nconst isString = require(\"lodash/isString\");\n\nconst isUndefined = require(\"lodash/isUndefined\");\n\nconst entries = require('./utils/entries');\n\nlet cloudinary_config = void 0;\n/**\n * Sets a value in an object using a nested key\n * @param {object} params The object to assign the value in.\n * @param {string} key The key of the value. A period is used to denote inner keys.\n * @param {*} value The value to set.\n * @returns {object} The params argument.\n * @example\n *     let o = {foo: {bar: 1}};\n *     putNestedValue(o, 'foo.bar', 2); // {foo: {bar: 2}}\n *     putNestedValue(o, 'foo.inner.key', 'this creates an inner object');\n *     // {{foo: {bar: 2}, inner: {key: 'this creates an inner object'}}}\n */\n\nfunction putNestedValue(params, key, value) {\n  let chain = key.split(/[\\[\\]]+/).filter(i => i.length);\n  let outer = params;\n  let lastKey = chain.pop();\n\n  for (let j = 0; j < chain.length; j++) {\n    let innerKey = chain[j];\n    let inner = outer[innerKey];\n\n    if (inner == null) {\n      inner = {};\n      outer[innerKey] = inner;\n    }\n\n    outer = inner;\n  }\n\n  outer[lastKey] = value;\n  return params;\n}\n\nfunction parseCloudinaryConfigFromEnvURL(ENV_STR) {\n  let conf = {};\n  let uri = url.parse(ENV_STR, true);\n\n  if (uri.protocol === 'cloudinary:') {\n    conf = Object.assign({}, conf, {\n      cloud_name: uri.host,\n      api_key: uri.auth && uri.auth.split(\":\")[0],\n      api_secret: uri.auth && uri.auth.split(\":\")[1],\n      private_cdn: uri.pathname != null,\n      secure_distribution: uri.pathname && uri.pathname.substring(1)\n    });\n  } else if (uri.protocol === 'account:') {\n    conf = Object.assign({}, conf, {\n      account_id: uri.host,\n      provisioning_api_key: uri.auth && uri.auth.split(\":\")[0],\n      provisioning_api_secret: uri.auth && uri.auth.split(\":\")[1]\n    });\n  }\n\n  return conf;\n}\n\nfunction extendCloudinaryConfigFromQuery(ENV_URL, confToExtend = {}) {\n  let uri = url.parse(ENV_URL, true);\n\n  if (uri.query != null) {\n    entries(uri.query).forEach(([key, value]) => putNestedValue(confToExtend, key, value));\n  }\n}\n\nfunction extendCloudinaryConfig(parsedConfig, confToExtend = {}) {\n  entries(parsedConfig).forEach(([key, value]) => {\n    if (value !== undefined) {\n      confToExtend[key] = value;\n    }\n  });\n  return confToExtend;\n}\n\nmodule.exports = function (new_config, new_value) {\n  if (cloudinary_config == null || new_config === true) {\n    if (cloudinary_config == null) {\n      cloudinary_config = {};\n    } else {\n      Object.keys(cloudinary_config).forEach(key => delete cloudinary_config[key]);\n    }\n\n    let CLOUDINARY_ENV_URL = process.env.CLOUDINARY_URL;\n    let CLOUDINARY_ENV_ACCOUNT_URL = process.env.CLOUDINARY_ACCOUNT_URL;\n\n    if (CLOUDINARY_ENV_URL && !CLOUDINARY_ENV_URL.toLowerCase().startsWith('cloudinary://')) {\n      throw new Error(\"Invalid CLOUDINARY_URL protocol. URL should begin with 'cloudinary://'\");\n    }\n\n    if (CLOUDINARY_ENV_ACCOUNT_URL && !CLOUDINARY_ENV_ACCOUNT_URL.toLowerCase().startsWith('account://')) {\n      throw new Error(\"Invalid CLOUDINARY_ACCOUNT_URL protocol. URL should begin with 'account://'\");\n    }\n\n    [CLOUDINARY_ENV_URL, CLOUDINARY_ENV_ACCOUNT_URL].forEach(ENV_URL => {\n      if (ENV_URL) {\n        let parsedConfig = parseCloudinaryConfigFromEnvURL(ENV_URL);\n        extendCloudinaryConfig(parsedConfig, cloudinary_config); // Provide Query support in ENV url cloudinary://key:secret@test123?foo[bar]=value\n        // expect(cloudinary_config.foo.bar).to.eql('value')\n\n        extendCloudinaryConfigFromQuery(ENV_URL, cloudinary_config);\n      }\n    });\n  }\n\n  if (!isUndefined(new_value)) {\n    cloudinary_config[new_config] = new_value;\n  } else if (isString(new_config)) {\n    return cloudinary_config[new_config];\n  } else if (isObject(new_config)) {\n    extend(cloudinary_config, new_config);\n  }\n\n  return cloudinary_config;\n};","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Frontend/node_modules/cloudinary/lib/config.js"],"names":["url","require","extend","isObject","isString","isUndefined","entries","cloudinary_config","putNestedValue","params","key","value","chain","split","filter","i","length","outer","lastKey","pop","j","innerKey","inner","parseCloudinaryConfigFromEnvURL","ENV_STR","conf","uri","parse","protocol","Object","assign","cloud_name","host","api_key","auth","api_secret","private_cdn","pathname","secure_distribution","substring","account_id","provisioning_api_key","provisioning_api_secret","extendCloudinaryConfigFromQuery","ENV_URL","confToExtend","query","forEach","extendCloudinaryConfig","parsedConfig","undefined","module","exports","new_config","new_value","keys","CLOUDINARY_ENV_URL","process","env","CLOUDINARY_URL","CLOUDINARY_ENV_ACCOUNT_URL","CLOUDINARY_ACCOUNT_URL","toLowerCase","startsWith","Error"],"mappings":"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","sourcesContent":["/**\n * Assign a value to a nested object\n * @function putNestedValue\n * @param params the parent object - this argument will be modified!\n * @param key key in the form nested[innerkey]\n * @param value the value to assign\n * @return the modified params object\n */\nconst url = require('url');\nconst extend = require(\"lodash/extend\");\nconst isObject = require(\"lodash/isObject\");\nconst isString = require(\"lodash/isString\");\nconst isUndefined = require(\"lodash/isUndefined\");\nconst entries = require('./utils/entries');\n\nlet cloudinary_config = void 0;\n\n/**\n * Sets a value in an object using a nested key\n * @param {object} params The object to assign the value in.\n * @param {string} key The key of the value. A period is used to denote inner keys.\n * @param {*} value The value to set.\n * @returns {object} The params argument.\n * @example\n *     let o = {foo: {bar: 1}};\n *     putNestedValue(o, 'foo.bar', 2); // {foo: {bar: 2}}\n *     putNestedValue(o, 'foo.inner.key', 'this creates an inner object');\n *     // {{foo: {bar: 2}, inner: {key: 'this creates an inner object'}}}\n */\nfunction putNestedValue(params, key, value) {\n  let chain = key.split(/[\\[\\]]+/).filter(i => i.length);\n  let outer = params;\n  let lastKey = chain.pop();\n  for (let j = 0; j < chain.length; j++) {\n    let innerKey = chain[j];\n    let inner = outer[innerKey];\n    if (inner == null) {\n      inner = {};\n      outer[innerKey] = inner;\n    }\n    outer = inner;\n  }\n  outer[lastKey] = value;\n  return params;\n}\n\nfunction parseCloudinaryConfigFromEnvURL(ENV_STR) {\n  let conf = {};\n\n  let uri = url.parse(ENV_STR, true);\n\n  if (uri.protocol === 'cloudinary:') {\n    conf = Object.assign({}, conf, {\n      cloud_name: uri.host,\n      api_key: uri.auth && uri.auth.split(\":\")[0],\n      api_secret: uri.auth && uri.auth.split(\":\")[1],\n      private_cdn: uri.pathname != null,\n      secure_distribution: uri.pathname && uri.pathname.substring(1)\n    });\n  } else if (uri.protocol === 'account:') {\n    conf = Object.assign({}, conf, {\n      account_id: uri.host,\n      provisioning_api_key: uri.auth && uri.auth.split(\":\")[0],\n      provisioning_api_secret: uri.auth && uri.auth.split(\":\")[1]\n    });\n  }\n\n  return conf;\n}\n\nfunction extendCloudinaryConfigFromQuery(ENV_URL, confToExtend = {}) {\n  let uri = url.parse(ENV_URL, true);\n  if (uri.query != null) {\n    entries(uri.query).forEach(([key, value]) => putNestedValue(confToExtend, key, value));\n  }\n}\n\nfunction extendCloudinaryConfig(parsedConfig, confToExtend = {}) {\n  entries(parsedConfig).forEach(([key, value]) => {\n    if (value !== undefined) {\n      confToExtend[key] = value;\n    }\n  });\n\n  return confToExtend;\n}\n\nmodule.exports = function (new_config, new_value) {\n  if ((cloudinary_config == null) || new_config === true) {\n    if (cloudinary_config == null) {\n      cloudinary_config = {};\n    } else {\n      Object.keys(cloudinary_config).forEach(key => delete cloudinary_config[key]);\n    }\n\n    let CLOUDINARY_ENV_URL = process.env.CLOUDINARY_URL;\n    let CLOUDINARY_ENV_ACCOUNT_URL = process.env.CLOUDINARY_ACCOUNT_URL;\n    \n    if (CLOUDINARY_ENV_URL && !CLOUDINARY_ENV_URL.toLowerCase().startsWith('cloudinary://')) {\n      throw new Error(\"Invalid CLOUDINARY_URL protocol. URL should begin with 'cloudinary://'\");\n    }\n    if (CLOUDINARY_ENV_ACCOUNT_URL && !CLOUDINARY_ENV_ACCOUNT_URL.toLowerCase().startsWith('account://')) {\n      throw new Error(\"Invalid CLOUDINARY_ACCOUNT_URL protocol. URL should begin with 'account://'\");\n    }\n\n    [CLOUDINARY_ENV_URL, CLOUDINARY_ENV_ACCOUNT_URL].forEach((ENV_URL) => {\n      if (ENV_URL) {\n        let parsedConfig = parseCloudinaryConfigFromEnvURL(ENV_URL);\n        extendCloudinaryConfig(parsedConfig, cloudinary_config);\n        // Provide Query support in ENV url cloudinary://key:secret@test123?foo[bar]=value\n        // expect(cloudinary_config.foo.bar).to.eql('value')\n        extendCloudinaryConfigFromQuery(ENV_URL, cloudinary_config);\n      }\n    });\n  }\n  if (!isUndefined(new_value)) {\n    cloudinary_config[new_config] = new_value;\n  } else if (isString(new_config)) {\n    return cloudinary_config[new_config];\n  } else if (isObject(new_config)) {\n    extend(cloudinary_config, new_config);\n  }\n  return cloudinary_config;\n};\n"]},"metadata":{},"sourceType":"script"}