{"ast":null,"code":"\"use strict\"; // Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Channel = void 0;\n\nconst common_1 = require(\"@google-cloud/common\");\n\nconst promisify_1 = require(\"@google-cloud/promisify\");\n/**\r\n * Create a channel object to interact with a Cloud Storage channel.\r\n *\r\n * @see [Object Change Notification]{@link https://cloud.google.com/storage/docs/object-change-notification}\r\n *\r\n * @class\r\n *\r\n * @param {string} id The ID of the channel.\r\n * @param {string} resourceId The resource ID of the channel.\r\n *\r\n * @example\r\n * const {Storage} = require('@google-cloud/storage');\r\n * const storage = new Storage();\r\n * const channel = storage.channel('id', 'resource-id');\r\n */\n\n\nclass Channel extends common_1.ServiceObject {\n  constructor(storage, id, resourceId) {\n    const config = {\n      parent: storage,\n      baseUrl: '/channels',\n      // An ID shouldn't be included in the API requests.\n      // RE:\n      // https://github.com/GoogleCloudPlatform/google-cloud-node/issues/1145\n      id: '',\n      methods: {// Only need `request`.\n      }\n    };\n    super(config); // TODO: remove type cast to any once ServiceObject's type declaration has\n    // been fixed. https://github.com/googleapis/nodejs-common/issues/176\n\n    const metadata = this.metadata;\n    metadata.id = id;\n    metadata.resourceId = resourceId;\n  }\n  /**\r\n   * @typedef {array} StopResponse\r\n   * @property {object} 0 The full API response.\r\n   */\n\n  /**\r\n   * @callback StopCallback\r\n   * @param {?Error} err Request error, if any.\r\n   * @param {object} apiResponse The full API response.\r\n   */\n\n  /**\r\n   * Stop this channel.\r\n   *\r\n   * @param {StopCallback} [callback] Callback function.\r\n   * @returns {Promise<StopResponse>}\r\n   *\r\n   * @example\r\n   * const {Storage} = require('@google-cloud/storage');\r\n   * const storage = new Storage();\r\n   * const channel = storage.channel('id', 'resource-id');\r\n   * channel.stop(function(err, apiResponse) {\r\n   *   if (!err) {\r\n   *     // Channel stopped successfully.\r\n   *   }\r\n   * });\r\n   *\r\n   * //-\r\n   * // If the callback is omitted, we'll return a Promise.\r\n   * //-\r\n   * channel.stop().then(function(data) {\r\n   *   const apiResponse = data[0];\r\n   * });\r\n   */\n\n\n  stop(callback) {\n    callback = callback || common_1.util.noop;\n    this.request({\n      method: 'POST',\n      uri: '/stop',\n      json: this.metadata\n    }, (err, apiResponse) => {\n      callback(err, apiResponse);\n    });\n  }\n\n}\n\nexports.Channel = Channel;\n/*! Developer Documentation\r\n *\r\n * All async methods (except for streams) will return a Promise in the event\r\n * that a callback is omitted.\r\n */\n\npromisify_1.promisifyAll(Channel);","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Backend/node_modules/@google-cloud/storage/build/src/channel.js"],"names":["Object","defineProperty","exports","value","Channel","common_1","require","promisify_1","ServiceObject","constructor","storage","id","resourceId","config","parent","baseUrl","methods","metadata","stop","callback","util","noop","request","method","uri","json","err","apiResponse","promisifyAll"],"mappings":"AAAA,a,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,sBAAD,CAAxB;;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,yBAAD,CAA3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMF,OAAN,SAAsBC,QAAQ,CAACG,aAA/B,CAA6C;AACzCC,EAAAA,WAAW,CAACC,OAAD,EAAUC,EAAV,EAAcC,UAAd,EAA0B;AACjC,UAAMC,MAAM,GAAG;AACXC,MAAAA,MAAM,EAAEJ,OADG;AAEXK,MAAAA,OAAO,EAAE,WAFE;AAGX;AACA;AACA;AACAJ,MAAAA,EAAE,EAAE,EANO;AAOXK,MAAAA,OAAO,EAAE,CACT;AADS;AAPE,KAAf;AAWA,UAAMH,MAAN,EAZiC,CAajC;AACA;;AACA,UAAMI,QAAQ,GAAG,KAAKA,QAAtB;AACAA,IAAAA,QAAQ,CAACN,EAAT,GAAcA,EAAd;AACAM,IAAAA,QAAQ,CAACL,UAAT,GAAsBA,UAAtB;AACH;AACD;AACJ;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIM,EAAAA,IAAI,CAACC,QAAD,EAAW;AACXA,IAAAA,QAAQ,GAAGA,QAAQ,IAAId,QAAQ,CAACe,IAAT,CAAcC,IAArC;AACA,SAAKC,OAAL,CAAa;AACTC,MAAAA,MAAM,EAAE,MADC;AAETC,MAAAA,GAAG,EAAE,OAFI;AAGTC,MAAAA,IAAI,EAAE,KAAKR;AAHF,KAAb,EAIG,CAACS,GAAD,EAAMC,WAAN,KAAsB;AACrBR,MAAAA,QAAQ,CAACO,GAAD,EAAMC,WAAN,CAAR;AACH,KAND;AAOH;;AA7DwC;;AA+D7CzB,OAAO,CAACE,OAAR,GAAkBA,OAAlB;AACA;AACA;AACA;AACA;AACA;;AACAG,WAAW,CAACqB,YAAZ,CAAyBxB,OAAzB","sourcesContent":["\"use strict\";\r\n// Copyright 2019 Google LLC\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Channel = void 0;\r\nconst common_1 = require(\"@google-cloud/common\");\r\nconst promisify_1 = require(\"@google-cloud/promisify\");\r\n/**\r\n * Create a channel object to interact with a Cloud Storage channel.\r\n *\r\n * @see [Object Change Notification]{@link https://cloud.google.com/storage/docs/object-change-notification}\r\n *\r\n * @class\r\n *\r\n * @param {string} id The ID of the channel.\r\n * @param {string} resourceId The resource ID of the channel.\r\n *\r\n * @example\r\n * const {Storage} = require('@google-cloud/storage');\r\n * const storage = new Storage();\r\n * const channel = storage.channel('id', 'resource-id');\r\n */\r\nclass Channel extends common_1.ServiceObject {\r\n    constructor(storage, id, resourceId) {\r\n        const config = {\r\n            parent: storage,\r\n            baseUrl: '/channels',\r\n            // An ID shouldn't be included in the API requests.\r\n            // RE:\r\n            // https://github.com/GoogleCloudPlatform/google-cloud-node/issues/1145\r\n            id: '',\r\n            methods: {\r\n            // Only need `request`.\r\n            },\r\n        };\r\n        super(config);\r\n        // TODO: remove type cast to any once ServiceObject's type declaration has\r\n        // been fixed. https://github.com/googleapis/nodejs-common/issues/176\r\n        const metadata = this.metadata;\r\n        metadata.id = id;\r\n        metadata.resourceId = resourceId;\r\n    }\r\n    /**\r\n     * @typedef {array} StopResponse\r\n     * @property {object} 0 The full API response.\r\n     */\r\n    /**\r\n     * @callback StopCallback\r\n     * @param {?Error} err Request error, if any.\r\n     * @param {object} apiResponse The full API response.\r\n     */\r\n    /**\r\n     * Stop this channel.\r\n     *\r\n     * @param {StopCallback} [callback] Callback function.\r\n     * @returns {Promise<StopResponse>}\r\n     *\r\n     * @example\r\n     * const {Storage} = require('@google-cloud/storage');\r\n     * const storage = new Storage();\r\n     * const channel = storage.channel('id', 'resource-id');\r\n     * channel.stop(function(err, apiResponse) {\r\n     *   if (!err) {\r\n     *     // Channel stopped successfully.\r\n     *   }\r\n     * });\r\n     *\r\n     * //-\r\n     * // If the callback is omitted, we'll return a Promise.\r\n     * //-\r\n     * channel.stop().then(function(data) {\r\n     *   const apiResponse = data[0];\r\n     * });\r\n     */\r\n    stop(callback) {\r\n        callback = callback || common_1.util.noop;\r\n        this.request({\r\n            method: 'POST',\r\n            uri: '/stop',\r\n            json: this.metadata,\r\n        }, (err, apiResponse) => {\r\n            callback(err, apiResponse);\r\n        });\r\n    }\r\n}\r\nexports.Channel = Channel;\r\n/*! Developer Documentation\r\n *\r\n * All async methods (except for streams) will return a Promise in the event\r\n * that a callback is omitted.\r\n */\r\npromisify_1.promisifyAll(Channel);\r\n//# sourceMappingURL=channel.js.map"]},"metadata":{},"sourceType":"script"}