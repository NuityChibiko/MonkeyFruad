{"ast":null,"code":"/*! firebase-admin v9.4.2 */\n\"use strict\";\n/*!\r\n * Copyright 2020 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.InstanceId = void 0;\n\nvar error_1 = require(\"../utils/error\");\n\nvar instance_id_request_internal_1 = require(\"./instance-id-request-internal\");\n\nvar validator = require(\"../utils/validator\");\n/**\r\n * Internals of an InstanceId service instance.\r\n */\n\n\nvar InstanceIdInternals =\n/** @class */\nfunction () {\n  function InstanceIdInternals() {}\n  /**\r\n   * Deletes the service and its associated resources.\r\n   *\r\n   * @return {Promise<()>} An empty Promise that will be fulfilled when the service is deleted.\r\n   */\n\n\n  InstanceIdInternals.prototype.delete = function () {\n    // There are no resources to clean up\n    return Promise.resolve(undefined);\n  };\n\n  return InstanceIdInternals;\n}();\n/**\r\n * Gets the {@link InstanceId `InstanceId`} service for the\r\n * current app.\r\n *\r\n * @example\r\n * ```javascript\r\n * var instanceId = app.instanceId();\r\n * // The above is shorthand for:\r\n * // var instanceId = admin.instanceId(app);\r\n * ```\r\n *\r\n * @return The `InstanceId` service for the\r\n *   current app.\r\n */\n\n\nvar InstanceId =\n/** @class */\nfunction () {\n  /**\r\n   * @param {FirebaseApp} app The app for this InstanceId service.\r\n   * @constructor\r\n   */\n  function InstanceId(app) {\n    this.INTERNAL = new InstanceIdInternals();\n\n    if (!validator.isNonNullObject(app) || !('options' in app)) {\n      throw new error_1.FirebaseInstanceIdError(error_1.InstanceIdClientErrorCode.INVALID_ARGUMENT, 'First argument passed to admin.instanceId() must be a valid Firebase app instance.');\n    }\n\n    this.app_ = app;\n    this.requestHandler = new instance_id_request_internal_1.FirebaseInstanceIdRequestHandler(app);\n  }\n  /**\r\n   * Deletes the specified instance ID and the associated data from Firebase.\r\n   *\r\n   * Note that Google Analytics for Firebase uses its own form of Instance ID to\r\n   * keep track of analytics data. Therefore deleting a Firebase Instance ID does\r\n   * not delete Analytics data. See\r\n   * [Delete an Instance ID](/support/privacy/manage-iids#delete_an_instance_id)\r\n   * for more information.\r\n   *\r\n   * @param instanceId The instance ID to be deleted.\r\n   *\r\n   * @return A promise fulfilled when the instance ID is deleted.\r\n   */\n\n\n  InstanceId.prototype.deleteInstanceId = function (instanceId) {\n    return this.requestHandler.deleteInstanceId(instanceId).then(function () {// Return nothing on success\n    });\n  };\n\n  Object.defineProperty(InstanceId.prototype, \"app\", {\n    /**\r\n     * Returns the app associated with this InstanceId instance.\r\n     *\r\n     * @return {FirebaseApp} The app associated with this InstanceId instance.\r\n     */\n    get: function () {\n      return this.app_;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return InstanceId;\n}();\n\nexports.InstanceId = InstanceId;","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Backend/node_modules/firebase-admin/lib/instance-id/instance-id.js"],"names":["Object","defineProperty","exports","value","InstanceId","error_1","require","instance_id_request_internal_1","validator","InstanceIdInternals","prototype","delete","Promise","resolve","undefined","app","INTERNAL","isNonNullObject","FirebaseInstanceIdError","InstanceIdClientErrorCode","INVALID_ARGUMENT","app_","requestHandler","FirebaseInstanceIdRequestHandler","deleteInstanceId","instanceId","then","get","enumerable","configurable"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,UAAR,GAAqB,KAAK,CAA1B;;AACA,IAAIC,OAAO,GAAGC,OAAO,CAAC,gBAAD,CAArB;;AACA,IAAIC,8BAA8B,GAAGD,OAAO,CAAC,gCAAD,CAA5C;;AACA,IAAIE,SAAS,GAAGF,OAAO,CAAC,oBAAD,CAAvB;AACA;AACA;AACA;;;AACA,IAAIG,mBAAmB;AAAG;AAAe,YAAY;AACjD,WAASA,mBAAT,GAA+B,CAC9B;AACD;AACJ;AACA;AACA;AACA;;;AACIA,EAAAA,mBAAmB,CAACC,SAApB,CAA8BC,MAA9B,GAAuC,YAAY;AAC/C;AACA,WAAOC,OAAO,CAACC,OAAR,CAAgBC,SAAhB,CAAP;AACH,GAHD;;AAIA,SAAOL,mBAAP;AACH,CAbwC,EAAzC;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIL,UAAU;AAAG;AAAe,YAAY;AACxC;AACJ;AACA;AACA;AACI,WAASA,UAAT,CAAoBW,GAApB,EAAyB;AACrB,SAAKC,QAAL,GAAgB,IAAIP,mBAAJ,EAAhB;;AACA,QAAI,CAACD,SAAS,CAACS,eAAV,CAA0BF,GAA1B,CAAD,IAAmC,EAAE,aAAaA,GAAf,CAAvC,EAA4D;AACxD,YAAM,IAAIV,OAAO,CAACa,uBAAZ,CAAoCb,OAAO,CAACc,yBAAR,CAAkCC,gBAAtE,EAAwF,oFAAxF,CAAN;AACH;;AACD,SAAKC,IAAL,GAAYN,GAAZ;AACA,SAAKO,cAAL,GAAsB,IAAIf,8BAA8B,CAACgB,gCAAnC,CAAoER,GAApE,CAAtB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIX,EAAAA,UAAU,CAACM,SAAX,CAAqBc,gBAArB,GAAwC,UAAUC,UAAV,EAAsB;AAC1D,WAAO,KAAKH,cAAL,CAAoBE,gBAApB,CAAqCC,UAArC,EACFC,IADE,CACG,YAAY,CAClB;AACH,KAHM,CAAP;AAIH,GALD;;AAMA1B,EAAAA,MAAM,CAACC,cAAP,CAAsBG,UAAU,CAACM,SAAjC,EAA4C,KAA5C,EAAmD;AAC/C;AACR;AACA;AACA;AACA;AACQiB,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKN,IAAZ;AACH,KAR8C;AAS/CO,IAAAA,UAAU,EAAE,KATmC;AAU/CC,IAAAA,YAAY,EAAE;AAViC,GAAnD;AAYA,SAAOzB,UAAP;AACH,CA7C+B,EAAhC;;AA8CAF,OAAO,CAACE,UAAR,GAAqBA,UAArB","sourcesContent":["/*! firebase-admin v9.4.2 */\r\n\"use strict\";\r\n/*!\r\n * Copyright 2020 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.InstanceId = void 0;\r\nvar error_1 = require(\"../utils/error\");\r\nvar instance_id_request_internal_1 = require(\"./instance-id-request-internal\");\r\nvar validator = require(\"../utils/validator\");\r\n/**\r\n * Internals of an InstanceId service instance.\r\n */\r\nvar InstanceIdInternals = /** @class */ (function () {\r\n    function InstanceIdInternals() {\r\n    }\r\n    /**\r\n     * Deletes the service and its associated resources.\r\n     *\r\n     * @return {Promise<()>} An empty Promise that will be fulfilled when the service is deleted.\r\n     */\r\n    InstanceIdInternals.prototype.delete = function () {\r\n        // There are no resources to clean up\r\n        return Promise.resolve(undefined);\r\n    };\r\n    return InstanceIdInternals;\r\n}());\r\n/**\r\n * Gets the {@link InstanceId `InstanceId`} service for the\r\n * current app.\r\n *\r\n * @example\r\n * ```javascript\r\n * var instanceId = app.instanceId();\r\n * // The above is shorthand for:\r\n * // var instanceId = admin.instanceId(app);\r\n * ```\r\n *\r\n * @return The `InstanceId` service for the\r\n *   current app.\r\n */\r\nvar InstanceId = /** @class */ (function () {\r\n    /**\r\n     * @param {FirebaseApp} app The app for this InstanceId service.\r\n     * @constructor\r\n     */\r\n    function InstanceId(app) {\r\n        this.INTERNAL = new InstanceIdInternals();\r\n        if (!validator.isNonNullObject(app) || !('options' in app)) {\r\n            throw new error_1.FirebaseInstanceIdError(error_1.InstanceIdClientErrorCode.INVALID_ARGUMENT, 'First argument passed to admin.instanceId() must be a valid Firebase app instance.');\r\n        }\r\n        this.app_ = app;\r\n        this.requestHandler = new instance_id_request_internal_1.FirebaseInstanceIdRequestHandler(app);\r\n    }\r\n    /**\r\n     * Deletes the specified instance ID and the associated data from Firebase.\r\n     *\r\n     * Note that Google Analytics for Firebase uses its own form of Instance ID to\r\n     * keep track of analytics data. Therefore deleting a Firebase Instance ID does\r\n     * not delete Analytics data. See\r\n     * [Delete an Instance ID](/support/privacy/manage-iids#delete_an_instance_id)\r\n     * for more information.\r\n     *\r\n     * @param instanceId The instance ID to be deleted.\r\n     *\r\n     * @return A promise fulfilled when the instance ID is deleted.\r\n     */\r\n    InstanceId.prototype.deleteInstanceId = function (instanceId) {\r\n        return this.requestHandler.deleteInstanceId(instanceId)\r\n            .then(function () {\r\n            // Return nothing on success\r\n        });\r\n    };\r\n    Object.defineProperty(InstanceId.prototype, \"app\", {\r\n        /**\r\n         * Returns the app associated with this InstanceId instance.\r\n         *\r\n         * @return {FirebaseApp} The app associated with this InstanceId instance.\r\n         */\r\n        get: function () {\r\n            return this.app_;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    return InstanceId;\r\n}());\r\nexports.InstanceId = InstanceId;\r\n"]},"metadata":{},"sourceType":"script"}