{"ast":null,"code":"'use strict';\n\nvar $ = require('../internals/export');\n\nvar DESCRIPTORS = require('../internals/descriptors');\n\nvar getPrototypeOf = require('../internals/object-get-prototype-of');\n\nvar setPrototypeOf = require('../internals/object-set-prototype-of');\n\nvar create = require('../internals/object-create');\n\nvar defineProperty = require('../internals/object-define-property');\n\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\n\nvar iterate = require('../internals/iterate');\n\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\n\nvar InternalStateModule = require('../internals/internal-state');\n\nvar setInternalState = InternalStateModule.set;\nvar getInternalAggregateErrorState = InternalStateModule.getterFor('AggregateError');\n\nvar $AggregateError = function AggregateError(errors, message) {\n  var that = this;\n  if (!(that instanceof $AggregateError)) return new $AggregateError(errors, message);\n\n  if (setPrototypeOf) {\n    that = setPrototypeOf(new Error(message), getPrototypeOf(that));\n  }\n\n  var errorsArray = [];\n  iterate(errors, errorsArray.push, errorsArray);\n  if (DESCRIPTORS) setInternalState(that, {\n    errors: errorsArray,\n    type: 'AggregateError'\n  });else that.errors = errorsArray;\n  if (message !== undefined) createNonEnumerableProperty(that, 'message', String(message));\n  return that;\n};\n\n$AggregateError.prototype = create(Error.prototype, {\n  constructor: createPropertyDescriptor(5, $AggregateError),\n  message: createPropertyDescriptor(5, ''),\n  name: createPropertyDescriptor(5, 'AggregateError')\n});\nif (DESCRIPTORS) defineProperty.f($AggregateError.prototype, 'errors', {\n  get: function () {\n    return getInternalAggregateErrorState(this).errors;\n  },\n  configurable: true\n});\n$({\n  global: true\n}, {\n  AggregateError: $AggregateError\n});","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Backend/node_modules/core-js/modules/esnext.aggregate-error.js"],"names":["$","require","DESCRIPTORS","getPrototypeOf","setPrototypeOf","create","defineProperty","createPropertyDescriptor","iterate","createNonEnumerableProperty","InternalStateModule","setInternalState","set","getInternalAggregateErrorState","getterFor","$AggregateError","AggregateError","errors","message","that","Error","errorsArray","push","type","undefined","String","prototype","constructor","name","f","get","configurable","global"],"mappings":"AAAA;;AACA,IAAIA,CAAC,GAAGC,OAAO,CAAC,qBAAD,CAAf;;AACA,IAAIC,WAAW,GAAGD,OAAO,CAAC,0BAAD,CAAzB;;AACA,IAAIE,cAAc,GAAGF,OAAO,CAAC,sCAAD,CAA5B;;AACA,IAAIG,cAAc,GAAGH,OAAO,CAAC,sCAAD,CAA5B;;AACA,IAAII,MAAM,GAAGJ,OAAO,CAAC,4BAAD,CAApB;;AACA,IAAIK,cAAc,GAAGL,OAAO,CAAC,qCAAD,CAA5B;;AACA,IAAIM,wBAAwB,GAAGN,OAAO,CAAC,yCAAD,CAAtC;;AACA,IAAIO,OAAO,GAAGP,OAAO,CAAC,sBAAD,CAArB;;AACA,IAAIQ,2BAA2B,GAAGR,OAAO,CAAC,6CAAD,CAAzC;;AACA,IAAIS,mBAAmB,GAAGT,OAAO,CAAC,6BAAD,CAAjC;;AAEA,IAAIU,gBAAgB,GAAGD,mBAAmB,CAACE,GAA3C;AACA,IAAIC,8BAA8B,GAAGH,mBAAmB,CAACI,SAApB,CAA8B,gBAA9B,CAArC;;AAEA,IAAIC,eAAe,GAAG,SAASC,cAAT,CAAwBC,MAAxB,EAAgCC,OAAhC,EAAyC;AAC7D,MAAIC,IAAI,GAAG,IAAX;AACA,MAAI,EAAEA,IAAI,YAAYJ,eAAlB,CAAJ,EAAwC,OAAO,IAAIA,eAAJ,CAAoBE,MAApB,EAA4BC,OAA5B,CAAP;;AACxC,MAAId,cAAJ,EAAoB;AAClBe,IAAAA,IAAI,GAAGf,cAAc,CAAC,IAAIgB,KAAJ,CAAUF,OAAV,CAAD,EAAqBf,cAAc,CAACgB,IAAD,CAAnC,CAArB;AACD;;AACD,MAAIE,WAAW,GAAG,EAAlB;AACAb,EAAAA,OAAO,CAACS,MAAD,EAASI,WAAW,CAACC,IAArB,EAA2BD,WAA3B,CAAP;AACA,MAAInB,WAAJ,EAAiBS,gBAAgB,CAACQ,IAAD,EAAO;AAAEF,IAAAA,MAAM,EAAEI,WAAV;AAAuBE,IAAAA,IAAI,EAAE;AAA7B,GAAP,CAAhB,CAAjB,KACKJ,IAAI,CAACF,MAAL,GAAcI,WAAd;AACL,MAAIH,OAAO,KAAKM,SAAhB,EAA2Bf,2BAA2B,CAACU,IAAD,EAAO,SAAP,EAAkBM,MAAM,CAACP,OAAD,CAAxB,CAA3B;AAC3B,SAAOC,IAAP;AACD,CAZD;;AAcAJ,eAAe,CAACW,SAAhB,GAA4BrB,MAAM,CAACe,KAAK,CAACM,SAAP,EAAkB;AAClDC,EAAAA,WAAW,EAAEpB,wBAAwB,CAAC,CAAD,EAAIQ,eAAJ,CADa;AAElDG,EAAAA,OAAO,EAAEX,wBAAwB,CAAC,CAAD,EAAI,EAAJ,CAFiB;AAGlDqB,EAAAA,IAAI,EAAErB,wBAAwB,CAAC,CAAD,EAAI,gBAAJ;AAHoB,CAAlB,CAAlC;AAMA,IAAIL,WAAJ,EAAiBI,cAAc,CAACuB,CAAf,CAAiBd,eAAe,CAACW,SAAjC,EAA4C,QAA5C,EAAsD;AACrEI,EAAAA,GAAG,EAAE,YAAY;AACf,WAAOjB,8BAA8B,CAAC,IAAD,CAA9B,CAAqCI,MAA5C;AACD,GAHoE;AAIrEc,EAAAA,YAAY,EAAE;AAJuD,CAAtD;AAOjB/B,CAAC,CAAC;AAAEgC,EAAAA,MAAM,EAAE;AAAV,CAAD,EAAmB;AAClBhB,EAAAA,cAAc,EAAED;AADE,CAAnB,CAAD","sourcesContent":["'use strict';\r\nvar $ = require('../internals/export');\r\nvar DESCRIPTORS = require('../internals/descriptors');\r\nvar getPrototypeOf = require('../internals/object-get-prototype-of');\r\nvar setPrototypeOf = require('../internals/object-set-prototype-of');\r\nvar create = require('../internals/object-create');\r\nvar defineProperty = require('../internals/object-define-property');\r\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\r\nvar iterate = require('../internals/iterate');\r\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\r\nvar InternalStateModule = require('../internals/internal-state');\r\n\r\nvar setInternalState = InternalStateModule.set;\r\nvar getInternalAggregateErrorState = InternalStateModule.getterFor('AggregateError');\r\n\r\nvar $AggregateError = function AggregateError(errors, message) {\r\n  var that = this;\r\n  if (!(that instanceof $AggregateError)) return new $AggregateError(errors, message);\r\n  if (setPrototypeOf) {\r\n    that = setPrototypeOf(new Error(message), getPrototypeOf(that));\r\n  }\r\n  var errorsArray = [];\r\n  iterate(errors, errorsArray.push, errorsArray);\r\n  if (DESCRIPTORS) setInternalState(that, { errors: errorsArray, type: 'AggregateError' });\r\n  else that.errors = errorsArray;\r\n  if (message !== undefined) createNonEnumerableProperty(that, 'message', String(message));\r\n  return that;\r\n};\r\n\r\n$AggregateError.prototype = create(Error.prototype, {\r\n  constructor: createPropertyDescriptor(5, $AggregateError),\r\n  message: createPropertyDescriptor(5, ''),\r\n  name: createPropertyDescriptor(5, 'AggregateError')\r\n});\r\n\r\nif (DESCRIPTORS) defineProperty.f($AggregateError.prototype, 'errors', {\r\n  get: function () {\r\n    return getInternalAggregateErrorState(this).errors;\r\n  },\r\n  configurable: true\r\n});\r\n\r\n$({ global: true }, {\r\n  AggregateError: $AggregateError\r\n});\r\n"]},"metadata":{},"sourceType":"script"}