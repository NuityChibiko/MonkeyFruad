{"ast":null,"code":"var debug = require('debug')('nodemon:run');\n\nconst statSync = require('fs').statSync;\n\nvar utils = require('../utils');\n\nvar bus = utils.bus;\n\nvar childProcess = require('child_process');\n\nvar spawn = childProcess.spawn;\nvar exec = childProcess.exec;\nvar fork = childProcess.fork;\n\nvar watch = require('./watch').watch;\n\nvar config = require('../config');\n\nvar child = null; // the actual child process we spawn\n\nvar killedAfterChange = false;\n\nvar noop = () => {};\n\nvar restart = null;\n\nvar psTree = require('pstree.remy');\n\nvar path = require('path');\n\nvar signals = require('./signals');\n\nfunction run(options) {\n  var cmd = config.command.raw; // moved up\n  // we need restart function below in the global scope for run.kill\n\n  /*jshint validthis:true*/\n\n  restart = run.bind(this, options);\n  run.restart = restart; // binding options with instance of run\n  // so that we can use it in run.kill\n\n  run.options = options;\n  var runCmd = !options.runOnChangeOnly || config.lastStarted !== 0;\n\n  if (runCmd) {\n    utils.log.status('starting `' + config.command.string + '`');\n  } else {\n    // should just watch file if command is not to be run\n    // had another alternate approach\n    // to stop process being forked/spawned in the below code\n    // but this approach does early exit and makes code cleaner\n    debug('start watch on: %s', config.options.watch);\n\n    if (config.options.watch !== false) {\n      watch();\n      return;\n    }\n  }\n\n  config.lastStarted = Date.now();\n  var stdio = ['pipe', 'pipe', 'pipe'];\n\n  if (config.options.stdout) {\n    stdio = ['pipe', process.stdout, process.stderr];\n  }\n\n  if (config.options.stdin === false) {\n    stdio = [process.stdin, process.stdout, process.stderr];\n  }\n\n  var sh = 'sh';\n  var shFlag = '-c';\n  const binPath = process.cwd() + '/node_modules/.bin';\n  const spawnOptions = {\n    env: Object.assign({}, process.env, options.execOptions.env, {\n      PATH: binPath + ':' + process.env.PATH\n    }),\n    stdio: stdio\n  };\n  var executable = cmd.executable;\n\n  if (utils.isWindows) {\n    // if the exec includes a forward slash, reverse it for windows compat\n    // but *only* apply to the first command, and none of the arguments.\n    // ref #1251 and #1236\n    if (executable.indexOf('/') !== -1) {\n      executable = executable.split(' ').map((e, i) => {\n        if (i === 0) {\n          return path.normalize(e);\n        }\n\n        return e;\n      }).join(' ');\n    } // taken from npm's cli: https://git.io/vNFD4\n\n\n    sh = process.env.comspec || 'cmd';\n    shFlag = '/d /s /c';\n    spawnOptions.windowsVerbatimArguments = true;\n  }\n\n  var args = runCmd ? utils.stringify(executable, cmd.args) : ':';\n  var spawnArgs = [sh, [shFlag, args], spawnOptions];\n  const firstArg = cmd.args[0] || '';\n  var inBinPath = false;\n\n  try {\n    inBinPath = statSync(`${binPath}/${executable}`).isFile();\n  } catch (e) {} // hasStdio allows us to correctly handle stdin piping\n  // see: https://git.io/vNtX3\n\n\n  const hasStdio = utils.satisfies('>= 6.4.0 || < 5'); // forking helps with sub-process handling and tends to clean up better\n  // than spawning, but it should only be used under specific conditions\n\n  const shouldFork = !config.options.spawn && !inBinPath && !(firstArg.indexOf('-') === 0) && // don't fork if there's a node exec arg\n  firstArg !== 'inspect' && // don't fork it's `inspect` debugger\n  executable === 'node' && // only fork if node\n  utils.version.major > 4; // only fork if node version > 4\n\n  if (shouldFork) {\n    // this assumes the first argument is the script and slices it out, since\n    // we're forking\n    var forkArgs = cmd.args.slice(1);\n    var env = utils.merge(options.execOptions.env, process.env);\n    stdio.push('ipc');\n    child = fork(options.execOptions.script, forkArgs, {\n      env: env,\n      stdio: stdio,\n      silent: !hasStdio\n    });\n    utils.log.detail('forking');\n    debug('fork', sh, shFlag, args);\n  } else {\n    utils.log.detail('spawning');\n    child = spawn.apply(null, spawnArgs);\n    debug('spawn', sh, shFlag, args);\n  }\n\n  if (config.required) {\n    var emit = {\n      stdout: function (data) {\n        bus.emit('stdout', data);\n      },\n      stderr: function (data) {\n        bus.emit('stderr', data);\n      }\n    }; // now work out what to bind to...\n\n    if (config.options.stdout) {\n      child.on('stdout', emit.stdout).on('stderr', emit.stderr);\n    } else {\n      child.stdout.on('data', emit.stdout);\n      child.stderr.on('data', emit.stderr);\n      bus.stdout = child.stdout;\n      bus.stderr = child.stderr;\n    }\n\n    if (shouldFork) {\n      child.on('message', function (message, sendHandle) {\n        bus.emit('message', message, sendHandle);\n      });\n    }\n  }\n\n  bus.emit('start');\n  utils.log.detail('child pid: ' + child.pid);\n  child.on('error', function (error) {\n    bus.emit('error', error);\n\n    if (error.code === 'ENOENT') {\n      utils.log.error('unable to run executable: \"' + cmd.executable + '\"');\n      process.exit(1);\n    } else {\n      utils.log.error('failed to start child process: ' + error.code);\n      throw error;\n    }\n  });\n  child.on('exit', function (code, signal) {\n    if (child && child.stdin) {\n      process.stdin.unpipe(child.stdin);\n    }\n\n    if (code === 127) {\n      utils.log.error('failed to start process, \"' + cmd.executable + '\" exec not found');\n      bus.emit('error', code);\n      process.exit();\n    } // If the command failed with code 2, it may or may not be a syntax error\n    // See: http://git.io/fNOAR\n    // We will only assume a parse error, if the child failed quickly\n\n\n    if (code === 2 && Date.now() < config.lastStarted + 500) {\n      utils.log.error('process failed, unhandled exit code (2)');\n      utils.log.error('');\n      utils.log.error('Either the command has a syntax error,');\n      utils.log.error('or it is exiting with reserved code 2.');\n      utils.log.error('');\n      utils.log.error('To keep nodemon running even after a code 2,');\n      utils.log.error('add this to the end of your command: || exit 1');\n      utils.log.error('');\n      utils.log.error('Read more here: https://git.io/fNOAG');\n      utils.log.error('');\n      utils.log.error('nodemon will stop now so that you can fix the command.');\n      utils.log.error('');\n      bus.emit('error', code);\n      process.exit();\n    } // In case we killed the app ourselves, set the signal thusly\n\n\n    if (killedAfterChange) {\n      killedAfterChange = false;\n      signal = config.signal;\n    } // this is nasty, but it gives it windows support\n\n\n    if (utils.isWindows && signal === 'SIGTERM') {\n      signal = config.signal;\n    }\n\n    if (signal === config.signal || code === 0) {\n      // this was a clean exit, so emit exit, rather than crash\n      debug('bus.emit(exit) via ' + config.signal);\n      bus.emit('exit', signal); // exit the monitor, but do it gracefully\n\n      if (signal === config.signal) {\n        return restart();\n      }\n\n      if (code === 0) {\n        // clean exit - wait until file change to restart\n        if (runCmd) {\n          utils.log.status('clean exit - waiting for changes before restart');\n        }\n\n        child = null;\n      }\n    } else {\n      bus.emit('crash');\n\n      if (options.exitcrash) {\n        utils.log.fail('app crashed');\n\n        if (!config.required) {\n          process.exit(1);\n        }\n      } else {\n        utils.log.fail('app crashed - waiting for file changes before' + ' starting...');\n        child = null;\n      }\n    }\n\n    if (config.options.restartable) {\n      // stdin needs to kick in again to be able to listen to the\n      // restart command\n      process.stdin.resume();\n    }\n  }); // moved the run.kill outside to handle both the cases\n  // intial start\n  // no start\n  // connect stdin to the child process (options.stdin is on by default)\n\n  if (options.stdin) {\n    process.stdin.resume(); // FIXME decide whether or not we need to decide the encoding\n    // process.stdin.setEncoding('utf8');\n    // swallow the stdin error if it happens\n    // ref: https://github.com/remy/nodemon/issues/1195\n\n    if (hasStdio) {\n      child.stdin.on('error', () => {});\n      process.stdin.pipe(child.stdin);\n    } else {\n      if (child.stdout) {\n        child.stdout.pipe(process.stdout);\n      } else {\n        utils.log.error('running an unsupported version of node ' + process.version);\n        utils.log.error('nodemon may not work as expected - ' + 'please consider upgrading to LTS');\n      }\n    }\n\n    bus.once('exit', function () {\n      if (child && process.stdin.unpipe) {\n        // node > 0.8\n        process.stdin.unpipe(child.stdin);\n      }\n    });\n  }\n\n  debug('start watch on: %s', config.options.watch);\n\n  if (config.options.watch !== false) {\n    watch();\n  }\n}\n\nfunction waitForSubProcesses(pid, callback) {\n  debug('checking ps tree for pids of ' + pid);\n  psTree(pid, (err, pids) => {\n    if (!pids.length) {\n      return callback();\n    }\n\n    utils.log.status(`still waiting for ${pids.length} sub-process${pids.length > 2 ? 'es' : ''} to finish...`);\n    setTimeout(() => waitForSubProcesses(pid, callback), 1000);\n  });\n}\n\nfunction kill(child, signal, callback) {\n  if (!callback) {\n    callback = function () {};\n  }\n\n  if (utils.isWindows) {\n    // When using CoffeeScript under Windows, child's process is not node.exe\n    // Instead coffee.cmd is launched, which launches cmd.exe, which starts\n    // node.exe as a child process child.kill() would only kill cmd.exe, not\n    // node.exe\n    // Therefore we use the Windows taskkill utility to kill the process and all\n    // its children (/T for tree).\n    // Force kill (/F) the whole child tree (/T) by PID (/PID 123)\n    exec('taskkill /pid ' + child.pid + ' /T /F');\n    callback();\n  } else {\n    // we use psTree to kill the full subtree of nodemon, because when\n    // spawning processes like `coffee` under the `--debug` flag, it'll spawn\n    // it's own child, and that can't be killed by nodemon, so psTree gives us\n    // an array of PIDs that have spawned under nodemon, and we send each the\n    // configured signal (default: SIGUSR2) signal, which fixes #335\n    // note that psTree also works if `ps` is missing by looking in /proc\n    let sig = signal.replace('SIG', '');\n    psTree(child.pid, function (err, pids) {\n      // if ps isn't native to the OS, then we need to send the numeric value\n      // for the signal during the kill, `signals` is a lookup table for that.\n      if (!psTree.hasPS) {\n        sig = signals[signal];\n      } // the sub processes need to be killed from smallest to largest\n\n\n      debug('sending kill signal to ' + pids.join(', '));\n      child.kill(signal);\n      pids.sort().forEach(pid => exec(`kill -${sig} ${pid}`, noop));\n      waitForSubProcesses(child.pid, () => {\n        // finally kill the main user process\n        exec(`kill -${sig} ${child.pid}`, callback);\n      });\n    });\n  }\n}\n\nrun.kill = function (noRestart, callback) {\n  // I hate code like this :(  - Remy (author of said code)\n  if (typeof noRestart === 'function') {\n    callback = noRestart;\n    noRestart = false;\n  }\n\n  if (!callback) {\n    callback = noop;\n  }\n\n  if (child !== null) {\n    // if the stdin piping is on, we need to unpipe, but also close stdin on\n    // the child, otherwise linux can throw EPIPE or ECONNRESET errors.\n    if (run.options.stdin) {\n      process.stdin.unpipe(child.stdin);\n    } // For the on('exit', ...) handler above the following looks like a\n    // crash, so we set the killedAfterChange flag if a restart is planned\n\n\n    if (!noRestart) {\n      killedAfterChange = true;\n    }\n    /* Now kill the entire subtree of processes belonging to nodemon */\n\n\n    var oldPid = child.pid;\n\n    if (child) {\n      kill(child, config.signal, function () {\n        // this seems to fix the 0.11.x issue with the \"rs\" restart command,\n        // though I'm unsure why. it seems like more data is streamed in to\n        // stdin after we close.\n        if (child && run.options.stdin && child.stdin && oldPid === child.pid) {\n          child.stdin.end();\n        }\n\n        callback();\n      });\n    }\n  } else if (!noRestart) {\n    // if there's no child, then we need to manually start the process\n    // this is because as there was no child, the child.on('exit') event\n    // handler doesn't exist which would normally trigger the restart.\n    bus.once('start', callback);\n    run.restart();\n  } else {\n    callback();\n  }\n};\n\nrun.restart = noop;\nbus.on('quit', function onQuit(code) {\n  if (code === undefined) {\n    code = 0;\n  } // remove event listener\n\n\n  var exitTimer = null;\n\n  var exit = function () {\n    clearTimeout(exitTimer);\n    exit = noop; // null out in case of race condition\n\n    child = null;\n\n    if (!config.required) {\n      // Execute all other quit listeners.\n      bus.listeners('quit').forEach(function (listener) {\n        if (listener !== onQuit) {\n          listener();\n        }\n      });\n      process.exit(code);\n    } else {\n      bus.emit('exit');\n    }\n  }; // if we're not running already, don't bother with trying to kill\n\n\n  if (config.run === false) {\n    return exit();\n  } // immediately try to stop any polling\n\n\n  config.run = false;\n\n  if (child) {\n    // give up waiting for the kids after 10 seconds\n    exitTimer = setTimeout(exit, 10 * 1000);\n    child.removeAllListeners('exit');\n    child.once('exit', exit);\n    kill(child, 'SIGINT');\n  } else {\n    exit();\n  }\n});\nbus.on('restart', function () {\n  // run.kill will send a SIGINT to the child process, which will cause it\n  // to terminate, which in turn uses the 'exit' event handler to restart\n  run.kill();\n}); // remove the child file on exit\n\nprocess.on('exit', function () {\n  utils.log.detail('exiting');\n\n  if (child) {\n    child.kill();\n  }\n}); // because windows borks when listening for the SIG* events\n\nif (!utils.isWindows) {\n  bus.once('boot', () => {\n    // usual suspect: ctrl+c exit\n    process.once('SIGINT', () => bus.emit('quit', 130));\n    process.once('SIGTERM', () => {\n      bus.emit('quit', 143);\n\n      if (child) {\n        child.kill('SIGTERM');\n      }\n    });\n  });\n}\n\nmodule.exports = run;","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Frontend/node_modules/nodemon/lib/monitor/run.js"],"names":["debug","require","statSync","utils","bus","childProcess","spawn","exec","fork","watch","config","child","killedAfterChange","noop","restart","psTree","path","signals","run","options","cmd","command","raw","bind","runCmd","runOnChangeOnly","lastStarted","log","status","string","Date","now","stdio","stdout","process","stderr","stdin","sh","shFlag","binPath","cwd","spawnOptions","env","Object","assign","execOptions","PATH","executable","isWindows","indexOf","split","map","e","i","normalize","join","comspec","windowsVerbatimArguments","args","stringify","spawnArgs","firstArg","inBinPath","isFile","hasStdio","satisfies","shouldFork","version","major","forkArgs","slice","merge","push","script","silent","detail","apply","required","emit","data","on","message","sendHandle","pid","error","code","exit","signal","unpipe","exitcrash","fail","restartable","resume","pipe","once","waitForSubProcesses","callback","err","pids","length","setTimeout","kill","sig","replace","hasPS","sort","forEach","noRestart","oldPid","end","onQuit","undefined","exitTimer","clearTimeout","listeners","listener","removeAllListeners","module","exports"],"mappings":"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","sourcesContent":["var debug = require('debug')('nodemon:run');\r\nconst statSync = require('fs').statSync;\r\nvar utils = require('../utils');\r\nvar bus = utils.bus;\r\nvar childProcess = require('child_process');\r\nvar spawn = childProcess.spawn;\r\nvar exec = childProcess.exec;\r\nvar fork = childProcess.fork;\r\nvar watch = require('./watch').watch;\r\nvar config = require('../config');\r\nvar child = null; // the actual child process we spawn\r\nvar killedAfterChange = false;\r\nvar noop = () => {};\r\nvar restart = null;\r\nvar psTree = require('pstree.remy');\r\nvar path = require('path');\r\nvar signals = require('./signals');\r\n\r\nfunction run(options) {\r\n  var cmd = config.command.raw;\r\n  // moved up\r\n  // we need restart function below in the global scope for run.kill\r\n  /*jshint validthis:true*/\r\n  restart = run.bind(this, options);\r\n  run.restart = restart;\r\n\r\n  // binding options with instance of run\r\n  // so that we can use it in run.kill\r\n  run.options = options;\r\n\r\n  var runCmd = !options.runOnChangeOnly || config.lastStarted !== 0;\r\n  if (runCmd) {\r\n    utils.log.status('starting `' + config.command.string + '`');\r\n  } else {\r\n    // should just watch file if command is not to be run\r\n    // had another alternate approach\r\n    // to stop process being forked/spawned in the below code\r\n    // but this approach does early exit and makes code cleaner\r\n    debug('start watch on: %s', config.options.watch);\r\n    if (config.options.watch !== false) {\r\n      watch();\r\n      return;\r\n    }\r\n  }\r\n\r\n  config.lastStarted = Date.now();\r\n\r\n  var stdio = ['pipe', 'pipe', 'pipe'];\r\n\r\n  if (config.options.stdout) {\r\n    stdio = ['pipe', process.stdout, process.stderr];\r\n  }\r\n\r\n  if (config.options.stdin === false) {\r\n    stdio = [process.stdin, process.stdout, process.stderr];\r\n  }\r\n\r\n  var sh = 'sh';\r\n  var shFlag = '-c';\r\n\r\n  const binPath = process.cwd() + '/node_modules/.bin';\r\n\r\n  const spawnOptions = {\r\n    env: Object.assign({}, process.env, options.execOptions.env, {\r\n      PATH: binPath + ':' + process.env.PATH,\r\n    }),\r\n    stdio: stdio,\r\n  }\r\n\r\n  var executable = cmd.executable;\r\n\r\n  if (utils.isWindows) {\r\n    // if the exec includes a forward slash, reverse it for windows compat\r\n    // but *only* apply to the first command, and none of the arguments.\r\n    // ref #1251 and #1236\r\n    if (executable.indexOf('/') !== -1) {\r\n      executable = executable.split(' ').map((e, i) => {\r\n        if (i === 0) {\r\n          return path.normalize(e);\r\n        }\r\n        return e;\r\n      }).join(' ');\r\n    }\r\n    // taken from npm's cli: https://git.io/vNFD4\r\n    sh = process.env.comspec || 'cmd';\r\n    shFlag = '/d /s /c';\r\n    spawnOptions.windowsVerbatimArguments = true;\r\n  }\r\n\r\n  var args = runCmd ? utils.stringify(executable, cmd.args) : ':';\r\n  var spawnArgs = [sh, [shFlag, args], spawnOptions];\r\n\r\n  const firstArg = cmd.args[0] || '';\r\n\r\n  var inBinPath = false;\r\n  try {\r\n    inBinPath = statSync(`${binPath}/${executable}`).isFile();\r\n  } catch (e) {}\r\n\r\n  // hasStdio allows us to correctly handle stdin piping\r\n  // see: https://git.io/vNtX3\r\n  const hasStdio = utils.satisfies('>= 6.4.0 || < 5');\r\n\r\n  // forking helps with sub-process handling and tends to clean up better\r\n  // than spawning, but it should only be used under specific conditions\r\n  const shouldFork =\r\n    !config.options.spawn &&\r\n    !inBinPath &&\r\n    !(firstArg.indexOf('-') === 0) && // don't fork if there's a node exec arg\r\n    firstArg !== 'inspect' && // don't fork it's `inspect` debugger\r\n    executable === 'node' && // only fork if node\r\n    utils.version.major > 4 // only fork if node version > 4\r\n\r\n  if (shouldFork) {\r\n    // this assumes the first argument is the script and slices it out, since\r\n    // we're forking\r\n    var forkArgs = cmd.args.slice(1);\r\n    var env = utils.merge(options.execOptions.env, process.env);\r\n    stdio.push('ipc');\r\n    child = fork(options.execOptions.script, forkArgs, {\r\n      env: env,\r\n      stdio: stdio,\r\n      silent: !hasStdio,\r\n    });\r\n    utils.log.detail('forking');\r\n    debug('fork', sh, shFlag, args)\r\n  } else {\r\n    utils.log.detail('spawning');\r\n    child = spawn.apply(null, spawnArgs);\r\n    debug('spawn', sh, shFlag, args);\r\n  }\r\n\r\n  if (config.required) {\r\n    var emit = {\r\n      stdout: function (data) {\r\n        bus.emit('stdout', data);\r\n      },\r\n      stderr: function (data) {\r\n        bus.emit('stderr', data);\r\n      },\r\n    };\r\n\r\n    // now work out what to bind to...\r\n    if (config.options.stdout) {\r\n      child.on('stdout', emit.stdout).on('stderr', emit.stderr);\r\n    } else {\r\n      child.stdout.on('data', emit.stdout);\r\n      child.stderr.on('data', emit.stderr);\r\n\r\n      bus.stdout = child.stdout;\r\n      bus.stderr = child.stderr;\r\n    }\r\n\r\n    if (shouldFork) {\r\n      child.on('message', function (message, sendHandle) {\r\n        bus.emit('message', message, sendHandle);\r\n      });\r\n    }\r\n  }\r\n\r\n  bus.emit('start');\r\n\r\n  utils.log.detail('child pid: ' + child.pid);\r\n\r\n  child.on('error', function (error) {\r\n    bus.emit('error', error);\r\n    if (error.code === 'ENOENT') {\r\n      utils.log.error('unable to run executable: \"' + cmd.executable + '\"');\r\n      process.exit(1);\r\n    } else {\r\n      utils.log.error('failed to start child process: ' + error.code);\r\n      throw error;\r\n    }\r\n  });\r\n\r\n  child.on('exit', function (code, signal) {\r\n    if (child && child.stdin) {\r\n      process.stdin.unpipe(child.stdin);\r\n    }\r\n\r\n    if (code === 127) {\r\n      utils.log.error('failed to start process, \"' + cmd.executable +\r\n        '\" exec not found');\r\n      bus.emit('error', code);\r\n      process.exit();\r\n    }\r\n\r\n    // If the command failed with code 2, it may or may not be a syntax error\r\n    // See: http://git.io/fNOAR\r\n    // We will only assume a parse error, if the child failed quickly\r\n    if (code === 2 && Date.now() < config.lastStarted + 500) {\r\n      utils.log.error('process failed, unhandled exit code (2)');\r\n      utils.log.error('');\r\n      utils.log.error('Either the command has a syntax error,');\r\n      utils.log.error('or it is exiting with reserved code 2.');\r\n      utils.log.error('');\r\n      utils.log.error('To keep nodemon running even after a code 2,');\r\n      utils.log.error('add this to the end of your command: || exit 1');\r\n      utils.log.error('');\r\n      utils.log.error('Read more here: https://git.io/fNOAG');\r\n      utils.log.error('');\r\n      utils.log.error('nodemon will stop now so that you can fix the command.');\r\n      utils.log.error('');\r\n      bus.emit('error', code);\r\n      process.exit();\r\n    }\r\n\r\n    // In case we killed the app ourselves, set the signal thusly\r\n    if (killedAfterChange) {\r\n      killedAfterChange = false;\r\n      signal = config.signal;\r\n    }\r\n    // this is nasty, but it gives it windows support\r\n    if (utils.isWindows && signal === 'SIGTERM') {\r\n      signal = config.signal;\r\n    }\r\n\r\n    if (signal === config.signal || code === 0) {\r\n      // this was a clean exit, so emit exit, rather than crash\r\n      debug('bus.emit(exit) via ' + config.signal);\r\n      bus.emit('exit', signal);\r\n\r\n      // exit the monitor, but do it gracefully\r\n      if (signal === config.signal) {\r\n        return restart();\r\n      }\r\n\r\n      if (code === 0) { // clean exit - wait until file change to restart\r\n        if (runCmd) {\r\n          utils.log.status('clean exit - waiting for changes before restart');\r\n        }\r\n        child = null;\r\n      }\r\n    } else {\r\n      bus.emit('crash');\r\n      if (options.exitcrash) {\r\n        utils.log.fail('app crashed');\r\n        if (!config.required) {\r\n          process.exit(1);\r\n        }\r\n      } else {\r\n        utils.log.fail('app crashed - waiting for file changes before' +\r\n          ' starting...');\r\n        child = null;\r\n      }\r\n    }\r\n\r\n    if (config.options.restartable) {\r\n      // stdin needs to kick in again to be able to listen to the\r\n      // restart command\r\n      process.stdin.resume();\r\n    }\r\n  });\r\n\r\n  // moved the run.kill outside to handle both the cases\r\n  // intial start\r\n  // no start\r\n\r\n  // connect stdin to the child process (options.stdin is on by default)\r\n  if (options.stdin) {\r\n    process.stdin.resume();\r\n    // FIXME decide whether or not we need to decide the encoding\r\n    // process.stdin.setEncoding('utf8');\r\n\r\n    // swallow the stdin error if it happens\r\n    // ref: https://github.com/remy/nodemon/issues/1195\r\n    if (hasStdio) {\r\n      child.stdin.on('error', () => { });\r\n      process.stdin.pipe(child.stdin);\r\n    } else {\r\n      if (child.stdout) {\r\n        child.stdout.pipe(process.stdout);\r\n      } else {\r\n        utils.log.error('running an unsupported version of node ' +\r\n          process.version);\r\n        utils.log.error('nodemon may not work as expected - ' +\r\n          'please consider upgrading to LTS');\r\n      }\r\n    }\r\n\r\n    bus.once('exit', function () {\r\n      if (child && process.stdin.unpipe) { // node > 0.8\r\n        process.stdin.unpipe(child.stdin);\r\n      }\r\n    });\r\n  }\r\n\r\n  debug('start watch on: %s', config.options.watch);\r\n  if (config.options.watch !== false) {\r\n    watch();\r\n  }\r\n}\r\n\r\nfunction waitForSubProcesses(pid, callback) {\r\n  debug('checking ps tree for pids of ' + pid);\r\n  psTree(pid, (err, pids) => {\r\n    if (!pids.length) {\r\n      return callback();\r\n    }\r\n\r\n    utils.log.status(`still waiting for ${pids.length} sub-process${\r\n      pids.length > 2 ? 'es' : ''} to finish...`);\r\n    setTimeout(() => waitForSubProcesses(pid, callback), 1000);\r\n  });\r\n}\r\n\r\nfunction kill(child, signal, callback) {\r\n  if (!callback) {\r\n    callback = function () { };\r\n  }\r\n\r\n  if (utils.isWindows) {\r\n    // When using CoffeeScript under Windows, child's process is not node.exe\r\n    // Instead coffee.cmd is launched, which launches cmd.exe, which starts\r\n    // node.exe as a child process child.kill() would only kill cmd.exe, not\r\n    // node.exe\r\n    // Therefore we use the Windows taskkill utility to kill the process and all\r\n    // its children (/T for tree).\r\n    // Force kill (/F) the whole child tree (/T) by PID (/PID 123)\r\n    exec('taskkill /pid ' + child.pid + ' /T /F');\r\n    callback();\r\n  } else {\r\n    // we use psTree to kill the full subtree of nodemon, because when\r\n    // spawning processes like `coffee` under the `--debug` flag, it'll spawn\r\n    // it's own child, and that can't be killed by nodemon, so psTree gives us\r\n    // an array of PIDs that have spawned under nodemon, and we send each the\r\n    // configured signal (default: SIGUSR2) signal, which fixes #335\r\n    // note that psTree also works if `ps` is missing by looking in /proc\r\n    let sig = signal.replace('SIG', '');\r\n\r\n    psTree(child.pid, function (err, pids) {\r\n      // if ps isn't native to the OS, then we need to send the numeric value\r\n      // for the signal during the kill, `signals` is a lookup table for that.\r\n      if (!psTree.hasPS) {\r\n        sig = signals[signal];\r\n      }\r\n\r\n      // the sub processes need to be killed from smallest to largest\r\n      debug('sending kill signal to ' + pids.join(', '));\r\n\r\n      child.kill(signal);\r\n\r\n      pids.sort().forEach(pid => exec(`kill -${sig} ${pid}`, noop));\r\n\r\n      waitForSubProcesses(child.pid, () => {\r\n        // finally kill the main user process\r\n        exec(`kill -${sig} ${child.pid}`, callback);\r\n      });\r\n\r\n    });\r\n\r\n  }\r\n}\r\n\r\nrun.kill = function (noRestart, callback) {\r\n  // I hate code like this :(  - Remy (author of said code)\r\n  if (typeof noRestart === 'function') {\r\n    callback = noRestart;\r\n    noRestart = false;\r\n  }\r\n\r\n  if (!callback) {\r\n    callback = noop;\r\n  }\r\n\r\n  if (child !== null) {\r\n    // if the stdin piping is on, we need to unpipe, but also close stdin on\r\n    // the child, otherwise linux can throw EPIPE or ECONNRESET errors.\r\n    if (run.options.stdin) {\r\n      process.stdin.unpipe(child.stdin);\r\n    }\r\n\r\n    // For the on('exit', ...) handler above the following looks like a\r\n    // crash, so we set the killedAfterChange flag if a restart is planned\r\n    if (!noRestart) {\r\n      killedAfterChange = true;\r\n    }\r\n\r\n    /* Now kill the entire subtree of processes belonging to nodemon */\r\n    var oldPid = child.pid;\r\n    if (child) {\r\n      kill(child, config.signal, function () {\r\n        // this seems to fix the 0.11.x issue with the \"rs\" restart command,\r\n        // though I'm unsure why. it seems like more data is streamed in to\r\n        // stdin after we close.\r\n        if (child && run.options.stdin && child.stdin && oldPid === child.pid) {\r\n          child.stdin.end();\r\n        }\r\n        callback();\r\n      });\r\n    }\r\n  } else if (!noRestart) {\r\n    // if there's no child, then we need to manually start the process\r\n    // this is because as there was no child, the child.on('exit') event\r\n    // handler doesn't exist which would normally trigger the restart.\r\n    bus.once('start', callback);\r\n    run.restart();\r\n  } else {\r\n    callback();\r\n  }\r\n};\r\n\r\nrun.restart = noop;\r\n\r\nbus.on('quit', function onQuit(code) {\r\n  if (code === undefined) {\r\n    code = 0;\r\n  }\r\n\r\n  // remove event listener\r\n  var exitTimer = null;\r\n  var exit = function () {\r\n    clearTimeout(exitTimer);\r\n    exit = noop; // null out in case of race condition\r\n    child = null;\r\n    if (!config.required) {\r\n      // Execute all other quit listeners.\r\n      bus.listeners('quit').forEach(function (listener) {\r\n        if (listener !== onQuit) {\r\n          listener();\r\n        }\r\n      });\r\n      process.exit(code);\r\n    } else {\r\n      bus.emit('exit');\r\n    }\r\n  };\r\n\r\n  // if we're not running already, don't bother with trying to kill\r\n  if (config.run === false) {\r\n    return exit();\r\n  }\r\n\r\n  // immediately try to stop any polling\r\n  config.run = false;\r\n\r\n  if (child) {\r\n    // give up waiting for the kids after 10 seconds\r\n    exitTimer = setTimeout(exit, 10 * 1000);\r\n    child.removeAllListeners('exit');\r\n    child.once('exit', exit);\r\n\r\n    kill(child, 'SIGINT');\r\n  } else {\r\n    exit();\r\n  }\r\n});\r\n\r\nbus.on('restart', function () {\r\n  // run.kill will send a SIGINT to the child process, which will cause it\r\n  // to terminate, which in turn uses the 'exit' event handler to restart\r\n  run.kill();\r\n});\r\n\r\n// remove the child file on exit\r\nprocess.on('exit', function () {\r\n  utils.log.detail('exiting');\r\n  if (child) { child.kill(); }\r\n});\r\n\r\n// because windows borks when listening for the SIG* events\r\nif (!utils.isWindows) {\r\n  bus.once('boot', () => {\r\n    // usual suspect: ctrl+c exit\r\n    process.once('SIGINT', () => bus.emit('quit', 130));\r\n    process.once('SIGTERM', () => {\r\n      bus.emit('quit', 143);\r\n      if (child) { child.kill('SIGTERM'); }\r\n    });\r\n  })\r\n}\r\n\r\n\r\nmodule.exports = run;\r\n"]},"metadata":{},"sourceType":"script"}