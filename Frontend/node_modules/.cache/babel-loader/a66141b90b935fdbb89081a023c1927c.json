{"ast":null,"code":"/*! firebase-admin v9.4.2 */\n\"use strict\";\n/*!\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Messaging = void 0;\n\nvar deep_copy_1 = require(\"../utils/deep-copy\");\n\nvar messaging_internal_1 = require(\"./messaging-internal\");\n\nvar messaging_api_request_internal_1 = require(\"./messaging-api-request-internal\");\n\nvar error_1 = require(\"../utils/error\");\n\nvar utils = require(\"../utils\");\n\nvar validator = require(\"../utils/validator\");\n/* eslint-disable @typescript-eslint/camelcase */\n// FCM endpoints\n\n\nvar FCM_SEND_HOST = 'fcm.googleapis.com';\nvar FCM_SEND_PATH = '/fcm/send';\nvar FCM_TOPIC_MANAGEMENT_HOST = 'iid.googleapis.com';\nvar FCM_TOPIC_MANAGEMENT_ADD_PATH = '/iid/v1:batchAdd';\nvar FCM_TOPIC_MANAGEMENT_REMOVE_PATH = '/iid/v1:batchRemove'; // Maximum messages that can be included in a batch request.\n\nvar FCM_MAX_BATCH_SIZE = 500; // Key renames for the messaging notification payload object.\n\nvar CAMELCASED_NOTIFICATION_PAYLOAD_KEYS_MAP = {\n  bodyLocArgs: 'body_loc_args',\n  bodyLocKey: 'body_loc_key',\n  clickAction: 'click_action',\n  titleLocArgs: 'title_loc_args',\n  titleLocKey: 'title_loc_key'\n}; // Key renames for the messaging options object.\n\nvar CAMELCASE_OPTIONS_KEYS_MAP = {\n  dryRun: 'dry_run',\n  timeToLive: 'time_to_live',\n  collapseKey: 'collapse_key',\n  mutableContent: 'mutable_content',\n  contentAvailable: 'content_available',\n  restrictedPackageName: 'restricted_package_name'\n}; // Key renames for the MessagingDeviceResult object.\n\nvar MESSAGING_DEVICE_RESULT_KEYS_MAP = {\n  message_id: 'messageId',\n  registration_id: 'canonicalRegistrationToken'\n}; // Key renames for the MessagingDevicesResponse object.\n\nvar MESSAGING_DEVICES_RESPONSE_KEYS_MAP = {\n  canonical_ids: 'canonicalRegistrationTokenCount',\n  failure: 'failureCount',\n  success: 'successCount',\n  multicast_id: 'multicastId'\n}; // Key renames for the MessagingDeviceGroupResponse object.\n\nvar MESSAGING_DEVICE_GROUP_RESPONSE_KEYS_MAP = {\n  success: 'successCount',\n  failure: 'failureCount',\n  failed_registration_ids: 'failedRegistrationTokens'\n}; // Key renames for the MessagingTopicResponse object.\n\nvar MESSAGING_TOPIC_RESPONSE_KEYS_MAP = {\n  message_id: 'messageId'\n}; // Key renames for the MessagingConditionResponse object.\n\nvar MESSAGING_CONDITION_RESPONSE_KEYS_MAP = {\n  message_id: 'messageId'\n};\n/**\r\n * Maps a raw FCM server response to a MessagingDevicesResponse object.\r\n *\r\n * @param {object} response The raw FCM server response to map.\r\n *\r\n * @return {MessagingDeviceGroupResponse} The mapped MessagingDevicesResponse object.\r\n */\n\nfunction mapRawResponseToDevicesResponse(response) {\n  // Rename properties on the server response\n  utils.renameProperties(response, MESSAGING_DEVICES_RESPONSE_KEYS_MAP);\n\n  if ('results' in response) {\n    response.results.forEach(function (messagingDeviceResult) {\n      utils.renameProperties(messagingDeviceResult, MESSAGING_DEVICE_RESULT_KEYS_MAP); // Map the FCM server's error strings to actual error objects.\n\n      if ('error' in messagingDeviceResult) {\n        var newError = error_1.FirebaseMessagingError.fromServerError(messagingDeviceResult.error,\n        /* message */\n        undefined, messagingDeviceResult.error);\n        messagingDeviceResult.error = newError;\n      }\n    });\n  }\n\n  return response;\n}\n/**\r\n * Maps a raw FCM server response to a MessagingDeviceGroupResponse object.\r\n *\r\n * @param {object} response The raw FCM server response to map.\r\n *\r\n * @return {MessagingDeviceGroupResponse} The mapped MessagingDeviceGroupResponse object.\r\n */\n\n\nfunction mapRawResponseToDeviceGroupResponse(response) {\n  // Rename properties on the server response\n  utils.renameProperties(response, MESSAGING_DEVICE_GROUP_RESPONSE_KEYS_MAP); // Add the 'failedRegistrationTokens' property if it does not exist on the response, which\n  // it won't when the 'failureCount' property has a value of 0)\n\n  response.failedRegistrationTokens = response.failedRegistrationTokens || [];\n  return response;\n}\n/**\r\n * Maps a raw FCM server response to a MessagingTopicManagementResponse object.\r\n *\r\n * @param {object} response The raw FCM server response to map.\r\n *\r\n * @return {MessagingTopicManagementResponse} The mapped MessagingTopicManagementResponse object.\r\n */\n\n\nfunction mapRawResponseToTopicManagementResponse(response) {\n  // Add the success and failure counts.\n  var result = {\n    successCount: 0,\n    failureCount: 0,\n    errors: []\n  };\n\n  if ('results' in response) {\n    response.results.forEach(function (tokenManagementResult, index) {\n      // Map the FCM server's error strings to actual error objects.\n      if ('error' in tokenManagementResult) {\n        result.failureCount += 1;\n        var newError = error_1.FirebaseMessagingError.fromTopicManagementServerError(tokenManagementResult.error,\n        /* message */\n        undefined, tokenManagementResult.error);\n        result.errors.push({\n          index: index,\n          error: newError\n        });\n      } else {\n        result.successCount += 1;\n      }\n    });\n  }\n\n  return result;\n}\n/**\r\n * Internals of a Messaging instance.\r\n */\n\n\nvar MessagingInternals =\n/** @class */\nfunction () {\n  function MessagingInternals() {}\n  /**\r\n   * Deletes the service and its associated resources.\r\n   *\r\n   * @return {Promise<()>} An empty Promise that will be fulfilled when the service is deleted.\r\n   */\n\n\n  MessagingInternals.prototype.delete = function () {\n    // There are no resources to clean up.\n    return Promise.resolve(undefined);\n  };\n\n  return MessagingInternals;\n}();\n/**\r\n * Messaging service bound to the provided app.\r\n */\n\n\nvar Messaging =\n/** @class */\nfunction () {\n  /**\r\n   * Gets the {@link messaging.Messaging `Messaging`} service for the\r\n   * current app.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * var messaging = app.messaging();\r\n   * // The above is shorthand for:\r\n   * // var messaging = admin.messaging(app);\r\n   * ```\r\n   *\r\n   * @return The `Messaging` service for the current app.\r\n   */\n  function Messaging(app) {\n    this.INTERNAL = new MessagingInternals();\n\n    if (!validator.isNonNullObject(app) || !('options' in app)) {\n      throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_ARGUMENT, 'First argument passed to admin.messaging() must be a valid Firebase app instance.');\n    }\n\n    this.appInternal = app;\n    this.messagingRequestHandler = new messaging_api_request_internal_1.FirebaseMessagingRequestHandler(app);\n  }\n\n  Object.defineProperty(Messaging.prototype, \"app\", {\n    /**\r\n     * Returns the app associated with this Messaging instance.\r\n     *\r\n     * @return {FirebaseApp} The app associated with this Messaging instance.\r\n     */\n    get: function () {\n      return this.appInternal;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Sends the given message via FCM.\r\n   *\r\n   * @param message The message payload.\r\n   * @param dryRun Whether to send the message in the dry-run\r\n   *   (validation only) mode.\r\n   * @return A promise fulfilled with a unique message ID\r\n   *   string after the message has been successfully handed off to the FCM\r\n   *   service for delivery.\r\n   */\n\n  Messaging.prototype.send = function (message, dryRun) {\n    var _this = this;\n\n    var copy = deep_copy_1.deepCopy(message);\n    messaging_internal_1.validateMessage(copy);\n\n    if (typeof dryRun !== 'undefined' && !validator.isBoolean(dryRun)) {\n      throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_ARGUMENT, 'dryRun must be a boolean');\n    }\n\n    return this.getUrlPath().then(function (urlPath) {\n      var request = {\n        message: copy\n      };\n\n      if (dryRun) {\n        request.validate_only = true;\n      }\n\n      return _this.messagingRequestHandler.invokeRequestHandler(FCM_SEND_HOST, urlPath, request);\n    }).then(function (response) {\n      return response.name;\n    });\n  };\n  /**\r\n   * Sends all the messages in the given array via Firebase Cloud Messaging.\r\n   * Employs batching to send the entire list as a single RPC call. Compared\r\n   * to the `send()` method, this method is a significantly more efficient way\r\n   * to send multiple messages.\r\n   *\r\n   * The responses list obtained from the return value\r\n   * corresponds to the order of tokens in the `MulticastMessage`. An error\r\n   * from this method indicates a total failure -- i.e. none of the messages in\r\n   * the list could be sent. Partial failures are indicated by a `BatchResponse`\r\n   * return value.\r\n   *\r\n   * @param messages A non-empty array\r\n   *   containing up to 500 messages.\r\n   * @param dryRun Whether to send the messages in the dry-run\r\n   *   (validation only) mode.\r\n   * @return A Promise fulfilled with an object representing the result of the\r\n   *   send operation.\r\n   */\n\n\n  Messaging.prototype.sendAll = function (messages, dryRun) {\n    var _this = this;\n\n    if (validator.isArray(messages) && messages.constructor !== Array) {\n      // In more recent JS specs, an array-like object might have a constructor that is not of\n      // Array type. Our deepCopy() method doesn't handle them properly. Convert such objects to\n      // a regular array here before calling deepCopy(). See issue #566 for details.\n      messages = Array.from(messages);\n    }\n\n    var copy = deep_copy_1.deepCopy(messages);\n\n    if (!validator.isNonEmptyArray(copy)) {\n      throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_ARGUMENT, 'messages must be a non-empty array');\n    }\n\n    if (copy.length > FCM_MAX_BATCH_SIZE) {\n      throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_ARGUMENT, \"messages list must not contain more than \" + FCM_MAX_BATCH_SIZE + \" items\");\n    }\n\n    if (typeof dryRun !== 'undefined' && !validator.isBoolean(dryRun)) {\n      throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_ARGUMENT, 'dryRun must be a boolean');\n    }\n\n    return this.getUrlPath().then(function (urlPath) {\n      var requests = copy.map(function (message) {\n        messaging_internal_1.validateMessage(message);\n        var request = {\n          message: message\n        };\n\n        if (dryRun) {\n          request.validate_only = true;\n        }\n\n        return {\n          url: \"https://\" + FCM_SEND_HOST + urlPath,\n          body: request\n        };\n      });\n      return _this.messagingRequestHandler.sendBatchRequest(requests);\n    });\n  };\n  /**\r\n   * Sends the given multicast message to all the FCM registration tokens\r\n   * specified in it.\r\n   *\r\n   * This method uses the `sendAll()` API under the hood to send the given\r\n   * message to all the target recipients. The responses list obtained from the\r\n   * return value corresponds to the order of tokens in the `MulticastMessage`.\r\n   * An error from this method indicates a total failure -- i.e. the message was\r\n   * not sent to any of the tokens in the list. Partial failures are indicated by\r\n   * a `BatchResponse` return value.\r\n   *\r\n   * @param message A multicast message\r\n   *   containing up to 500 tokens.\r\n   * @param dryRun Whether to send the message in the dry-run\r\n   *   (validation only) mode.\r\n   * @return A Promise fulfilled with an object representing the result of the\r\n   *   send operation.\r\n   */\n\n\n  Messaging.prototype.sendMulticast = function (message, dryRun) {\n    var copy = deep_copy_1.deepCopy(message);\n\n    if (!validator.isNonNullObject(copy)) {\n      throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_ARGUMENT, 'MulticastMessage must be a non-null object');\n    }\n\n    if (!validator.isNonEmptyArray(copy.tokens)) {\n      throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_ARGUMENT, 'tokens must be a non-empty array');\n    }\n\n    if (copy.tokens.length > FCM_MAX_BATCH_SIZE) {\n      throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_ARGUMENT, \"tokens list must not contain more than \" + FCM_MAX_BATCH_SIZE + \" items\");\n    }\n\n    var messages = copy.tokens.map(function (token) {\n      return {\n        token: token,\n        android: copy.android,\n        apns: copy.apns,\n        data: copy.data,\n        notification: copy.notification,\n        webpush: copy.webpush,\n        fcmOptions: copy.fcmOptions\n      };\n    });\n    return this.sendAll(messages, dryRun);\n  };\n  /**\r\n   * Sends an FCM message to a single device corresponding to the provided\r\n   * registration token.\r\n   *\r\n   * See\r\n   * [Send to individual devices](/docs/cloud-messaging/admin/legacy-fcm#send_to_individual_devices)\r\n   * for code samples and detailed documentation. Takes either a\r\n   * `registrationToken` to send to a single device or a\r\n   * `registrationTokens` parameter containing an array of tokens to send\r\n   * to multiple devices.\r\n   *\r\n   * @param registrationToken A device registration token or an array of\r\n   *   device registration tokens to which the message should be sent.\r\n   * @param payload The message payload.\r\n   * @param options Optional options to\r\n   *   alter the message.\r\n   *\r\n   * @return A promise fulfilled with the server's response after the message\r\n   *   has been sent.\r\n   */\n\n\n  Messaging.prototype.sendToDevice = function (registrationTokenOrTokens, payload, options) {\n    var _this = this;\n\n    if (options === void 0) {\n      options = {};\n    } // Validate the input argument types. Since these are common developer errors when getting\n    // started, throw an error instead of returning a rejected promise.\n\n\n    this.validateRegistrationTokensType(registrationTokenOrTokens, 'sendToDevice', error_1.MessagingClientErrorCode.INVALID_RECIPIENT);\n    this.validateMessagingPayloadAndOptionsTypes(payload, options);\n    return Promise.resolve().then(function () {\n      // Validate the contents of the input arguments. Because we are now in a promise, any thrown\n      // error will cause this method to return a rejected promise.\n      _this.validateRegistrationTokens(registrationTokenOrTokens, 'sendToDevice', error_1.MessagingClientErrorCode.INVALID_RECIPIENT);\n\n      var payloadCopy = _this.validateMessagingPayload(payload);\n\n      var optionsCopy = _this.validateMessagingOptions(options);\n\n      var request = deep_copy_1.deepCopy(payloadCopy);\n      deep_copy_1.deepExtend(request, optionsCopy);\n\n      if (validator.isString(registrationTokenOrTokens)) {\n        request.to = registrationTokenOrTokens;\n      } else {\n        request.registration_ids = registrationTokenOrTokens;\n      }\n\n      return _this.messagingRequestHandler.invokeRequestHandler(FCM_SEND_HOST, FCM_SEND_PATH, request);\n    }).then(function (response) {\n      // The sendToDevice() and sendToDeviceGroup() methods both set the `to` query parameter in\n      // the underlying FCM request. If the provided registration token argument is actually a\n      // valid notification key, the response from the FCM server will be a device group response.\n      // If that is the case, we map the response to a MessagingDeviceGroupResponse.\n      // See b/35394951 for more context.\n      if ('multicast_id' in response) {\n        return mapRawResponseToDevicesResponse(response);\n      } else {\n        var groupResponse = mapRawResponseToDeviceGroupResponse(response);\n        return __assign(__assign({}, groupResponse), {\n          canonicalRegistrationTokenCount: -1,\n          multicastId: -1,\n          results: []\n        });\n      }\n    });\n  };\n  /**\r\n   * Sends an FCM message to a device group corresponding to the provided\r\n   * notification key.\r\n   *\r\n   * See\r\n   * [Send to a device group](/docs/cloud-messaging/admin/legacy-fcm#send_to_a_device_group)\r\n   * for code samples and detailed documentation.\r\n   *\r\n   * @param notificationKey The notification key for the device group to\r\n   *   which to send the message.\r\n   * @param payload The message payload.\r\n   * @param options Optional options to\r\n   *   alter the message.\r\n   *\r\n   * @return A promise fulfilled with the server's response after the message\r\n   *   has been sent.\r\n   */\n\n\n  Messaging.prototype.sendToDeviceGroup = function (notificationKey, payload, options) {\n    var _this = this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    if (!validator.isNonEmptyString(notificationKey)) {\n      throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_RECIPIENT, 'Notification key provided to sendToDeviceGroup() must be a non-empty string.');\n    } else if (notificationKey.indexOf(':') !== -1) {\n      // It is possible the developer provides a registration token instead of a notification key\n      // to this method. We can detect some of those cases by checking to see if the string contains\n      // a colon. Not all registration tokens will contain a colon (only newer ones will), but no\n      // notification keys will contain a colon, so we can use it as a rough heuristic.\n      // See b/35394951 for more context.\n      return Promise.reject(new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_RECIPIENT, 'Notification key provided to sendToDeviceGroup() has the format of a registration token. ' + 'You should use sendToDevice() instead.'));\n    } // Validate the types of the payload and options arguments. Since these are common developer\n    // errors, throw an error instead of returning a rejected promise.\n\n\n    this.validateMessagingPayloadAndOptionsTypes(payload, options);\n    return Promise.resolve().then(function () {\n      // Validate the contents of the payload and options objects. Because we are now in a\n      // promise, any thrown error will cause this method to return a rejected promise.\n      var payloadCopy = _this.validateMessagingPayload(payload);\n\n      var optionsCopy = _this.validateMessagingOptions(options);\n\n      var request = deep_copy_1.deepCopy(payloadCopy);\n      deep_copy_1.deepExtend(request, optionsCopy);\n      request.to = notificationKey;\n      return _this.messagingRequestHandler.invokeRequestHandler(FCM_SEND_HOST, FCM_SEND_PATH, request);\n    }).then(function (response) {\n      // The sendToDevice() and sendToDeviceGroup() methods both set the `to` query parameter in\n      // the underlying FCM request. If the provided notification key argument has an invalid\n      // format (that is, it is either a registration token or some random string), the response\n      // from the FCM server will default to a devices response (which we detect by looking for\n      // the `multicast_id` property). If that is the case, we either throw an error saying the\n      // provided notification key is invalid (if the message failed to send) or map the response\n      // to a MessagingDevicesResponse (if the message succeeded).\n      // See b/35394951 for more context.\n      if ('multicast_id' in response) {\n        if (response.success === 0) {\n          throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_RECIPIENT, 'Notification key provided to sendToDeviceGroup() is invalid.');\n        } else {\n          var devicesResponse = mapRawResponseToDevicesResponse(response);\n          return __assign(__assign({}, devicesResponse), {\n            failedRegistrationTokens: []\n          });\n        }\n      }\n\n      return mapRawResponseToDeviceGroupResponse(response);\n    });\n  };\n  /**\r\n   * Sends an FCM message to a topic.\r\n   *\r\n   * See\r\n   * [Send to a topic](/docs/cloud-messaging/admin/legacy-fcm#send_to_a_topic)\r\n   * for code samples and detailed documentation.\r\n   *\r\n   * @param topic The topic to which to send the message.\r\n   * @param payload The message payload.\r\n   * @param options Optional options to\r\n   *   alter the message.\r\n   *\r\n   * @return A promise fulfilled with the server's response after the message\r\n   *   has been sent.\r\n   */\n\n\n  Messaging.prototype.sendToTopic = function (topic, payload, options) {\n    var _this = this;\n\n    if (options === void 0) {\n      options = {};\n    } // Validate the input argument types. Since these are common developer errors when getting\n    // started, throw an error instead of returning a rejected promise.\n\n\n    this.validateTopicType(topic, 'sendToTopic', error_1.MessagingClientErrorCode.INVALID_RECIPIENT);\n    this.validateMessagingPayloadAndOptionsTypes(payload, options); // Prepend the topic with /topics/ if necessary.\n\n    topic = this.normalizeTopic(topic);\n    return Promise.resolve().then(function () {\n      // Validate the contents of the payload and options objects. Because we are now in a\n      // promise, any thrown error will cause this method to return a rejected promise.\n      var payloadCopy = _this.validateMessagingPayload(payload);\n\n      var optionsCopy = _this.validateMessagingOptions(options);\n\n      _this.validateTopic(topic, 'sendToTopic', error_1.MessagingClientErrorCode.INVALID_RECIPIENT);\n\n      var request = deep_copy_1.deepCopy(payloadCopy);\n      deep_copy_1.deepExtend(request, optionsCopy);\n      request.to = topic;\n      return _this.messagingRequestHandler.invokeRequestHandler(FCM_SEND_HOST, FCM_SEND_PATH, request);\n    }).then(function (response) {\n      // Rename properties on the server response\n      utils.renameProperties(response, MESSAGING_TOPIC_RESPONSE_KEYS_MAP);\n      return response;\n    });\n  };\n  /**\r\n   * Sends an FCM message to a condition.\r\n   *\r\n   * See\r\n   * [Send to a condition](/docs/cloud-messaging/admin/legacy-fcm#send_to_a_condition)\r\n   * for code samples and detailed documentation.\r\n   *\r\n   * @param condition The condition determining to which topics to send\r\n   *   the message.\r\n   * @param payload The message payload.\r\n   * @param options Optional options to\r\n   *   alter the message.\r\n   *\r\n   * @return A promise fulfilled with the server's response after the message\r\n   *   has been sent.\r\n   */\n\n\n  Messaging.prototype.sendToCondition = function (condition, payload, options) {\n    var _this = this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    if (!validator.isNonEmptyString(condition)) {\n      throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_RECIPIENT, 'Condition provided to sendToCondition() must be a non-empty string.');\n    } // Validate the types of the payload and options arguments. Since these are common developer\n    // errors, throw an error instead of returning a rejected promise.\n\n\n    this.validateMessagingPayloadAndOptionsTypes(payload, options); // The FCM server rejects conditions which are surrounded in single quotes. When the condition\n    // is stringified over the wire, double quotes in it get converted to \\\" which the FCM server\n    // does not properly handle. We can get around this by replacing internal double quotes with\n    // single quotes.\n\n    condition = condition.replace(/\"/g, '\\'');\n    return Promise.resolve().then(function () {\n      // Validate the contents of the payload and options objects. Because we are now in a\n      // promise, any thrown error will cause this method to return a rejected promise.\n      var payloadCopy = _this.validateMessagingPayload(payload);\n\n      var optionsCopy = _this.validateMessagingOptions(options);\n\n      var request = deep_copy_1.deepCopy(payloadCopy);\n      deep_copy_1.deepExtend(request, optionsCopy);\n      request.condition = condition;\n      return _this.messagingRequestHandler.invokeRequestHandler(FCM_SEND_HOST, FCM_SEND_PATH, request);\n    }).then(function (response) {\n      // Rename properties on the server response\n      utils.renameProperties(response, MESSAGING_CONDITION_RESPONSE_KEYS_MAP);\n      return response;\n    });\n  };\n  /**\r\n   * Subscribes a device to an FCM topic.\r\n   *\r\n   * See [Subscribe to a\r\n   * topic](/docs/cloud-messaging/manage-topics#suscribe_and_unsubscribe_using_the)\r\n   * for code samples and detailed documentation. Optionally, you can provide an\r\n   * array of tokens to subscribe multiple devices.\r\n   *\r\n   * @param registrationTokens A token or array of registration tokens\r\n   *   for the devices to subscribe to the topic.\r\n   * @param topic The topic to which to subscribe.\r\n   *\r\n   * @return A promise fulfilled with the server's response after the device has been\r\n   *   subscribed to the topic.\r\n   */\n\n\n  Messaging.prototype.subscribeToTopic = function (registrationTokenOrTokens, topic) {\n    return this.sendTopicManagementRequest(registrationTokenOrTokens, topic, 'subscribeToTopic', FCM_TOPIC_MANAGEMENT_ADD_PATH);\n  };\n  /**\r\n   * Unsubscribes a device from an FCM topic.\r\n   *\r\n   * See [Unsubscribe from a\r\n   * topic](/docs/cloud-messaging/admin/manage-topic-subscriptions#unsubscribe_from_a_topic)\r\n   * for code samples and detailed documentation.  Optionally, you can provide an\r\n   * array of tokens to unsubscribe multiple devices.\r\n   *\r\n   * @param registrationTokens A device registration token or an array of\r\n   *   device registration tokens to unsubscribe from the topic.\r\n   * @param topic The topic from which to unsubscribe.\r\n   *\r\n   * @return A promise fulfilled with the server's response after the device has been\r\n   *   unsubscribed from the topic.\r\n   */\n\n\n  Messaging.prototype.unsubscribeFromTopic = function (registrationTokenOrTokens, topic) {\n    return this.sendTopicManagementRequest(registrationTokenOrTokens, topic, 'unsubscribeFromTopic', FCM_TOPIC_MANAGEMENT_REMOVE_PATH);\n  };\n\n  Messaging.prototype.getUrlPath = function () {\n    var _this = this;\n\n    if (this.urlPath) {\n      return Promise.resolve(this.urlPath);\n    }\n\n    return utils.findProjectId(this.app).then(function (projectId) {\n      if (!validator.isNonEmptyString(projectId)) {\n        // Assert for an explicit project ID (either via AppOptions or the cert itself).\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_ARGUMENT, 'Failed to determine project ID for Messaging. Initialize the ' + 'SDK with service account credentials or set project ID as an app option. ' + 'Alternatively set the GOOGLE_CLOUD_PROJECT environment variable.');\n      }\n\n      _this.urlPath = \"/v1/projects/\" + projectId + \"/messages:send\";\n      return _this.urlPath;\n    });\n  };\n  /**\r\n   * Helper method which sends and handles topic subscription management requests.\r\n   *\r\n   * @param {string|string[]} registrationTokenOrTokens The registration token or an array of\r\n   *     registration tokens to unsubscribe from the topic.\r\n   * @param {string} topic The topic to which to subscribe.\r\n   * @param {string} methodName The name of the original method called.\r\n   * @param {string} path The endpoint path to use for the request.\r\n   *\r\n   * @return {Promise<MessagingTopicManagementResponse>} A Promise fulfilled with the parsed server\r\n   *   response.\r\n   */\n\n\n  Messaging.prototype.sendTopicManagementRequest = function (registrationTokenOrTokens, topic, methodName, path) {\n    var _this = this;\n\n    this.validateRegistrationTokensType(registrationTokenOrTokens, methodName);\n    this.validateTopicType(topic, methodName); // Prepend the topic with /topics/ if necessary.\n\n    topic = this.normalizeTopic(topic);\n    return Promise.resolve().then(function () {\n      // Validate the contents of the input arguments. Because we are now in a promise, any thrown\n      // error will cause this method to return a rejected promise.\n      _this.validateRegistrationTokens(registrationTokenOrTokens, methodName);\n\n      _this.validateTopic(topic, methodName); // Ensure the registration token(s) input argument is an array.\n\n\n      var registrationTokensArray = registrationTokenOrTokens;\n\n      if (validator.isString(registrationTokenOrTokens)) {\n        registrationTokensArray = [registrationTokenOrTokens];\n      }\n\n      var request = {\n        to: topic,\n        registration_tokens: registrationTokensArray\n      };\n      return _this.messagingRequestHandler.invokeRequestHandler(FCM_TOPIC_MANAGEMENT_HOST, path, request);\n    }).then(function (response) {\n      return mapRawResponseToTopicManagementResponse(response);\n    });\n  };\n  /**\r\n   * Validates the types of the messaging payload and options. If invalid, an error will be thrown.\r\n   *\r\n   * @param {MessagingPayload} payload The messaging payload to validate.\r\n   * @param {MessagingOptions} options The messaging options to validate.\r\n   */\n\n\n  Messaging.prototype.validateMessagingPayloadAndOptionsTypes = function (payload, options) {\n    // Validate the payload is an object\n    if (!validator.isNonNullObject(payload)) {\n      throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'Messaging payload must be an object with at least one of the \"data\" or \"notification\" properties.');\n    } // Validate the options argument is an object\n\n\n    if (!validator.isNonNullObject(options)) {\n      throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_OPTIONS, 'Messaging options must be an object.');\n    }\n  };\n  /**\r\n   * Validates the messaging payload. If invalid, an error will be thrown.\r\n   *\r\n   * @param {MessagingPayload} payload The messaging payload to validate.\r\n   *\r\n   * @return {MessagingPayload} A copy of the provided payload with whitelisted properties switched\r\n   *     from camelCase to underscore_case.\r\n   */\n\n\n  Messaging.prototype.validateMessagingPayload = function (payload) {\n    var payloadCopy = deep_copy_1.deepCopy(payload);\n    var payloadKeys = Object.keys(payloadCopy);\n    var validPayloadKeys = ['data', 'notification'];\n    var containsDataOrNotificationKey = false;\n    payloadKeys.forEach(function (payloadKey) {\n      // Validate the payload does not contain any invalid keys\n      if (validPayloadKeys.indexOf(payloadKey) === -1) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, \"Messaging payload contains an invalid \\\"\" + payloadKey + \"\\\" property. Valid properties are \" + '\"data\" and \"notification\".');\n      } else {\n        containsDataOrNotificationKey = true;\n      }\n    }); // Validate the payload contains at least one of the \"data\" and \"notification\" keys\n\n    if (!containsDataOrNotificationKey) {\n      throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'Messaging payload must contain at least one of the \"data\" or \"notification\" properties.');\n    }\n\n    var validatePayload = function (payloadKey, value) {\n      // Validate each top-level key in the payload is an object\n      if (!validator.isNonNullObject(value)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, \"Messaging payload contains an invalid value for the \\\"\" + payloadKey + \"\\\" property. \" + 'Value must be an object.');\n      }\n\n      Object.keys(value).forEach(function (subKey) {\n        if (!validator.isString(value[subKey])) {\n          // Validate all sub-keys have a string value\n          throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, \"Messaging payload contains an invalid value for the \\\"\" + payloadKey + \".\" + subKey + \"\\\" \" + 'property. Values must be strings.');\n        } else if (payloadKey === 'data' && /^google\\./.test(subKey)) {\n          // Validate the data payload does not contain keys which start with 'google.'.\n          throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, \"Messaging payload contains the blacklisted \\\"data.\" + subKey + \"\\\" property.\");\n        }\n      });\n    };\n\n    if (payloadCopy.data !== undefined) {\n      validatePayload('data', payloadCopy.data);\n    }\n\n    if (payloadCopy.notification !== undefined) {\n      validatePayload('notification', payloadCopy.notification);\n    } // Validate the data payload object does not contain blacklisted properties\n\n\n    if ('data' in payloadCopy) {\n      messaging_internal_1.BLACKLISTED_DATA_PAYLOAD_KEYS.forEach(function (blacklistedKey) {\n        if (blacklistedKey in payloadCopy.data) {\n          throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, \"Messaging payload contains the blacklisted \\\"data.\" + blacklistedKey + \"\\\" property.\");\n        }\n      });\n    } // Convert whitelisted camelCase keys to underscore_case\n\n\n    if (payloadCopy.notification) {\n      utils.renameProperties(payloadCopy.notification, CAMELCASED_NOTIFICATION_PAYLOAD_KEYS_MAP);\n    }\n\n    return payloadCopy;\n  };\n  /**\r\n   * Validates the messaging options. If invalid, an error will be thrown.\r\n   *\r\n   * @param {MessagingOptions} options The messaging options to validate.\r\n   *\r\n   * @return {MessagingOptions} A copy of the provided options with whitelisted properties switched\r\n   *   from camelCase to underscore_case.\r\n   */\n\n\n  Messaging.prototype.validateMessagingOptions = function (options) {\n    var optionsCopy = deep_copy_1.deepCopy(options); // Validate the options object does not contain blacklisted properties\n\n    messaging_internal_1.BLACKLISTED_OPTIONS_KEYS.forEach(function (blacklistedKey) {\n      if (blacklistedKey in optionsCopy) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_OPTIONS, \"Messaging options contains the blacklisted \\\"\" + blacklistedKey + \"\\\" property.\");\n      }\n    }); // Convert whitelisted camelCase keys to underscore_case\n\n    utils.renameProperties(optionsCopy, CAMELCASE_OPTIONS_KEYS_MAP); // Validate the options object contains valid values for whitelisted properties\n\n    if ('collapse_key' in optionsCopy && !validator.isNonEmptyString(optionsCopy.collapse_key)) {\n      var keyName = 'collapseKey' in options ? 'collapseKey' : 'collapse_key';\n      throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_OPTIONS, \"Messaging options contains an invalid value for the \\\"\" + keyName + \"\\\" property. Value must \" + 'be a non-empty string.');\n    } else if ('dry_run' in optionsCopy && !validator.isBoolean(optionsCopy.dry_run)) {\n      var keyName = 'dryRun' in options ? 'dryRun' : 'dry_run';\n      throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_OPTIONS, \"Messaging options contains an invalid value for the \\\"\" + keyName + \"\\\" property. Value must \" + 'be a boolean.');\n    } else if ('priority' in optionsCopy && !validator.isNonEmptyString(optionsCopy.priority)) {\n      throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_OPTIONS, 'Messaging options contains an invalid value for the \"priority\" property. Value must ' + 'be a non-empty string.');\n    } else if ('restricted_package_name' in optionsCopy && !validator.isNonEmptyString(optionsCopy.restricted_package_name)) {\n      var keyName = 'restrictedPackageName' in options ? 'restrictedPackageName' : 'restricted_package_name';\n      throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_OPTIONS, \"Messaging options contains an invalid value for the \\\"\" + keyName + \"\\\" property. Value must \" + 'be a non-empty string.');\n    } else if ('time_to_live' in optionsCopy && !validator.isNumber(optionsCopy.time_to_live)) {\n      var keyName = 'timeToLive' in options ? 'timeToLive' : 'time_to_live';\n      throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_OPTIONS, \"Messaging options contains an invalid value for the \\\"\" + keyName + \"\\\" property. Value must \" + 'be a number.');\n    } else if ('content_available' in optionsCopy && !validator.isBoolean(optionsCopy.content_available)) {\n      var keyName = 'contentAvailable' in options ? 'contentAvailable' : 'content_available';\n      throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_OPTIONS, \"Messaging options contains an invalid value for the \\\"\" + keyName + \"\\\" property. Value must \" + 'be a boolean.');\n    } else if ('mutable_content' in optionsCopy && !validator.isBoolean(optionsCopy.mutable_content)) {\n      var keyName = 'mutableContent' in options ? 'mutableContent' : 'mutable_content';\n      throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_OPTIONS, \"Messaging options contains an invalid value for the \\\"\" + keyName + \"\\\" property. Value must \" + 'be a boolean.');\n    }\n\n    return optionsCopy;\n  };\n  /**\r\n   * Validates the type of the provided registration token(s). If invalid, an error will be thrown.\r\n   *\r\n   * @param {string|string[]} registrationTokenOrTokens The registration token(s) to validate.\r\n   * @param {string} method The method name to use in error messages.\r\n   * @param {ErrorInfo?} [errorInfo] The error info to use if the registration tokens are invalid.\r\n   */\n\n\n  Messaging.prototype.validateRegistrationTokensType = function (registrationTokenOrTokens, methodName, errorInfo) {\n    if (errorInfo === void 0) {\n      errorInfo = error_1.MessagingClientErrorCode.INVALID_ARGUMENT;\n    }\n\n    if (!validator.isNonEmptyArray(registrationTokenOrTokens) && !validator.isNonEmptyString(registrationTokenOrTokens)) {\n      throw new error_1.FirebaseMessagingError(errorInfo, \"Registration token(s) provided to \" + methodName + \"() must be a non-empty string or a \" + 'non-empty array.');\n    }\n  };\n  /**\r\n   * Validates the provided registration tokens. If invalid, an error will be thrown.\r\n   *\r\n   * @param {string|string[]} registrationTokenOrTokens The registration token or an array of\r\n   *     registration tokens to validate.\r\n   * @param {string} method The method name to use in error messages.\r\n   * @param {errorInfo?} [ErrorInfo] The error info to use if the registration tokens are invalid.\r\n   */\n\n\n  Messaging.prototype.validateRegistrationTokens = function (registrationTokenOrTokens, methodName, errorInfo) {\n    if (errorInfo === void 0) {\n      errorInfo = error_1.MessagingClientErrorCode.INVALID_ARGUMENT;\n    }\n\n    if (validator.isArray(registrationTokenOrTokens)) {\n      // Validate the array contains no more than 1,000 registration tokens.\n      if (registrationTokenOrTokens.length > 1000) {\n        throw new error_1.FirebaseMessagingError(errorInfo, \"Too many registration tokens provided in a single request to \" + methodName + \"(). Batch \" + 'your requests to contain no more than 1,000 registration tokens per request.');\n      } // Validate the array contains registration tokens which are non-empty strings.\n\n\n      registrationTokenOrTokens.forEach(function (registrationToken, index) {\n        if (!validator.isNonEmptyString(registrationToken)) {\n          throw new error_1.FirebaseMessagingError(errorInfo, \"Registration token provided to \" + methodName + \"() at index \" + index + \" must be a \" + 'non-empty string.');\n        }\n      });\n    }\n  };\n  /**\r\n   * Validates the type of the provided topic. If invalid, an error will be thrown.\r\n   *\r\n   * @param {string} topic The topic to validate.\r\n   * @param {string} method The method name to use in error messages.\r\n   * @param {ErrorInfo?} [errorInfo] The error info to use if the topic is invalid.\r\n   */\n\n\n  Messaging.prototype.validateTopicType = function (topic, methodName, errorInfo) {\n    if (errorInfo === void 0) {\n      errorInfo = error_1.MessagingClientErrorCode.INVALID_ARGUMENT;\n    }\n\n    if (!validator.isNonEmptyString(topic)) {\n      throw new error_1.FirebaseMessagingError(errorInfo, \"Topic provided to \" + methodName + \"() must be a string which matches the format \" + '\"/topics/[a-zA-Z0-9-_.~%]+\".');\n    }\n  };\n  /**\r\n   * Validates the provided topic. If invalid, an error will be thrown.\r\n   *\r\n   * @param {string} topic The topic to validate.\r\n   * @param {string} method The method name to use in error messages.\r\n   * @param {ErrorInfo?} [errorInfo] The error info to use if the topic is invalid.\r\n   */\n\n\n  Messaging.prototype.validateTopic = function (topic, methodName, errorInfo) {\n    if (errorInfo === void 0) {\n      errorInfo = error_1.MessagingClientErrorCode.INVALID_ARGUMENT;\n    }\n\n    if (!validator.isTopic(topic)) {\n      throw new error_1.FirebaseMessagingError(errorInfo, \"Topic provided to \" + methodName + \"() must be a string which matches the format \" + '\"/topics/[a-zA-Z0-9-_.~%]+\".');\n    }\n  };\n  /**\r\n   * Normalizes the provided topic name by prepending it with '/topics/', if necessary.\r\n   *\r\n   * @param {string} topic The topic name to normalize.\r\n   *\r\n   * @return {string} The normalized topic name.\r\n   */\n\n\n  Messaging.prototype.normalizeTopic = function (topic) {\n    if (!/^\\/topics\\//.test(topic)) {\n      topic = \"/topics/\" + topic;\n    }\n\n    return topic;\n  };\n\n  return Messaging;\n}();\n\nexports.Messaging = Messaging;","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Backend/node_modules/firebase-admin/lib/messaging/messaging.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","defineProperty","exports","value","Messaging","deep_copy_1","require","messaging_internal_1","messaging_api_request_internal_1","error_1","utils","validator","FCM_SEND_HOST","FCM_SEND_PATH","FCM_TOPIC_MANAGEMENT_HOST","FCM_TOPIC_MANAGEMENT_ADD_PATH","FCM_TOPIC_MANAGEMENT_REMOVE_PATH","FCM_MAX_BATCH_SIZE","CAMELCASED_NOTIFICATION_PAYLOAD_KEYS_MAP","bodyLocArgs","bodyLocKey","clickAction","titleLocArgs","titleLocKey","CAMELCASE_OPTIONS_KEYS_MAP","dryRun","timeToLive","collapseKey","mutableContent","contentAvailable","restrictedPackageName","MESSAGING_DEVICE_RESULT_KEYS_MAP","message_id","registration_id","MESSAGING_DEVICES_RESPONSE_KEYS_MAP","canonical_ids","failure","success","multicast_id","MESSAGING_DEVICE_GROUP_RESPONSE_KEYS_MAP","failed_registration_ids","MESSAGING_TOPIC_RESPONSE_KEYS_MAP","MESSAGING_CONDITION_RESPONSE_KEYS_MAP","mapRawResponseToDevicesResponse","response","renameProperties","results","forEach","messagingDeviceResult","newError","FirebaseMessagingError","fromServerError","error","undefined","mapRawResponseToDeviceGroupResponse","failedRegistrationTokens","mapRawResponseToTopicManagementResponse","result","successCount","failureCount","errors","tokenManagementResult","index","fromTopicManagementServerError","push","MessagingInternals","delete","Promise","resolve","app","INTERNAL","isNonNullObject","MessagingClientErrorCode","INVALID_ARGUMENT","appInternal","messagingRequestHandler","FirebaseMessagingRequestHandler","get","enumerable","configurable","send","message","_this","copy","deepCopy","validateMessage","isBoolean","getUrlPath","then","urlPath","request","validate_only","invokeRequestHandler","name","sendAll","messages","isArray","constructor","Array","from","isNonEmptyArray","requests","map","url","body","sendBatchRequest","sendMulticast","tokens","token","android","apns","data","notification","webpush","fcmOptions","sendToDevice","registrationTokenOrTokens","payload","options","validateRegistrationTokensType","INVALID_RECIPIENT","validateMessagingPayloadAndOptionsTypes","validateRegistrationTokens","payloadCopy","validateMessagingPayload","optionsCopy","validateMessagingOptions","deepExtend","isString","to","registration_ids","groupResponse","canonicalRegistrationTokenCount","multicastId","sendToDeviceGroup","notificationKey","isNonEmptyString","indexOf","reject","devicesResponse","sendToTopic","topic","validateTopicType","normalizeTopic","validateTopic","sendToCondition","condition","replace","subscribeToTopic","sendTopicManagementRequest","unsubscribeFromTopic","findProjectId","projectId","methodName","path","registrationTokensArray","registration_tokens","INVALID_PAYLOAD","INVALID_OPTIONS","payloadKeys","keys","validPayloadKeys","containsDataOrNotificationKey","payloadKey","validatePayload","subKey","test","BLACKLISTED_DATA_PAYLOAD_KEYS","blacklistedKey","BLACKLISTED_OPTIONS_KEYS","collapse_key","keyName","dry_run","priority","restricted_package_name","isNumber","time_to_live","content_available","mutable_content","errorInfo","registrationToken","isTopic"],"mappings":"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","sourcesContent":["/*! firebase-admin v9.4.2 */\r\n\"use strict\";\r\n/*!\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Messaging = void 0;\r\nvar deep_copy_1 = require(\"../utils/deep-copy\");\r\nvar messaging_internal_1 = require(\"./messaging-internal\");\r\nvar messaging_api_request_internal_1 = require(\"./messaging-api-request-internal\");\r\nvar error_1 = require(\"../utils/error\");\r\nvar utils = require(\"../utils\");\r\nvar validator = require(\"../utils/validator\");\r\n/* eslint-disable @typescript-eslint/camelcase */\r\n// FCM endpoints\r\nvar FCM_SEND_HOST = 'fcm.googleapis.com';\r\nvar FCM_SEND_PATH = '/fcm/send';\r\nvar FCM_TOPIC_MANAGEMENT_HOST = 'iid.googleapis.com';\r\nvar FCM_TOPIC_MANAGEMENT_ADD_PATH = '/iid/v1:batchAdd';\r\nvar FCM_TOPIC_MANAGEMENT_REMOVE_PATH = '/iid/v1:batchRemove';\r\n// Maximum messages that can be included in a batch request.\r\nvar FCM_MAX_BATCH_SIZE = 500;\r\n// Key renames for the messaging notification payload object.\r\nvar CAMELCASED_NOTIFICATION_PAYLOAD_KEYS_MAP = {\r\n    bodyLocArgs: 'body_loc_args',\r\n    bodyLocKey: 'body_loc_key',\r\n    clickAction: 'click_action',\r\n    titleLocArgs: 'title_loc_args',\r\n    titleLocKey: 'title_loc_key',\r\n};\r\n// Key renames for the messaging options object.\r\nvar CAMELCASE_OPTIONS_KEYS_MAP = {\r\n    dryRun: 'dry_run',\r\n    timeToLive: 'time_to_live',\r\n    collapseKey: 'collapse_key',\r\n    mutableContent: 'mutable_content',\r\n    contentAvailable: 'content_available',\r\n    restrictedPackageName: 'restricted_package_name',\r\n};\r\n// Key renames for the MessagingDeviceResult object.\r\nvar MESSAGING_DEVICE_RESULT_KEYS_MAP = {\r\n    message_id: 'messageId',\r\n    registration_id: 'canonicalRegistrationToken',\r\n};\r\n// Key renames for the MessagingDevicesResponse object.\r\nvar MESSAGING_DEVICES_RESPONSE_KEYS_MAP = {\r\n    canonical_ids: 'canonicalRegistrationTokenCount',\r\n    failure: 'failureCount',\r\n    success: 'successCount',\r\n    multicast_id: 'multicastId',\r\n};\r\n// Key renames for the MessagingDeviceGroupResponse object.\r\nvar MESSAGING_DEVICE_GROUP_RESPONSE_KEYS_MAP = {\r\n    success: 'successCount',\r\n    failure: 'failureCount',\r\n    failed_registration_ids: 'failedRegistrationTokens',\r\n};\r\n// Key renames for the MessagingTopicResponse object.\r\nvar MESSAGING_TOPIC_RESPONSE_KEYS_MAP = {\r\n    message_id: 'messageId',\r\n};\r\n// Key renames for the MessagingConditionResponse object.\r\nvar MESSAGING_CONDITION_RESPONSE_KEYS_MAP = {\r\n    message_id: 'messageId',\r\n};\r\n/**\r\n * Maps a raw FCM server response to a MessagingDevicesResponse object.\r\n *\r\n * @param {object} response The raw FCM server response to map.\r\n *\r\n * @return {MessagingDeviceGroupResponse} The mapped MessagingDevicesResponse object.\r\n */\r\nfunction mapRawResponseToDevicesResponse(response) {\r\n    // Rename properties on the server response\r\n    utils.renameProperties(response, MESSAGING_DEVICES_RESPONSE_KEYS_MAP);\r\n    if ('results' in response) {\r\n        response.results.forEach(function (messagingDeviceResult) {\r\n            utils.renameProperties(messagingDeviceResult, MESSAGING_DEVICE_RESULT_KEYS_MAP);\r\n            // Map the FCM server's error strings to actual error objects.\r\n            if ('error' in messagingDeviceResult) {\r\n                var newError = error_1.FirebaseMessagingError.fromServerError(messagingDeviceResult.error, /* message */ undefined, messagingDeviceResult.error);\r\n                messagingDeviceResult.error = newError;\r\n            }\r\n        });\r\n    }\r\n    return response;\r\n}\r\n/**\r\n * Maps a raw FCM server response to a MessagingDeviceGroupResponse object.\r\n *\r\n * @param {object} response The raw FCM server response to map.\r\n *\r\n * @return {MessagingDeviceGroupResponse} The mapped MessagingDeviceGroupResponse object.\r\n */\r\nfunction mapRawResponseToDeviceGroupResponse(response) {\r\n    // Rename properties on the server response\r\n    utils.renameProperties(response, MESSAGING_DEVICE_GROUP_RESPONSE_KEYS_MAP);\r\n    // Add the 'failedRegistrationTokens' property if it does not exist on the response, which\r\n    // it won't when the 'failureCount' property has a value of 0)\r\n    response.failedRegistrationTokens = response.failedRegistrationTokens || [];\r\n    return response;\r\n}\r\n/**\r\n * Maps a raw FCM server response to a MessagingTopicManagementResponse object.\r\n *\r\n * @param {object} response The raw FCM server response to map.\r\n *\r\n * @return {MessagingTopicManagementResponse} The mapped MessagingTopicManagementResponse object.\r\n */\r\nfunction mapRawResponseToTopicManagementResponse(response) {\r\n    // Add the success and failure counts.\r\n    var result = {\r\n        successCount: 0,\r\n        failureCount: 0,\r\n        errors: [],\r\n    };\r\n    if ('results' in response) {\r\n        response.results.forEach(function (tokenManagementResult, index) {\r\n            // Map the FCM server's error strings to actual error objects.\r\n            if ('error' in tokenManagementResult) {\r\n                result.failureCount += 1;\r\n                var newError = error_1.FirebaseMessagingError.fromTopicManagementServerError(tokenManagementResult.error, /* message */ undefined, tokenManagementResult.error);\r\n                result.errors.push({\r\n                    index: index,\r\n                    error: newError,\r\n                });\r\n            }\r\n            else {\r\n                result.successCount += 1;\r\n            }\r\n        });\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Internals of a Messaging instance.\r\n */\r\nvar MessagingInternals = /** @class */ (function () {\r\n    function MessagingInternals() {\r\n    }\r\n    /**\r\n     * Deletes the service and its associated resources.\r\n     *\r\n     * @return {Promise<()>} An empty Promise that will be fulfilled when the service is deleted.\r\n     */\r\n    MessagingInternals.prototype.delete = function () {\r\n        // There are no resources to clean up.\r\n        return Promise.resolve(undefined);\r\n    };\r\n    return MessagingInternals;\r\n}());\r\n/**\r\n * Messaging service bound to the provided app.\r\n */\r\nvar Messaging = /** @class */ (function () {\r\n    /**\r\n     * Gets the {@link messaging.Messaging `Messaging`} service for the\r\n     * current app.\r\n     *\r\n     * @example\r\n     * ```javascript\r\n     * var messaging = app.messaging();\r\n     * // The above is shorthand for:\r\n     * // var messaging = admin.messaging(app);\r\n     * ```\r\n     *\r\n     * @return The `Messaging` service for the current app.\r\n     */\r\n    function Messaging(app) {\r\n        this.INTERNAL = new MessagingInternals();\r\n        if (!validator.isNonNullObject(app) || !('options' in app)) {\r\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_ARGUMENT, 'First argument passed to admin.messaging() must be a valid Firebase app instance.');\r\n        }\r\n        this.appInternal = app;\r\n        this.messagingRequestHandler = new messaging_api_request_internal_1.FirebaseMessagingRequestHandler(app);\r\n    }\r\n    Object.defineProperty(Messaging.prototype, \"app\", {\r\n        /**\r\n         * Returns the app associated with this Messaging instance.\r\n         *\r\n         * @return {FirebaseApp} The app associated with this Messaging instance.\r\n         */\r\n        get: function () {\r\n            return this.appInternal;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Sends the given message via FCM.\r\n     *\r\n     * @param message The message payload.\r\n     * @param dryRun Whether to send the message in the dry-run\r\n     *   (validation only) mode.\r\n     * @return A promise fulfilled with a unique message ID\r\n     *   string after the message has been successfully handed off to the FCM\r\n     *   service for delivery.\r\n     */\r\n    Messaging.prototype.send = function (message, dryRun) {\r\n        var _this = this;\r\n        var copy = deep_copy_1.deepCopy(message);\r\n        messaging_internal_1.validateMessage(copy);\r\n        if (typeof dryRun !== 'undefined' && !validator.isBoolean(dryRun)) {\r\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_ARGUMENT, 'dryRun must be a boolean');\r\n        }\r\n        return this.getUrlPath()\r\n            .then(function (urlPath) {\r\n            var request = { message: copy };\r\n            if (dryRun) {\r\n                request.validate_only = true;\r\n            }\r\n            return _this.messagingRequestHandler.invokeRequestHandler(FCM_SEND_HOST, urlPath, request);\r\n        })\r\n            .then(function (response) {\r\n            return response.name;\r\n        });\r\n    };\r\n    /**\r\n     * Sends all the messages in the given array via Firebase Cloud Messaging.\r\n     * Employs batching to send the entire list as a single RPC call. Compared\r\n     * to the `send()` method, this method is a significantly more efficient way\r\n     * to send multiple messages.\r\n     *\r\n     * The responses list obtained from the return value\r\n     * corresponds to the order of tokens in the `MulticastMessage`. An error\r\n     * from this method indicates a total failure -- i.e. none of the messages in\r\n     * the list could be sent. Partial failures are indicated by a `BatchResponse`\r\n     * return value.\r\n     *\r\n     * @param messages A non-empty array\r\n     *   containing up to 500 messages.\r\n     * @param dryRun Whether to send the messages in the dry-run\r\n     *   (validation only) mode.\r\n     * @return A Promise fulfilled with an object representing the result of the\r\n     *   send operation.\r\n     */\r\n    Messaging.prototype.sendAll = function (messages, dryRun) {\r\n        var _this = this;\r\n        if (validator.isArray(messages) && messages.constructor !== Array) {\r\n            // In more recent JS specs, an array-like object might have a constructor that is not of\r\n            // Array type. Our deepCopy() method doesn't handle them properly. Convert such objects to\r\n            // a regular array here before calling deepCopy(). See issue #566 for details.\r\n            messages = Array.from(messages);\r\n        }\r\n        var copy = deep_copy_1.deepCopy(messages);\r\n        if (!validator.isNonEmptyArray(copy)) {\r\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_ARGUMENT, 'messages must be a non-empty array');\r\n        }\r\n        if (copy.length > FCM_MAX_BATCH_SIZE) {\r\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_ARGUMENT, \"messages list must not contain more than \" + FCM_MAX_BATCH_SIZE + \" items\");\r\n        }\r\n        if (typeof dryRun !== 'undefined' && !validator.isBoolean(dryRun)) {\r\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_ARGUMENT, 'dryRun must be a boolean');\r\n        }\r\n        return this.getUrlPath()\r\n            .then(function (urlPath) {\r\n            var requests = copy.map(function (message) {\r\n                messaging_internal_1.validateMessage(message);\r\n                var request = { message: message };\r\n                if (dryRun) {\r\n                    request.validate_only = true;\r\n                }\r\n                return {\r\n                    url: \"https://\" + FCM_SEND_HOST + urlPath,\r\n                    body: request,\r\n                };\r\n            });\r\n            return _this.messagingRequestHandler.sendBatchRequest(requests);\r\n        });\r\n    };\r\n    /**\r\n     * Sends the given multicast message to all the FCM registration tokens\r\n     * specified in it.\r\n     *\r\n     * This method uses the `sendAll()` API under the hood to send the given\r\n     * message to all the target recipients. The responses list obtained from the\r\n     * return value corresponds to the order of tokens in the `MulticastMessage`.\r\n     * An error from this method indicates a total failure -- i.e. the message was\r\n     * not sent to any of the tokens in the list. Partial failures are indicated by\r\n     * a `BatchResponse` return value.\r\n     *\r\n     * @param message A multicast message\r\n     *   containing up to 500 tokens.\r\n     * @param dryRun Whether to send the message in the dry-run\r\n     *   (validation only) mode.\r\n     * @return A Promise fulfilled with an object representing the result of the\r\n     *   send operation.\r\n     */\r\n    Messaging.prototype.sendMulticast = function (message, dryRun) {\r\n        var copy = deep_copy_1.deepCopy(message);\r\n        if (!validator.isNonNullObject(copy)) {\r\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_ARGUMENT, 'MulticastMessage must be a non-null object');\r\n        }\r\n        if (!validator.isNonEmptyArray(copy.tokens)) {\r\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_ARGUMENT, 'tokens must be a non-empty array');\r\n        }\r\n        if (copy.tokens.length > FCM_MAX_BATCH_SIZE) {\r\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_ARGUMENT, \"tokens list must not contain more than \" + FCM_MAX_BATCH_SIZE + \" items\");\r\n        }\r\n        var messages = copy.tokens.map(function (token) {\r\n            return {\r\n                token: token,\r\n                android: copy.android,\r\n                apns: copy.apns,\r\n                data: copy.data,\r\n                notification: copy.notification,\r\n                webpush: copy.webpush,\r\n                fcmOptions: copy.fcmOptions,\r\n            };\r\n        });\r\n        return this.sendAll(messages, dryRun);\r\n    };\r\n    /**\r\n     * Sends an FCM message to a single device corresponding to the provided\r\n     * registration token.\r\n     *\r\n     * See\r\n     * [Send to individual devices](/docs/cloud-messaging/admin/legacy-fcm#send_to_individual_devices)\r\n     * for code samples and detailed documentation. Takes either a\r\n     * `registrationToken` to send to a single device or a\r\n     * `registrationTokens` parameter containing an array of tokens to send\r\n     * to multiple devices.\r\n     *\r\n     * @param registrationToken A device registration token or an array of\r\n     *   device registration tokens to which the message should be sent.\r\n     * @param payload The message payload.\r\n     * @param options Optional options to\r\n     *   alter the message.\r\n     *\r\n     * @return A promise fulfilled with the server's response after the message\r\n     *   has been sent.\r\n     */\r\n    Messaging.prototype.sendToDevice = function (registrationTokenOrTokens, payload, options) {\r\n        var _this = this;\r\n        if (options === void 0) { options = {}; }\r\n        // Validate the input argument types. Since these are common developer errors when getting\r\n        // started, throw an error instead of returning a rejected promise.\r\n        this.validateRegistrationTokensType(registrationTokenOrTokens, 'sendToDevice', error_1.MessagingClientErrorCode.INVALID_RECIPIENT);\r\n        this.validateMessagingPayloadAndOptionsTypes(payload, options);\r\n        return Promise.resolve()\r\n            .then(function () {\r\n            // Validate the contents of the input arguments. Because we are now in a promise, any thrown\r\n            // error will cause this method to return a rejected promise.\r\n            _this.validateRegistrationTokens(registrationTokenOrTokens, 'sendToDevice', error_1.MessagingClientErrorCode.INVALID_RECIPIENT);\r\n            var payloadCopy = _this.validateMessagingPayload(payload);\r\n            var optionsCopy = _this.validateMessagingOptions(options);\r\n            var request = deep_copy_1.deepCopy(payloadCopy);\r\n            deep_copy_1.deepExtend(request, optionsCopy);\r\n            if (validator.isString(registrationTokenOrTokens)) {\r\n                request.to = registrationTokenOrTokens;\r\n            }\r\n            else {\r\n                request.registration_ids = registrationTokenOrTokens;\r\n            }\r\n            return _this.messagingRequestHandler.invokeRequestHandler(FCM_SEND_HOST, FCM_SEND_PATH, request);\r\n        })\r\n            .then(function (response) {\r\n            // The sendToDevice() and sendToDeviceGroup() methods both set the `to` query parameter in\r\n            // the underlying FCM request. If the provided registration token argument is actually a\r\n            // valid notification key, the response from the FCM server will be a device group response.\r\n            // If that is the case, we map the response to a MessagingDeviceGroupResponse.\r\n            // See b/35394951 for more context.\r\n            if ('multicast_id' in response) {\r\n                return mapRawResponseToDevicesResponse(response);\r\n            }\r\n            else {\r\n                var groupResponse = mapRawResponseToDeviceGroupResponse(response);\r\n                return __assign(__assign({}, groupResponse), { canonicalRegistrationTokenCount: -1, multicastId: -1, results: [] });\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Sends an FCM message to a device group corresponding to the provided\r\n     * notification key.\r\n     *\r\n     * See\r\n     * [Send to a device group](/docs/cloud-messaging/admin/legacy-fcm#send_to_a_device_group)\r\n     * for code samples and detailed documentation.\r\n     *\r\n     * @param notificationKey The notification key for the device group to\r\n     *   which to send the message.\r\n     * @param payload The message payload.\r\n     * @param options Optional options to\r\n     *   alter the message.\r\n     *\r\n     * @return A promise fulfilled with the server's response after the message\r\n     *   has been sent.\r\n     */\r\n    Messaging.prototype.sendToDeviceGroup = function (notificationKey, payload, options) {\r\n        var _this = this;\r\n        if (options === void 0) { options = {}; }\r\n        if (!validator.isNonEmptyString(notificationKey)) {\r\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_RECIPIENT, 'Notification key provided to sendToDeviceGroup() must be a non-empty string.');\r\n        }\r\n        else if (notificationKey.indexOf(':') !== -1) {\r\n            // It is possible the developer provides a registration token instead of a notification key\r\n            // to this method. We can detect some of those cases by checking to see if the string contains\r\n            // a colon. Not all registration tokens will contain a colon (only newer ones will), but no\r\n            // notification keys will contain a colon, so we can use it as a rough heuristic.\r\n            // See b/35394951 for more context.\r\n            return Promise.reject(new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_RECIPIENT, 'Notification key provided to sendToDeviceGroup() has the format of a registration token. ' +\r\n                'You should use sendToDevice() instead.'));\r\n        }\r\n        // Validate the types of the payload and options arguments. Since these are common developer\r\n        // errors, throw an error instead of returning a rejected promise.\r\n        this.validateMessagingPayloadAndOptionsTypes(payload, options);\r\n        return Promise.resolve()\r\n            .then(function () {\r\n            // Validate the contents of the payload and options objects. Because we are now in a\r\n            // promise, any thrown error will cause this method to return a rejected promise.\r\n            var payloadCopy = _this.validateMessagingPayload(payload);\r\n            var optionsCopy = _this.validateMessagingOptions(options);\r\n            var request = deep_copy_1.deepCopy(payloadCopy);\r\n            deep_copy_1.deepExtend(request, optionsCopy);\r\n            request.to = notificationKey;\r\n            return _this.messagingRequestHandler.invokeRequestHandler(FCM_SEND_HOST, FCM_SEND_PATH, request);\r\n        })\r\n            .then(function (response) {\r\n            // The sendToDevice() and sendToDeviceGroup() methods both set the `to` query parameter in\r\n            // the underlying FCM request. If the provided notification key argument has an invalid\r\n            // format (that is, it is either a registration token or some random string), the response\r\n            // from the FCM server will default to a devices response (which we detect by looking for\r\n            // the `multicast_id` property). If that is the case, we either throw an error saying the\r\n            // provided notification key is invalid (if the message failed to send) or map the response\r\n            // to a MessagingDevicesResponse (if the message succeeded).\r\n            // See b/35394951 for more context.\r\n            if ('multicast_id' in response) {\r\n                if (response.success === 0) {\r\n                    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_RECIPIENT, 'Notification key provided to sendToDeviceGroup() is invalid.');\r\n                }\r\n                else {\r\n                    var devicesResponse = mapRawResponseToDevicesResponse(response);\r\n                    return __assign(__assign({}, devicesResponse), { failedRegistrationTokens: [] });\r\n                }\r\n            }\r\n            return mapRawResponseToDeviceGroupResponse(response);\r\n        });\r\n    };\r\n    /**\r\n     * Sends an FCM message to a topic.\r\n     *\r\n     * See\r\n     * [Send to a topic](/docs/cloud-messaging/admin/legacy-fcm#send_to_a_topic)\r\n     * for code samples and detailed documentation.\r\n     *\r\n     * @param topic The topic to which to send the message.\r\n     * @param payload The message payload.\r\n     * @param options Optional options to\r\n     *   alter the message.\r\n     *\r\n     * @return A promise fulfilled with the server's response after the message\r\n     *   has been sent.\r\n     */\r\n    Messaging.prototype.sendToTopic = function (topic, payload, options) {\r\n        var _this = this;\r\n        if (options === void 0) { options = {}; }\r\n        // Validate the input argument types. Since these are common developer errors when getting\r\n        // started, throw an error instead of returning a rejected promise.\r\n        this.validateTopicType(topic, 'sendToTopic', error_1.MessagingClientErrorCode.INVALID_RECIPIENT);\r\n        this.validateMessagingPayloadAndOptionsTypes(payload, options);\r\n        // Prepend the topic with /topics/ if necessary.\r\n        topic = this.normalizeTopic(topic);\r\n        return Promise.resolve()\r\n            .then(function () {\r\n            // Validate the contents of the payload and options objects. Because we are now in a\r\n            // promise, any thrown error will cause this method to return a rejected promise.\r\n            var payloadCopy = _this.validateMessagingPayload(payload);\r\n            var optionsCopy = _this.validateMessagingOptions(options);\r\n            _this.validateTopic(topic, 'sendToTopic', error_1.MessagingClientErrorCode.INVALID_RECIPIENT);\r\n            var request = deep_copy_1.deepCopy(payloadCopy);\r\n            deep_copy_1.deepExtend(request, optionsCopy);\r\n            request.to = topic;\r\n            return _this.messagingRequestHandler.invokeRequestHandler(FCM_SEND_HOST, FCM_SEND_PATH, request);\r\n        })\r\n            .then(function (response) {\r\n            // Rename properties on the server response\r\n            utils.renameProperties(response, MESSAGING_TOPIC_RESPONSE_KEYS_MAP);\r\n            return response;\r\n        });\r\n    };\r\n    /**\r\n     * Sends an FCM message to a condition.\r\n     *\r\n     * See\r\n     * [Send to a condition](/docs/cloud-messaging/admin/legacy-fcm#send_to_a_condition)\r\n     * for code samples and detailed documentation.\r\n     *\r\n     * @param condition The condition determining to which topics to send\r\n     *   the message.\r\n     * @param payload The message payload.\r\n     * @param options Optional options to\r\n     *   alter the message.\r\n     *\r\n     * @return A promise fulfilled with the server's response after the message\r\n     *   has been sent.\r\n     */\r\n    Messaging.prototype.sendToCondition = function (condition, payload, options) {\r\n        var _this = this;\r\n        if (options === void 0) { options = {}; }\r\n        if (!validator.isNonEmptyString(condition)) {\r\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_RECIPIENT, 'Condition provided to sendToCondition() must be a non-empty string.');\r\n        }\r\n        // Validate the types of the payload and options arguments. Since these are common developer\r\n        // errors, throw an error instead of returning a rejected promise.\r\n        this.validateMessagingPayloadAndOptionsTypes(payload, options);\r\n        // The FCM server rejects conditions which are surrounded in single quotes. When the condition\r\n        // is stringified over the wire, double quotes in it get converted to \\\" which the FCM server\r\n        // does not properly handle. We can get around this by replacing internal double quotes with\r\n        // single quotes.\r\n        condition = condition.replace(/\"/g, '\\'');\r\n        return Promise.resolve()\r\n            .then(function () {\r\n            // Validate the contents of the payload and options objects. Because we are now in a\r\n            // promise, any thrown error will cause this method to return a rejected promise.\r\n            var payloadCopy = _this.validateMessagingPayload(payload);\r\n            var optionsCopy = _this.validateMessagingOptions(options);\r\n            var request = deep_copy_1.deepCopy(payloadCopy);\r\n            deep_copy_1.deepExtend(request, optionsCopy);\r\n            request.condition = condition;\r\n            return _this.messagingRequestHandler.invokeRequestHandler(FCM_SEND_HOST, FCM_SEND_PATH, request);\r\n        })\r\n            .then(function (response) {\r\n            // Rename properties on the server response\r\n            utils.renameProperties(response, MESSAGING_CONDITION_RESPONSE_KEYS_MAP);\r\n            return response;\r\n        });\r\n    };\r\n    /**\r\n     * Subscribes a device to an FCM topic.\r\n     *\r\n     * See [Subscribe to a\r\n     * topic](/docs/cloud-messaging/manage-topics#suscribe_and_unsubscribe_using_the)\r\n     * for code samples and detailed documentation. Optionally, you can provide an\r\n     * array of tokens to subscribe multiple devices.\r\n     *\r\n     * @param registrationTokens A token or array of registration tokens\r\n     *   for the devices to subscribe to the topic.\r\n     * @param topic The topic to which to subscribe.\r\n     *\r\n     * @return A promise fulfilled with the server's response after the device has been\r\n     *   subscribed to the topic.\r\n     */\r\n    Messaging.prototype.subscribeToTopic = function (registrationTokenOrTokens, topic) {\r\n        return this.sendTopicManagementRequest(registrationTokenOrTokens, topic, 'subscribeToTopic', FCM_TOPIC_MANAGEMENT_ADD_PATH);\r\n    };\r\n    /**\r\n     * Unsubscribes a device from an FCM topic.\r\n     *\r\n     * See [Unsubscribe from a\r\n     * topic](/docs/cloud-messaging/admin/manage-topic-subscriptions#unsubscribe_from_a_topic)\r\n     * for code samples and detailed documentation.  Optionally, you can provide an\r\n     * array of tokens to unsubscribe multiple devices.\r\n     *\r\n     * @param registrationTokens A device registration token or an array of\r\n     *   device registration tokens to unsubscribe from the topic.\r\n     * @param topic The topic from which to unsubscribe.\r\n     *\r\n     * @return A promise fulfilled with the server's response after the device has been\r\n     *   unsubscribed from the topic.\r\n     */\r\n    Messaging.prototype.unsubscribeFromTopic = function (registrationTokenOrTokens, topic) {\r\n        return this.sendTopicManagementRequest(registrationTokenOrTokens, topic, 'unsubscribeFromTopic', FCM_TOPIC_MANAGEMENT_REMOVE_PATH);\r\n    };\r\n    Messaging.prototype.getUrlPath = function () {\r\n        var _this = this;\r\n        if (this.urlPath) {\r\n            return Promise.resolve(this.urlPath);\r\n        }\r\n        return utils.findProjectId(this.app)\r\n            .then(function (projectId) {\r\n            if (!validator.isNonEmptyString(projectId)) {\r\n                // Assert for an explicit project ID (either via AppOptions or the cert itself).\r\n                throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_ARGUMENT, 'Failed to determine project ID for Messaging. Initialize the '\r\n                    + 'SDK with service account credentials or set project ID as an app option. '\r\n                    + 'Alternatively set the GOOGLE_CLOUD_PROJECT environment variable.');\r\n            }\r\n            _this.urlPath = \"/v1/projects/\" + projectId + \"/messages:send\";\r\n            return _this.urlPath;\r\n        });\r\n    };\r\n    /**\r\n     * Helper method which sends and handles topic subscription management requests.\r\n     *\r\n     * @param {string|string[]} registrationTokenOrTokens The registration token or an array of\r\n     *     registration tokens to unsubscribe from the topic.\r\n     * @param {string} topic The topic to which to subscribe.\r\n     * @param {string} methodName The name of the original method called.\r\n     * @param {string} path The endpoint path to use for the request.\r\n     *\r\n     * @return {Promise<MessagingTopicManagementResponse>} A Promise fulfilled with the parsed server\r\n     *   response.\r\n     */\r\n    Messaging.prototype.sendTopicManagementRequest = function (registrationTokenOrTokens, topic, methodName, path) {\r\n        var _this = this;\r\n        this.validateRegistrationTokensType(registrationTokenOrTokens, methodName);\r\n        this.validateTopicType(topic, methodName);\r\n        // Prepend the topic with /topics/ if necessary.\r\n        topic = this.normalizeTopic(topic);\r\n        return Promise.resolve()\r\n            .then(function () {\r\n            // Validate the contents of the input arguments. Because we are now in a promise, any thrown\r\n            // error will cause this method to return a rejected promise.\r\n            _this.validateRegistrationTokens(registrationTokenOrTokens, methodName);\r\n            _this.validateTopic(topic, methodName);\r\n            // Ensure the registration token(s) input argument is an array.\r\n            var registrationTokensArray = registrationTokenOrTokens;\r\n            if (validator.isString(registrationTokenOrTokens)) {\r\n                registrationTokensArray = [registrationTokenOrTokens];\r\n            }\r\n            var request = {\r\n                to: topic,\r\n                registration_tokens: registrationTokensArray,\r\n            };\r\n            return _this.messagingRequestHandler.invokeRequestHandler(FCM_TOPIC_MANAGEMENT_HOST, path, request);\r\n        })\r\n            .then(function (response) {\r\n            return mapRawResponseToTopicManagementResponse(response);\r\n        });\r\n    };\r\n    /**\r\n     * Validates the types of the messaging payload and options. If invalid, an error will be thrown.\r\n     *\r\n     * @param {MessagingPayload} payload The messaging payload to validate.\r\n     * @param {MessagingOptions} options The messaging options to validate.\r\n     */\r\n    Messaging.prototype.validateMessagingPayloadAndOptionsTypes = function (payload, options) {\r\n        // Validate the payload is an object\r\n        if (!validator.isNonNullObject(payload)) {\r\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'Messaging payload must be an object with at least one of the \"data\" or \"notification\" properties.');\r\n        }\r\n        // Validate the options argument is an object\r\n        if (!validator.isNonNullObject(options)) {\r\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_OPTIONS, 'Messaging options must be an object.');\r\n        }\r\n    };\r\n    /**\r\n     * Validates the messaging payload. If invalid, an error will be thrown.\r\n     *\r\n     * @param {MessagingPayload} payload The messaging payload to validate.\r\n     *\r\n     * @return {MessagingPayload} A copy of the provided payload with whitelisted properties switched\r\n     *     from camelCase to underscore_case.\r\n     */\r\n    Messaging.prototype.validateMessagingPayload = function (payload) {\r\n        var payloadCopy = deep_copy_1.deepCopy(payload);\r\n        var payloadKeys = Object.keys(payloadCopy);\r\n        var validPayloadKeys = ['data', 'notification'];\r\n        var containsDataOrNotificationKey = false;\r\n        payloadKeys.forEach(function (payloadKey) {\r\n            // Validate the payload does not contain any invalid keys\r\n            if (validPayloadKeys.indexOf(payloadKey) === -1) {\r\n                throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, \"Messaging payload contains an invalid \\\"\" + payloadKey + \"\\\" property. Valid properties are \" +\r\n                    '\"data\" and \"notification\".');\r\n            }\r\n            else {\r\n                containsDataOrNotificationKey = true;\r\n            }\r\n        });\r\n        // Validate the payload contains at least one of the \"data\" and \"notification\" keys\r\n        if (!containsDataOrNotificationKey) {\r\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'Messaging payload must contain at least one of the \"data\" or \"notification\" properties.');\r\n        }\r\n        var validatePayload = function (payloadKey, value) {\r\n            // Validate each top-level key in the payload is an object\r\n            if (!validator.isNonNullObject(value)) {\r\n                throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, \"Messaging payload contains an invalid value for the \\\"\" + payloadKey + \"\\\" property. \" +\r\n                    'Value must be an object.');\r\n            }\r\n            Object.keys(value).forEach(function (subKey) {\r\n                if (!validator.isString(value[subKey])) {\r\n                    // Validate all sub-keys have a string value\r\n                    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, \"Messaging payload contains an invalid value for the \\\"\" + payloadKey + \".\" + subKey + \"\\\" \" +\r\n                        'property. Values must be strings.');\r\n                }\r\n                else if (payloadKey === 'data' && /^google\\./.test(subKey)) {\r\n                    // Validate the data payload does not contain keys which start with 'google.'.\r\n                    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, \"Messaging payload contains the blacklisted \\\"data.\" + subKey + \"\\\" property.\");\r\n                }\r\n            });\r\n        };\r\n        if (payloadCopy.data !== undefined) {\r\n            validatePayload('data', payloadCopy.data);\r\n        }\r\n        if (payloadCopy.notification !== undefined) {\r\n            validatePayload('notification', payloadCopy.notification);\r\n        }\r\n        // Validate the data payload object does not contain blacklisted properties\r\n        if ('data' in payloadCopy) {\r\n            messaging_internal_1.BLACKLISTED_DATA_PAYLOAD_KEYS.forEach(function (blacklistedKey) {\r\n                if (blacklistedKey in payloadCopy.data) {\r\n                    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, \"Messaging payload contains the blacklisted \\\"data.\" + blacklistedKey + \"\\\" property.\");\r\n                }\r\n            });\r\n        }\r\n        // Convert whitelisted camelCase keys to underscore_case\r\n        if (payloadCopy.notification) {\r\n            utils.renameProperties(payloadCopy.notification, CAMELCASED_NOTIFICATION_PAYLOAD_KEYS_MAP);\r\n        }\r\n        return payloadCopy;\r\n    };\r\n    /**\r\n     * Validates the messaging options. If invalid, an error will be thrown.\r\n     *\r\n     * @param {MessagingOptions} options The messaging options to validate.\r\n     *\r\n     * @return {MessagingOptions} A copy of the provided options with whitelisted properties switched\r\n     *   from camelCase to underscore_case.\r\n     */\r\n    Messaging.prototype.validateMessagingOptions = function (options) {\r\n        var optionsCopy = deep_copy_1.deepCopy(options);\r\n        // Validate the options object does not contain blacklisted properties\r\n        messaging_internal_1.BLACKLISTED_OPTIONS_KEYS.forEach(function (blacklistedKey) {\r\n            if (blacklistedKey in optionsCopy) {\r\n                throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_OPTIONS, \"Messaging options contains the blacklisted \\\"\" + blacklistedKey + \"\\\" property.\");\r\n            }\r\n        });\r\n        // Convert whitelisted camelCase keys to underscore_case\r\n        utils.renameProperties(optionsCopy, CAMELCASE_OPTIONS_KEYS_MAP);\r\n        // Validate the options object contains valid values for whitelisted properties\r\n        if ('collapse_key' in optionsCopy && !validator.isNonEmptyString(optionsCopy.collapse_key)) {\r\n            var keyName = ('collapseKey' in options) ? 'collapseKey' : 'collapse_key';\r\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_OPTIONS, \"Messaging options contains an invalid value for the \\\"\" + keyName + \"\\\" property. Value must \" +\r\n                'be a non-empty string.');\r\n        }\r\n        else if ('dry_run' in optionsCopy && !validator.isBoolean(optionsCopy.dry_run)) {\r\n            var keyName = ('dryRun' in options) ? 'dryRun' : 'dry_run';\r\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_OPTIONS, \"Messaging options contains an invalid value for the \\\"\" + keyName + \"\\\" property. Value must \" +\r\n                'be a boolean.');\r\n        }\r\n        else if ('priority' in optionsCopy && !validator.isNonEmptyString(optionsCopy.priority)) {\r\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_OPTIONS, 'Messaging options contains an invalid value for the \"priority\" property. Value must ' +\r\n                'be a non-empty string.');\r\n        }\r\n        else if ('restricted_package_name' in optionsCopy &&\r\n            !validator.isNonEmptyString(optionsCopy.restricted_package_name)) {\r\n            var keyName = ('restrictedPackageName' in options) ? 'restrictedPackageName' : 'restricted_package_name';\r\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_OPTIONS, \"Messaging options contains an invalid value for the \\\"\" + keyName + \"\\\" property. Value must \" +\r\n                'be a non-empty string.');\r\n        }\r\n        else if ('time_to_live' in optionsCopy && !validator.isNumber(optionsCopy.time_to_live)) {\r\n            var keyName = ('timeToLive' in options) ? 'timeToLive' : 'time_to_live';\r\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_OPTIONS, \"Messaging options contains an invalid value for the \\\"\" + keyName + \"\\\" property. Value must \" +\r\n                'be a number.');\r\n        }\r\n        else if ('content_available' in optionsCopy && !validator.isBoolean(optionsCopy.content_available)) {\r\n            var keyName = ('contentAvailable' in options) ? 'contentAvailable' : 'content_available';\r\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_OPTIONS, \"Messaging options contains an invalid value for the \\\"\" + keyName + \"\\\" property. Value must \" +\r\n                'be a boolean.');\r\n        }\r\n        else if ('mutable_content' in optionsCopy && !validator.isBoolean(optionsCopy.mutable_content)) {\r\n            var keyName = ('mutableContent' in options) ? 'mutableContent' : 'mutable_content';\r\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_OPTIONS, \"Messaging options contains an invalid value for the \\\"\" + keyName + \"\\\" property. Value must \" +\r\n                'be a boolean.');\r\n        }\r\n        return optionsCopy;\r\n    };\r\n    /**\r\n     * Validates the type of the provided registration token(s). If invalid, an error will be thrown.\r\n     *\r\n     * @param {string|string[]} registrationTokenOrTokens The registration token(s) to validate.\r\n     * @param {string} method The method name to use in error messages.\r\n     * @param {ErrorInfo?} [errorInfo] The error info to use if the registration tokens are invalid.\r\n     */\r\n    Messaging.prototype.validateRegistrationTokensType = function (registrationTokenOrTokens, methodName, errorInfo) {\r\n        if (errorInfo === void 0) { errorInfo = error_1.MessagingClientErrorCode.INVALID_ARGUMENT; }\r\n        if (!validator.isNonEmptyArray(registrationTokenOrTokens) &&\r\n            !validator.isNonEmptyString(registrationTokenOrTokens)) {\r\n            throw new error_1.FirebaseMessagingError(errorInfo, \"Registration token(s) provided to \" + methodName + \"() must be a non-empty string or a \" +\r\n                'non-empty array.');\r\n        }\r\n    };\r\n    /**\r\n     * Validates the provided registration tokens. If invalid, an error will be thrown.\r\n     *\r\n     * @param {string|string[]} registrationTokenOrTokens The registration token or an array of\r\n     *     registration tokens to validate.\r\n     * @param {string} method The method name to use in error messages.\r\n     * @param {errorInfo?} [ErrorInfo] The error info to use if the registration tokens are invalid.\r\n     */\r\n    Messaging.prototype.validateRegistrationTokens = function (registrationTokenOrTokens, methodName, errorInfo) {\r\n        if (errorInfo === void 0) { errorInfo = error_1.MessagingClientErrorCode.INVALID_ARGUMENT; }\r\n        if (validator.isArray(registrationTokenOrTokens)) {\r\n            // Validate the array contains no more than 1,000 registration tokens.\r\n            if (registrationTokenOrTokens.length > 1000) {\r\n                throw new error_1.FirebaseMessagingError(errorInfo, \"Too many registration tokens provided in a single request to \" + methodName + \"(). Batch \" +\r\n                    'your requests to contain no more than 1,000 registration tokens per request.');\r\n            }\r\n            // Validate the array contains registration tokens which are non-empty strings.\r\n            registrationTokenOrTokens.forEach(function (registrationToken, index) {\r\n                if (!validator.isNonEmptyString(registrationToken)) {\r\n                    throw new error_1.FirebaseMessagingError(errorInfo, \"Registration token provided to \" + methodName + \"() at index \" + index + \" must be a \" +\r\n                        'non-empty string.');\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Validates the type of the provided topic. If invalid, an error will be thrown.\r\n     *\r\n     * @param {string} topic The topic to validate.\r\n     * @param {string} method The method name to use in error messages.\r\n     * @param {ErrorInfo?} [errorInfo] The error info to use if the topic is invalid.\r\n     */\r\n    Messaging.prototype.validateTopicType = function (topic, methodName, errorInfo) {\r\n        if (errorInfo === void 0) { errorInfo = error_1.MessagingClientErrorCode.INVALID_ARGUMENT; }\r\n        if (!validator.isNonEmptyString(topic)) {\r\n            throw new error_1.FirebaseMessagingError(errorInfo, \"Topic provided to \" + methodName + \"() must be a string which matches the format \" +\r\n                '\"/topics/[a-zA-Z0-9-_.~%]+\".');\r\n        }\r\n    };\r\n    /**\r\n     * Validates the provided topic. If invalid, an error will be thrown.\r\n     *\r\n     * @param {string} topic The topic to validate.\r\n     * @param {string} method The method name to use in error messages.\r\n     * @param {ErrorInfo?} [errorInfo] The error info to use if the topic is invalid.\r\n     */\r\n    Messaging.prototype.validateTopic = function (topic, methodName, errorInfo) {\r\n        if (errorInfo === void 0) { errorInfo = error_1.MessagingClientErrorCode.INVALID_ARGUMENT; }\r\n        if (!validator.isTopic(topic)) {\r\n            throw new error_1.FirebaseMessagingError(errorInfo, \"Topic provided to \" + methodName + \"() must be a string which matches the format \" +\r\n                '\"/topics/[a-zA-Z0-9-_.~%]+\".');\r\n        }\r\n    };\r\n    /**\r\n     * Normalizes the provided topic name by prepending it with '/topics/', if necessary.\r\n     *\r\n     * @param {string} topic The topic name to normalize.\r\n     *\r\n     * @return {string} The normalized topic name.\r\n     */\r\n    Messaging.prototype.normalizeTopic = function (topic) {\r\n        if (!/^\\/topics\\//.test(topic)) {\r\n            topic = \"/topics/\" + topic;\r\n        }\r\n        return topic;\r\n    };\r\n    return Messaging;\r\n}());\r\nexports.Messaging = Messaging;\r\n"]},"metadata":{},"sourceType":"script"}