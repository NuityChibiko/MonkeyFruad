{"ast":null,"code":"// Copyright 2015 Joyent, Inc.\nmodule.exports = SSHBuffer;\n\nvar assert = require('assert-plus');\n\nvar Buffer = require('safer-buffer').Buffer;\n\nfunction SSHBuffer(opts) {\n  assert.object(opts, 'options');\n  if (opts.buffer !== undefined) assert.buffer(opts.buffer, 'options.buffer');\n  this._size = opts.buffer ? opts.buffer.length : 1024;\n  this._buffer = opts.buffer || Buffer.alloc(this._size);\n  this._offset = 0;\n}\n\nSSHBuffer.prototype.toBuffer = function () {\n  return this._buffer.slice(0, this._offset);\n};\n\nSSHBuffer.prototype.atEnd = function () {\n  return this._offset >= this._buffer.length;\n};\n\nSSHBuffer.prototype.remainder = function () {\n  return this._buffer.slice(this._offset);\n};\n\nSSHBuffer.prototype.skip = function (n) {\n  this._offset += n;\n};\n\nSSHBuffer.prototype.expand = function () {\n  this._size *= 2;\n  var buf = Buffer.alloc(this._size);\n\n  this._buffer.copy(buf, 0);\n\n  this._buffer = buf;\n};\n\nSSHBuffer.prototype.readPart = function () {\n  return {\n    data: this.readBuffer()\n  };\n};\n\nSSHBuffer.prototype.readBuffer = function () {\n  var len = this._buffer.readUInt32BE(this._offset);\n\n  this._offset += 4;\n  assert.ok(this._offset + len <= this._buffer.length, 'length out of bounds at +0x' + this._offset.toString(16) + ' (data truncated?)');\n\n  var buf = this._buffer.slice(this._offset, this._offset + len);\n\n  this._offset += len;\n  return buf;\n};\n\nSSHBuffer.prototype.readString = function () {\n  return this.readBuffer().toString();\n};\n\nSSHBuffer.prototype.readCString = function () {\n  var offset = this._offset;\n\n  while (offset < this._buffer.length && this._buffer[offset] !== 0x00) offset++;\n\n  assert.ok(offset < this._buffer.length, 'c string does not terminate');\n\n  var str = this._buffer.slice(this._offset, offset).toString();\n\n  this._offset = offset + 1;\n  return str;\n};\n\nSSHBuffer.prototype.readInt = function () {\n  var v = this._buffer.readUInt32BE(this._offset);\n\n  this._offset += 4;\n  return v;\n};\n\nSSHBuffer.prototype.readInt64 = function () {\n  assert.ok(this._offset + 8 < this._buffer.length, 'buffer not long enough to read Int64');\n\n  var v = this._buffer.slice(this._offset, this._offset + 8);\n\n  this._offset += 8;\n  return v;\n};\n\nSSHBuffer.prototype.readChar = function () {\n  var v = this._buffer[this._offset++];\n  return v;\n};\n\nSSHBuffer.prototype.writeBuffer = function (buf) {\n  while (this._offset + 4 + buf.length > this._size) this.expand();\n\n  this._buffer.writeUInt32BE(buf.length, this._offset);\n\n  this._offset += 4;\n  buf.copy(this._buffer, this._offset);\n  this._offset += buf.length;\n};\n\nSSHBuffer.prototype.writeString = function (str) {\n  this.writeBuffer(Buffer.from(str, 'utf8'));\n};\n\nSSHBuffer.prototype.writeCString = function (str) {\n  while (this._offset + 1 + str.length > this._size) this.expand();\n\n  this._buffer.write(str, this._offset);\n\n  this._offset += str.length;\n  this._buffer[this._offset++] = 0;\n};\n\nSSHBuffer.prototype.writeInt = function (v) {\n  while (this._offset + 4 > this._size) this.expand();\n\n  this._buffer.writeUInt32BE(v, this._offset);\n\n  this._offset += 4;\n};\n\nSSHBuffer.prototype.writeInt64 = function (v) {\n  assert.buffer(v, 'value');\n\n  if (v.length > 8) {\n    var lead = v.slice(0, v.length - 8);\n\n    for (var i = 0; i < lead.length; ++i) {\n      assert.strictEqual(lead[i], 0, 'must fit in 64 bits of precision');\n    }\n\n    v = v.slice(v.length - 8, v.length);\n  }\n\n  while (this._offset + 8 > this._size) this.expand();\n\n  v.copy(this._buffer, this._offset);\n  this._offset += 8;\n};\n\nSSHBuffer.prototype.writeChar = function (v) {\n  while (this._offset + 1 > this._size) this.expand();\n\n  this._buffer[this._offset++] = v;\n};\n\nSSHBuffer.prototype.writePart = function (p) {\n  this.writeBuffer(p.data);\n};\n\nSSHBuffer.prototype.write = function (buf) {\n  while (this._offset + buf.length > this._size) this.expand();\n\n  buf.copy(this._buffer, this._offset);\n  this._offset += buf.length;\n};","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Frontend/node_modules/sshpk/lib/ssh-buffer.js"],"names":["module","exports","SSHBuffer","assert","require","Buffer","opts","object","buffer","undefined","_size","length","_buffer","alloc","_offset","prototype","toBuffer","slice","atEnd","remainder","skip","n","expand","buf","copy","readPart","data","readBuffer","len","readUInt32BE","ok","toString","readString","readCString","offset","str","readInt","v","readInt64","readChar","writeBuffer","writeUInt32BE","writeString","from","writeCString","write","writeInt","writeInt64","lead","i","strictEqual","writeChar","writePart","p"],"mappings":"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","sourcesContent":["// Copyright 2015 Joyent, Inc.\r\n\r\nmodule.exports = SSHBuffer;\r\n\r\nvar assert = require('assert-plus');\r\nvar Buffer = require('safer-buffer').Buffer;\r\n\r\nfunction SSHBuffer(opts) {\r\n\tassert.object(opts, 'options');\r\n\tif (opts.buffer !== undefined)\r\n\t\tassert.buffer(opts.buffer, 'options.buffer');\r\n\r\n\tthis._size = opts.buffer ? opts.buffer.length : 1024;\r\n\tthis._buffer = opts.buffer || Buffer.alloc(this._size);\r\n\tthis._offset = 0;\r\n}\r\n\r\nSSHBuffer.prototype.toBuffer = function () {\r\n\treturn (this._buffer.slice(0, this._offset));\r\n};\r\n\r\nSSHBuffer.prototype.atEnd = function () {\r\n\treturn (this._offset >= this._buffer.length);\r\n};\r\n\r\nSSHBuffer.prototype.remainder = function () {\r\n\treturn (this._buffer.slice(this._offset));\r\n};\r\n\r\nSSHBuffer.prototype.skip = function (n) {\r\n\tthis._offset += n;\r\n};\r\n\r\nSSHBuffer.prototype.expand = function () {\r\n\tthis._size *= 2;\r\n\tvar buf = Buffer.alloc(this._size);\r\n\tthis._buffer.copy(buf, 0);\r\n\tthis._buffer = buf;\r\n};\r\n\r\nSSHBuffer.prototype.readPart = function () {\r\n\treturn ({data: this.readBuffer()});\r\n};\r\n\r\nSSHBuffer.prototype.readBuffer = function () {\r\n\tvar len = this._buffer.readUInt32BE(this._offset);\r\n\tthis._offset += 4;\r\n\tassert.ok(this._offset + len <= this._buffer.length,\r\n\t    'length out of bounds at +0x' + this._offset.toString(16) +\r\n\t    ' (data truncated?)');\r\n\tvar buf = this._buffer.slice(this._offset, this._offset + len);\r\n\tthis._offset += len;\r\n\treturn (buf);\r\n};\r\n\r\nSSHBuffer.prototype.readString = function () {\r\n\treturn (this.readBuffer().toString());\r\n};\r\n\r\nSSHBuffer.prototype.readCString = function () {\r\n\tvar offset = this._offset;\r\n\twhile (offset < this._buffer.length &&\r\n\t    this._buffer[offset] !== 0x00)\r\n\t\toffset++;\r\n\tassert.ok(offset < this._buffer.length, 'c string does not terminate');\r\n\tvar str = this._buffer.slice(this._offset, offset).toString();\r\n\tthis._offset = offset + 1;\r\n\treturn (str);\r\n};\r\n\r\nSSHBuffer.prototype.readInt = function () {\r\n\tvar v = this._buffer.readUInt32BE(this._offset);\r\n\tthis._offset += 4;\r\n\treturn (v);\r\n};\r\n\r\nSSHBuffer.prototype.readInt64 = function () {\r\n\tassert.ok(this._offset + 8 < this._buffer.length,\r\n\t    'buffer not long enough to read Int64');\r\n\tvar v = this._buffer.slice(this._offset, this._offset + 8);\r\n\tthis._offset += 8;\r\n\treturn (v);\r\n};\r\n\r\nSSHBuffer.prototype.readChar = function () {\r\n\tvar v = this._buffer[this._offset++];\r\n\treturn (v);\r\n};\r\n\r\nSSHBuffer.prototype.writeBuffer = function (buf) {\r\n\twhile (this._offset + 4 + buf.length > this._size)\r\n\t\tthis.expand();\r\n\tthis._buffer.writeUInt32BE(buf.length, this._offset);\r\n\tthis._offset += 4;\r\n\tbuf.copy(this._buffer, this._offset);\r\n\tthis._offset += buf.length;\r\n};\r\n\r\nSSHBuffer.prototype.writeString = function (str) {\r\n\tthis.writeBuffer(Buffer.from(str, 'utf8'));\r\n};\r\n\r\nSSHBuffer.prototype.writeCString = function (str) {\r\n\twhile (this._offset + 1 + str.length > this._size)\r\n\t\tthis.expand();\r\n\tthis._buffer.write(str, this._offset);\r\n\tthis._offset += str.length;\r\n\tthis._buffer[this._offset++] = 0;\r\n};\r\n\r\nSSHBuffer.prototype.writeInt = function (v) {\r\n\twhile (this._offset + 4 > this._size)\r\n\t\tthis.expand();\r\n\tthis._buffer.writeUInt32BE(v, this._offset);\r\n\tthis._offset += 4;\r\n};\r\n\r\nSSHBuffer.prototype.writeInt64 = function (v) {\r\n\tassert.buffer(v, 'value');\r\n\tif (v.length > 8) {\r\n\t\tvar lead = v.slice(0, v.length - 8);\r\n\t\tfor (var i = 0; i < lead.length; ++i) {\r\n\t\t\tassert.strictEqual(lead[i], 0,\r\n\t\t\t    'must fit in 64 bits of precision');\r\n\t\t}\r\n\t\tv = v.slice(v.length - 8, v.length);\r\n\t}\r\n\twhile (this._offset + 8 > this._size)\r\n\t\tthis.expand();\r\n\tv.copy(this._buffer, this._offset);\r\n\tthis._offset += 8;\r\n};\r\n\r\nSSHBuffer.prototype.writeChar = function (v) {\r\n\twhile (this._offset + 1 > this._size)\r\n\t\tthis.expand();\r\n\tthis._buffer[this._offset++] = v;\r\n};\r\n\r\nSSHBuffer.prototype.writePart = function (p) {\r\n\tthis.writeBuffer(p.data);\r\n};\r\n\r\nSSHBuffer.prototype.write = function (buf) {\r\n\twhile (this._offset + buf.length > this._size)\r\n\t\tthis.expand();\r\n\tbuf.copy(this._buffer, this._offset);\r\n\tthis._offset += buf.length;\r\n};\r\n"]},"metadata":{},"sourceType":"script"}