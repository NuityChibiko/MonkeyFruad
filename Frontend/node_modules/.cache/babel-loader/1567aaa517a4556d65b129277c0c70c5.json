{"ast":null,"code":"/*! firebase-admin v9.4.2 */\n\"use strict\";\n/*!\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TenantManager = void 0;\n\nvar auth_api_request_1 = require(\"./auth-api-request\");\n\nvar auth_1 = require(\"./auth\");\n\nvar tenant_1 = require(\"./tenant\");\n\nvar error_1 = require(\"../utils/error\");\n\nvar validator = require(\"../utils/validator\");\n/**\r\n * Data structure used to help manage tenant related operations.\r\n * This includes:\r\n * - The ability to create, update, list, get and delete tenants for the underlying project.\r\n * - Getting a TenantAwareAuth instance for running Auth related operations (user mgmt, provider config mgmt, etc)\r\n *   in the context of a specified tenant.\r\n */\n\n\nvar TenantManager =\n/** @class */\nfunction () {\n  /**\r\n   * Initializes a TenantManager instance for a specified FirebaseApp.\r\n   * @param app The app for this TenantManager instance.\r\n   */\n  function TenantManager(app) {\n    this.app = app;\n    this.authRequestHandler = new auth_api_request_1.AuthRequestHandler(app);\n    this.tenantsMap = {};\n  }\n  /**\r\n   * Returns a TenantAwareAuth instance for the corresponding tenant ID.\r\n   *\r\n   * @param tenantId The tenant ID whose TenantAwareAuth is to be returned.\r\n   * @return The corresponding TenantAwareAuth instance.\r\n   */\n\n\n  TenantManager.prototype.authForTenant = function (tenantId) {\n    if (!validator.isNonEmptyString(tenantId)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_TENANT_ID);\n    }\n\n    if (typeof this.tenantsMap[tenantId] === 'undefined') {\n      this.tenantsMap[tenantId] = new auth_1.TenantAwareAuth(this.app, tenantId);\n    }\n\n    return this.tenantsMap[tenantId];\n  };\n  /**\r\n   * Looks up the tenant identified by the provided tenant ID and returns a promise that is\r\n   * fulfilled with the corresponding tenant if it is found.\r\n   *\r\n   * @param tenantId The tenant ID of the tenant to look up.\r\n   * @return A promise that resolves with the corresponding tenant.\r\n   */\n\n\n  TenantManager.prototype.getTenant = function (tenantId) {\n    return this.authRequestHandler.getTenant(tenantId).then(function (response) {\n      return new tenant_1.Tenant(response);\n    });\n  };\n  /**\r\n   * Exports a batch of tenant accounts. Batch size is determined by the maxResults argument.\r\n   * Starting point of the batch is determined by the pageToken argument.\r\n   *\r\n   * @param maxResults The page size, 1000 if undefined. This is also the maximum\r\n   *     allowed limit.\r\n   * @param pageToken The next page token. If not specified, returns users starting\r\n   *     without any offset.\r\n   * @return A promise that resolves with\r\n   *     the current batch of downloaded tenants and the next page token. For the last page, an\r\n   *     empty list of tenants and no page token are returned.\r\n   */\n\n\n  TenantManager.prototype.listTenants = function (maxResults, pageToken) {\n    return this.authRequestHandler.listTenants(maxResults, pageToken).then(function (response) {\n      // List of tenants to return.\n      var tenants = []; // Convert each user response to a Tenant.\n\n      response.tenants.forEach(function (tenantResponse) {\n        tenants.push(new tenant_1.Tenant(tenantResponse));\n      }); // Return list of tenants and the next page token if available.\n\n      var result = {\n        tenants: tenants,\n        pageToken: response.nextPageToken\n      }; // Delete result.pageToken if undefined.\n\n      if (typeof result.pageToken === 'undefined') {\n        delete result.pageToken;\n      }\n\n      return result;\n    });\n  };\n  /**\r\n   * Deletes the tenant identified by the provided tenant ID and returns a promise that is\r\n   * fulfilled when the tenant is found and successfully deleted.\r\n   *\r\n   * @param tenantId The tenant ID of the tenant to delete.\r\n   * @return A promise that resolves when the tenant is successfully deleted.\r\n   */\n\n\n  TenantManager.prototype.deleteTenant = function (tenantId) {\n    return this.authRequestHandler.deleteTenant(tenantId);\n  };\n  /**\r\n   * Creates a new tenant with the properties provided.\r\n   *\r\n   * @param tenantOptions The properties to set on the new tenant to be created.\r\n   * @return A promise that resolves with the newly created tenant.\r\n   */\n\n\n  TenantManager.prototype.createTenant = function (tenantOptions) {\n    return this.authRequestHandler.createTenant(tenantOptions).then(function (response) {\n      return new tenant_1.Tenant(response);\n    });\n  };\n  /**\r\n   * Updates an existing tenant identified by the tenant ID with the properties provided.\r\n   *\r\n   * @param tenantId The tenant identifier of the tenant to update.\r\n   * @param tenantOptions The properties to update on the existing tenant.\r\n   * @return A promise that resolves with the modified tenant.\r\n   */\n\n\n  TenantManager.prototype.updateTenant = function (tenantId, tenantOptions) {\n    return this.authRequestHandler.updateTenant(tenantId, tenantOptions).then(function (response) {\n      return new tenant_1.Tenant(response);\n    });\n  };\n\n  return TenantManager;\n}();\n\nexports.TenantManager = TenantManager;","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Backend/node_modules/firebase-admin/lib/auth/tenant-manager.js"],"names":["Object","defineProperty","exports","value","TenantManager","auth_api_request_1","require","auth_1","tenant_1","error_1","validator","app","authRequestHandler","AuthRequestHandler","tenantsMap","prototype","authForTenant","tenantId","isNonEmptyString","FirebaseAuthError","AuthClientErrorCode","INVALID_TENANT_ID","TenantAwareAuth","getTenant","then","response","Tenant","listTenants","maxResults","pageToken","tenants","forEach","tenantResponse","push","result","nextPageToken","deleteTenant","createTenant","tenantOptions","updateTenant"],"mappings":"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","sourcesContent":["/*! firebase-admin v9.4.2 */\r\n\"use strict\";\r\n/*!\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.TenantManager = void 0;\r\nvar auth_api_request_1 = require(\"./auth-api-request\");\r\nvar auth_1 = require(\"./auth\");\r\nvar tenant_1 = require(\"./tenant\");\r\nvar error_1 = require(\"../utils/error\");\r\nvar validator = require(\"../utils/validator\");\r\n/**\r\n * Data structure used to help manage tenant related operations.\r\n * This includes:\r\n * - The ability to create, update, list, get and delete tenants for the underlying project.\r\n * - Getting a TenantAwareAuth instance for running Auth related operations (user mgmt, provider config mgmt, etc)\r\n *   in the context of a specified tenant.\r\n */\r\nvar TenantManager = /** @class */ (function () {\r\n    /**\r\n     * Initializes a TenantManager instance for a specified FirebaseApp.\r\n     * @param app The app for this TenantManager instance.\r\n     */\r\n    function TenantManager(app) {\r\n        this.app = app;\r\n        this.authRequestHandler = new auth_api_request_1.AuthRequestHandler(app);\r\n        this.tenantsMap = {};\r\n    }\r\n    /**\r\n     * Returns a TenantAwareAuth instance for the corresponding tenant ID.\r\n     *\r\n     * @param tenantId The tenant ID whose TenantAwareAuth is to be returned.\r\n     * @return The corresponding TenantAwareAuth instance.\r\n     */\r\n    TenantManager.prototype.authForTenant = function (tenantId) {\r\n        if (!validator.isNonEmptyString(tenantId)) {\r\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_TENANT_ID);\r\n        }\r\n        if (typeof this.tenantsMap[tenantId] === 'undefined') {\r\n            this.tenantsMap[tenantId] = new auth_1.TenantAwareAuth(this.app, tenantId);\r\n        }\r\n        return this.tenantsMap[tenantId];\r\n    };\r\n    /**\r\n     * Looks up the tenant identified by the provided tenant ID and returns a promise that is\r\n     * fulfilled with the corresponding tenant if it is found.\r\n     *\r\n     * @param tenantId The tenant ID of the tenant to look up.\r\n     * @return A promise that resolves with the corresponding tenant.\r\n     */\r\n    TenantManager.prototype.getTenant = function (tenantId) {\r\n        return this.authRequestHandler.getTenant(tenantId)\r\n            .then(function (response) {\r\n            return new tenant_1.Tenant(response);\r\n        });\r\n    };\r\n    /**\r\n     * Exports a batch of tenant accounts. Batch size is determined by the maxResults argument.\r\n     * Starting point of the batch is determined by the pageToken argument.\r\n     *\r\n     * @param maxResults The page size, 1000 if undefined. This is also the maximum\r\n     *     allowed limit.\r\n     * @param pageToken The next page token. If not specified, returns users starting\r\n     *     without any offset.\r\n     * @return A promise that resolves with\r\n     *     the current batch of downloaded tenants and the next page token. For the last page, an\r\n     *     empty list of tenants and no page token are returned.\r\n     */\r\n    TenantManager.prototype.listTenants = function (maxResults, pageToken) {\r\n        return this.authRequestHandler.listTenants(maxResults, pageToken)\r\n            .then(function (response) {\r\n            // List of tenants to return.\r\n            var tenants = [];\r\n            // Convert each user response to a Tenant.\r\n            response.tenants.forEach(function (tenantResponse) {\r\n                tenants.push(new tenant_1.Tenant(tenantResponse));\r\n            });\r\n            // Return list of tenants and the next page token if available.\r\n            var result = {\r\n                tenants: tenants,\r\n                pageToken: response.nextPageToken,\r\n            };\r\n            // Delete result.pageToken if undefined.\r\n            if (typeof result.pageToken === 'undefined') {\r\n                delete result.pageToken;\r\n            }\r\n            return result;\r\n        });\r\n    };\r\n    /**\r\n     * Deletes the tenant identified by the provided tenant ID and returns a promise that is\r\n     * fulfilled when the tenant is found and successfully deleted.\r\n     *\r\n     * @param tenantId The tenant ID of the tenant to delete.\r\n     * @return A promise that resolves when the tenant is successfully deleted.\r\n     */\r\n    TenantManager.prototype.deleteTenant = function (tenantId) {\r\n        return this.authRequestHandler.deleteTenant(tenantId);\r\n    };\r\n    /**\r\n     * Creates a new tenant with the properties provided.\r\n     *\r\n     * @param tenantOptions The properties to set on the new tenant to be created.\r\n     * @return A promise that resolves with the newly created tenant.\r\n     */\r\n    TenantManager.prototype.createTenant = function (tenantOptions) {\r\n        return this.authRequestHandler.createTenant(tenantOptions)\r\n            .then(function (response) {\r\n            return new tenant_1.Tenant(response);\r\n        });\r\n    };\r\n    /**\r\n     * Updates an existing tenant identified by the tenant ID with the properties provided.\r\n     *\r\n     * @param tenantId The tenant identifier of the tenant to update.\r\n     * @param tenantOptions The properties to update on the existing tenant.\r\n     * @return A promise that resolves with the modified tenant.\r\n     */\r\n    TenantManager.prototype.updateTenant = function (tenantId, tenantOptions) {\r\n        return this.authRequestHandler.updateTenant(tenantId, tenantOptions)\r\n            .then(function (response) {\r\n            return new tenant_1.Tenant(response);\r\n        });\r\n    };\r\n    return TenantManager;\r\n}());\r\nexports.TenantManager = TenantManager;\r\n"]},"metadata":{},"sourceType":"script"}