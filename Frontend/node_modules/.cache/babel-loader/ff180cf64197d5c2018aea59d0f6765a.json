{"ast":null,"code":"/**\r\n * Passport initialization.\r\n *\r\n * Intializes Passport for incoming requests, allowing authentication strategies\r\n * to be applied.\r\n *\r\n * If sessions are being utilized, applications must set up Passport with\r\n * functions to serialize a user into and out of a session.  For example, a\r\n * common pattern is to serialize just the user ID into the session (due to the\r\n * fact that it is desirable to store the minimum amount of data in a session).\r\n * When a subsequent request arrives for the session, the full User object can\r\n * be loaded from the database by ID.\r\n *\r\n * Note that additional middleware is required to persist login state, so we\r\n * must use the `connect.session()` middleware _before_ `passport.initialize()`.\r\n *\r\n * If sessions are being used, this middleware must be in use by the\r\n * Connect/Express application for Passport to operate.  If the application is\r\n * entirely stateless (not using sessions), this middleware is not necessary,\r\n * but its use will not have any adverse impact.\r\n *\r\n * Examples:\r\n *\r\n *     app.use(connect.cookieParser());\r\n *     app.use(connect.session({ secret: 'keyboard cat' }));\r\n *     app.use(passport.initialize());\r\n *     app.use(passport.session());\r\n *\r\n *     passport.serializeUser(function(user, done) {\r\n *       done(null, user.id);\r\n *     });\r\n *\r\n *     passport.deserializeUser(function(id, done) {\r\n *       User.findById(id, function (err, user) {\r\n *         done(err, user);\r\n *       });\r\n *     });\r\n *\r\n * @return {Function}\r\n * @api public\r\n */\nmodule.exports = function initialize(passport) {\n  return function initialize(req, res, next) {\n    req._passport = {};\n    req._passport.instance = passport;\n\n    if (req.session && req.session[passport._key]) {\n      // load data from existing session\n      req._passport.session = req.session[passport._key];\n    }\n\n    next();\n  };\n};","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Backend/node_modules/passport/lib/middleware/initialize.js"],"names":["module","exports","initialize","passport","req","res","next","_passport","instance","session","_key"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,OAAP,GAAiB,SAASC,UAAT,CAAoBC,QAApB,EAA8B;AAE7C,SAAO,SAASD,UAAT,CAAoBE,GAApB,EAAyBC,GAAzB,EAA8BC,IAA9B,EAAoC;AACzCF,IAAAA,GAAG,CAACG,SAAJ,GAAgB,EAAhB;AACAH,IAAAA,GAAG,CAACG,SAAJ,CAAcC,QAAd,GAAyBL,QAAzB;;AAEA,QAAIC,GAAG,CAACK,OAAJ,IAAeL,GAAG,CAACK,OAAJ,CAAYN,QAAQ,CAACO,IAArB,CAAnB,EAA+C;AAC7C;AACAN,MAAAA,GAAG,CAACG,SAAJ,CAAcE,OAAd,GAAwBL,GAAG,CAACK,OAAJ,CAAYN,QAAQ,CAACO,IAArB,CAAxB;AACD;;AAEDJ,IAAAA,IAAI;AACL,GAVD;AAWD,CAbD","sourcesContent":["/**\r\n * Passport initialization.\r\n *\r\n * Intializes Passport for incoming requests, allowing authentication strategies\r\n * to be applied.\r\n *\r\n * If sessions are being utilized, applications must set up Passport with\r\n * functions to serialize a user into and out of a session.  For example, a\r\n * common pattern is to serialize just the user ID into the session (due to the\r\n * fact that it is desirable to store the minimum amount of data in a session).\r\n * When a subsequent request arrives for the session, the full User object can\r\n * be loaded from the database by ID.\r\n *\r\n * Note that additional middleware is required to persist login state, so we\r\n * must use the `connect.session()` middleware _before_ `passport.initialize()`.\r\n *\r\n * If sessions are being used, this middleware must be in use by the\r\n * Connect/Express application for Passport to operate.  If the application is\r\n * entirely stateless (not using sessions), this middleware is not necessary,\r\n * but its use will not have any adverse impact.\r\n *\r\n * Examples:\r\n *\r\n *     app.use(connect.cookieParser());\r\n *     app.use(connect.session({ secret: 'keyboard cat' }));\r\n *     app.use(passport.initialize());\r\n *     app.use(passport.session());\r\n *\r\n *     passport.serializeUser(function(user, done) {\r\n *       done(null, user.id);\r\n *     });\r\n *\r\n *     passport.deserializeUser(function(id, done) {\r\n *       User.findById(id, function (err, user) {\r\n *         done(err, user);\r\n *       });\r\n *     });\r\n *\r\n * @return {Function}\r\n * @api public\r\n */\r\nmodule.exports = function initialize(passport) {\r\n  \r\n  return function initialize(req, res, next) {\r\n    req._passport = {};\r\n    req._passport.instance = passport;\r\n\r\n    if (req.session && req.session[passport._key]) {\r\n      // load data from existing session\r\n      req._passport.session = req.session[passport._key];\r\n    }\r\n\r\n    next();\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"script"}