{"ast":null,"code":"/*! firebase-admin v9.4.2 */\n\"use strict\";\n/*!\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isTopic = exports.isURL = exports.isUTCDateString = exports.isISODateString = exports.isPhoneNumber = exports.isEmail = exports.isPassword = exports.isUid = exports.isNonNullObject = exports.isObject = exports.isNonEmptyString = exports.isBase64String = exports.isString = exports.isNumber = exports.isBoolean = exports.isNonEmptyArray = exports.isArray = exports.isBuffer = void 0;\n\nvar url = require(\"url\");\n/**\r\n * Validates that a value is a byte buffer.\r\n *\r\n * @param {any} value The value to validate.\r\n * @return {boolean} Whether the value is byte buffer or not.\r\n */\n\n\nfunction isBuffer(value) {\n  return value instanceof Buffer;\n}\n\nexports.isBuffer = isBuffer;\n/**\r\n * Validates that a value is an array.\r\n *\r\n * @param {any} value The value to validate.\r\n * @return {boolean} Whether the value is an array or not.\r\n */\n\nfunction isArray(value) {\n  return Array.isArray(value);\n}\n\nexports.isArray = isArray;\n/**\r\n * Validates that a value is a non-empty array.\r\n *\r\n * @param {any} value The value to validate.\r\n * @return {boolean} Whether the value is a non-empty array or not.\r\n */\n\nfunction isNonEmptyArray(value) {\n  return isArray(value) && value.length !== 0;\n}\n\nexports.isNonEmptyArray = isNonEmptyArray;\n/**\r\n * Validates that a value is a boolean.\r\n *\r\n * @param {any} value The value to validate.\r\n * @return {boolean} Whether the value is a boolean or not.\r\n */\n\nfunction isBoolean(value) {\n  return typeof value === 'boolean';\n}\n\nexports.isBoolean = isBoolean;\n/**\r\n * Validates that a value is a number.\r\n *\r\n * @param {any} value The value to validate.\r\n * @return {boolean} Whether the value is a number or not.\r\n */\n\nfunction isNumber(value) {\n  return typeof value === 'number' && !isNaN(value);\n}\n\nexports.isNumber = isNumber;\n/**\r\n * Validates that a value is a string.\r\n *\r\n * @param {any} value The value to validate.\r\n * @return {boolean} Whether the value is a string or not.\r\n */\n\nfunction isString(value) {\n  return typeof value === 'string';\n}\n\nexports.isString = isString;\n/**\r\n * Validates that a value is a base64 string.\r\n *\r\n * @param {any} value The value to validate.\r\n * @return {boolean} Whether the value is a base64 string or not.\r\n */\n\nfunction isBase64String(value) {\n  if (!isString(value)) {\n    return false;\n  }\n\n  return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(value);\n}\n\nexports.isBase64String = isBase64String;\n/**\r\n * Validates that a value is a non-empty string.\r\n *\r\n * @param {any} value The value to validate.\r\n * @return {boolean} Whether the value is a non-empty string or not.\r\n */\n\nfunction isNonEmptyString(value) {\n  return isString(value) && value !== '';\n}\n\nexports.isNonEmptyString = isNonEmptyString;\n/**\r\n * Validates that a value is a nullable object.\r\n *\r\n * @param {any} value The value to validate.\r\n * @return {boolean} Whether the value is an object or not.\r\n */\n\nfunction isObject(value) {\n  return typeof value === 'object' && !isArray(value);\n}\n\nexports.isObject = isObject;\n/**\r\n * Validates that a value is a non-null object.\r\n *\r\n * @param {any} value The value to validate.\r\n * @return {boolean} Whether the value is a non-null object or not.\r\n */\n\nfunction isNonNullObject(value) {\n  return isObject(value) && value !== null;\n}\n\nexports.isNonNullObject = isNonNullObject;\n/**\r\n * Validates that a string is a valid Firebase Auth uid.\r\n *\r\n * @param {any} uid The string to validate.\r\n * @return {boolean} Whether the string is a valid Firebase Auth uid.\r\n */\n\nfunction isUid(uid) {\n  return typeof uid === 'string' && uid.length > 0 && uid.length <= 128;\n}\n\nexports.isUid = isUid;\n/**\r\n * Validates that a string is a valid Firebase Auth password.\r\n *\r\n * @param {any} password The password string to validate.\r\n * @return {boolean} Whether the string is a valid Firebase Auth password.\r\n */\n\nfunction isPassword(password) {\n  // A password must be a string of at least 6 characters.\n  return typeof password === 'string' && password.length >= 6;\n}\n\nexports.isPassword = isPassword;\n/**\r\n * Validates that a string is a valid email.\r\n *\r\n * @param {any} email The string to validate.\r\n * @return {boolean} Whether the string is valid email or not.\r\n */\n\nfunction isEmail(email) {\n  if (typeof email !== 'string') {\n    return false;\n  } // There must at least one character before the @ symbol and another after.\n\n\n  var re = /^[^@]+@[^@]+$/;\n  return re.test(email);\n}\n\nexports.isEmail = isEmail;\n/**\r\n * Validates that a string is a valid phone number.\r\n *\r\n * @param {any} phoneNumber The string to validate.\r\n * @return {boolean} Whether the string is a valid phone number or not.\r\n */\n\nfunction isPhoneNumber(phoneNumber) {\n  if (typeof phoneNumber !== 'string') {\n    return false;\n  } // Phone number validation is very lax here. Backend will enforce E.164\n  // spec compliance and will normalize accordingly.\n  // The phone number string must be non-empty and starts with a plus sign.\n\n\n  var re1 = /^\\+/; // The phone number string must contain at least one alphanumeric character.\n\n  var re2 = /[\\da-zA-Z]+/;\n  return re1.test(phoneNumber) && re2.test(phoneNumber);\n}\n\nexports.isPhoneNumber = isPhoneNumber;\n/**\r\n * Validates that a string is a valid ISO date string.\r\n *\r\n * @param dateString The string to validate.\r\n * @return Whether the string is a valid ISO date string.\r\n */\n\nfunction isISODateString(dateString) {\n  try {\n    return isNonEmptyString(dateString) && new Date(dateString).toISOString() === dateString;\n  } catch (e) {\n    return false;\n  }\n}\n\nexports.isISODateString = isISODateString;\n/**\r\n * Validates that a string is a valid UTC date string.\r\n *\r\n * @param dateString The string to validate.\r\n * @return Whether the string is a valid UTC date string.\r\n */\n\nfunction isUTCDateString(dateString) {\n  try {\n    return isNonEmptyString(dateString) && new Date(dateString).toUTCString() === dateString;\n  } catch (e) {\n    return false;\n  }\n}\n\nexports.isUTCDateString = isUTCDateString;\n/**\r\n * Validates that a string is a valid web URL.\r\n *\r\n * @param {any} urlStr The string to validate.\r\n * @return {boolean} Whether the string is valid web URL or not.\r\n */\n\nfunction isURL(urlStr) {\n  if (typeof urlStr !== 'string') {\n    return false;\n  } // Lookup illegal characters.\n\n\n  var re = /[^a-z0-9:/?#[\\]@!$&'()*+,;=.\\-_~%]/i;\n\n  if (re.test(urlStr)) {\n    return false;\n  }\n\n  try {\n    var uri = url.parse(urlStr);\n    var scheme = uri.protocol;\n    var slashes = uri.slashes;\n    var hostname = uri.hostname;\n    var pathname = uri.pathname;\n\n    if (scheme !== 'http:' && scheme !== 'https:' || !slashes) {\n      return false;\n    } // Validate hostname: Can contain letters, numbers, underscore and dashes separated by a dot.\n    // Each zone must not start with a hyphen or underscore.\n\n\n    if (!hostname || !/^[a-zA-Z0-9]+[\\w-]*([.]?[a-zA-Z0-9]+[\\w-]*)*$/.test(hostname)) {\n      return false;\n    } // Allow for pathnames: (/chars+)*/?\n    // Where chars can be a combination of: a-z A-Z 0-9 - _ . ~ ! $ & ' ( ) * + , ; = : @ %\n\n\n    var pathnameRe = /^(\\/[\\w\\-.~!$'()*+,;=:@%]+)*\\/?$/; // Validate pathname.\n\n    if (pathname && pathname !== '/' && !pathnameRe.test(pathname)) {\n      return false;\n    } // Allow any query string and hash as long as no invalid character is used.\n\n  } catch (e) {\n    return false;\n  }\n\n  return true;\n}\n\nexports.isURL = isURL;\n/**\r\n * Validates that the provided topic is a valid FCM topic name.\r\n *\r\n * @param {any} topic The topic to validate.\r\n * @return {boolean} Whether the provided topic is a valid FCM topic name.\r\n */\n\nfunction isTopic(topic) {\n  if (typeof topic !== 'string') {\n    return false;\n  }\n\n  var VALID_TOPIC_REGEX = /^(\\/topics\\/)?(private\\/)?[a-zA-Z0-9-_.~%]+$/;\n  return VALID_TOPIC_REGEX.test(topic);\n}\n\nexports.isTopic = isTopic;","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Backend/node_modules/firebase-admin/lib/utils/validator.js"],"names":["Object","defineProperty","exports","value","isTopic","isURL","isUTCDateString","isISODateString","isPhoneNumber","isEmail","isPassword","isUid","isNonNullObject","isObject","isNonEmptyString","isBase64String","isString","isNumber","isBoolean","isNonEmptyArray","isArray","isBuffer","url","require","Buffer","Array","length","isNaN","test","uid","password","email","re","phoneNumber","re1","re2","dateString","Date","toISOString","e","toUTCString","urlStr","uri","parse","scheme","protocol","slashes","hostname","pathname","pathnameRe","topic","VALID_TOPIC_REGEX"],"mappings":"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","sourcesContent":["/*! firebase-admin v9.4.2 */\r\n\"use strict\";\r\n/*!\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.isTopic = exports.isURL = exports.isUTCDateString = exports.isISODateString = exports.isPhoneNumber = exports.isEmail = exports.isPassword = exports.isUid = exports.isNonNullObject = exports.isObject = exports.isNonEmptyString = exports.isBase64String = exports.isString = exports.isNumber = exports.isBoolean = exports.isNonEmptyArray = exports.isArray = exports.isBuffer = void 0;\r\nvar url = require(\"url\");\r\n/**\r\n * Validates that a value is a byte buffer.\r\n *\r\n * @param {any} value The value to validate.\r\n * @return {boolean} Whether the value is byte buffer or not.\r\n */\r\nfunction isBuffer(value) {\r\n    return value instanceof Buffer;\r\n}\r\nexports.isBuffer = isBuffer;\r\n/**\r\n * Validates that a value is an array.\r\n *\r\n * @param {any} value The value to validate.\r\n * @return {boolean} Whether the value is an array or not.\r\n */\r\nfunction isArray(value) {\r\n    return Array.isArray(value);\r\n}\r\nexports.isArray = isArray;\r\n/**\r\n * Validates that a value is a non-empty array.\r\n *\r\n * @param {any} value The value to validate.\r\n * @return {boolean} Whether the value is a non-empty array or not.\r\n */\r\nfunction isNonEmptyArray(value) {\r\n    return isArray(value) && value.length !== 0;\r\n}\r\nexports.isNonEmptyArray = isNonEmptyArray;\r\n/**\r\n * Validates that a value is a boolean.\r\n *\r\n * @param {any} value The value to validate.\r\n * @return {boolean} Whether the value is a boolean or not.\r\n */\r\nfunction isBoolean(value) {\r\n    return typeof value === 'boolean';\r\n}\r\nexports.isBoolean = isBoolean;\r\n/**\r\n * Validates that a value is a number.\r\n *\r\n * @param {any} value The value to validate.\r\n * @return {boolean} Whether the value is a number or not.\r\n */\r\nfunction isNumber(value) {\r\n    return typeof value === 'number' && !isNaN(value);\r\n}\r\nexports.isNumber = isNumber;\r\n/**\r\n * Validates that a value is a string.\r\n *\r\n * @param {any} value The value to validate.\r\n * @return {boolean} Whether the value is a string or not.\r\n */\r\nfunction isString(value) {\r\n    return typeof value === 'string';\r\n}\r\nexports.isString = isString;\r\n/**\r\n * Validates that a value is a base64 string.\r\n *\r\n * @param {any} value The value to validate.\r\n * @return {boolean} Whether the value is a base64 string or not.\r\n */\r\nfunction isBase64String(value) {\r\n    if (!isString(value)) {\r\n        return false;\r\n    }\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(value);\r\n}\r\nexports.isBase64String = isBase64String;\r\n/**\r\n * Validates that a value is a non-empty string.\r\n *\r\n * @param {any} value The value to validate.\r\n * @return {boolean} Whether the value is a non-empty string or not.\r\n */\r\nfunction isNonEmptyString(value) {\r\n    return isString(value) && value !== '';\r\n}\r\nexports.isNonEmptyString = isNonEmptyString;\r\n/**\r\n * Validates that a value is a nullable object.\r\n *\r\n * @param {any} value The value to validate.\r\n * @return {boolean} Whether the value is an object or not.\r\n */\r\nfunction isObject(value) {\r\n    return typeof value === 'object' && !isArray(value);\r\n}\r\nexports.isObject = isObject;\r\n/**\r\n * Validates that a value is a non-null object.\r\n *\r\n * @param {any} value The value to validate.\r\n * @return {boolean} Whether the value is a non-null object or not.\r\n */\r\nfunction isNonNullObject(value) {\r\n    return isObject(value) && value !== null;\r\n}\r\nexports.isNonNullObject = isNonNullObject;\r\n/**\r\n * Validates that a string is a valid Firebase Auth uid.\r\n *\r\n * @param {any} uid The string to validate.\r\n * @return {boolean} Whether the string is a valid Firebase Auth uid.\r\n */\r\nfunction isUid(uid) {\r\n    return typeof uid === 'string' && uid.length > 0 && uid.length <= 128;\r\n}\r\nexports.isUid = isUid;\r\n/**\r\n * Validates that a string is a valid Firebase Auth password.\r\n *\r\n * @param {any} password The password string to validate.\r\n * @return {boolean} Whether the string is a valid Firebase Auth password.\r\n */\r\nfunction isPassword(password) {\r\n    // A password must be a string of at least 6 characters.\r\n    return typeof password === 'string' && password.length >= 6;\r\n}\r\nexports.isPassword = isPassword;\r\n/**\r\n * Validates that a string is a valid email.\r\n *\r\n * @param {any} email The string to validate.\r\n * @return {boolean} Whether the string is valid email or not.\r\n */\r\nfunction isEmail(email) {\r\n    if (typeof email !== 'string') {\r\n        return false;\r\n    }\r\n    // There must at least one character before the @ symbol and another after.\r\n    var re = /^[^@]+@[^@]+$/;\r\n    return re.test(email);\r\n}\r\nexports.isEmail = isEmail;\r\n/**\r\n * Validates that a string is a valid phone number.\r\n *\r\n * @param {any} phoneNumber The string to validate.\r\n * @return {boolean} Whether the string is a valid phone number or not.\r\n */\r\nfunction isPhoneNumber(phoneNumber) {\r\n    if (typeof phoneNumber !== 'string') {\r\n        return false;\r\n    }\r\n    // Phone number validation is very lax here. Backend will enforce E.164\r\n    // spec compliance and will normalize accordingly.\r\n    // The phone number string must be non-empty and starts with a plus sign.\r\n    var re1 = /^\\+/;\r\n    // The phone number string must contain at least one alphanumeric character.\r\n    var re2 = /[\\da-zA-Z]+/;\r\n    return re1.test(phoneNumber) && re2.test(phoneNumber);\r\n}\r\nexports.isPhoneNumber = isPhoneNumber;\r\n/**\r\n * Validates that a string is a valid ISO date string.\r\n *\r\n * @param dateString The string to validate.\r\n * @return Whether the string is a valid ISO date string.\r\n */\r\nfunction isISODateString(dateString) {\r\n    try {\r\n        return isNonEmptyString(dateString) &&\r\n            (new Date(dateString).toISOString() === dateString);\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n}\r\nexports.isISODateString = isISODateString;\r\n/**\r\n * Validates that a string is a valid UTC date string.\r\n *\r\n * @param dateString The string to validate.\r\n * @return Whether the string is a valid UTC date string.\r\n */\r\nfunction isUTCDateString(dateString) {\r\n    try {\r\n        return isNonEmptyString(dateString) &&\r\n            (new Date(dateString).toUTCString() === dateString);\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n}\r\nexports.isUTCDateString = isUTCDateString;\r\n/**\r\n * Validates that a string is a valid web URL.\r\n *\r\n * @param {any} urlStr The string to validate.\r\n * @return {boolean} Whether the string is valid web URL or not.\r\n */\r\nfunction isURL(urlStr) {\r\n    if (typeof urlStr !== 'string') {\r\n        return false;\r\n    }\r\n    // Lookup illegal characters.\r\n    var re = /[^a-z0-9:/?#[\\]@!$&'()*+,;=.\\-_~%]/i;\r\n    if (re.test(urlStr)) {\r\n        return false;\r\n    }\r\n    try {\r\n        var uri = url.parse(urlStr);\r\n        var scheme = uri.protocol;\r\n        var slashes = uri.slashes;\r\n        var hostname = uri.hostname;\r\n        var pathname = uri.pathname;\r\n        if ((scheme !== 'http:' && scheme !== 'https:') || !slashes) {\r\n            return false;\r\n        }\r\n        // Validate hostname: Can contain letters, numbers, underscore and dashes separated by a dot.\r\n        // Each zone must not start with a hyphen or underscore.\r\n        if (!hostname || !/^[a-zA-Z0-9]+[\\w-]*([.]?[a-zA-Z0-9]+[\\w-]*)*$/.test(hostname)) {\r\n            return false;\r\n        }\r\n        // Allow for pathnames: (/chars+)*/?\r\n        // Where chars can be a combination of: a-z A-Z 0-9 - _ . ~ ! $ & ' ( ) * + , ; = : @ %\r\n        var pathnameRe = /^(\\/[\\w\\-.~!$'()*+,;=:@%]+)*\\/?$/;\r\n        // Validate pathname.\r\n        if (pathname &&\r\n            pathname !== '/' &&\r\n            !pathnameRe.test(pathname)) {\r\n            return false;\r\n        }\r\n        // Allow any query string and hash as long as no invalid character is used.\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\nexports.isURL = isURL;\r\n/**\r\n * Validates that the provided topic is a valid FCM topic name.\r\n *\r\n * @param {any} topic The topic to validate.\r\n * @return {boolean} Whether the provided topic is a valid FCM topic name.\r\n */\r\nfunction isTopic(topic) {\r\n    if (typeof topic !== 'string') {\r\n        return false;\r\n    }\r\n    var VALID_TOPIC_REGEX = /^(\\/topics\\/)?(private\\/)?[a-zA-Z0-9-_.~%]+$/;\r\n    return VALID_TOPIC_REGEX.test(topic);\r\n}\r\nexports.isTopic = isTopic;\r\n"]},"metadata":{},"sourceType":"script"}