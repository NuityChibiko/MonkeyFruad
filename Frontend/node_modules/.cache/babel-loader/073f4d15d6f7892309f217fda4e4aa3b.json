{"ast":null,"code":"/**\n * Returns an ensureOption function that relies on the provided `defaultOptions` argument\n * for default values.\n * @private\n * @param {object} defaultOptions\n * @return {function(*, *, *=): *}\n */\nfunction defaults(defaultOptions) {\n  return function ensureOption(options, name, defaultValue) {\n    let value;\n\n    if (typeof options[name] !== 'undefined') {\n      value = options[name];\n    } else if (typeof defaultOptions[name] !== 'undefined') {\n      value = defaultOptions[name];\n    } else if (typeof defaultValue !== 'undefined') {\n      value = defaultValue;\n    } else {\n      throw `Must supply ${name}`;\n    }\n\n    return value;\n  };\n}\n/**\n * Get the option `name` from options, the global config, or the default value.\n * If the value is not defined and no default value was provided,\n * the method will throw an error.\n * @private\n * @param {object} options\n * @param {string} name\n * @param {*} [defaultValue]\n * @return {*} the value associated with the provided `name` or the default.\n *\n */\n\n\nmodule.exports = defaults({});\nmodule.exports.defaults = defaults;","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Frontend/node_modules/cloudinary/lib/utils/ensureOption.js"],"names":["defaults","defaultOptions","ensureOption","options","name","defaultValue","value","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,QAAT,CAAkBC,cAAlB,EAAkC;AAChC,SAAO,SAASC,YAAT,CAAsBC,OAAtB,EAA+BC,IAA/B,EAAqCC,YAArC,EAAmD;AACxD,QAAIC,KAAJ;;AAEA,QAAI,OAAOH,OAAO,CAACC,IAAD,CAAd,KAAyB,WAA7B,EAA0C;AACxCE,MAAAA,KAAK,GAAGH,OAAO,CAACC,IAAD,CAAf;AACD,KAFD,MAEO,IAAI,OAAOH,cAAc,CAACG,IAAD,CAArB,KAAgC,WAApC,EAAiD;AACtDE,MAAAA,KAAK,GAAGL,cAAc,CAACG,IAAD,CAAtB;AACD,KAFM,MAEA,IAAI,OAAOC,YAAP,KAAwB,WAA5B,EAAyC;AAC9CC,MAAAA,KAAK,GAAGD,YAAR;AACD,KAFM,MAEA;AACL,YAAO,eAAcD,IAAK,EAA1B;AACD;;AAED,WAAOE,KAAP;AACD,GAdD;AAeD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiBR,QAAQ,CAAC,EAAD,CAAzB;AAEAO,MAAM,CAACC,OAAP,CAAeR,QAAf,GAA0BA,QAA1B","sourcesContent":["/**\n * Returns an ensureOption function that relies on the provided `defaultOptions` argument\n * for default values.\n * @private\n * @param {object} defaultOptions\n * @return {function(*, *, *=): *}\n */\nfunction defaults(defaultOptions) {\n  return function ensureOption(options, name, defaultValue) {\n    let value;\n\n    if (typeof options[name] !== 'undefined') {\n      value = options[name];\n    } else if (typeof defaultOptions[name] !== 'undefined') {\n      value = defaultOptions[name];\n    } else if (typeof defaultValue !== 'undefined') {\n      value = defaultValue;\n    } else {\n      throw `Must supply ${name}`;\n    }\n\n    return value;\n  };\n}\n\n/**\n * Get the option `name` from options, the global config, or the default value.\n * If the value is not defined and no default value was provided,\n * the method will throw an error.\n * @private\n * @param {object} options\n * @param {string} name\n * @param {*} [defaultValue]\n * @return {*} the value associated with the provided `name` or the default.\n *\n */\nmodule.exports = defaults({});\n\nmodule.exports.defaults = defaults;\n"]},"metadata":{},"sourceType":"script"}