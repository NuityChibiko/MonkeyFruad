{"ast":null,"code":"\"use strict\"; // Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HmacKey = void 0;\n\nconst common_1 = require(\"@google-cloud/common\");\n/**\r\n * The API-formatted resource description of the HMAC key.\r\n *\r\n * Note: This is not guaranteed to be up-to-date when accessed. To get the\r\n * latest record, call the `getMetadata()` method.\r\n *\r\n * @name HmacKey#metadata\r\n * @type {object}\r\n */\n\n/**\r\n * An HmacKey object contains metadata of an HMAC key created from a\r\n * service account through the {@link Storage} client using\r\n * {@link Storage#createHmacKey}.\r\n *\r\n * @see [HMAC keys documentation]{@link https://cloud.google.com/storage/docs/authentication/hmackeys}\r\n *\r\n * @class\r\n */\n\n\nclass HmacKey extends common_1.ServiceObject {\n  /**\r\n   * @typedef {object} HmacKeyOptions\r\n   * @property {string} [projectId] The project ID of the project that owns\r\n   *     the service account of the requested HMAC key. If not provided,\r\n   *     the project ID used to instantiate the Storage client will be used.\r\n   */\n\n  /**\r\n   * Constructs an HmacKey object.\r\n   *\r\n   * Note: this only create a local reference to an HMAC key, to create\r\n   * an HMAC key, use {@link Storage#createHmacKey}.\r\n   *\r\n   * @param {Storage} storage The Storage instance this HMAC key is\r\n   *     attached to.\r\n   * @param {string} accessId The unique accessId for this HMAC key.\r\n   * @param {HmacKeyOptions} options Constructor configurations.\r\n   * @example\r\n   * const {Storage} = require('@google-cloud/storage');\r\n   * const storage = new Storage();\r\n   * const hmacKey = storage.hmacKey('access-id');\r\n   */\n  constructor(storage, accessId, options) {\n    const methods = {\n      /**\r\n       * @typedef {object} DeleteHmacKeyOptions\r\n       * @property {string} [userProject] This parameter is currently ignored.\r\n       */\n\n      /**\r\n       * @typedef {array} DeleteHmacKeyResponse\r\n       * @property {object} 0 The full API response.\r\n       */\n\n      /**\r\n       * @callback DeleteHmacKeyCallback\r\n       * @param {?Error} err Request error, if any.\r\n       * @param {object} apiResponse The full API response.\r\n       */\n\n      /**\r\n       * Deletes an HMAC key.\r\n       * Key state must be set to `INACTIVE` prior to deletion.\r\n       * Caution: HMAC keys cannot be recovered once you delete them.\r\n       *\r\n       * The authenticated user must have `storage.hmacKeys.delete` permission for the project in which the key exists.\r\n       *\r\n       * @method HmacKey#delete\r\n       * @param {DeleteHmacKeyOptions} [options] Configuration options.\r\n       * @param {DeleteHmacKeyCallback} [callback] Callback function.\r\n       * @returns {Promise<DeleteHmacKeyResponse>}\r\n       *\r\n       * @example\r\n       * const {Storage} = require('@google-cloud/storage');\r\n       * const storage = new Storage();\r\n       *\r\n       * //-\r\n       * // Delete HMAC key after making the key inactive.\r\n       * //-\r\n       * const hmacKey = storage.hmacKey('ACCESS_ID');\r\n       * hmacKey.setMetadata({state: 'INACTIVE'}, (err, hmacKeyMetadata) => {\r\n       *     if (err) {\r\n       *       // The request was an error.\r\n       *       console.error(err);\r\n       *       return;\r\n       *     }\r\n       *     hmacKey.delete((err) => {\r\n       *       if (err) {\r\n       *         console.error(err);\r\n       *         return;\r\n       *       }\r\n       *       // The HMAC key is deleted.\r\n       *     });\r\n       *   });\r\n       *\r\n       * //-\r\n       * // If the callback is omitted, a promise is returned.\r\n       * //-\r\n       * const hmacKey = storage.hmacKey('ACCESS_ID');\r\n       * hmacKey\r\n       *   .setMetadata({state: 'INACTIVE'})\r\n       *   .then(() => {\r\n       *     return hmacKey.delete();\r\n       *   });\r\n       */\n      delete: true,\n\n      /**\r\n       * @callback GetHmacKeyCallback\r\n       * @param {?Error} err Request error, if any.\r\n       * @param {HmacKey} hmacKey this {@link HmacKey} instance.\r\n       * @param {object} apiResponse The full API response.\r\n       */\n\n      /**\r\n       * @typedef {array} GetHmacKeyResponse\r\n       * @property {HmacKey} 0 This {@link HmacKey} instance.\r\n       * @property {object} 1 The full API response.\r\n       */\n\n      /**\r\n       * @typedef {object} GetHmacKeyOptions\r\n       * @property {string} [userProject] This parameter is currently ignored.\r\n       */\n\n      /**\r\n       * Retrieves and populate an HMAC key's metadata, and return\r\n       * this {@link HmacKey} instance.\r\n       *\r\n       * HmacKey.get() does not give the HMAC key secret, as\r\n       * it is only returned on creation.\r\n       *\r\n       * The authenticated user must have `storage.hmacKeys.get` permission\r\n       * for the project in which the key exists.\r\n       *\r\n       * @method HmacKey#get\r\n       * @param {GetHmacKeyOptions} [options] Configuration options.\r\n       * @param {GetHmacKeyCallback} [callback] Callback function.\r\n       * @returns {Promise<GetHmacKeyResponse>}\r\n       *\r\n       * @example\r\n       * const {Storage} = require('@google-cloud/storage');\r\n       * const storage = new Storage();\r\n       *\r\n       * //-\r\n       * // Get the HmacKey's Metadata.\r\n       * //-\r\n       * storage.hmacKey('ACCESS_ID')\r\n       *   .get((err, hmacKey) => {\r\n       *     if (err) {\r\n       *       // The request was an error.\r\n       *       console.error(err);\r\n       *       return;\r\n       *     }\r\n       *     // do something with the returned HmacKey object.\r\n       *   });\r\n       *\r\n       * //-\r\n       * // If the callback is omitted, a promise is returned.\r\n       * //-\r\n       * storage.hmacKey('ACCESS_ID')\r\n       *   .get()\r\n       *   .then((data) => {\r\n       *     const hmacKey = data[0];\r\n       *   });\r\n       */\n      get: true,\n\n      /**\r\n       * @typedef {object} GetHmacKeyMetadataOptions\r\n       * @property {string} [userProject] This parameter is currently ignored.\r\n       */\n\n      /**\r\n       * Retrieves and populate an HMAC key's metadata, and return\r\n       * the HMAC key's metadata as an object.\r\n       *\r\n       * HmacKey.getMetadata() does not give the HMAC key secret, as\r\n       * it is only returned on creation.\r\n       *\r\n       * The authenticated user must have `storage.hmacKeys.get` permission\r\n       * for the project in which the key exists.\r\n       *\r\n       * @method HmacKey#getMetadata\r\n       * @param {GetHmacKeyMetadataOptions} [options] Configuration options.\r\n       * @param {HmacKeyMetadataCallback} [callback] Callback function.\r\n       * @returns {Promise<HmacKeyMetadataResponse>}\r\n       *\r\n       * @example\r\n       * const {Storage} = require('@google-cloud/storage');\r\n       * const storage = new Storage();\r\n       *\r\n       * //-\r\n       * // Get the HmacKey's metadata and populate to the metadata property.\r\n       * //-\r\n       * storage.hmacKey('ACCESS_ID')\r\n       *   .getMetadata((err, hmacKeyMetadata) => {\r\n       *     if (err) {\r\n       *       // The request was an error.\r\n       *       console.error(err);\r\n       *       return;\r\n       *     }\r\n       *     console.log(hmacKeyMetadata);\r\n       *   });\r\n       *\r\n       * //-\r\n       * // If the callback is omitted, a promise is returned.\r\n       * //-\r\n       * storage.hmacKey('ACCESS_ID')\r\n       *   .getMetadata()\r\n       *   .then((data) => {\r\n       *     const hmacKeyMetadata = data[0];\r\n       *     console.log(hmacKeyMetadata);\r\n       *   });\r\n       */\n      getMetadata: true,\n\n      /**\r\n       * @typedef {object} SetHmacKeyMetadata Subset of {@link HmacKeyMetadata} to update.\r\n       * @property {string} state New state of the HmacKey. Either 'ACTIVE' or 'INACTIVE'.\r\n       * @property {string} [etag] Include an etag from a previous get HMAC key request\r\n       *    to perform safe read-modify-write.\r\n       */\n\n      /**\r\n       * @typedef {object} SetHmacKeyMetadataOptions\r\n       * @property {string} [userProject] This parameter is currently ignored.\r\n       */\n\n      /**\r\n       * @callback HmacKeyMetadataCallback\r\n       * @param {?Error} err Request error, if any.\r\n       * @param {HmacKeyMetadata} metadata The updated {@link HmacKeyMetadata} object.\r\n       * @param {object} apiResponse The full API response.\r\n       */\n\n      /**\r\n       * @typedef {array} HmacKeyMetadataResponse\r\n       * @property {HmacKeyMetadata} 0 The updated {@link HmacKeyMetadata} object.\r\n       * @property {object} 1 The full API response.\r\n       */\n\n      /**\r\n       * Updates the state of an HMAC key. See {@link SetHmacKeyMetadata} for\r\n       * valid states.\r\n       *\r\n       * @method HmacKey#setMetadata\r\n       * @param {SetHmacKeyMetadata} metadata The new metadata.\r\n       * @param {SetHmacKeyMetadataOptions} [options] Configuration options.\r\n       * @param {HmacKeyMetadataCallback} [callback] Callback function.\r\n       * @returns {Promise<HmacKeyMetadataResponse>}\r\n       *\r\n       * @example\r\n       * const {Storage} = require('@google-cloud/storage');\r\n       * const storage = new Storage();\r\n       *\r\n       * const metadata = {\r\n       *   state: 'INACTIVE',\r\n       * };\r\n       *\r\n       * storage.hmacKey('ACCESS_ID')\r\n       *   .setMetadata(metadata, (err, hmacKeyMetadata) => {\r\n       *     if (err) {\r\n       *       // The request was an error.\r\n       *       console.error(err);\r\n       *       return;\r\n       *     }\r\n       *     console.log(hmacKeyMetadata);\r\n       *   });\r\n       *\r\n       * //-\r\n       * // If the callback is omitted, a promise is returned.\r\n       * //-\r\n       * storage.hmacKey('ACCESS_ID')\r\n       *   .setMetadata(metadata)\r\n       *   .then((data) => {\r\n       *     const hmacKeyMetadata = data[0];\r\n       *     console.log(hmacKeyMetadata);\r\n       *   });\r\n       */\n      setMetadata: {\n        reqOpts: {\n          method: 'PUT'\n        }\n      }\n    };\n    const projectId = options && options.projectId || storage.projectId;\n    super({\n      parent: storage,\n      id: accessId,\n      baseUrl: `/projects/${projectId}/hmacKeys`,\n      methods\n    });\n  }\n\n}\n\nexports.HmacKey = HmacKey;","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Backend/node_modules/@google-cloud/storage/build/src/hmacKey.js"],"names":["Object","defineProperty","exports","value","HmacKey","common_1","require","ServiceObject","constructor","storage","accessId","options","methods","delete","get","getMetadata","setMetadata","reqOpts","method","projectId","parent","id","baseUrl"],"mappings":"AAAA,a,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,sBAAD,CAAxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMF,OAAN,SAAsBC,QAAQ,CAACE,aAA/B,CAA6C;AACzC;AACJ;AACA;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,EAAAA,WAAW,CAACC,OAAD,EAAUC,QAAV,EAAoBC,OAApB,EAA6B;AACpC,UAAMC,OAAO,GAAG;AACZ;AACZ;AACA;AACA;;AACY;AACZ;AACA;AACA;;AACY;AACZ;AACA;AACA;AACA;;AACY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACYC,MAAAA,MAAM,EAAE,IA3DI;;AA4DZ;AACZ;AACA;AACA;AACA;AACA;;AACY;AACZ;AACA;AACA;AACA;;AACY;AACZ;AACA;AACA;;AACY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACYC,MAAAA,GAAG,EAAE,IApHO;;AAqHZ;AACZ;AACA;AACA;;AACY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACYC,MAAAA,WAAW,EAAE,IAnKD;;AAoKZ;AACZ;AACA;AACA;AACA;AACA;;AACY;AACZ;AACA;AACA;;AACY;AACZ;AACA;AACA;AACA;AACA;;AACY;AACZ;AACA;AACA;AACA;;AACY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACYC,MAAAA,WAAW,EAAE;AACTC,QAAAA,OAAO,EAAE;AACLC,UAAAA,MAAM,EAAE;AADH;AADA;AA/ND,KAAhB;AAqOA,UAAMC,SAAS,GAAIR,OAAO,IAAIA,OAAO,CAACQ,SAApB,IAAkCV,OAAO,CAACU,SAA5D;AACA,UAAM;AACFC,MAAAA,MAAM,EAAEX,OADN;AAEFY,MAAAA,EAAE,EAAEX,QAFF;AAGFY,MAAAA,OAAO,EAAG,aAAYH,SAAU,WAH9B;AAIFP,MAAAA;AAJE,KAAN;AAMH;;AAnQwC;;AAqQ7CV,OAAO,CAACE,OAAR,GAAkBA,OAAlB","sourcesContent":["\"use strict\";\r\n// Copyright 2019 Google LLC\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.HmacKey = void 0;\r\nconst common_1 = require(\"@google-cloud/common\");\r\n/**\r\n * The API-formatted resource description of the HMAC key.\r\n *\r\n * Note: This is not guaranteed to be up-to-date when accessed. To get the\r\n * latest record, call the `getMetadata()` method.\r\n *\r\n * @name HmacKey#metadata\r\n * @type {object}\r\n */\r\n/**\r\n * An HmacKey object contains metadata of an HMAC key created from a\r\n * service account through the {@link Storage} client using\r\n * {@link Storage#createHmacKey}.\r\n *\r\n * @see [HMAC keys documentation]{@link https://cloud.google.com/storage/docs/authentication/hmackeys}\r\n *\r\n * @class\r\n */\r\nclass HmacKey extends common_1.ServiceObject {\r\n    /**\r\n     * @typedef {object} HmacKeyOptions\r\n     * @property {string} [projectId] The project ID of the project that owns\r\n     *     the service account of the requested HMAC key. If not provided,\r\n     *     the project ID used to instantiate the Storage client will be used.\r\n     */\r\n    /**\r\n     * Constructs an HmacKey object.\r\n     *\r\n     * Note: this only create a local reference to an HMAC key, to create\r\n     * an HMAC key, use {@link Storage#createHmacKey}.\r\n     *\r\n     * @param {Storage} storage The Storage instance this HMAC key is\r\n     *     attached to.\r\n     * @param {string} accessId The unique accessId for this HMAC key.\r\n     * @param {HmacKeyOptions} options Constructor configurations.\r\n     * @example\r\n     * const {Storage} = require('@google-cloud/storage');\r\n     * const storage = new Storage();\r\n     * const hmacKey = storage.hmacKey('access-id');\r\n     */\r\n    constructor(storage, accessId, options) {\r\n        const methods = {\r\n            /**\r\n             * @typedef {object} DeleteHmacKeyOptions\r\n             * @property {string} [userProject] This parameter is currently ignored.\r\n             */\r\n            /**\r\n             * @typedef {array} DeleteHmacKeyResponse\r\n             * @property {object} 0 The full API response.\r\n             */\r\n            /**\r\n             * @callback DeleteHmacKeyCallback\r\n             * @param {?Error} err Request error, if any.\r\n             * @param {object} apiResponse The full API response.\r\n             */\r\n            /**\r\n             * Deletes an HMAC key.\r\n             * Key state must be set to `INACTIVE` prior to deletion.\r\n             * Caution: HMAC keys cannot be recovered once you delete them.\r\n             *\r\n             * The authenticated user must have `storage.hmacKeys.delete` permission for the project in which the key exists.\r\n             *\r\n             * @method HmacKey#delete\r\n             * @param {DeleteHmacKeyOptions} [options] Configuration options.\r\n             * @param {DeleteHmacKeyCallback} [callback] Callback function.\r\n             * @returns {Promise<DeleteHmacKeyResponse>}\r\n             *\r\n             * @example\r\n             * const {Storage} = require('@google-cloud/storage');\r\n             * const storage = new Storage();\r\n             *\r\n             * //-\r\n             * // Delete HMAC key after making the key inactive.\r\n             * //-\r\n             * const hmacKey = storage.hmacKey('ACCESS_ID');\r\n             * hmacKey.setMetadata({state: 'INACTIVE'}, (err, hmacKeyMetadata) => {\r\n             *     if (err) {\r\n             *       // The request was an error.\r\n             *       console.error(err);\r\n             *       return;\r\n             *     }\r\n             *     hmacKey.delete((err) => {\r\n             *       if (err) {\r\n             *         console.error(err);\r\n             *         return;\r\n             *       }\r\n             *       // The HMAC key is deleted.\r\n             *     });\r\n             *   });\r\n             *\r\n             * //-\r\n             * // If the callback is omitted, a promise is returned.\r\n             * //-\r\n             * const hmacKey = storage.hmacKey('ACCESS_ID');\r\n             * hmacKey\r\n             *   .setMetadata({state: 'INACTIVE'})\r\n             *   .then(() => {\r\n             *     return hmacKey.delete();\r\n             *   });\r\n             */\r\n            delete: true,\r\n            /**\r\n             * @callback GetHmacKeyCallback\r\n             * @param {?Error} err Request error, if any.\r\n             * @param {HmacKey} hmacKey this {@link HmacKey} instance.\r\n             * @param {object} apiResponse The full API response.\r\n             */\r\n            /**\r\n             * @typedef {array} GetHmacKeyResponse\r\n             * @property {HmacKey} 0 This {@link HmacKey} instance.\r\n             * @property {object} 1 The full API response.\r\n             */\r\n            /**\r\n             * @typedef {object} GetHmacKeyOptions\r\n             * @property {string} [userProject] This parameter is currently ignored.\r\n             */\r\n            /**\r\n             * Retrieves and populate an HMAC key's metadata, and return\r\n             * this {@link HmacKey} instance.\r\n             *\r\n             * HmacKey.get() does not give the HMAC key secret, as\r\n             * it is only returned on creation.\r\n             *\r\n             * The authenticated user must have `storage.hmacKeys.get` permission\r\n             * for the project in which the key exists.\r\n             *\r\n             * @method HmacKey#get\r\n             * @param {GetHmacKeyOptions} [options] Configuration options.\r\n             * @param {GetHmacKeyCallback} [callback] Callback function.\r\n             * @returns {Promise<GetHmacKeyResponse>}\r\n             *\r\n             * @example\r\n             * const {Storage} = require('@google-cloud/storage');\r\n             * const storage = new Storage();\r\n             *\r\n             * //-\r\n             * // Get the HmacKey's Metadata.\r\n             * //-\r\n             * storage.hmacKey('ACCESS_ID')\r\n             *   .get((err, hmacKey) => {\r\n             *     if (err) {\r\n             *       // The request was an error.\r\n             *       console.error(err);\r\n             *       return;\r\n             *     }\r\n             *     // do something with the returned HmacKey object.\r\n             *   });\r\n             *\r\n             * //-\r\n             * // If the callback is omitted, a promise is returned.\r\n             * //-\r\n             * storage.hmacKey('ACCESS_ID')\r\n             *   .get()\r\n             *   .then((data) => {\r\n             *     const hmacKey = data[0];\r\n             *   });\r\n             */\r\n            get: true,\r\n            /**\r\n             * @typedef {object} GetHmacKeyMetadataOptions\r\n             * @property {string} [userProject] This parameter is currently ignored.\r\n             */\r\n            /**\r\n             * Retrieves and populate an HMAC key's metadata, and return\r\n             * the HMAC key's metadata as an object.\r\n             *\r\n             * HmacKey.getMetadata() does not give the HMAC key secret, as\r\n             * it is only returned on creation.\r\n             *\r\n             * The authenticated user must have `storage.hmacKeys.get` permission\r\n             * for the project in which the key exists.\r\n             *\r\n             * @method HmacKey#getMetadata\r\n             * @param {GetHmacKeyMetadataOptions} [options] Configuration options.\r\n             * @param {HmacKeyMetadataCallback} [callback] Callback function.\r\n             * @returns {Promise<HmacKeyMetadataResponse>}\r\n             *\r\n             * @example\r\n             * const {Storage} = require('@google-cloud/storage');\r\n             * const storage = new Storage();\r\n             *\r\n             * //-\r\n             * // Get the HmacKey's metadata and populate to the metadata property.\r\n             * //-\r\n             * storage.hmacKey('ACCESS_ID')\r\n             *   .getMetadata((err, hmacKeyMetadata) => {\r\n             *     if (err) {\r\n             *       // The request was an error.\r\n             *       console.error(err);\r\n             *       return;\r\n             *     }\r\n             *     console.log(hmacKeyMetadata);\r\n             *   });\r\n             *\r\n             * //-\r\n             * // If the callback is omitted, a promise is returned.\r\n             * //-\r\n             * storage.hmacKey('ACCESS_ID')\r\n             *   .getMetadata()\r\n             *   .then((data) => {\r\n             *     const hmacKeyMetadata = data[0];\r\n             *     console.log(hmacKeyMetadata);\r\n             *   });\r\n             */\r\n            getMetadata: true,\r\n            /**\r\n             * @typedef {object} SetHmacKeyMetadata Subset of {@link HmacKeyMetadata} to update.\r\n             * @property {string} state New state of the HmacKey. Either 'ACTIVE' or 'INACTIVE'.\r\n             * @property {string} [etag] Include an etag from a previous get HMAC key request\r\n             *    to perform safe read-modify-write.\r\n             */\r\n            /**\r\n             * @typedef {object} SetHmacKeyMetadataOptions\r\n             * @property {string} [userProject] This parameter is currently ignored.\r\n             */\r\n            /**\r\n             * @callback HmacKeyMetadataCallback\r\n             * @param {?Error} err Request error, if any.\r\n             * @param {HmacKeyMetadata} metadata The updated {@link HmacKeyMetadata} object.\r\n             * @param {object} apiResponse The full API response.\r\n             */\r\n            /**\r\n             * @typedef {array} HmacKeyMetadataResponse\r\n             * @property {HmacKeyMetadata} 0 The updated {@link HmacKeyMetadata} object.\r\n             * @property {object} 1 The full API response.\r\n             */\r\n            /**\r\n             * Updates the state of an HMAC key. See {@link SetHmacKeyMetadata} for\r\n             * valid states.\r\n             *\r\n             * @method HmacKey#setMetadata\r\n             * @param {SetHmacKeyMetadata} metadata The new metadata.\r\n             * @param {SetHmacKeyMetadataOptions} [options] Configuration options.\r\n             * @param {HmacKeyMetadataCallback} [callback] Callback function.\r\n             * @returns {Promise<HmacKeyMetadataResponse>}\r\n             *\r\n             * @example\r\n             * const {Storage} = require('@google-cloud/storage');\r\n             * const storage = new Storage();\r\n             *\r\n             * const metadata = {\r\n             *   state: 'INACTIVE',\r\n             * };\r\n             *\r\n             * storage.hmacKey('ACCESS_ID')\r\n             *   .setMetadata(metadata, (err, hmacKeyMetadata) => {\r\n             *     if (err) {\r\n             *       // The request was an error.\r\n             *       console.error(err);\r\n             *       return;\r\n             *     }\r\n             *     console.log(hmacKeyMetadata);\r\n             *   });\r\n             *\r\n             * //-\r\n             * // If the callback is omitted, a promise is returned.\r\n             * //-\r\n             * storage.hmacKey('ACCESS_ID')\r\n             *   .setMetadata(metadata)\r\n             *   .then((data) => {\r\n             *     const hmacKeyMetadata = data[0];\r\n             *     console.log(hmacKeyMetadata);\r\n             *   });\r\n             */\r\n            setMetadata: {\r\n                reqOpts: {\r\n                    method: 'PUT',\r\n                },\r\n            },\r\n        };\r\n        const projectId = (options && options.projectId) || storage.projectId;\r\n        super({\r\n            parent: storage,\r\n            id: accessId,\r\n            baseUrl: `/projects/${projectId}/hmacKeys`,\r\n            methods,\r\n        });\r\n    }\r\n}\r\nexports.HmacKey = HmacKey;\r\n//# sourceMappingURL=hmacKey.js.map"]},"metadata":{},"sourceType":"script"}