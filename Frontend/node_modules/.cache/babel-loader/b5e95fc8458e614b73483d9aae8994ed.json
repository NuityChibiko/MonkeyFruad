{"ast":null,"code":"/*! firebase-admin v9.4.2 */\n\"use strict\";\n/*!\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FirebaseNamespace = exports.FirebaseNamespaceInternals = exports.FIREBASE_CONFIG_VAR = void 0;\n\nvar fs = require(\"fs\");\n\nvar deep_copy_1 = require(\"./utils/deep-copy\");\n\nvar error_1 = require(\"./utils/error\");\n\nvar firebase_app_1 = require(\"./firebase-app\");\n\nvar credential_1 = require(\"./credential/credential\");\n\nvar credential_internal_1 = require(\"./credential/credential-internal\");\n\nvar validator = require(\"./utils/validator\");\n\nvar index_1 = require(\"./utils/index\");\n\nvar DEFAULT_APP_NAME = '[DEFAULT]';\n/**\r\n * Constant holding the environment variable name with the default config.\r\n * If the environment variable contains a string that starts with '{' it will be parsed as JSON,\r\n * otherwise it will be assumed to be pointing to a file.\r\n */\n\nexports.FIREBASE_CONFIG_VAR = 'FIREBASE_CONFIG';\n/**\r\n * Internals of a FirebaseNamespace instance.\r\n */\n\nvar FirebaseNamespaceInternals =\n/** @class */\nfunction () {\n  function FirebaseNamespaceInternals(firebase_) {\n    this.firebase_ = firebase_;\n    this.serviceFactories = {};\n    this.apps_ = {};\n    this.appHooks_ = {};\n  }\n  /**\r\n   * Initializes the App instance.\r\n   *\r\n   * @param options Optional options for the App instance. If none present will try to initialize\r\n   *   from the FIREBASE_CONFIG environment variable. If the environment variable contains a string\r\n   *   that starts with '{' it will be parsed as JSON, otherwise it will be assumed to be pointing\r\n   *   to a file.\r\n   * @param appName Optional name of the FirebaseApp instance.\r\n   *\r\n   * @return A new App instance.\r\n   */\n\n\n  FirebaseNamespaceInternals.prototype.initializeApp = function (options, appName) {\n    if (appName === void 0) {\n      appName = DEFAULT_APP_NAME;\n    }\n\n    if (typeof options === 'undefined') {\n      options = this.loadOptionsFromEnvVar();\n      options.credential = credential_internal_1.getApplicationDefault();\n    }\n\n    if (typeof appName !== 'string' || appName === '') {\n      throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_APP_NAME, \"Invalid Firebase app name \\\"\" + appName + \"\\\" provided. App name must be a non-empty string.\");\n    } else if (appName in this.apps_) {\n      if (appName === DEFAULT_APP_NAME) {\n        throw new error_1.FirebaseAppError(error_1.AppErrorCodes.DUPLICATE_APP, 'The default Firebase app already exists. This means you called initializeApp() ' + 'more than once without providing an app name as the second argument. In most cases ' + 'you only need to call initializeApp() once. But if you do want to initialize ' + 'multiple apps, pass a second argument to initializeApp() to give each app a unique ' + 'name.');\n      } else {\n        throw new error_1.FirebaseAppError(error_1.AppErrorCodes.DUPLICATE_APP, \"Firebase app named \\\"\" + appName + \"\\\" already exists. This means you called initializeApp() \" + 'more than once with the same app name as the second argument. Make sure you provide a ' + 'unique name every time you call initializeApp().');\n      }\n    }\n\n    var app = new firebase_app_1.FirebaseApp(options, appName, this);\n    this.apps_[appName] = app;\n    this.callAppHooks_(app, 'create');\n    return app;\n  };\n  /**\r\n   * Returns the App instance with the provided name (or the default App instance\r\n   * if no name is provided).\r\n   *\r\n   * @param appName Optional name of the FirebaseApp instance to return.\r\n   * @return The App instance which has the provided name.\r\n   */\n\n\n  FirebaseNamespaceInternals.prototype.app = function (appName) {\n    if (appName === void 0) {\n      appName = DEFAULT_APP_NAME;\n    }\n\n    if (typeof appName !== 'string' || appName === '') {\n      throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_APP_NAME, \"Invalid Firebase app name \\\"\" + appName + \"\\\" provided. App name must be a non-empty string.\");\n    } else if (!(appName in this.apps_)) {\n      var errorMessage = appName === DEFAULT_APP_NAME ? 'The default Firebase app does not exist. ' : \"Firebase app named \\\"\" + appName + \"\\\" does not exist. \";\n      errorMessage += 'Make sure you call initializeApp() before using any of the Firebase services.';\n      throw new error_1.FirebaseAppError(error_1.AppErrorCodes.NO_APP, errorMessage);\n    }\n\n    return this.apps_[appName];\n  };\n\n  Object.defineProperty(FirebaseNamespaceInternals.prototype, \"apps\", {\n    /*\r\n     * Returns an array of all the non-deleted App instances.\r\n     */\n    get: function () {\n      var _this = this; // Return a copy so the caller cannot mutate the array\n\n\n      return Object.keys(this.apps_).map(function (appName) {\n        return _this.apps_[appName];\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /*\r\n   * Removes the specified App instance.\r\n   */\n\n  FirebaseNamespaceInternals.prototype.removeApp = function (appName) {\n    if (typeof appName === 'undefined') {\n      throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_APP_NAME, 'No Firebase app name provided. App name must be a non-empty string.');\n    }\n\n    var appToRemove = this.app(appName);\n    this.callAppHooks_(appToRemove, 'delete');\n    delete this.apps_[appName];\n  };\n  /**\r\n   * Registers a new service on this Firebase namespace.\r\n   *\r\n   * @param serviceName The name of the Firebase service to register.\r\n   * @param createService A factory method to generate an instance of the Firebase service.\r\n   * @param serviceProperties Optional properties to extend this Firebase namespace with.\r\n   * @param appHook Optional callback that handles app-related events like app creation and deletion.\r\n   * @return The Firebase service's namespace.\r\n   */\n\n\n  FirebaseNamespaceInternals.prototype.registerService = function (serviceName, createService, serviceProperties, appHook) {\n    var _this = this;\n\n    var errorMessage;\n\n    if (typeof serviceName === 'undefined') {\n      errorMessage = 'No service name provided. Service name must be a non-empty string.';\n    } else if (typeof serviceName !== 'string' || serviceName === '') {\n      errorMessage = \"Invalid service name \\\"\" + serviceName + \"\\\" provided. Service name must be a non-empty string.\";\n    } else if (serviceName in this.serviceFactories) {\n      errorMessage = \"Firebase service named \\\"\" + serviceName + \"\\\" has already been registered.\";\n    }\n\n    if (typeof errorMessage !== 'undefined') {\n      throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INTERNAL_ERROR, \"INTERNAL ASSERT FAILED: \" + errorMessage);\n    }\n\n    this.serviceFactories[serviceName] = createService;\n\n    if (appHook) {\n      this.appHooks_[serviceName] = appHook;\n    } // The service namespace is an accessor function which takes a FirebaseApp instance\n    // or uses the default app if no FirebaseApp instance is provided\n\n\n    var serviceNamespace = function (appArg) {\n      if (typeof appArg === 'undefined') {\n        appArg = _this.app();\n      } // Forward service instance lookup to the FirebaseApp\n\n\n      return appArg[serviceName]();\n    }; // ... and a container for service-level properties.\n\n\n    if (serviceProperties !== undefined) {\n      deep_copy_1.deepExtend(serviceNamespace, serviceProperties);\n    } // Monkey-patch the service namespace onto the Firebase namespace\n\n\n    this.firebase_[serviceName] = serviceNamespace;\n    return serviceNamespace;\n  };\n  /**\r\n   * Calls the app hooks corresponding to the provided event name for each service within the\r\n   * provided App instance.\r\n   *\r\n   * @param app The App instance whose app hooks to call.\r\n   * @param eventName The event name representing which app hooks to call.\r\n   */\n\n\n  FirebaseNamespaceInternals.prototype.callAppHooks_ = function (app, eventName) {\n    var _this = this;\n\n    Object.keys(this.serviceFactories).forEach(function (serviceName) {\n      if (_this.appHooks_[serviceName]) {\n        _this.appHooks_[serviceName](eventName, app);\n      }\n    });\n  };\n  /**\r\n   * Parse the file pointed to by the FIREBASE_CONFIG_VAR, if it exists.\r\n   * Or if the FIREBASE_CONFIG_ENV contains a valid JSON object, parse it directly.\r\n   * If the environment variable contains a string that starts with '{' it will be parsed as JSON,\r\n   * otherwise it will be assumed to be pointing to a file.\r\n   */\n\n\n  FirebaseNamespaceInternals.prototype.loadOptionsFromEnvVar = function () {\n    var config = process.env[exports.FIREBASE_CONFIG_VAR];\n\n    if (!validator.isNonEmptyString(config)) {\n      return {};\n    }\n\n    try {\n      var contents = config.startsWith('{') ? config : fs.readFileSync(config, 'utf8');\n      return JSON.parse(contents);\n    } catch (error) {\n      // Throw a nicely formed error message if the file contents cannot be parsed\n      throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_APP_OPTIONS, 'Failed to parse app options file: ' + error);\n    }\n  };\n\n  return FirebaseNamespaceInternals;\n}();\n\nexports.FirebaseNamespaceInternals = FirebaseNamespaceInternals;\nvar firebaseCredential = {\n  cert: credential_1.cert,\n  refreshToken: credential_1.refreshToken,\n  applicationDefault: credential_1.applicationDefault\n};\n/**\r\n * Global Firebase context object.\r\n */\n\nvar FirebaseNamespace =\n/** @class */\nfunction () {\n  /* tslint:enable */\n  function FirebaseNamespace() {\n    // Hack to prevent Babel from modifying the object returned as the default admin namespace.\n\n    /* tslint:disable:variable-name */\n    this.__esModule = true;\n    /* tslint:enable:variable-name */\n\n    this.credential = firebaseCredential;\n    this.SDK_VERSION = index_1.getSdkVersion();\n    /* tslint:disable */\n    // TODO(jwenger): Database is the only consumer of firebase.Promise. We should update it to use\n    // use the native Promise and then remove this.\n\n    this.Promise = Promise;\n    this.INTERNAL = new FirebaseNamespaceInternals(this);\n  }\n\n  Object.defineProperty(FirebaseNamespace.prototype, \"auth\", {\n    /**\r\n     * Gets the `Auth` service namespace. The returned namespace can be used to get the\r\n     * `Auth` service for the default app or an explicitly specified app.\r\n     */\n    get: function () {\n      var _this = this;\n\n      var fn = function (app) {\n        return _this.ensureApp(app).auth();\n      };\n\n      var auth = require('./auth/auth').Auth;\n\n      return Object.assign(fn, {\n        Auth: auth\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FirebaseNamespace.prototype, \"database\", {\n    /**\r\n     * Gets the `Database` service namespace. The returned namespace can be used to get the\r\n     * `Database` service for the default app or an explicitly specified app.\r\n     */\n    get: function () {\n      var _this = this;\n\n      var fn = function (app) {\n        return _this.ensureApp(app).database();\n      }; // eslint-disable-next-line @typescript-eslint/no-var-requires\n\n\n      return Object.assign(fn, require('@firebase/database'));\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FirebaseNamespace.prototype, \"messaging\", {\n    /**\r\n     * Gets the `Messaging` service namespace. The returned namespace can be used to get the\r\n     * `Messaging` service for the default app or an explicitly specified app.\r\n     */\n    get: function () {\n      var _this = this;\n\n      var fn = function (app) {\n        return _this.ensureApp(app).messaging();\n      };\n\n      var messaging = require('./messaging/messaging').Messaging;\n\n      return Object.assign(fn, {\n        Messaging: messaging\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FirebaseNamespace.prototype, \"storage\", {\n    /**\r\n     * Gets the `Storage` service namespace. The returned namespace can be used to get the\r\n     * `Storage` service for the default app or an explicitly specified app.\r\n     */\n    get: function () {\n      var _this = this;\n\n      var fn = function (app) {\n        return _this.ensureApp(app).storage();\n      };\n\n      var storage = require('./storage/storage').Storage;\n\n      return Object.assign(fn, {\n        Storage: storage\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FirebaseNamespace.prototype, \"firestore\", {\n    /**\r\n     * Gets the `Firestore` service namespace. The returned namespace can be used to get the\r\n     * `Firestore` service for the default app or an explicitly specified app.\r\n     */\n    get: function () {\n      var _this = this;\n\n      var fn = function (app) {\n        return _this.ensureApp(app).firestore();\n      }; // eslint-disable-next-line @typescript-eslint/no-var-requires\n\n\n      var firestore = require('@google-cloud/firestore');\n\n      fn = Object.assign(fn, firestore.Firestore); // `v1beta1` and `v1` are lazy-loaded in the Firestore SDK. We use the same trick here\n      // to avoid triggering this lazy-loading upon initialization.\n\n      Object.defineProperty(fn, 'v1beta1', {\n        get: function () {\n          return firestore.v1beta1;\n        }\n      });\n      Object.defineProperty(fn, 'v1', {\n        get: function () {\n          return firestore.v1;\n        }\n      });\n      return fn;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FirebaseNamespace.prototype, \"machineLearning\", {\n    /**\r\n     * Gets the `MachineLearning` service namespace. The returned namespace can be\r\n     * used to get the `MachineLearning` service for the default app or an\r\n     * explicityly specified app.\r\n     */\n    get: function () {\n      var _this = this;\n\n      var fn = function (app) {\n        return _this.ensureApp(app).machineLearning();\n      };\n\n      var machineLearning = require('./machine-learning/machine-learning').MachineLearning;\n\n      return Object.assign(fn, {\n        MachineLearning: machineLearning\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FirebaseNamespace.prototype, \"instanceId\", {\n    /**\r\n     * Gets the `InstanceId` service namespace. The returned namespace can be used to get the\r\n     * `Instance` service for the default app or an explicitly specified app.\r\n     */\n    get: function () {\n      var _this = this;\n\n      var fn = function (app) {\n        return _this.ensureApp(app).instanceId();\n      };\n\n      var instanceId = require('./instance-id/instance-id').InstanceId;\n\n      return Object.assign(fn, {\n        InstanceId: instanceId\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FirebaseNamespace.prototype, \"projectManagement\", {\n    /**\r\n     * Gets the `ProjectManagement` service namespace. The returned namespace can be used to get the\r\n     * `ProjectManagement` service for the default app or an explicitly specified app.\r\n     */\n    get: function () {\n      var _this = this;\n\n      var fn = function (app) {\n        return _this.ensureApp(app).projectManagement();\n      };\n\n      var projectManagement = require('./project-management/project-management').ProjectManagement;\n\n      return Object.assign(fn, {\n        ProjectManagement: projectManagement\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FirebaseNamespace.prototype, \"securityRules\", {\n    /**\r\n     * Gets the `SecurityRules` service namespace. The returned namespace can be used to get the\r\n     * `SecurityRules` service for the default app or an explicitly specified app.\r\n     */\n    get: function () {\n      var _this = this;\n\n      var fn = function (app) {\n        return _this.ensureApp(app).securityRules();\n      };\n\n      var securityRules = require('./security-rules/security-rules').SecurityRules;\n\n      return Object.assign(fn, {\n        SecurityRules: securityRules\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FirebaseNamespace.prototype, \"remoteConfig\", {\n    /**\r\n     * Gets the `RemoteConfig` service namespace. The returned namespace can be used to get the\r\n     * `RemoteConfig` service for the default app or an explicitly specified app.\r\n     */\n    get: function () {\n      var _this = this;\n\n      var fn = function (app) {\n        return _this.ensureApp(app).remoteConfig();\n      };\n\n      var remoteConfig = require('./remote-config/remote-config').RemoteConfig;\n\n      return Object.assign(fn, {\n        RemoteConfig: remoteConfig\n      });\n    },\n    enumerable: false,\n    configurable: true\n  }); // TODO: Change the return types to app.App in the following methods.\n\n  /**\r\n   * Initializes the FirebaseApp instance.\r\n   *\r\n   * @param options Optional options for the FirebaseApp instance.\r\n   *   If none present will try to initialize from the FIREBASE_CONFIG environment variable.\r\n   *   If the environment variable contains a string that starts with '{' it will be parsed as JSON,\r\n   *   otherwise it will be assumed to be pointing to a file.\r\n   * @param appName Optional name of the FirebaseApp instance.\r\n   *\r\n   * @return A new FirebaseApp instance.\r\n   */\n\n  FirebaseNamespace.prototype.initializeApp = function (options, appName) {\n    return this.INTERNAL.initializeApp(options, appName);\n  };\n  /**\r\n   * Returns the FirebaseApp instance with the provided name (or the default FirebaseApp instance\r\n   * if no name is provided).\r\n   *\r\n   * @param appName Optional name of the FirebaseApp instance to return.\r\n   * @return The FirebaseApp instance which has the provided name.\r\n   */\n\n\n  FirebaseNamespace.prototype.app = function (appName) {\n    return this.INTERNAL.app(appName);\n  };\n\n  Object.defineProperty(FirebaseNamespace.prototype, \"apps\", {\n    /*\r\n     * Returns an array of all the non-deleted FirebaseApp instances.\r\n     */\n    get: function () {\n      return this.INTERNAL.apps;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  FirebaseNamespace.prototype.ensureApp = function (app) {\n    if (typeof app === 'undefined') {\n      app = this.app();\n    }\n\n    return app;\n  };\n\n  return FirebaseNamespace;\n}();\n\nexports.FirebaseNamespace = FirebaseNamespace;","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Backend/node_modules/firebase-admin/lib/firebase-namespace.js"],"names":["Object","defineProperty","exports","value","FirebaseNamespace","FirebaseNamespaceInternals","FIREBASE_CONFIG_VAR","fs","require","deep_copy_1","error_1","firebase_app_1","credential_1","credential_internal_1","validator","index_1","DEFAULT_APP_NAME","firebase_","serviceFactories","apps_","appHooks_","prototype","initializeApp","options","appName","loadOptionsFromEnvVar","credential","getApplicationDefault","FirebaseAppError","AppErrorCodes","INVALID_APP_NAME","DUPLICATE_APP","app","FirebaseApp","callAppHooks_","errorMessage","NO_APP","get","_this","keys","map","enumerable","configurable","removeApp","appToRemove","registerService","serviceName","createService","serviceProperties","appHook","INTERNAL_ERROR","serviceNamespace","appArg","undefined","deepExtend","eventName","forEach","config","process","env","isNonEmptyString","contents","startsWith","readFileSync","JSON","parse","error","INVALID_APP_OPTIONS","firebaseCredential","cert","refreshToken","applicationDefault","__esModule","SDK_VERSION","getSdkVersion","Promise","INTERNAL","fn","ensureApp","auth","Auth","assign","database","messaging","Messaging","storage","Storage","firestore","Firestore","v1beta1","v1","machineLearning","MachineLearning","instanceId","InstanceId","projectManagement","ProjectManagement","securityRules","SecurityRules","remoteConfig","RemoteConfig","apps"],"mappings":"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","sourcesContent":["/*! firebase-admin v9.4.2 */\r\n\"use strict\";\r\n/*!\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.FirebaseNamespace = exports.FirebaseNamespaceInternals = exports.FIREBASE_CONFIG_VAR = void 0;\r\nvar fs = require(\"fs\");\r\nvar deep_copy_1 = require(\"./utils/deep-copy\");\r\nvar error_1 = require(\"./utils/error\");\r\nvar firebase_app_1 = require(\"./firebase-app\");\r\nvar credential_1 = require(\"./credential/credential\");\r\nvar credential_internal_1 = require(\"./credential/credential-internal\");\r\nvar validator = require(\"./utils/validator\");\r\nvar index_1 = require(\"./utils/index\");\r\nvar DEFAULT_APP_NAME = '[DEFAULT]';\r\n/**\r\n * Constant holding the environment variable name with the default config.\r\n * If the environment variable contains a string that starts with '{' it will be parsed as JSON,\r\n * otherwise it will be assumed to be pointing to a file.\r\n */\r\nexports.FIREBASE_CONFIG_VAR = 'FIREBASE_CONFIG';\r\n/**\r\n * Internals of a FirebaseNamespace instance.\r\n */\r\nvar FirebaseNamespaceInternals = /** @class */ (function () {\r\n    function FirebaseNamespaceInternals(firebase_) {\r\n        this.firebase_ = firebase_;\r\n        this.serviceFactories = {};\r\n        this.apps_ = {};\r\n        this.appHooks_ = {};\r\n    }\r\n    /**\r\n     * Initializes the App instance.\r\n     *\r\n     * @param options Optional options for the App instance. If none present will try to initialize\r\n     *   from the FIREBASE_CONFIG environment variable. If the environment variable contains a string\r\n     *   that starts with '{' it will be parsed as JSON, otherwise it will be assumed to be pointing\r\n     *   to a file.\r\n     * @param appName Optional name of the FirebaseApp instance.\r\n     *\r\n     * @return A new App instance.\r\n     */\r\n    FirebaseNamespaceInternals.prototype.initializeApp = function (options, appName) {\r\n        if (appName === void 0) { appName = DEFAULT_APP_NAME; }\r\n        if (typeof options === 'undefined') {\r\n            options = this.loadOptionsFromEnvVar();\r\n            options.credential = credential_internal_1.getApplicationDefault();\r\n        }\r\n        if (typeof appName !== 'string' || appName === '') {\r\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_APP_NAME, \"Invalid Firebase app name \\\"\" + appName + \"\\\" provided. App name must be a non-empty string.\");\r\n        }\r\n        else if (appName in this.apps_) {\r\n            if (appName === DEFAULT_APP_NAME) {\r\n                throw new error_1.FirebaseAppError(error_1.AppErrorCodes.DUPLICATE_APP, 'The default Firebase app already exists. This means you called initializeApp() ' +\r\n                    'more than once without providing an app name as the second argument. In most cases ' +\r\n                    'you only need to call initializeApp() once. But if you do want to initialize ' +\r\n                    'multiple apps, pass a second argument to initializeApp() to give each app a unique ' +\r\n                    'name.');\r\n            }\r\n            else {\r\n                throw new error_1.FirebaseAppError(error_1.AppErrorCodes.DUPLICATE_APP, \"Firebase app named \\\"\" + appName + \"\\\" already exists. This means you called initializeApp() \" +\r\n                    'more than once with the same app name as the second argument. Make sure you provide a ' +\r\n                    'unique name every time you call initializeApp().');\r\n            }\r\n        }\r\n        var app = new firebase_app_1.FirebaseApp(options, appName, this);\r\n        this.apps_[appName] = app;\r\n        this.callAppHooks_(app, 'create');\r\n        return app;\r\n    };\r\n    /**\r\n     * Returns the App instance with the provided name (or the default App instance\r\n     * if no name is provided).\r\n     *\r\n     * @param appName Optional name of the FirebaseApp instance to return.\r\n     * @return The App instance which has the provided name.\r\n     */\r\n    FirebaseNamespaceInternals.prototype.app = function (appName) {\r\n        if (appName === void 0) { appName = DEFAULT_APP_NAME; }\r\n        if (typeof appName !== 'string' || appName === '') {\r\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_APP_NAME, \"Invalid Firebase app name \\\"\" + appName + \"\\\" provided. App name must be a non-empty string.\");\r\n        }\r\n        else if (!(appName in this.apps_)) {\r\n            var errorMessage = (appName === DEFAULT_APP_NAME)\r\n                ? 'The default Firebase app does not exist. ' : \"Firebase app named \\\"\" + appName + \"\\\" does not exist. \";\r\n            errorMessage += 'Make sure you call initializeApp() before using any of the Firebase services.';\r\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.NO_APP, errorMessage);\r\n        }\r\n        return this.apps_[appName];\r\n    };\r\n    Object.defineProperty(FirebaseNamespaceInternals.prototype, \"apps\", {\r\n        /*\r\n         * Returns an array of all the non-deleted App instances.\r\n         */\r\n        get: function () {\r\n            var _this = this;\r\n            // Return a copy so the caller cannot mutate the array\r\n            return Object.keys(this.apps_).map(function (appName) { return _this.apps_[appName]; });\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /*\r\n     * Removes the specified App instance.\r\n     */\r\n    FirebaseNamespaceInternals.prototype.removeApp = function (appName) {\r\n        if (typeof appName === 'undefined') {\r\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_APP_NAME, 'No Firebase app name provided. App name must be a non-empty string.');\r\n        }\r\n        var appToRemove = this.app(appName);\r\n        this.callAppHooks_(appToRemove, 'delete');\r\n        delete this.apps_[appName];\r\n    };\r\n    /**\r\n     * Registers a new service on this Firebase namespace.\r\n     *\r\n     * @param serviceName The name of the Firebase service to register.\r\n     * @param createService A factory method to generate an instance of the Firebase service.\r\n     * @param serviceProperties Optional properties to extend this Firebase namespace with.\r\n     * @param appHook Optional callback that handles app-related events like app creation and deletion.\r\n     * @return The Firebase service's namespace.\r\n     */\r\n    FirebaseNamespaceInternals.prototype.registerService = function (serviceName, createService, serviceProperties, appHook) {\r\n        var _this = this;\r\n        var errorMessage;\r\n        if (typeof serviceName === 'undefined') {\r\n            errorMessage = 'No service name provided. Service name must be a non-empty string.';\r\n        }\r\n        else if (typeof serviceName !== 'string' || serviceName === '') {\r\n            errorMessage = \"Invalid service name \\\"\" + serviceName + \"\\\" provided. Service name must be a non-empty string.\";\r\n        }\r\n        else if (serviceName in this.serviceFactories) {\r\n            errorMessage = \"Firebase service named \\\"\" + serviceName + \"\\\" has already been registered.\";\r\n        }\r\n        if (typeof errorMessage !== 'undefined') {\r\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INTERNAL_ERROR, \"INTERNAL ASSERT FAILED: \" + errorMessage);\r\n        }\r\n        this.serviceFactories[serviceName] = createService;\r\n        if (appHook) {\r\n            this.appHooks_[serviceName] = appHook;\r\n        }\r\n        // The service namespace is an accessor function which takes a FirebaseApp instance\r\n        // or uses the default app if no FirebaseApp instance is provided\r\n        var serviceNamespace = function (appArg) {\r\n            if (typeof appArg === 'undefined') {\r\n                appArg = _this.app();\r\n            }\r\n            // Forward service instance lookup to the FirebaseApp\r\n            return appArg[serviceName]();\r\n        };\r\n        // ... and a container for service-level properties.\r\n        if (serviceProperties !== undefined) {\r\n            deep_copy_1.deepExtend(serviceNamespace, serviceProperties);\r\n        }\r\n        // Monkey-patch the service namespace onto the Firebase namespace\r\n        this.firebase_[serviceName] = serviceNamespace;\r\n        return serviceNamespace;\r\n    };\r\n    /**\r\n     * Calls the app hooks corresponding to the provided event name for each service within the\r\n     * provided App instance.\r\n     *\r\n     * @param app The App instance whose app hooks to call.\r\n     * @param eventName The event name representing which app hooks to call.\r\n     */\r\n    FirebaseNamespaceInternals.prototype.callAppHooks_ = function (app, eventName) {\r\n        var _this = this;\r\n        Object.keys(this.serviceFactories).forEach(function (serviceName) {\r\n            if (_this.appHooks_[serviceName]) {\r\n                _this.appHooks_[serviceName](eventName, app);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Parse the file pointed to by the FIREBASE_CONFIG_VAR, if it exists.\r\n     * Or if the FIREBASE_CONFIG_ENV contains a valid JSON object, parse it directly.\r\n     * If the environment variable contains a string that starts with '{' it will be parsed as JSON,\r\n     * otherwise it will be assumed to be pointing to a file.\r\n     */\r\n    FirebaseNamespaceInternals.prototype.loadOptionsFromEnvVar = function () {\r\n        var config = process.env[exports.FIREBASE_CONFIG_VAR];\r\n        if (!validator.isNonEmptyString(config)) {\r\n            return {};\r\n        }\r\n        try {\r\n            var contents = config.startsWith('{') ? config : fs.readFileSync(config, 'utf8');\r\n            return JSON.parse(contents);\r\n        }\r\n        catch (error) {\r\n            // Throw a nicely formed error message if the file contents cannot be parsed\r\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_APP_OPTIONS, 'Failed to parse app options file: ' + error);\r\n        }\r\n    };\r\n    return FirebaseNamespaceInternals;\r\n}());\r\nexports.FirebaseNamespaceInternals = FirebaseNamespaceInternals;\r\nvar firebaseCredential = {\r\n    cert: credential_1.cert, refreshToken: credential_1.refreshToken, applicationDefault: credential_1.applicationDefault\r\n};\r\n/**\r\n * Global Firebase context object.\r\n */\r\nvar FirebaseNamespace = /** @class */ (function () {\r\n    /* tslint:enable */\r\n    function FirebaseNamespace() {\r\n        // Hack to prevent Babel from modifying the object returned as the default admin namespace.\r\n        /* tslint:disable:variable-name */\r\n        this.__esModule = true;\r\n        /* tslint:enable:variable-name */\r\n        this.credential = firebaseCredential;\r\n        this.SDK_VERSION = index_1.getSdkVersion();\r\n        /* tslint:disable */\r\n        // TODO(jwenger): Database is the only consumer of firebase.Promise. We should update it to use\r\n        // use the native Promise and then remove this.\r\n        this.Promise = Promise;\r\n        this.INTERNAL = new FirebaseNamespaceInternals(this);\r\n    }\r\n    Object.defineProperty(FirebaseNamespace.prototype, \"auth\", {\r\n        /**\r\n         * Gets the `Auth` service namespace. The returned namespace can be used to get the\r\n         * `Auth` service for the default app or an explicitly specified app.\r\n         */\r\n        get: function () {\r\n            var _this = this;\r\n            var fn = function (app) {\r\n                return _this.ensureApp(app).auth();\r\n            };\r\n            var auth = require('./auth/auth').Auth;\r\n            return Object.assign(fn, { Auth: auth });\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FirebaseNamespace.prototype, \"database\", {\r\n        /**\r\n         * Gets the `Database` service namespace. The returned namespace can be used to get the\r\n         * `Database` service for the default app or an explicitly specified app.\r\n         */\r\n        get: function () {\r\n            var _this = this;\r\n            var fn = function (app) {\r\n                return _this.ensureApp(app).database();\r\n            };\r\n            // eslint-disable-next-line @typescript-eslint/no-var-requires\r\n            return Object.assign(fn, require('@firebase/database'));\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FirebaseNamespace.prototype, \"messaging\", {\r\n        /**\r\n         * Gets the `Messaging` service namespace. The returned namespace can be used to get the\r\n         * `Messaging` service for the default app or an explicitly specified app.\r\n         */\r\n        get: function () {\r\n            var _this = this;\r\n            var fn = function (app) {\r\n                return _this.ensureApp(app).messaging();\r\n            };\r\n            var messaging = require('./messaging/messaging').Messaging;\r\n            return Object.assign(fn, { Messaging: messaging });\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FirebaseNamespace.prototype, \"storage\", {\r\n        /**\r\n         * Gets the `Storage` service namespace. The returned namespace can be used to get the\r\n         * `Storage` service for the default app or an explicitly specified app.\r\n         */\r\n        get: function () {\r\n            var _this = this;\r\n            var fn = function (app) {\r\n                return _this.ensureApp(app).storage();\r\n            };\r\n            var storage = require('./storage/storage').Storage;\r\n            return Object.assign(fn, { Storage: storage });\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FirebaseNamespace.prototype, \"firestore\", {\r\n        /**\r\n         * Gets the `Firestore` service namespace. The returned namespace can be used to get the\r\n         * `Firestore` service for the default app or an explicitly specified app.\r\n         */\r\n        get: function () {\r\n            var _this = this;\r\n            var fn = function (app) {\r\n                return _this.ensureApp(app).firestore();\r\n            };\r\n            // eslint-disable-next-line @typescript-eslint/no-var-requires\r\n            var firestore = require('@google-cloud/firestore');\r\n            fn = Object.assign(fn, firestore.Firestore);\r\n            // `v1beta1` and `v1` are lazy-loaded in the Firestore SDK. We use the same trick here\r\n            // to avoid triggering this lazy-loading upon initialization.\r\n            Object.defineProperty(fn, 'v1beta1', {\r\n                get: function () {\r\n                    return firestore.v1beta1;\r\n                },\r\n            });\r\n            Object.defineProperty(fn, 'v1', {\r\n                get: function () {\r\n                    return firestore.v1;\r\n                },\r\n            });\r\n            return fn;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FirebaseNamespace.prototype, \"machineLearning\", {\r\n        /**\r\n         * Gets the `MachineLearning` service namespace. The returned namespace can be\r\n         * used to get the `MachineLearning` service for the default app or an\r\n         * explicityly specified app.\r\n         */\r\n        get: function () {\r\n            var _this = this;\r\n            var fn = function (app) {\r\n                return _this.ensureApp(app).machineLearning();\r\n            };\r\n            var machineLearning = require('./machine-learning/machine-learning').MachineLearning;\r\n            return Object.assign(fn, { MachineLearning: machineLearning });\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FirebaseNamespace.prototype, \"instanceId\", {\r\n        /**\r\n         * Gets the `InstanceId` service namespace. The returned namespace can be used to get the\r\n         * `Instance` service for the default app or an explicitly specified app.\r\n         */\r\n        get: function () {\r\n            var _this = this;\r\n            var fn = function (app) {\r\n                return _this.ensureApp(app).instanceId();\r\n            };\r\n            var instanceId = require('./instance-id/instance-id').InstanceId;\r\n            return Object.assign(fn, { InstanceId: instanceId });\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FirebaseNamespace.prototype, \"projectManagement\", {\r\n        /**\r\n         * Gets the `ProjectManagement` service namespace. The returned namespace can be used to get the\r\n         * `ProjectManagement` service for the default app or an explicitly specified app.\r\n         */\r\n        get: function () {\r\n            var _this = this;\r\n            var fn = function (app) {\r\n                return _this.ensureApp(app).projectManagement();\r\n            };\r\n            var projectManagement = require('./project-management/project-management').ProjectManagement;\r\n            return Object.assign(fn, { ProjectManagement: projectManagement });\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FirebaseNamespace.prototype, \"securityRules\", {\r\n        /**\r\n         * Gets the `SecurityRules` service namespace. The returned namespace can be used to get the\r\n         * `SecurityRules` service for the default app or an explicitly specified app.\r\n         */\r\n        get: function () {\r\n            var _this = this;\r\n            var fn = function (app) {\r\n                return _this.ensureApp(app).securityRules();\r\n            };\r\n            var securityRules = require('./security-rules/security-rules').SecurityRules;\r\n            return Object.assign(fn, { SecurityRules: securityRules });\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FirebaseNamespace.prototype, \"remoteConfig\", {\r\n        /**\r\n         * Gets the `RemoteConfig` service namespace. The returned namespace can be used to get the\r\n         * `RemoteConfig` service for the default app or an explicitly specified app.\r\n         */\r\n        get: function () {\r\n            var _this = this;\r\n            var fn = function (app) {\r\n                return _this.ensureApp(app).remoteConfig();\r\n            };\r\n            var remoteConfig = require('./remote-config/remote-config').RemoteConfig;\r\n            return Object.assign(fn, { RemoteConfig: remoteConfig });\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    // TODO: Change the return types to app.App in the following methods.\r\n    /**\r\n     * Initializes the FirebaseApp instance.\r\n     *\r\n     * @param options Optional options for the FirebaseApp instance.\r\n     *   If none present will try to initialize from the FIREBASE_CONFIG environment variable.\r\n     *   If the environment variable contains a string that starts with '{' it will be parsed as JSON,\r\n     *   otherwise it will be assumed to be pointing to a file.\r\n     * @param appName Optional name of the FirebaseApp instance.\r\n     *\r\n     * @return A new FirebaseApp instance.\r\n     */\r\n    FirebaseNamespace.prototype.initializeApp = function (options, appName) {\r\n        return this.INTERNAL.initializeApp(options, appName);\r\n    };\r\n    /**\r\n     * Returns the FirebaseApp instance with the provided name (or the default FirebaseApp instance\r\n     * if no name is provided).\r\n     *\r\n     * @param appName Optional name of the FirebaseApp instance to return.\r\n     * @return The FirebaseApp instance which has the provided name.\r\n     */\r\n    FirebaseNamespace.prototype.app = function (appName) {\r\n        return this.INTERNAL.app(appName);\r\n    };\r\n    Object.defineProperty(FirebaseNamespace.prototype, \"apps\", {\r\n        /*\r\n         * Returns an array of all the non-deleted FirebaseApp instances.\r\n         */\r\n        get: function () {\r\n            return this.INTERNAL.apps;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    FirebaseNamespace.prototype.ensureApp = function (app) {\r\n        if (typeof app === 'undefined') {\r\n            app = this.app();\r\n        }\r\n        return app;\r\n    };\r\n    return FirebaseNamespace;\r\n}());\r\nexports.FirebaseNamespace = FirebaseNamespace;\r\n"]},"metadata":{},"sourceType":"script"}