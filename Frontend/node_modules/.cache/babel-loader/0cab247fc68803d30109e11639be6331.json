{"ast":null,"code":"\"use strict\"; // Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Storage = exports.PROTOCOL_REGEX = void 0;\n\nconst common_1 = require(\"@google-cloud/common\");\n\nconst paginator_1 = require(\"@google-cloud/paginator\");\n\nconst promisify_1 = require(\"@google-cloud/promisify\");\n\nconst arrify = require(\"arrify\");\n\nconst bucket_1 = require(\"./bucket\");\n\nconst channel_1 = require(\"./channel\");\n\nconst file_1 = require(\"./file\");\n\nconst util_1 = require(\"./util\");\n\nconst hmacKey_1 = require(\"./hmacKey\");\n\nexports.PROTOCOL_REGEX = /^(\\w*):\\/\\//;\n/*! Developer Documentation\r\n *\r\n * Invoke this method to create a new Storage object bound with pre-determined\r\n * configuration options. For each object that can be created (e.g., a bucket),\r\n * there is an equivalent static and instance method. While they are classes,\r\n * they can be instantiated without use of the `new` keyword.\r\n */\n\n/**\r\n * Cloud Storage uses access control lists (ACLs) to manage object and\r\n * bucket access. ACLs are the mechanism you use to share objects with other\r\n * users and allow other users to access your buckets and objects.\r\n *\r\n * This object provides constants to refer to the three permission levels that\r\n * can be granted to an entity:\r\n *\r\n *   - `gcs.acl.OWNER_ROLE` - (\"OWNER\")\r\n *   - `gcs.acl.READER_ROLE` - (\"READER\")\r\n *   - `gcs.acl.WRITER_ROLE` - (\"WRITER\")\r\n *\r\n * @see [About Access Control Lists]{@link https://cloud.google.com/storage/docs/access-control/lists}\r\n *\r\n * @name Storage#acl\r\n * @type {object}\r\n * @property {string} OWNER_ROLE\r\n * @property {string} READER_ROLE\r\n * @property {string} WRITER_ROLE\r\n *\r\n * @example\r\n * const {Storage} = require('@google-cloud/storage');\r\n * const storage = new Storage();\r\n * const albums = storage.bucket('albums');\r\n *\r\n * //-\r\n * // Make all of the files currently in a bucket publicly readable.\r\n * //-\r\n * const options = {\r\n *   entity: 'allUsers',\r\n *   role: storage.acl.READER_ROLE\r\n * };\r\n *\r\n * albums.acl.add(options, function(err, aclObject) {});\r\n *\r\n * //-\r\n * // Make any new objects added to a bucket publicly readable.\r\n * //-\r\n * albums.acl.default.add(options, function(err, aclObject) {});\r\n *\r\n * //-\r\n * // Grant a user ownership permissions to a bucket.\r\n * //-\r\n * albums.acl.add({\r\n *   entity: 'user-useremail@example.com',\r\n *   role: storage.acl.OWNER_ROLE\r\n * }, function(err, aclObject) {});\r\n *\r\n * //-\r\n * // If the callback is omitted, we'll return a Promise.\r\n * //-\r\n * albums.acl.add(options).then(function(data) {\r\n *   const aclObject = data[0];\r\n *   const apiResponse = data[1];\r\n * });\r\n */\n\n/**\r\n * Get {@link Bucket} objects for all of the buckets in your project as\r\n * a readable object stream.\r\n *\r\n * @method Storage#getBucketsStream\r\n * @param {GetBucketsRequest} [query] Query object for listing buckets.\r\n * @returns {ReadableStream} A readable stream that emits {@link Bucket}\r\n *     instances.\r\n *\r\n * @example\r\n * storage.getBucketsStream()\r\n *   .on('error', console.error)\r\n *   .on('data', function(bucket) {\r\n *     // bucket is a Bucket object.\r\n *   })\r\n *   .on('end', function() {\r\n *     // All buckets retrieved.\r\n *   });\r\n *\r\n * //-\r\n * // If you anticipate many results, you can end a stream early to prevent\r\n * // unnecessary processing and API requests.\r\n * //-\r\n * storage.getBucketsStream()\r\n *   .on('data', function(bucket) {\r\n *     this.end();\r\n *   });\r\n */\n\n/**\r\n * Get {@link HmacKey} objects for all of the HMAC keys in the project in a\r\n * readable object stream.\r\n *\r\n * @method Storage#getHmacKeysStream\r\n * @param {GetHmacKeysOptions} [options] Configuration options.\r\n * @returns {ReadableStream} A readable stream that emits {@link HmacKey}\r\n *     instances.\r\n *\r\n * @example\r\n * storage.getHmacKeysStream()\r\n *   .on('error', console.error)\r\n *   .on('data', function(hmacKey) {\r\n *     // hmacKey is an HmacKey object.\r\n *   })\r\n *   .on('end', function() {\r\n *     // All HmacKey retrieved.\r\n *   });\r\n *\r\n * //-\r\n * // If you anticipate many results, you can end a stream early to prevent\r\n * // unnecessary processing and API requests.\r\n * //-\r\n * storage.getHmacKeysStream()\r\n *   .on('data', function(bucket) {\r\n *     this.end();\r\n *   });\r\n */\n\n/**\r\n * <h4>ACLs</h4>\r\n * Cloud Storage uses access control lists (ACLs) to manage object and\r\n * bucket access. ACLs are the mechanism you use to share files with other users\r\n * and allow other users to access your buckets and files.\r\n *\r\n * To learn more about ACLs, read this overview on\r\n * [Access Control](https://cloud.google.com/storage/docs/access-control).\r\n *\r\n * @see [Cloud Storage overview]{@link https://cloud.google.com/storage/docs/overview}\r\n * @see [Access Control]{@link https://cloud.google.com/storage/docs/access-control}\r\n *\r\n * @class\r\n */\n\nclass Storage extends common_1.Service {\n  /**\r\n   * @typedef {object} StorageOptions\r\n   * @property {string} [projectId] The project ID from the Google Developer's\r\n   *     Console, e.g. 'grape-spaceship-123'. We will also check the environment\r\n   *     variable `GCLOUD_PROJECT` for your project ID. If your app is running\r\n   * in an environment which supports {@link\r\n   * https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\r\n   * Application Default Credentials}, your project ID will be detected\r\n   * automatically.\r\n   * @property {string} [keyFilename] Full path to the a .json, .pem, or .p12 key\r\n   *     downloaded from the Google Developers Console. If you provide a path to\r\n   * a JSON file, the `projectId` option above is not necessary. NOTE: .pem and\r\n   *     .p12 require you to specify the `email` option as well.\r\n   * @property {string} [email] Account email address. Required when using a .pem\r\n   *     or .p12 keyFilename.\r\n   * @property {object} [credentials] Credentials object.\r\n   * @property {string} [credentials.client_email]\r\n   * @property {string} [credentials.private_key]\r\n   * @property {boolean} [autoRetry=true] Automatically retry requests if the\r\n   *     response is related to rate limits or certain intermittent server\r\n   * errors. We will exponentially backoff subsequent requests by default.\r\n   * @property {number} [maxRetries=3] Maximum number of automatic retries\r\n   *     attempted before returning the error.\r\n   * @property {Constructor} [promise] Custom promise module to use instead of\r\n   *     native Promises.\r\n   * @property {string} [userAgent] The value to be prepended to the User-Agent\r\n   *     header in API requests.\r\n   */\n\n  /**\r\n   * Constructs the Storage client.\r\n   *\r\n   * @example <caption>Create a client that uses Application Default Credentials\r\n   * (ADC)</caption> const {Storage} = require('@google-cloud/storage'); const\r\n   * storage = new Storage();\r\n   *\r\n   * @example <caption>Create a client with explicit credentials</caption>\r\n   * storage');/storage');\r\n   * const storage = new Storage({\r\n   *   projectId: 'your-project-id',\r\n   *   keyFilename: '/path/to/keyfile.json'\r\n   * });\r\n   *\r\n   * @param {StorageOptions} [options] Configuration options.\r\n   */\n  constructor(options = {}) {\n    let apiEndpoint = 'https://storage.googleapis.com';\n    let customEndpoint = false;\n    const EMULATOR_HOST = process.env.STORAGE_EMULATOR_HOST;\n\n    if (typeof EMULATOR_HOST === 'string') {\n      apiEndpoint = Storage.sanitizeEndpoint(EMULATOR_HOST);\n      customEndpoint = true;\n    }\n\n    if (options.apiEndpoint) {\n      apiEndpoint = Storage.sanitizeEndpoint(options.apiEndpoint);\n      customEndpoint = true;\n    }\n\n    options = Object.assign({}, options, {\n      apiEndpoint\n    });\n    const baseUrl = EMULATOR_HOST || `${options.apiEndpoint}/storage/v1`;\n    const config = {\n      apiEndpoint: options.apiEndpoint,\n      baseUrl,\n      customEndpoint,\n      projectIdRequired: false,\n      scopes: ['https://www.googleapis.com/auth/iam', 'https://www.googleapis.com/auth/cloud-platform', 'https://www.googleapis.com/auth/devstorage.full_control'],\n      packageJson: require('../../package.json')\n    };\n    super(config, options);\n    /**\r\n     * Reference to {@link Storage.acl}.\r\n     *\r\n     * @name Storage#acl\r\n     * @see Storage.acl\r\n     */\n\n    this.acl = Storage.acl;\n    this.getBucketsStream = paginator_1.paginator.streamify('getBuckets');\n    this.getHmacKeysStream = paginator_1.paginator.streamify('getHmacKeys');\n  }\n\n  static sanitizeEndpoint(url) {\n    if (!exports.PROTOCOL_REGEX.test(url)) {\n      url = `https://${url}`;\n    }\n\n    return url.replace(/\\/+$/, ''); // Remove trailing slashes\n  }\n  /**\r\n   * Get a reference to a Cloud Storage bucket.\r\n   *\r\n   * @param {string} name Name of the bucket.\r\n   * @param {object} [options] Configuration object.\r\n   * @param {string} [options.kmsKeyName] A Cloud KMS key that will be used to\r\n   *     encrypt objects inserted into this bucket, if no encryption method is\r\n   *     specified.\r\n   * @param {string} [options.userProject] User project to be billed for all\r\n   *     requests made from this Bucket object.\r\n   * @returns {Bucket}\r\n   * @see Bucket\r\n   *\r\n   * @example\r\n   * const {Storage} = require('@google-cloud/storage');\r\n   * const storage = new Storage();\r\n   * const albums = storage.bucket('albums');\r\n   * const photos = storage.bucket('photos');\r\n   */\n\n\n  bucket(name, options) {\n    if (!name) {\n      throw new Error('A bucket name is needed to use Cloud Storage.');\n    }\n\n    return new bucket_1.Bucket(this, name, options);\n  }\n  /**\r\n   * Reference a channel to receive notifications about changes to your bucket.\r\n   *\r\n   * @param {string} id The ID of the channel.\r\n   * @param {string} resourceId The resource ID of the channel.\r\n   * @returns {Channel}\r\n   * @see Channel\r\n   *\r\n   * @example\r\n   * const {Storage} = require('@google-cloud/storage');\r\n   * const storage = new Storage();\r\n   * const channel = storage.channel('id', 'resource-id');\r\n   */\n\n\n  channel(id, resourceId) {\n    return new channel_1.Channel(this, id, resourceId);\n  }\n  /**\r\n   * @typedef {array} CreateBucketResponse\r\n   * @property {Bucket} 0 The new {@link Bucket}.\r\n   * @property {object} 1 The full API response.\r\n   */\n\n  /**\r\n   * @callback CreateBucketCallback\r\n   * @param {?Error} err Request error, if any.\r\n   * @param {Bucket} bucket The new {@link Bucket}.\r\n   * @param {object} apiResponse The full API response.\r\n   */\n\n  /**\r\n   * Metadata to set for the bucket.\r\n   *\r\n   * @typedef {object} CreateBucketRequest\r\n   * @property {boolean} [archive=false] Specify the storage class as Archive.\r\n   * @property {boolean} [coldline=false] Specify the storage class as Coldline.\r\n   * @property {Cors[]} [cors=[]] Specify the CORS configuration to use.\r\n   * @property {boolean} [dra=false] Specify the storage class as Durable Reduced\r\n   *     Availability.\r\n   * @property {boolean} [multiRegional=false] Specify the storage class as\r\n   *     Multi-Regional.\r\n   * @property {boolean} [nearline=false] Specify the storage class as Nearline.\r\n   * @property {boolean} [regional=false] Specify the storage class as Regional.\r\n   * @property {boolean} [requesterPays=false] **Early Access Testers Only**\r\n   *     Force the use of the User Project metadata field to assign operational\r\n   *     costs when an operation is made on a Bucket and its objects.\r\n   * @property {boolean} [standard=true] Specify the storage class as Standard.\r\n   * @property {string} [storageClass] The new storage class. (`standard`,\r\n   *     `nearline`, `coldline`, or `archive`).\r\n   *     **Note:** The storage classes `multi_regional`, `regional`, and\r\n   *     `durable_reduced_availability` are now legacy and will be deprecated in\r\n   *     the future.\r\n   * @property {Versioning} [versioning=undefined] Specify the versioning status.\r\n   * @property {string} [userProject] The ID of the project which will be billed\r\n   *     for the request.\r\n   */\n\n  /**\r\n   * Create a bucket.\r\n   *\r\n   * Cloud Storage uses a flat namespace, so you can't create a bucket with\r\n   * a name that is already in use. For more information, see\r\n   * [Bucket Naming\r\n   * Guidelines](https://cloud.google.com/storage/docs/bucketnaming.html#requirements).\r\n   *\r\n   * @see [Buckets: insert API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/insert}\r\n   * @see [Storage Classes]{@link https://cloud.google.com/storage/docs/storage-classes}\r\n   *\r\n   * @param {string} name Name of the bucket to create.\r\n   * @param {CreateBucketRequest} [metadata] Metadata to set for the bucket.\r\n   * @param {CreateBucketCallback} [callback] Callback function.\r\n   * @returns {Promise<CreateBucketResponse>}\r\n   * @throws {Error} If a name is not provided.\r\n   * @see Bucket#create\r\n   *\r\n   * @example\r\n   * const {Storage} = require('@google-cloud/storage');\r\n   * const storage = new Storage();\r\n   * const callback = function(err, bucket, apiResponse) {\r\n   *   // `bucket` is a Bucket object.\r\n   * };\r\n   *\r\n   * storage.createBucket('new-bucket', callback);\r\n   *\r\n   * //-\r\n   * // Create a bucket in a specific location and region. <em>See the <a\r\n   * // href=\"https://cloud.google.com/storage/docs/json_api/v1/buckets/insert\">\r\n   * // Official JSON API docs</a> for complete details on the `location`\r\n   * option.\r\n   * // </em>\r\n   * //-\r\n   * const metadata = {\r\n   *   location: 'US-CENTRAL1',\r\n   *   regional: true\r\n   * };\r\n   *\r\n   * storage.createBucket('new-bucket', metadata, callback);\r\n   *\r\n   * //-\r\n   * // Create a bucket with a retention policy of 6 months.\r\n   * //-\r\n   * const metadata = {\r\n   *   retentionPolicy: {\r\n   *     retentionPeriod: 15780000 // 6 months in seconds.\r\n   *   }\r\n   * };\r\n   *\r\n   * storage.createBucket('new-bucket', metadata, callback);\r\n   *\r\n   * //-\r\n   * // Enable versioning on a new bucket.\r\n   * //-\r\n   * const metadata = {\r\n   *   versioning: {\r\n   *     enabled: true\r\n   *   }\r\n   * };\r\n   *\r\n   * storage.createBucket('new-bucket', metadata, callback);\r\n   *\r\n   * //-\r\n   * // If the callback is omitted, we'll return a Promise.\r\n   * //-\r\n   * storage.createBucket('new-bucket').then(function(data) {\r\n   *   const bucket = data[0];\r\n   *   const apiResponse = data[1];\r\n   * });\r\n   *\r\n   * @example <caption>include:samples/buckets.js</caption>\r\n   * region_tag:storage_create_bucket\r\n   * Another example:\r\n   */\n\n\n  createBucket(name, metadataOrCallback, callback) {\n    if (!name) {\n      throw new Error('A name is required to create a bucket.');\n    }\n\n    let metadata;\n\n    if (!callback) {\n      callback = metadataOrCallback;\n      metadata = {};\n    } else {\n      metadata = metadataOrCallback;\n    }\n\n    const body = Object.assign({}, metadata, {\n      name\n    });\n    const storageClasses = {\n      archive: 'ARCHIVE',\n      coldline: 'COLDLINE',\n      dra: 'DURABLE_REDUCED_AVAILABILITY',\n      multiRegional: 'MULTI_REGIONAL',\n      nearline: 'NEARLINE',\n      regional: 'REGIONAL',\n      standard: 'STANDARD'\n    };\n    Object.keys(storageClasses).forEach(storageClass => {\n      if (body[storageClass]) {\n        if (metadata.storageClass && metadata.storageClass !== storageClass) {\n          throw new Error(`Both \\`${storageClass}\\` and \\`storageClass\\` were provided.`);\n        }\n\n        body.storageClass = storageClasses[storageClass];\n        delete body[storageClass];\n      }\n    });\n\n    if (body.requesterPays) {\n      body.billing = {\n        requesterPays: body.requesterPays\n      };\n      delete body.requesterPays;\n    }\n\n    const query = {\n      project: this.projectId\n    };\n\n    if (body.userProject) {\n      query.userProject = body.userProject;\n      delete body.userProject;\n    }\n\n    this.request({\n      method: 'POST',\n      uri: '/b',\n      qs: query,\n      json: body\n    }, (err, resp) => {\n      if (err) {\n        callback(err, null, resp);\n        return;\n      }\n\n      const bucket = this.bucket(name);\n      bucket.metadata = resp;\n      callback(null, bucket, resp);\n    });\n  }\n  /**\r\n   * @typedef {object} CreateHmacKeyOptions\r\n   * @property {string} [projectId] The project ID of the project that owns\r\n   *     the service account of the requested HMAC key. If not provided,\r\n   *     the project ID used to instantiate the Storage client will be used.\r\n   * @property {string} [userProject] This parameter is currently ignored.\r\n   */\n\n  /**\r\n   * @typedef {object} HmacKeyMetadata\r\n   * @property {string} accessId The access id identifies which HMAC key was\r\n   *     used to sign a request when authenticating with HMAC.\r\n   * @property {string} etag Used to perform a read-modify-write of the key.\r\n   * @property {string} id The resource name of the HMAC key.\r\n   * @property {string} projectId The project ID.\r\n   * @property {string} serviceAccountEmail The service account's email this\r\n   *     HMAC key is created for.\r\n   * @property {string} state The state of this HMAC key. One of \"ACTIVE\",\r\n   *     \"INACTIVE\" or \"DELETED\".\r\n   * @property {string} timeCreated The creation time of the HMAC key in\r\n   *     RFC 3339 format.\r\n   * @property {string} [updated] The time this HMAC key was last updated in\r\n   *     RFC 3339 format.\r\n   */\n\n  /**\r\n   * @typedef {array} CreateHmacKeyResponse\r\n   * @property {HmacKey} 0 The HmacKey instance created from API response.\r\n   * @property {string} 1 The HMAC key's secret used to access the XML API.\r\n   * @property {object} 3 The raw API response.\r\n   */\n\n  /**\r\n   * @callback CreateHmacKeyCallback Callback function.\r\n   * @param {?Error} err Request error, if any.\r\n   * @param {HmacKey} hmacKey The HmacKey instance created from API response.\r\n   * @param {string} secret The HMAC key's secret used to access the XML API.\r\n   * @param {object} apiResponse The raw API response.\r\n   */\n\n  /**\r\n   * Create an HMAC key associated with an service account to authenticate\r\n   * requests to the Cloud Storage XML API.\r\n   *\r\n   * @see [HMAC keys documentation]{@link https://cloud.google.com/storage/docs/authentication/hmackeys}\r\n   *\r\n   * @param {string} serviceAccountEmail The service account's email address\r\n   *     with which the HMAC key is created for.\r\n   * @param {CreateHmacKeyCallback} [callback] Callback function.\r\n   * @return {Promise<CreateHmacKeyResponse>}\r\n   *\r\n   * @example\r\n   * const {Storage} = require('google-cloud/storage');\r\n   * const storage = new Storage();\r\n   *\r\n   * // Replace with your service account's email address\r\n   * const serviceAccountEmail =\r\n   *   'my-service-account@appspot.gserviceaccount.com';\r\n   *\r\n   * storage.createHmacKey(serviceAccountEmail, function(err, hmacKey, secret) {\r\n   *   if (!err) {\r\n   *     // Securely store the secret for use with the XML API.\r\n   *   }\r\n   * });\r\n   *\r\n   * //-\r\n   * // If the callback is omitted, we'll return a Promise.\r\n   * //-\r\n   * storage.createHmacKey(serviceAccountEmail)\r\n   *   .then((response) => {\r\n   *     const hmacKey = response[0];\r\n   *     const secret = response[1];\r\n   *     // Securely store the secret for use with the XML API.\r\n   *   });\r\n   */\n\n\n  createHmacKey(serviceAccountEmail, optionsOrCb, cb) {\n    if (typeof serviceAccountEmail !== 'string') {\n      throw new Error('The first argument must be a service account email to create an HMAC key.');\n    }\n\n    const {\n      options,\n      callback\n    } = util_1.normalize(optionsOrCb, cb);\n    const query = Object.assign({}, options, {\n      serviceAccountEmail\n    });\n    const projectId = query.projectId || this.projectId;\n    delete query.projectId;\n    this.request({\n      method: 'POST',\n      uri: `/projects/${projectId}/hmacKeys`,\n      qs: query\n    }, (err, resp) => {\n      if (err) {\n        callback(err, null, null, resp);\n        return;\n      }\n\n      const metadata = resp.metadata;\n      const hmacKey = this.hmacKey(metadata.accessId, {\n        projectId: metadata.projectId\n      });\n      hmacKey.metadata = resp.metadata;\n      callback(null, hmacKey, resp.secret, resp);\n    });\n  }\n  /**\r\n   * Query object for listing buckets.\r\n   *\r\n   * @typedef {object} GetBucketsRequest\r\n   * @property {boolean} [autoPaginate=true] Have pagination handled\r\n   *     automatically.\r\n   * @property {number} [maxApiCalls] Maximum number of API calls to make.\r\n   * @property {number} [maxResults] Maximum number of items plus prefixes to\r\n   *     return per call.\r\n   *     Note: By default will handle pagination automatically\r\n   *     if more than 1 page worth of results are requested per call.\r\n   *     When `autoPaginate` is set to `false` the smaller of `maxResults`\r\n   *     or 1 page of results will be returned per call.\r\n   * @property {string} [pageToken] A previously-returned page token\r\n   *     representing part of the larger set of results to view.\r\n   * @property {string} [userProject] The ID of the project which will be billed\r\n   *     for the request.\r\n   */\n\n  /**\r\n   * @typedef {array} GetBucketsResponse\r\n   * @property {Bucket[]} 0 Array of {@link Bucket} instances.\r\n   * @property {objcet} 1 nextQuery A query object to receive more results.\r\n   * @property {object} 2 The full API response.\r\n   */\n\n  /**\r\n   * @callback GetBucketsCallback\r\n   * @param {?Error} err Request error, if any.\r\n   * @param {Bucket[]} buckets Array of {@link Bucket} instances.\r\n   * @param {object} nextQuery A query object to receive more results.\r\n   * @param {object} apiResponse The full API response.\r\n   */\n\n  /**\r\n   * Get Bucket objects for all of the buckets in your project.\r\n   *\r\n   * @see [Buckets: list API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/list}\r\n   *\r\n   * @param {GetBucketsRequest} [query] Query object for listing buckets.\r\n   * @param {GetBucketsCallback} [callback] Callback function.\r\n   * @returns {Promise<GetBucketsResponse>}\r\n   *\r\n   * @example\r\n   * const {Storage} = require('@google-cloud/storage');\r\n   * const storage = new Storage();\r\n   * storage.getBuckets(function(err, buckets) {\r\n   *   if (!err) {\r\n   *     // buckets is an array of Bucket objects.\r\n   *   }\r\n   * });\r\n   *\r\n   * //-\r\n   * // To control how many API requests are made and page through the results\r\n   * // manually, set `autoPaginate` to `false`.\r\n   * //-\r\n   * const callback = function(err, buckets, nextQuery, apiResponse) {\r\n   *   if (nextQuery) {\r\n   *     // More results exist.\r\n   *     storage.getBuckets(nextQuery, callback);\r\n   *   }\r\n   *\r\n   *   // The `metadata` property is populated for you with the metadata at the\r\n   *   // time of fetching.\r\n   *   buckets[0].metadata;\r\n   *\r\n   *   // However, in cases where you are concerned the metadata could have\r\n   *   // changed, use the `getMetadata` method.\r\n   *   buckets[0].getMetadata(function(err, metadata, apiResponse) {});\r\n   * };\r\n   *\r\n   * storage.getBuckets({\r\n   *   autoPaginate: false\r\n   * }, callback);\r\n   *\r\n   * //-\r\n   * // If the callback is omitted, we'll return a Promise.\r\n   * //-\r\n   * storage.getBuckets().then(function(data) {\r\n   *   const buckets = data[0];\r\n   * });\r\n   *\r\n   * @example <caption>include:samples/buckets.js</caption>\r\n   * region_tag:storage_list_buckets\r\n   * Another example:\r\n   */\n\n\n  getBuckets(optionsOrCallback, cb) {\n    const {\n      options,\n      callback\n    } = util_1.normalize(optionsOrCallback, cb);\n    options.project = options.project || this.projectId;\n    this.request({\n      uri: '/b',\n      qs: options\n    }, (err, resp) => {\n      if (err) {\n        callback(err, null, null, resp);\n        return;\n      }\n\n      const buckets = arrify(resp.items).map(bucket => {\n        const bucketInstance = this.bucket(bucket.id);\n        bucketInstance.metadata = bucket;\n        return bucketInstance;\n      });\n      const nextQuery = resp.nextPageToken ? Object.assign({}, options, {\n        pageToken: resp.nextPageToken\n      }) : null;\n      callback(null, buckets, nextQuery, resp);\n    });\n  }\n\n  getHmacKeys(optionsOrCb, cb) {\n    const {\n      options,\n      callback\n    } = util_1.normalize(optionsOrCb, cb);\n    const query = Object.assign({}, options);\n    const projectId = query.projectId || this.projectId;\n    delete query.projectId;\n    this.request({\n      uri: `/projects/${projectId}/hmacKeys`,\n      qs: query\n    }, (err, resp) => {\n      if (err) {\n        callback(err, null, null, resp);\n        return;\n      }\n\n      const hmacKeys = arrify(resp.items).map(hmacKey => {\n        const hmacKeyInstance = this.hmacKey(hmacKey.accessId, {\n          projectId: hmacKey.projectId\n        });\n        hmacKeyInstance.metadata = hmacKey;\n        return hmacKeyInstance;\n      });\n      const nextQuery = resp.nextPageToken ? Object.assign({}, options, {\n        pageToken: resp.nextPageToken\n      }) : null;\n      callback(null, hmacKeys, nextQuery, resp);\n    });\n  }\n  /**\r\n   * @typedef {array} GetServiceAccountResponse\r\n   * @property {object} 0 The service account resource.\r\n   * @property {object} 1 The full\r\n   * [API\r\n   * response](https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount#resource).\r\n   */\n\n  /**\r\n   * @callback GetServiceAccountCallback\r\n   * @param {?Error} err Request error, if any.\r\n   * @param {object} serviceAccount The serviceAccount resource.\r\n   * @param {string} serviceAccount.emailAddress The service account email\r\n   *     address.\r\n   * @param {object} apiResponse The full\r\n   * [API\r\n   * response](https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount#resource).\r\n   */\n\n  /**\r\n   * Get the email address of this project's Google Cloud Storage service\r\n   * account.\r\n   *\r\n   * @see [Projects.serviceAccount: get API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount/get}\r\n   * @see [Projects.serviceAccount Resource]{@link https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount#resource}\r\n   *\r\n   * @param {object} [options] Configuration object.\r\n   * @param {string} [options.userProject] User project to be billed for this\r\n   *     request.\r\n   * @param {GetServiceAccountCallback} [callback] Callback function.\r\n   * @returns {Promise<GetServiceAccountResponse>}\r\n   *\r\n   * @example\r\n   * const {Storage} = require('@google-cloud/storage');\r\n   * const storage = new Storage();\r\n   *\r\n   * storage.getServiceAccount(function(err, serviceAccount, apiResponse) {\r\n   *   if (!err) {\r\n   *     const serviceAccountEmail = serviceAccount.emailAddress;\r\n   *   }\r\n   * });\r\n   *\r\n   * //-\r\n   * // If the callback is omitted, we'll return a Promise.\r\n   * //-\r\n   * storage.getServiceAccount().then(function(data) {\r\n   *   const serviceAccountEmail = data[0].emailAddress;\r\n   *   const apiResponse = data[1];\r\n   * });\r\n   */\n\n\n  getServiceAccount(optionsOrCallback, cb) {\n    const {\n      options,\n      callback\n    } = util_1.normalize(optionsOrCallback, cb);\n    this.request({\n      uri: `/projects/${this.projectId}/serviceAccount`,\n      qs: options\n    }, (err, resp) => {\n      if (err) {\n        callback(err, null, resp);\n        return;\n      }\n\n      const camelCaseResponse = {};\n\n      for (const prop in resp) {\n        // eslint-disable-next-line no-prototype-builtins\n        if (resp.hasOwnProperty(prop)) {\n          const camelCaseProp = prop.replace(/_(\\w)/g, (_, match) => match.toUpperCase());\n          camelCaseResponse[camelCaseProp] = resp[prop];\n        }\n      }\n\n      callback(null, camelCaseResponse, resp);\n    });\n  }\n  /**\r\n   * Get a reference to an HmacKey object.\r\n   * Note: this does not fetch the HMAC key's metadata. Use HmacKey#get() to\r\n   * retrieve and populate the metadata.\r\n   *\r\n   * To get a reference to an HMAC key that's not created for a service\r\n   * account in the same project used to instantiate the Storage client,\r\n   * supply the project's ID as `projectId` in the `options` argument.\r\n   *\r\n   * @param {string} accessId The HMAC key's access ID.\r\n   * @param {HmacKeyOptions} options HmacKey constructor owptions.\r\n   * @returns {HmacKey}\r\n   * @see HmacKey\r\n   *\r\n   * @example\r\n   * const {Storage} = require('@google-cloud/storage');\r\n   * const storage = new Storage();\r\n   * const hmacKey = storage.hmacKey('ACCESS_ID');\r\n   */\n\n\n  hmacKey(accessId, options) {\n    if (!accessId) {\n      throw new Error('An access ID is needed to create an HmacKey object.');\n    }\n\n    return new hmacKey_1.HmacKey(this, accessId, options);\n  }\n\n}\n\nexports.Storage = Storage;\n/**\r\n * {@link Bucket} class.\r\n *\r\n * @name Storage.Bucket\r\n * @see Bucket\r\n * @type {Constructor}\r\n */\n\nStorage.Bucket = bucket_1.Bucket;\n/**\r\n * {@link Channel} class.\r\n *\r\n * @name Storage.Channel\r\n * @see Channel\r\n * @type {Constructor}\r\n */\n\nStorage.Channel = channel_1.Channel;\n/**\r\n * {@link File} class.\r\n *\r\n * @name Storage.File\r\n * @see File\r\n * @type {Constructor}\r\n */\n\nStorage.File = file_1.File;\n/**\r\n * {@link HmacKey} class.\r\n *\r\n * @name Storage.HmacKey\r\n * @see HmacKey\r\n * @type {Constructor}\r\n */\n\nStorage.HmacKey = hmacKey_1.HmacKey;\nStorage.acl = {\n  OWNER_ROLE: 'OWNER',\n  READER_ROLE: 'READER',\n  WRITER_ROLE: 'WRITER'\n};\n/*! Developer Documentation\r\n *\r\n * These methods can be auto-paginated.\r\n */\n\npaginator_1.paginator.extend(Storage, ['getBuckets', 'getHmacKeys']);\n/*! Developer Documentation\r\n *\r\n * All async methods (except for streams) will return a Promise in the event\r\n * that a callback is omitted.\r\n */\n\npromisify_1.promisifyAll(Storage, {\n  exclude: ['bucket', 'channel', 'hmacKey']\n});","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Backend/node_modules/@google-cloud/storage/build/src/storage.js"],"names":["Object","defineProperty","exports","value","Storage","PROTOCOL_REGEX","common_1","require","paginator_1","promisify_1","arrify","bucket_1","channel_1","file_1","util_1","hmacKey_1","Service","constructor","options","apiEndpoint","customEndpoint","EMULATOR_HOST","process","env","STORAGE_EMULATOR_HOST","sanitizeEndpoint","assign","baseUrl","config","projectIdRequired","scopes","packageJson","acl","getBucketsStream","paginator","streamify","getHmacKeysStream","url","test","replace","bucket","name","Error","Bucket","channel","id","resourceId","Channel","createBucket","metadataOrCallback","callback","metadata","body","storageClasses","archive","coldline","dra","multiRegional","nearline","regional","standard","keys","forEach","storageClass","requesterPays","billing","query","project","projectId","userProject","request","method","uri","qs","json","err","resp","createHmacKey","serviceAccountEmail","optionsOrCb","cb","normalize","hmacKey","accessId","secret","getBuckets","optionsOrCallback","buckets","items","map","bucketInstance","nextQuery","nextPageToken","pageToken","getHmacKeys","hmacKeys","hmacKeyInstance","getServiceAccount","camelCaseResponse","prop","hasOwnProperty","camelCaseProp","_","match","toUpperCase","HmacKey","File","OWNER_ROLE","READER_ROLE","WRITER_ROLE","extend","promisifyAll","exclude"],"mappings":"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AACH;;AACD,WAAO,IAAI/B,QAAQ,CAACgC,MAAb,CAAoB,IAApB,EAA0BF,IAA1B,EAAgCvB,OAAhC,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI0B,EAAAA,OAAO,CAACC,EAAD,EAAKC,UAAL,EAAiB;AACpB,WAAO,IAAIlC,SAAS,CAACmC,OAAd,CAAsB,IAAtB,EAA4BF,EAA5B,EAAgCC,UAAhC,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIE,EAAAA,YAAY,CAACP,IAAD,EAAOQ,kBAAP,EAA2BC,QAA3B,EAAqC;AAC7C,QAAI,CAACT,IAAL,EAAW;AACP,YAAM,IAAIC,KAAJ,CAAU,wCAAV,CAAN;AACH;;AACD,QAAIS,QAAJ;;AACA,QAAI,CAACD,QAAL,EAAe;AACXA,MAAAA,QAAQ,GAAGD,kBAAX;AACAE,MAAAA,QAAQ,GAAG,EAAX;AACH,KAHD,MAIK;AACDA,MAAAA,QAAQ,GAAGF,kBAAX;AACH;;AACD,UAAMG,IAAI,GAAGpD,MAAM,CAAC0B,MAAP,CAAc,EAAd,EAAkByB,QAAlB,EAA4B;AA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","sourcesContent":["\"use strict\";\r\n// Copyright 2019 Google LLC\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Storage = exports.PROTOCOL_REGEX = void 0;\r\nconst common_1 = require(\"@google-cloud/common\");\r\nconst paginator_1 = require(\"@google-cloud/paginator\");\r\nconst promisify_1 = require(\"@google-cloud/promisify\");\r\nconst arrify = require(\"arrify\");\r\nconst bucket_1 = require(\"./bucket\");\r\nconst channel_1 = require(\"./channel\");\r\nconst file_1 = require(\"./file\");\r\nconst util_1 = require(\"./util\");\r\nconst hmacKey_1 = require(\"./hmacKey\");\r\nexports.PROTOCOL_REGEX = /^(\\w*):\\/\\//;\r\n/*! Developer Documentation\r\n *\r\n * Invoke this method to create a new Storage object bound with pre-determined\r\n * configuration options. For each object that can be created (e.g., a bucket),\r\n * there is an equivalent static and instance method. While they are classes,\r\n * they can be instantiated without use of the `new` keyword.\r\n */\r\n/**\r\n * Cloud Storage uses access control lists (ACLs) to manage object and\r\n * bucket access. ACLs are the mechanism you use to share objects with other\r\n * users and allow other users to access your buckets and objects.\r\n *\r\n * This object provides constants to refer to the three permission levels that\r\n * can be granted to an entity:\r\n *\r\n *   - `gcs.acl.OWNER_ROLE` - (\"OWNER\")\r\n *   - `gcs.acl.READER_ROLE` - (\"READER\")\r\n *   - `gcs.acl.WRITER_ROLE` - (\"WRITER\")\r\n *\r\n * @see [About Access Control Lists]{@link https://cloud.google.com/storage/docs/access-control/lists}\r\n *\r\n * @name Storage#acl\r\n * @type {object}\r\n * @property {string} OWNER_ROLE\r\n * @property {string} READER_ROLE\r\n * @property {string} WRITER_ROLE\r\n *\r\n * @example\r\n * const {Storage} = require('@google-cloud/storage');\r\n * const storage = new Storage();\r\n * const albums = storage.bucket('albums');\r\n *\r\n * //-\r\n * // Make all of the files currently in a bucket publicly readable.\r\n * //-\r\n * const options = {\r\n *   entity: 'allUsers',\r\n *   role: storage.acl.READER_ROLE\r\n * };\r\n *\r\n * albums.acl.add(options, function(err, aclObject) {});\r\n *\r\n * //-\r\n * // Make any new objects added to a bucket publicly readable.\r\n * //-\r\n * albums.acl.default.add(options, function(err, aclObject) {});\r\n *\r\n * //-\r\n * // Grant a user ownership permissions to a bucket.\r\n * //-\r\n * albums.acl.add({\r\n *   entity: 'user-useremail@example.com',\r\n *   role: storage.acl.OWNER_ROLE\r\n * }, function(err, aclObject) {});\r\n *\r\n * //-\r\n * // If the callback is omitted, we'll return a Promise.\r\n * //-\r\n * albums.acl.add(options).then(function(data) {\r\n *   const aclObject = data[0];\r\n *   const apiResponse = data[1];\r\n * });\r\n */\r\n/**\r\n * Get {@link Bucket} objects for all of the buckets in your project as\r\n * a readable object stream.\r\n *\r\n * @method Storage#getBucketsStream\r\n * @param {GetBucketsRequest} [query] Query object for listing buckets.\r\n * @returns {ReadableStream} A readable stream that emits {@link Bucket}\r\n *     instances.\r\n *\r\n * @example\r\n * storage.getBucketsStream()\r\n *   .on('error', console.error)\r\n *   .on('data', function(bucket) {\r\n *     // bucket is a Bucket object.\r\n *   })\r\n *   .on('end', function() {\r\n *     // All buckets retrieved.\r\n *   });\r\n *\r\n * //-\r\n * // If you anticipate many results, you can end a stream early to prevent\r\n * // unnecessary processing and API requests.\r\n * //-\r\n * storage.getBucketsStream()\r\n *   .on('data', function(bucket) {\r\n *     this.end();\r\n *   });\r\n */\r\n/**\r\n * Get {@link HmacKey} objects for all of the HMAC keys in the project in a\r\n * readable object stream.\r\n *\r\n * @method Storage#getHmacKeysStream\r\n * @param {GetHmacKeysOptions} [options] Configuration options.\r\n * @returns {ReadableStream} A readable stream that emits {@link HmacKey}\r\n *     instances.\r\n *\r\n * @example\r\n * storage.getHmacKeysStream()\r\n *   .on('error', console.error)\r\n *   .on('data', function(hmacKey) {\r\n *     // hmacKey is an HmacKey object.\r\n *   })\r\n *   .on('end', function() {\r\n *     // All HmacKey retrieved.\r\n *   });\r\n *\r\n * //-\r\n * // If you anticipate many results, you can end a stream early to prevent\r\n * // unnecessary processing and API requests.\r\n * //-\r\n * storage.getHmacKeysStream()\r\n *   .on('data', function(bucket) {\r\n *     this.end();\r\n *   });\r\n */\r\n/**\r\n * <h4>ACLs</h4>\r\n * Cloud Storage uses access control lists (ACLs) to manage object and\r\n * bucket access. ACLs are the mechanism you use to share files with other users\r\n * and allow other users to access your buckets and files.\r\n *\r\n * To learn more about ACLs, read this overview on\r\n * [Access Control](https://cloud.google.com/storage/docs/access-control).\r\n *\r\n * @see [Cloud Storage overview]{@link https://cloud.google.com/storage/docs/overview}\r\n * @see [Access Control]{@link https://cloud.google.com/storage/docs/access-control}\r\n *\r\n * @class\r\n */\r\nclass Storage extends common_1.Service {\r\n    /**\r\n     * @typedef {object} StorageOptions\r\n     * @property {string} [projectId] The project ID from the Google Developer's\r\n     *     Console, e.g. 'grape-spaceship-123'. We will also check the environment\r\n     *     variable `GCLOUD_PROJECT` for your project ID. If your app is running\r\n     * in an environment which supports {@link\r\n     * https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\r\n     * Application Default Credentials}, your project ID will be detected\r\n     * automatically.\r\n     * @property {string} [keyFilename] Full path to the a .json, .pem, or .p12 key\r\n     *     downloaded from the Google Developers Console. If you provide a path to\r\n     * a JSON file, the `projectId` option above is not necessary. NOTE: .pem and\r\n     *     .p12 require you to specify the `email` option as well.\r\n     * @property {string} [email] Account email address. Required when using a .pem\r\n     *     or .p12 keyFilename.\r\n     * @property {object} [credentials] Credentials object.\r\n     * @property {string} [credentials.client_email]\r\n     * @property {string} [credentials.private_key]\r\n     * @property {boolean} [autoRetry=true] Automatically retry requests if the\r\n     *     response is related to rate limits or certain intermittent server\r\n     * errors. We will exponentially backoff subsequent requests by default.\r\n     * @property {number} [maxRetries=3] Maximum number of automatic retries\r\n     *     attempted before returning the error.\r\n     * @property {Constructor} [promise] Custom promise module to use instead of\r\n     *     native Promises.\r\n     * @property {string} [userAgent] The value to be prepended to the User-Agent\r\n     *     header in API requests.\r\n     */\r\n    /**\r\n     * Constructs the Storage client.\r\n     *\r\n     * @example <caption>Create a client that uses Application Default Credentials\r\n     * (ADC)</caption> const {Storage} = require('@google-cloud/storage'); const\r\n     * storage = new Storage();\r\n     *\r\n     * @example <caption>Create a client with explicit credentials</caption>\r\n     * storage');/storage');\r\n     * const storage = new Storage({\r\n     *   projectId: 'your-project-id',\r\n     *   keyFilename: '/path/to/keyfile.json'\r\n     * });\r\n     *\r\n     * @param {StorageOptions} [options] Configuration options.\r\n     */\r\n    constructor(options = {}) {\r\n        let apiEndpoint = 'https://storage.googleapis.com';\r\n        let customEndpoint = false;\r\n        const EMULATOR_HOST = process.env.STORAGE_EMULATOR_HOST;\r\n        if (typeof EMULATOR_HOST === 'string') {\r\n            apiEndpoint = Storage.sanitizeEndpoint(EMULATOR_HOST);\r\n            customEndpoint = true;\r\n        }\r\n        if (options.apiEndpoint) {\r\n            apiEndpoint = Storage.sanitizeEndpoint(options.apiEndpoint);\r\n            customEndpoint = true;\r\n        }\r\n        options = Object.assign({}, options, { apiEndpoint });\r\n        const baseUrl = EMULATOR_HOST || `${options.apiEndpoint}/storage/v1`;\r\n        const config = {\r\n            apiEndpoint: options.apiEndpoint,\r\n            baseUrl,\r\n            customEndpoint,\r\n            projectIdRequired: false,\r\n            scopes: [\r\n                'https://www.googleapis.com/auth/iam',\r\n                'https://www.googleapis.com/auth/cloud-platform',\r\n                'https://www.googleapis.com/auth/devstorage.full_control',\r\n            ],\r\n            packageJson: require('../../package.json'),\r\n        };\r\n        super(config, options);\r\n        /**\r\n         * Reference to {@link Storage.acl}.\r\n         *\r\n         * @name Storage#acl\r\n         * @see Storage.acl\r\n         */\r\n        this.acl = Storage.acl;\r\n        this.getBucketsStream = paginator_1.paginator.streamify('getBuckets');\r\n        this.getHmacKeysStream = paginator_1.paginator.streamify('getHmacKeys');\r\n    }\r\n    static sanitizeEndpoint(url) {\r\n        if (!exports.PROTOCOL_REGEX.test(url)) {\r\n            url = `https://${url}`;\r\n        }\r\n        return url.replace(/\\/+$/, ''); // Remove trailing slashes\r\n    }\r\n    /**\r\n     * Get a reference to a Cloud Storage bucket.\r\n     *\r\n     * @param {string} name Name of the bucket.\r\n     * @param {object} [options] Configuration object.\r\n     * @param {string} [options.kmsKeyName] A Cloud KMS key that will be used to\r\n     *     encrypt objects inserted into this bucket, if no encryption method is\r\n     *     specified.\r\n     * @param {string} [options.userProject] User project to be billed for all\r\n     *     requests made from this Bucket object.\r\n     * @returns {Bucket}\r\n     * @see Bucket\r\n     *\r\n     * @example\r\n     * const {Storage} = require('@google-cloud/storage');\r\n     * const storage = new Storage();\r\n     * const albums = storage.bucket('albums');\r\n     * const photos = storage.bucket('photos');\r\n     */\r\n    bucket(name, options) {\r\n        if (!name) {\r\n            throw new Error('A bucket name is needed to use Cloud Storage.');\r\n        }\r\n        return new bucket_1.Bucket(this, name, options);\r\n    }\r\n    /**\r\n     * Reference a channel to receive notifications about changes to your bucket.\r\n     *\r\n     * @param {string} id The ID of the channel.\r\n     * @param {string} resourceId The resource ID of the channel.\r\n     * @returns {Channel}\r\n     * @see Channel\r\n     *\r\n     * @example\r\n     * const {Storage} = require('@google-cloud/storage');\r\n     * const storage = new Storage();\r\n     * const channel = storage.channel('id', 'resource-id');\r\n     */\r\n    channel(id, resourceId) {\r\n        return new channel_1.Channel(this, id, resourceId);\r\n    }\r\n    /**\r\n     * @typedef {array} CreateBucketResponse\r\n     * @property {Bucket} 0 The new {@link Bucket}.\r\n     * @property {object} 1 The full API response.\r\n     */\r\n    /**\r\n     * @callback CreateBucketCallback\r\n     * @param {?Error} err Request error, if any.\r\n     * @param {Bucket} bucket The new {@link Bucket}.\r\n     * @param {object} apiResponse The full API response.\r\n     */\r\n    /**\r\n     * Metadata to set for the bucket.\r\n     *\r\n     * @typedef {object} CreateBucketRequest\r\n     * @property {boolean} [archive=false] Specify the storage class as Archive.\r\n     * @property {boolean} [coldline=false] Specify the storage class as Coldline.\r\n     * @property {Cors[]} [cors=[]] Specify the CORS configuration to use.\r\n     * @property {boolean} [dra=false] Specify the storage class as Durable Reduced\r\n     *     Availability.\r\n     * @property {boolean} [multiRegional=false] Specify the storage class as\r\n     *     Multi-Regional.\r\n     * @property {boolean} [nearline=false] Specify the storage class as Nearline.\r\n     * @property {boolean} [regional=false] Specify the storage class as Regional.\r\n     * @property {boolean} [requesterPays=false] **Early Access Testers Only**\r\n     *     Force the use of the User Project metadata field to assign operational\r\n     *     costs when an operation is made on a Bucket and its objects.\r\n     * @property {boolean} [standard=true] Specify the storage class as Standard.\r\n     * @property {string} [storageClass] The new storage class. (`standard`,\r\n     *     `nearline`, `coldline`, or `archive`).\r\n     *     **Note:** The storage classes `multi_regional`, `regional`, and\r\n     *     `durable_reduced_availability` are now legacy and will be deprecated in\r\n     *     the future.\r\n     * @property {Versioning} [versioning=undefined] Specify the versioning status.\r\n     * @property {string} [userProject] The ID of the project which will be billed\r\n     *     for the request.\r\n     */\r\n    /**\r\n     * Create a bucket.\r\n     *\r\n     * Cloud Storage uses a flat namespace, so you can't create a bucket with\r\n     * a name that is already in use. For more information, see\r\n     * [Bucket Naming\r\n     * Guidelines](https://cloud.google.com/storage/docs/bucketnaming.html#requirements).\r\n     *\r\n     * @see [Buckets: insert API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/insert}\r\n     * @see [Storage Classes]{@link https://cloud.google.com/storage/docs/storage-classes}\r\n     *\r\n     * @param {string} name Name of the bucket to create.\r\n     * @param {CreateBucketRequest} [metadata] Metadata to set for the bucket.\r\n     * @param {CreateBucketCallback} [callback] Callback function.\r\n     * @returns {Promise<CreateBucketResponse>}\r\n     * @throws {Error} If a name is not provided.\r\n     * @see Bucket#create\r\n     *\r\n     * @example\r\n     * const {Storage} = require('@google-cloud/storage');\r\n     * const storage = new Storage();\r\n     * const callback = function(err, bucket, apiResponse) {\r\n     *   // `bucket` is a Bucket object.\r\n     * };\r\n     *\r\n     * storage.createBucket('new-bucket', callback);\r\n     *\r\n     * //-\r\n     * // Create a bucket in a specific location and region. <em>See the <a\r\n     * // href=\"https://cloud.google.com/storage/docs/json_api/v1/buckets/insert\">\r\n     * // Official JSON API docs</a> for complete details on the `location`\r\n     * option.\r\n     * // </em>\r\n     * //-\r\n     * const metadata = {\r\n     *   location: 'US-CENTRAL1',\r\n     *   regional: true\r\n     * };\r\n     *\r\n     * storage.createBucket('new-bucket', metadata, callback);\r\n     *\r\n     * //-\r\n     * // Create a bucket with a retention policy of 6 months.\r\n     * //-\r\n     * const metadata = {\r\n     *   retentionPolicy: {\r\n     *     retentionPeriod: 15780000 // 6 months in seconds.\r\n     *   }\r\n     * };\r\n     *\r\n     * storage.createBucket('new-bucket', metadata, callback);\r\n     *\r\n     * //-\r\n     * // Enable versioning on a new bucket.\r\n     * //-\r\n     * const metadata = {\r\n     *   versioning: {\r\n     *     enabled: true\r\n     *   }\r\n     * };\r\n     *\r\n     * storage.createBucket('new-bucket', metadata, callback);\r\n     *\r\n     * //-\r\n     * // If the callback is omitted, we'll return a Promise.\r\n     * //-\r\n     * storage.createBucket('new-bucket').then(function(data) {\r\n     *   const bucket = data[0];\r\n     *   const apiResponse = data[1];\r\n     * });\r\n     *\r\n     * @example <caption>include:samples/buckets.js</caption>\r\n     * region_tag:storage_create_bucket\r\n     * Another example:\r\n     */\r\n    createBucket(name, metadataOrCallback, callback) {\r\n        if (!name) {\r\n            throw new Error('A name is required to create a bucket.');\r\n        }\r\n        let metadata;\r\n        if (!callback) {\r\n            callback = metadataOrCallback;\r\n            metadata = {};\r\n        }\r\n        else {\r\n            metadata = metadataOrCallback;\r\n        }\r\n        const body = Object.assign({}, metadata, { name });\r\n        const storageClasses = {\r\n            archive: 'ARCHIVE',\r\n            coldline: 'COLDLINE',\r\n            dra: 'DURABLE_REDUCED_AVAILABILITY',\r\n            multiRegional: 'MULTI_REGIONAL',\r\n            nearline: 'NEARLINE',\r\n            regional: 'REGIONAL',\r\n            standard: 'STANDARD',\r\n        };\r\n        Object.keys(storageClasses).forEach(storageClass => {\r\n            if (body[storageClass]) {\r\n                if (metadata.storageClass && metadata.storageClass !== storageClass) {\r\n                    throw new Error(`Both \\`${storageClass}\\` and \\`storageClass\\` were provided.`);\r\n                }\r\n                body.storageClass = storageClasses[storageClass];\r\n                delete body[storageClass];\r\n            }\r\n        });\r\n        if (body.requesterPays) {\r\n            body.billing = {\r\n                requesterPays: body.requesterPays,\r\n            };\r\n            delete body.requesterPays;\r\n        }\r\n        const query = {\r\n            project: this.projectId,\r\n        };\r\n        if (body.userProject) {\r\n            query.userProject = body.userProject;\r\n            delete body.userProject;\r\n        }\r\n        this.request({\r\n            method: 'POST',\r\n            uri: '/b',\r\n            qs: query,\r\n            json: body,\r\n        }, (err, resp) => {\r\n            if (err) {\r\n                callback(err, null, resp);\r\n                return;\r\n            }\r\n            const bucket = this.bucket(name);\r\n            bucket.metadata = resp;\r\n            callback(null, bucket, resp);\r\n        });\r\n    }\r\n    /**\r\n     * @typedef {object} CreateHmacKeyOptions\r\n     * @property {string} [projectId] The project ID of the project that owns\r\n     *     the service account of the requested HMAC key. If not provided,\r\n     *     the project ID used to instantiate the Storage client will be used.\r\n     * @property {string} [userProject] This parameter is currently ignored.\r\n     */\r\n    /**\r\n     * @typedef {object} HmacKeyMetadata\r\n     * @property {string} accessId The access id identifies which HMAC key was\r\n     *     used to sign a request when authenticating with HMAC.\r\n     * @property {string} etag Used to perform a read-modify-write of the key.\r\n     * @property {string} id The resource name of the HMAC key.\r\n     * @property {string} projectId The project ID.\r\n     * @property {string} serviceAccountEmail The service account's email this\r\n     *     HMAC key is created for.\r\n     * @property {string} state The state of this HMAC key. One of \"ACTIVE\",\r\n     *     \"INACTIVE\" or \"DELETED\".\r\n     * @property {string} timeCreated The creation time of the HMAC key in\r\n     *     RFC 3339 format.\r\n     * @property {string} [updated] The time this HMAC key was last updated in\r\n     *     RFC 3339 format.\r\n     */\r\n    /**\r\n     * @typedef {array} CreateHmacKeyResponse\r\n     * @property {HmacKey} 0 The HmacKey instance created from API response.\r\n     * @property {string} 1 The HMAC key's secret used to access the XML API.\r\n     * @property {object} 3 The raw API response.\r\n     */\r\n    /**\r\n     * @callback CreateHmacKeyCallback Callback function.\r\n     * @param {?Error} err Request error, if any.\r\n     * @param {HmacKey} hmacKey The HmacKey instance created from API response.\r\n     * @param {string} secret The HMAC key's secret used to access the XML API.\r\n     * @param {object} apiResponse The raw API response.\r\n     */\r\n    /**\r\n     * Create an HMAC key associated with an service account to authenticate\r\n     * requests to the Cloud Storage XML API.\r\n     *\r\n     * @see [HMAC keys documentation]{@link https://cloud.google.com/storage/docs/authentication/hmackeys}\r\n     *\r\n     * @param {string} serviceAccountEmail The service account's email address\r\n     *     with which the HMAC key is created for.\r\n     * @param {CreateHmacKeyCallback} [callback] Callback function.\r\n     * @return {Promise<CreateHmacKeyResponse>}\r\n     *\r\n     * @example\r\n     * const {Storage} = require('google-cloud/storage');\r\n     * const storage = new Storage();\r\n     *\r\n     * // Replace with your service account's email address\r\n     * const serviceAccountEmail =\r\n     *   'my-service-account@appspot.gserviceaccount.com';\r\n     *\r\n     * storage.createHmacKey(serviceAccountEmail, function(err, hmacKey, secret) {\r\n     *   if (!err) {\r\n     *     // Securely store the secret for use with the XML API.\r\n     *   }\r\n     * });\r\n     *\r\n     * //-\r\n     * // If the callback is omitted, we'll return a Promise.\r\n     * //-\r\n     * storage.createHmacKey(serviceAccountEmail)\r\n     *   .then((response) => {\r\n     *     const hmacKey = response[0];\r\n     *     const secret = response[1];\r\n     *     // Securely store the secret for use with the XML API.\r\n     *   });\r\n     */\r\n    createHmacKey(serviceAccountEmail, optionsOrCb, cb) {\r\n        if (typeof serviceAccountEmail !== 'string') {\r\n            throw new Error('The first argument must be a service account email to create an HMAC key.');\r\n        }\r\n        const { options, callback } = util_1.normalize(optionsOrCb, cb);\r\n        const query = Object.assign({}, options, { serviceAccountEmail });\r\n        const projectId = query.projectId || this.projectId;\r\n        delete query.projectId;\r\n        this.request({\r\n            method: 'POST',\r\n            uri: `/projects/${projectId}/hmacKeys`,\r\n            qs: query,\r\n        }, (err, resp) => {\r\n            if (err) {\r\n                callback(err, null, null, resp);\r\n                return;\r\n            }\r\n            const metadata = resp.metadata;\r\n            const hmacKey = this.hmacKey(metadata.accessId, {\r\n                projectId: metadata.projectId,\r\n            });\r\n            hmacKey.metadata = resp.metadata;\r\n            callback(null, hmacKey, resp.secret, resp);\r\n        });\r\n    }\r\n    /**\r\n     * Query object for listing buckets.\r\n     *\r\n     * @typedef {object} GetBucketsRequest\r\n     * @property {boolean} [autoPaginate=true] Have pagination handled\r\n     *     automatically.\r\n     * @property {number} [maxApiCalls] Maximum number of API calls to make.\r\n     * @property {number} [maxResults] Maximum number of items plus prefixes to\r\n     *     return per call.\r\n     *     Note: By default will handle pagination automatically\r\n     *     if more than 1 page worth of results are requested per call.\r\n     *     When `autoPaginate` is set to `false` the smaller of `maxResults`\r\n     *     or 1 page of results will be returned per call.\r\n     * @property {string} [pageToken] A previously-returned page token\r\n     *     representing part of the larger set of results to view.\r\n     * @property {string} [userProject] The ID of the project which will be billed\r\n     *     for the request.\r\n     */\r\n    /**\r\n     * @typedef {array} GetBucketsResponse\r\n     * @property {Bucket[]} 0 Array of {@link Bucket} instances.\r\n     * @property {objcet} 1 nextQuery A query object to receive more results.\r\n     * @property {object} 2 The full API response.\r\n     */\r\n    /**\r\n     * @callback GetBucketsCallback\r\n     * @param {?Error} err Request error, if any.\r\n     * @param {Bucket[]} buckets Array of {@link Bucket} instances.\r\n     * @param {object} nextQuery A query object to receive more results.\r\n     * @param {object} apiResponse The full API response.\r\n     */\r\n    /**\r\n     * Get Bucket objects for all of the buckets in your project.\r\n     *\r\n     * @see [Buckets: list API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/list}\r\n     *\r\n     * @param {GetBucketsRequest} [query] Query object for listing buckets.\r\n     * @param {GetBucketsCallback} [callback] Callback function.\r\n     * @returns {Promise<GetBucketsResponse>}\r\n     *\r\n     * @example\r\n     * const {Storage} = require('@google-cloud/storage');\r\n     * const storage = new Storage();\r\n     * storage.getBuckets(function(err, buckets) {\r\n     *   if (!err) {\r\n     *     // buckets is an array of Bucket objects.\r\n     *   }\r\n     * });\r\n     *\r\n     * //-\r\n     * // To control how many API requests are made and page through the results\r\n     * // manually, set `autoPaginate` to `false`.\r\n     * //-\r\n     * const callback = function(err, buckets, nextQuery, apiResponse) {\r\n     *   if (nextQuery) {\r\n     *     // More results exist.\r\n     *     storage.getBuckets(nextQuery, callback);\r\n     *   }\r\n     *\r\n     *   // The `metadata` property is populated for you with the metadata at the\r\n     *   // time of fetching.\r\n     *   buckets[0].metadata;\r\n     *\r\n     *   // However, in cases where you are concerned the metadata could have\r\n     *   // changed, use the `getMetadata` method.\r\n     *   buckets[0].getMetadata(function(err, metadata, apiResponse) {});\r\n     * };\r\n     *\r\n     * storage.getBuckets({\r\n     *   autoPaginate: false\r\n     * }, callback);\r\n     *\r\n     * //-\r\n     * // If the callback is omitted, we'll return a Promise.\r\n     * //-\r\n     * storage.getBuckets().then(function(data) {\r\n     *   const buckets = data[0];\r\n     * });\r\n     *\r\n     * @example <caption>include:samples/buckets.js</caption>\r\n     * region_tag:storage_list_buckets\r\n     * Another example:\r\n     */\r\n    getBuckets(optionsOrCallback, cb) {\r\n        const { options, callback } = util_1.normalize(optionsOrCallback, cb);\r\n        options.project = options.project || this.projectId;\r\n        this.request({\r\n            uri: '/b',\r\n            qs: options,\r\n        }, (err, resp) => {\r\n            if (err) {\r\n                callback(err, null, null, resp);\r\n                return;\r\n            }\r\n            const buckets = arrify(resp.items).map((bucket) => {\r\n                const bucketInstance = this.bucket(bucket.id);\r\n                bucketInstance.metadata = bucket;\r\n                return bucketInstance;\r\n            });\r\n            const nextQuery = resp.nextPageToken\r\n                ? Object.assign({}, options, { pageToken: resp.nextPageToken })\r\n                : null;\r\n            callback(null, buckets, nextQuery, resp);\r\n        });\r\n    }\r\n    getHmacKeys(optionsOrCb, cb) {\r\n        const { options, callback } = util_1.normalize(optionsOrCb, cb);\r\n        const query = Object.assign({}, options);\r\n        const projectId = query.projectId || this.projectId;\r\n        delete query.projectId;\r\n        this.request({\r\n            uri: `/projects/${projectId}/hmacKeys`,\r\n            qs: query,\r\n        }, (err, resp) => {\r\n            if (err) {\r\n                callback(err, null, null, resp);\r\n                return;\r\n            }\r\n            const hmacKeys = arrify(resp.items).map((hmacKey) => {\r\n                const hmacKeyInstance = this.hmacKey(hmacKey.accessId, {\r\n                    projectId: hmacKey.projectId,\r\n                });\r\n                hmacKeyInstance.metadata = hmacKey;\r\n                return hmacKeyInstance;\r\n            });\r\n            const nextQuery = resp.nextPageToken\r\n                ? Object.assign({}, options, { pageToken: resp.nextPageToken })\r\n                : null;\r\n            callback(null, hmacKeys, nextQuery, resp);\r\n        });\r\n    }\r\n    /**\r\n     * @typedef {array} GetServiceAccountResponse\r\n     * @property {object} 0 The service account resource.\r\n     * @property {object} 1 The full\r\n     * [API\r\n     * response](https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount#resource).\r\n     */\r\n    /**\r\n     * @callback GetServiceAccountCallback\r\n     * @param {?Error} err Request error, if any.\r\n     * @param {object} serviceAccount The serviceAccount resource.\r\n     * @param {string} serviceAccount.emailAddress The service account email\r\n     *     address.\r\n     * @param {object} apiResponse The full\r\n     * [API\r\n     * response](https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount#resource).\r\n     */\r\n    /**\r\n     * Get the email address of this project's Google Cloud Storage service\r\n     * account.\r\n     *\r\n     * @see [Projects.serviceAccount: get API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount/get}\r\n     * @see [Projects.serviceAccount Resource]{@link https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount#resource}\r\n     *\r\n     * @param {object} [options] Configuration object.\r\n     * @param {string} [options.userProject] User project to be billed for this\r\n     *     request.\r\n     * @param {GetServiceAccountCallback} [callback] Callback function.\r\n     * @returns {Promise<GetServiceAccountResponse>}\r\n     *\r\n     * @example\r\n     * const {Storage} = require('@google-cloud/storage');\r\n     * const storage = new Storage();\r\n     *\r\n     * storage.getServiceAccount(function(err, serviceAccount, apiResponse) {\r\n     *   if (!err) {\r\n     *     const serviceAccountEmail = serviceAccount.emailAddress;\r\n     *   }\r\n     * });\r\n     *\r\n     * //-\r\n     * // If the callback is omitted, we'll return a Promise.\r\n     * //-\r\n     * storage.getServiceAccount().then(function(data) {\r\n     *   const serviceAccountEmail = data[0].emailAddress;\r\n     *   const apiResponse = data[1];\r\n     * });\r\n     */\r\n    getServiceAccount(optionsOrCallback, cb) {\r\n        const { options, callback } = util_1.normalize(optionsOrCallback, cb);\r\n        this.request({\r\n            uri: `/projects/${this.projectId}/serviceAccount`,\r\n            qs: options,\r\n        }, (err, resp) => {\r\n            if (err) {\r\n                callback(err, null, resp);\r\n                return;\r\n            }\r\n            const camelCaseResponse = {};\r\n            for (const prop in resp) {\r\n                // eslint-disable-next-line no-prototype-builtins\r\n                if (resp.hasOwnProperty(prop)) {\r\n                    const camelCaseProp = prop.replace(/_(\\w)/g, (_, match) => match.toUpperCase());\r\n                    camelCaseResponse[camelCaseProp] = resp[prop];\r\n                }\r\n            }\r\n            callback(null, camelCaseResponse, resp);\r\n        });\r\n    }\r\n    /**\r\n     * Get a reference to an HmacKey object.\r\n     * Note: this does not fetch the HMAC key's metadata. Use HmacKey#get() to\r\n     * retrieve and populate the metadata.\r\n     *\r\n     * To get a reference to an HMAC key that's not created for a service\r\n     * account in the same project used to instantiate the Storage client,\r\n     * supply the project's ID as `projectId` in the `options` argument.\r\n     *\r\n     * @param {string} accessId The HMAC key's access ID.\r\n     * @param {HmacKeyOptions} options HmacKey constructor owptions.\r\n     * @returns {HmacKey}\r\n     * @see HmacKey\r\n     *\r\n     * @example\r\n     * const {Storage} = require('@google-cloud/storage');\r\n     * const storage = new Storage();\r\n     * const hmacKey = storage.hmacKey('ACCESS_ID');\r\n     */\r\n    hmacKey(accessId, options) {\r\n        if (!accessId) {\r\n            throw new Error('An access ID is needed to create an HmacKey object.');\r\n        }\r\n        return new hmacKey_1.HmacKey(this, accessId, options);\r\n    }\r\n}\r\nexports.Storage = Storage;\r\n/**\r\n * {@link Bucket} class.\r\n *\r\n * @name Storage.Bucket\r\n * @see Bucket\r\n * @type {Constructor}\r\n */\r\nStorage.Bucket = bucket_1.Bucket;\r\n/**\r\n * {@link Channel} class.\r\n *\r\n * @name Storage.Channel\r\n * @see Channel\r\n * @type {Constructor}\r\n */\r\nStorage.Channel = channel_1.Channel;\r\n/**\r\n * {@link File} class.\r\n *\r\n * @name Storage.File\r\n * @see File\r\n * @type {Constructor}\r\n */\r\nStorage.File = file_1.File;\r\n/**\r\n * {@link HmacKey} class.\r\n *\r\n * @name Storage.HmacKey\r\n * @see HmacKey\r\n * @type {Constructor}\r\n */\r\nStorage.HmacKey = hmacKey_1.HmacKey;\r\nStorage.acl = {\r\n    OWNER_ROLE: 'OWNER',\r\n    READER_ROLE: 'READER',\r\n    WRITER_ROLE: 'WRITER',\r\n};\r\n/*! Developer Documentation\r\n *\r\n * These methods can be auto-paginated.\r\n */\r\npaginator_1.paginator.extend(Storage, ['getBuckets', 'getHmacKeys']);\r\n/*! Developer Documentation\r\n *\r\n * All async methods (except for streams) will return a Promise in the event\r\n * that a callback is omitted.\r\n */\r\npromisify_1.promisifyAll(Storage, {\r\n    exclude: ['bucket', 'channel', 'hmacKey'],\r\n});\r\n//# sourceMappingURL=storage.js.map"]},"metadata":{},"sourceType":"script"}