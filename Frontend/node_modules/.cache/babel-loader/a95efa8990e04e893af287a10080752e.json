{"ast":null,"code":"\"use strict\";\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.constructSettings = exports.createBundleOptions = exports.createMaxRetriesBackoffSettings = exports.createDefaultBackoffSettings = exports.createBackoffSettings = exports.createRetryOptions = exports.CallSettings = exports.RetryOptions = void 0;\n/**\r\n * Encapsulates the overridable settings for a particular API call.\r\n *\r\n * ``CallOptions`` is an optional arg for all GAX API calls.  It is used to\r\n * configure the settings of a specific API call.\r\n *\r\n * When provided, its values override the GAX service defaults for that\r\n * particular call.\r\n *\r\n * Typically the API clients will accept this as the second to the last\r\n * argument. See the examples below.\r\n * @typedef {Object} CallOptions\r\n * @property {number=} timeout - The client-side timeout for API calls.\r\n * @property {RetryOptions=} retry - determines whether and how to retry\r\n *   on transient errors. When set to null, the call will not retry.\r\n * @property {boolean=} autoPaginate - If set to false and the call is\r\n *   configured for paged iteration, page unrolling is not performed, instead\r\n *   the callback will be called with the response object.\r\n * @property {Object=} pageToken - If set and the call is configured for\r\n *   paged iteration, paged iteration is not performed and requested with this\r\n *   pageToken.\r\n * @property {number} maxResults - If set and the call is configured for\r\n *   paged iteration, the call will stop when the number of response elements\r\n *   reaches to the specified size. By default, it will unroll the page to\r\n *   the end of the list.\r\n * @property {boolean=} isBundling - If set to false and the call is configured\r\n *   for bundling, bundling is not performed.\r\n * @property {BackoffSettings=} longrunning - BackoffSettings used for polling.\r\n * @example\r\n * // suppress bundling for bundled method.\r\n * api.bundlingMethod(\r\n *     param, {optParam: aValue, isBundling: false}, function(err, response) {\r\n *   // handle response.\r\n * });\r\n * @example\r\n * // suppress streaming for page-streaming method.\r\n * api.pageStreamingMethod(\r\n *     param, {optParam: aValue, autoPaginate: false}, function(err, page) {\r\n *   // not returning a stream, but callback is called with the paged response.\r\n * });\r\n */\n\n/**\r\n * Per-call configurable settings for retrying upon transient failure.\r\n * @typedef {Object} RetryOptions\r\n * @property {String[]} retryCodes\r\n * @property {BackoffSettings} backoffSettings\r\n */\n\nclass RetryOptions {\n  constructor(retryCodes, backoffSettings) {\n    this.retryCodes = retryCodes;\n    this.backoffSettings = backoffSettings;\n  }\n\n}\n\nexports.RetryOptions = RetryOptions;\n\nclass CallSettings {\n  /**\r\n   * @param {Object} settings - An object containing parameters of this settings.\r\n   * @param {number} settings.timeout - The client-side timeout for API calls.\r\n   *   This parameter is ignored for retrying calls.\r\n   * @param {RetryOptions} settings.retry - The configuration for retrying upon\r\n   *   transient error. If set to null, this call will not retry.\r\n   * @param {boolean} settings.autoPaginate - If there is no `pageDescriptor`,\r\n   *   this attrbute has no meaning. Otherwise, determines whether a page\r\n   * streamed response should make the page structure transparent to the user by\r\n   *   flattening the repeated field in the returned generator.\r\n   * @param {number} settings.pageToken - If there is no `pageDescriptor`,\r\n   *   this attribute has no meaning. Otherwise, determines the page token used\r\n   * in the page streaming request.\r\n   * @param {Object} settings.otherArgs - Additional arguments to be passed to\r\n   *   the API calls.\r\n   *\r\n   * @constructor\r\n   */\n  constructor(settings) {\n    var _a;\n\n    settings = settings || {};\n    this.timeout = settings.timeout || 30 * 1000;\n    this.retry = settings.retry;\n    this.autoPaginate = 'autoPaginate' in settings ? settings.autoPaginate : true;\n    this.pageToken = settings.pageToken;\n    this.maxResults = settings.maxResults;\n    this.otherArgs = settings.otherArgs || {};\n    this.bundleOptions = settings.bundleOptions;\n    this.isBundling = 'isBundling' in settings ? settings.isBundling : true;\n    this.longrunning = 'longrunning' in settings ? settings.longrunning : undefined;\n    this.apiName = (_a = settings.apiName) !== null && _a !== void 0 ? _a : undefined;\n    this.retryRequestOptions = settings.retryRequestOptions;\n  }\n  /**\r\n   * Returns a new CallSettings merged from this and a CallOptions object.\r\n   *\r\n   * @param {CallOptions} options - an instance whose values override\r\n   *   those in this object. If null, ``merge`` returns a copy of this\r\n   *   object\r\n   * @return {CallSettings} The merged CallSettings instance.\r\n   */\n\n\n  merge(options) {\n    if (!options) {\n      return new CallSettings(this);\n    }\n\n    let timeout = this.timeout;\n    let retry = this.retry;\n    let autoPaginate = this.autoPaginate;\n    let pageToken = this.pageToken;\n    let pageSize = this.pageSize;\n    let maxResults = this.maxResults;\n    let otherArgs = this.otherArgs;\n    let isBundling = this.isBundling;\n    let longrunning = this.longrunning;\n    let apiName = this.apiName;\n    let retryRequestOptions = this.retryRequestOptions;\n\n    if ('timeout' in options) {\n      timeout = options.timeout;\n    }\n\n    if ('retry' in options) {\n      retry = mergeRetryOptions(retry || {}, options.retry);\n    }\n\n    if ('autoPaginate' in options && !options.autoPaginate) {\n      autoPaginate = false;\n    }\n\n    if ('pageToken' in options) {\n      autoPaginate = false;\n      pageToken = options.pageToken;\n    }\n\n    if ('pageSize' in options) {\n      pageSize = options.pageSize;\n    }\n\n    if ('maxResults' in options) {\n      maxResults = options.maxResults;\n    }\n\n    if ('otherArgs' in options) {\n      otherArgs = {};\n\n      for (const key in this.otherArgs) {\n        otherArgs[key] = this.otherArgs[key];\n      }\n\n      for (const optionsKey in options.otherArgs) {\n        otherArgs[optionsKey] = options.otherArgs[optionsKey];\n      }\n    }\n\n    if ('isBundling' in options) {\n      isBundling = options.isBundling;\n    }\n\n    if ('maxRetries' in options) {\n      retry.backoffSettings.maxRetries = options.maxRetries;\n      delete retry.backoffSettings.totalTimeoutMillis;\n    }\n\n    if ('longrunning' in options) {\n      longrunning = options.longrunning;\n    }\n\n    if ('apiName' in options) {\n      apiName = options.apiName;\n    }\n\n    if ('retryRequestOptions' in options) {\n      retryRequestOptions = options.retryRequestOptions;\n    }\n\n    return new CallSettings({\n      timeout,\n      retry,\n      bundleOptions: this.bundleOptions,\n      longrunning,\n      autoPaginate,\n      pageToken,\n      pageSize,\n      maxResults,\n      otherArgs,\n      isBundling,\n      apiName,\n      retryRequestOptions\n    });\n  }\n\n}\n\nexports.CallSettings = CallSettings;\n/**\r\n * Per-call configurable settings for retrying upon transient failure.\r\n *\r\n * @param {number[]} retryCodes - a list of Google API canonical error codes\r\n *   upon which a retry should be attempted.\r\n * @param {BackoffSettings} backoffSettings - configures the retry\r\n *   exponential backoff algorithm.\r\n * @return {RetryOptions} A new RetryOptions object.\r\n *\r\n */\n\nfunction createRetryOptions(retryCodes, backoffSettings) {\n  return {\n    retryCodes,\n    backoffSettings\n  };\n}\n\nexports.createRetryOptions = createRetryOptions;\n/**\r\n * Parameters to the exponential backoff algorithm for retrying.\r\n *\r\n * @param {number} initialRetryDelayMillis - the initial delay time,\r\n *   in milliseconds, between the completion of the first failed request and the\r\n *   initiation of the first retrying request.\r\n * @param {number} retryDelayMultiplier - the multiplier by which to\r\n *   increase the delay time between the completion of failed requests, and the\r\n *   initiation of the subsequent retrying request.\r\n * @param {number} maxRetryDelayMillis - the maximum delay time, in\r\n *   milliseconds, between requests. When this value is reached,\r\n *   ``retryDelayMultiplier`` will no longer be used to increase delay time.\r\n * @param {number} initialRpcTimeoutMillis - the initial timeout parameter\r\n *   to the request.\r\n * @param {number} rpcTimeoutMultiplier - the multiplier by which to\r\n *   increase the timeout parameter between failed requests.\r\n * @param {number} maxRpcTimeoutMillis - the maximum timeout parameter, in\r\n *   milliseconds, for a request. When this value is reached,\r\n *   ``rpcTimeoutMultiplier`` will no longer be used to increase the timeout.\r\n * @param {number} totalTimeoutMillis - the total time, in milliseconds,\r\n *   starting from when the initial request is sent, after which an error will\r\n *   be returned, regardless of the retrying attempts made meanwhile.\r\n * @return {BackoffSettings} a new settings.\r\n *\r\n */\n\nfunction createBackoffSettings(initialRetryDelayMillis, retryDelayMultiplier, maxRetryDelayMillis, initialRpcTimeoutMillis, rpcTimeoutMultiplier, maxRpcTimeoutMillis, totalTimeoutMillis) {\n  return {\n    initialRetryDelayMillis,\n    retryDelayMultiplier,\n    maxRetryDelayMillis,\n    initialRpcTimeoutMillis,\n    rpcTimeoutMultiplier,\n    maxRpcTimeoutMillis,\n    totalTimeoutMillis\n  };\n}\n\nexports.createBackoffSettings = createBackoffSettings;\n\nfunction createDefaultBackoffSettings() {\n  return createBackoffSettings(100, 1.3, 60000, null, null, null, null);\n}\n\nexports.createDefaultBackoffSettings = createDefaultBackoffSettings;\n/**\r\n * Parameters to the exponential backoff algorithm for retrying.\r\n * This function is unsupported, and intended for internal use only.\r\n *\r\n * @param {number} initialRetryDelayMillis - the initial delay time,\r\n *   in milliseconds, between the completion of the first failed request and the\r\n *   initiation of the first retrying request.\r\n * @param {number} retryDelayMultiplier - the multiplier by which to\r\n *   increase the delay time between the completion of failed requests, and the\r\n *   initiation of the subsequent retrying request.\r\n * @param {number} maxRetryDelayMillis - the maximum delay time, in\r\n *   milliseconds, between requests. When this value is reached,\r\n *   ``retryDelayMultiplier`` will no longer be used to increase delay time.\r\n * @param {number} initialRpcTimeoutMillis - the initial timeout parameter\r\n *   to the request.\r\n * @param {number} rpcTimeoutMultiplier - the multiplier by which to\r\n *   increase the timeout parameter between failed requests.\r\n * @param {number} maxRpcTimeoutMillis - the maximum timeout parameter, in\r\n *   milliseconds, for a request. When this value is reached,\r\n *   ``rpcTimeoutMultiplier`` will no longer be used to increase the timeout.\r\n * @param {number} maxRetries - the maximum number of retrying attempts that\r\n *   will be made. If reached, an error will be returned.\r\n * @return {BackoffSettings} a new settings.\r\n *\r\n */\n\nfunction createMaxRetriesBackoffSettings(initialRetryDelayMillis, retryDelayMultiplier, maxRetryDelayMillis, initialRpcTimeoutMillis, rpcTimeoutMultiplier, maxRpcTimeoutMillis, maxRetries) {\n  return {\n    initialRetryDelayMillis,\n    retryDelayMultiplier,\n    maxRetryDelayMillis,\n    initialRpcTimeoutMillis,\n    rpcTimeoutMultiplier,\n    maxRpcTimeoutMillis,\n    maxRetries\n  };\n}\n\nexports.createMaxRetriesBackoffSettings = createMaxRetriesBackoffSettings;\n/**\r\n * Creates a new {@link BundleOptions}.\r\n *\r\n * @private\r\n * @param {Object} options - An object to hold optional parameters. See\r\n *   properties for the content of options.\r\n * @return {BundleOptions} - A new options.\r\n */\n\nfunction createBundleOptions(options) {\n  const params = ['element_count_threshold', 'element_count_limit', 'request_byte_threshold', 'request_byte_limit', 'delay_threshold_millis'];\n  params.forEach(param => {\n    if (param in options && typeof options[param] !== 'number') {\n      throw new Error(`${param} should be a number`);\n    }\n  });\n  const elementCountThreshold = options.element_count_threshold || 0;\n  const elementCountLimit = options.element_count_limit || 0;\n  const requestByteThreshold = options.request_byte_threshold || 0;\n  const requestByteLimit = options.request_byte_limit || 0;\n  const delayThreshold = options.delay_threshold_millis || 0;\n\n  if (elementCountThreshold === 0 && requestByteThreshold === 0 && delayThreshold === 0) {\n    throw new Error('one threshold should be > 0');\n  }\n\n  return {\n    elementCountThreshold,\n    elementCountLimit,\n    requestByteThreshold,\n    requestByteLimit,\n    delayThreshold\n  };\n}\n\nexports.createBundleOptions = createBundleOptions;\n/**\r\n * Helper for {@link constructSettings}\r\n *\r\n * @private\r\n *\r\n * @param {Object} methodConfig - A dictionary representing a single\r\n *   `methods` entry of the standard API client config file. (See\r\n *   {@link constructSettings} for information on this yaml.)\r\n * @param {?Object} retryCodes - A dictionary parsed from the\r\n *   `retry_codes_def` entry of the standard API client config\r\n *   file. (See {@link constructSettings} for information on this yaml.)\r\n * @param {Object} retryParams - A dictionary parsed from the\r\n *   `retry_params` entry of the standard API client config\r\n *   file. (See {@link constructSettings} for information on this yaml.)\r\n * @param {Object} retryNames - A dictionary mapping the string names\r\n *   used in the standard API client config file to API response\r\n *   status codes.\r\n * @return {?RetryOptions} The new retry options.\r\n */\n\nfunction constructRetry(methodConfig, retryCodes, retryParams, retryNames) {\n  if (!methodConfig) {\n    return null;\n  }\n\n  let codes = null;\n\n  if (retryCodes && 'retry_codes_name' in methodConfig) {\n    const retryCodesName = methodConfig['retry_codes_name'];\n    codes = (retryCodes[retryCodesName] || []).map(name => {\n      return Number(retryNames[name]);\n    });\n  }\n\n  let backoffSettings = null;\n\n  if (retryParams && 'retry_params_name' in methodConfig) {\n    const params = retryParams[methodConfig.retry_params_name];\n    backoffSettings = createBackoffSettings(params.initial_retry_delay_millis, params.retry_delay_multiplier, params.max_retry_delay_millis, params.initial_rpc_timeout_millis, params.rpc_timeout_multiplier, params.max_rpc_timeout_millis, params.total_timeout_millis);\n  }\n\n  return createRetryOptions(codes, backoffSettings);\n}\n/**\r\n * Helper for {@link constructSettings}\r\n *\r\n * Takes two retry options, and merges them into a single RetryOption instance.\r\n *\r\n * @private\r\n *\r\n * @param {RetryOptions} retry - The base RetryOptions.\r\n * @param {RetryOptions} overrides - The RetryOptions used for overriding\r\n *   `retry`. Use the values if it is not null. If entire `overrides` is null,\r\n *   ignore the base retry and return null.\r\n * @return {?RetryOptions} The merged RetryOptions.\r\n */\n\n\nfunction mergeRetryOptions(retry, overrides) {\n  if (!overrides) {\n    return null;\n  }\n\n  if (!overrides.retryCodes && !overrides.backoffSettings) {\n    return retry;\n  }\n\n  const codes = overrides.retryCodes ? overrides.retryCodes : retry.retryCodes;\n  const backoffSettings = overrides.backoffSettings ? overrides.backoffSettings : retry.backoffSettings;\n  return createRetryOptions(codes, backoffSettings);\n}\n/**\r\n * Constructs a dictionary mapping method names to {@link CallSettings}.\r\n *\r\n * The `clientConfig` parameter is parsed from a client configuration JSON\r\n * file of the form:\r\n *\r\n *     {\r\n *       \"interfaces\": {\r\n *         \"google.fake.v1.ServiceName\": {\r\n *           \"retry_codes\": {\r\n *             \"idempotent\": [\"UNAVAILABLE\", \"DEADLINE_EXCEEDED\"],\r\n *             \"non_idempotent\": []\r\n *           },\r\n *           \"retry_params\": {\r\n *             \"default\": {\r\n *               \"initial_retry_delay_millis\": 100,\r\n *               \"retry_delay_multiplier\": 1.2,\r\n *               \"max_retry_delay_millis\": 1000,\r\n *               \"initial_rpc_timeout_millis\": 2000,\r\n *               \"rpc_timeout_multiplier\": 1.5,\r\n *               \"max_rpc_timeout_millis\": 30000,\r\n *               \"total_timeout_millis\": 45000\r\n *             }\r\n *           },\r\n *           \"methods\": {\r\n *             \"CreateFoo\": {\r\n *               \"retry_codes_name\": \"idempotent\",\r\n *               \"retry_params_name\": \"default\"\r\n *             },\r\n *             \"Publish\": {\r\n *               \"retry_codes_name\": \"non_idempotent\",\r\n *               \"retry_params_name\": \"default\",\r\n *               \"bundling\": {\r\n *                 \"element_count_threshold\": 40,\r\n *                 \"element_count_limit\": 200,\r\n *                 \"request_byte_threshold\": 90000,\r\n *                 \"request_byte_limit\": 100000,\r\n *                 \"delay_threshold_millis\": 100\r\n *               }\r\n *             }\r\n *           }\r\n *         }\r\n *       }\r\n *     }\r\n *\r\n * @param {String} serviceName - The fully-qualified name of this\r\n *   service, used as a key into the client config file (in the\r\n *   example above, this value should be 'google.fake.v1.ServiceName').\r\n * @param {Object} clientConfig - A dictionary parsed from the\r\n *   standard API client config file.\r\n * @param {Object} configOverrides - A dictionary in the same structure of\r\n *   client_config to override the settings.\r\n * @param {Object.<string, string[]>} retryNames - A dictionary mapping the strings\r\n *   referring to response status codes to objects representing\r\n *   those codes.\r\n * @param {Object} otherArgs - the non-request arguments to be passed to the API\r\n *   calls.\r\n * @return {Object} A mapping from method name to CallSettings, or null if the\r\n *   service is not found in the config.\r\n */\n\n\nfunction constructSettings(serviceName, clientConfig, configOverrides, retryNames, otherArgs) {\n  otherArgs = otherArgs || {}; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  const defaults = {};\n  const serviceConfig = (clientConfig.interfaces || {})[serviceName];\n\n  if (!serviceConfig) {\n    return null;\n  } // users can override the config from client side, like bundling options.\n  // The detailed structure of the clientConfig can be found here: https://github.com/googleapis/gax-nodejs/blob/master/src/gax.ts#L546\n  // The way to override bundling options:\n  //\n  // const customConfig = {\"interfaces\": {\"service\": {\"methods\": {\"methodName\": {\"bundling\": {..}}}}}}\n  // const client = new Client({ projectId, customConfig });\n\n\n  const overrides = (configOverrides.interfaces || {})[serviceName] || {};\n  const methods = serviceConfig.methods;\n  const overridingMethods = overrides.methods || {};\n\n  for (const methodName in methods) {\n    const methodConfig = methods[methodName];\n    const jsName = methodName[0].toLowerCase() + methodName.slice(1);\n    let retry = constructRetry(methodConfig, serviceConfig.retry_codes, serviceConfig.retry_params, retryNames);\n    let bundlingConfig = methodConfig.bundling;\n    let timeout = methodConfig.timeout_millis;\n\n    if (methodName in overridingMethods) {\n      const overridingMethod = overridingMethods[methodName];\n\n      if (overridingMethod) {\n        if ('bundling' in overridingMethod) {\n          bundlingConfig = overridingMethod.bundling;\n        }\n\n        if ('timeout_millis' in overridingMethod) {\n          timeout = overridingMethod.timeout_millis;\n        }\n      }\n\n      retry = mergeRetryOptions(retry, constructRetry(overridingMethod, overrides.retry_codes, overrides.retry_params, retryNames));\n    }\n\n    const apiName = serviceName;\n    defaults[jsName] = new CallSettings({\n      timeout,\n      retry,\n      bundleOptions: bundlingConfig ? createBundleOptions(bundlingConfig) : null,\n      otherArgs,\n      apiName\n    });\n  }\n\n  return defaults;\n}\n\nexports.constructSettings = constructSettings;","map":{"version":3,"sources":["../../src/gax.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.constructSettings = exports.createBundleOptions = exports.createMaxRetriesBackoffSettings = exports.createDefaultBackoffSettings = exports.createBackoffSettings = exports.createRetryOptions = exports.CallSettings = exports.RetryOptions = void 0;\r\n/**\r\n * Encapsulates the overridable settings for a particular API call.\r\n *\r\n * ``CallOptions`` is an optional arg for all GAX API calls.  It is used to\r\n * configure the settings of a specific API call.\r\n *\r\n * When provided, its values override the GAX service defaults for that\r\n * particular call.\r\n *\r\n * Typically the API clients will accept this as the second to the last\r\n * argument. See the examples below.\r\n * @typedef {Object} CallOptions\r\n * @property {number=} timeout - The client-side timeout for API calls.\r\n * @property {RetryOptions=} retry - determines whether and how to retry\r\n *   on transient errors. When set to null, the call will not retry.\r\n * @property {boolean=} autoPaginate - If set to false and the call is\r\n *   configured for paged iteration, page unrolling is not performed, instead\r\n *   the callback will be called with the response object.\r\n * @property {Object=} pageToken - If set and the call is configured for\r\n *   paged iteration, paged iteration is not performed and requested with this\r\n *   pageToken.\r\n * @property {number} maxResults - If set and the call is configured for\r\n *   paged iteration, the call will stop when the number of response elements\r\n *   reaches to the specified size. By default, it will unroll the page to\r\n *   the end of the list.\r\n * @property {boolean=} isBundling - If set to false and the call is configured\r\n *   for bundling, bundling is not performed.\r\n * @property {BackoffSettings=} longrunning - BackoffSettings used for polling.\r\n * @example\r\n * // suppress bundling for bundled method.\r\n * api.bundlingMethod(\r\n *     param, {optParam: aValue, isBundling: false}, function(err, response) {\r\n *   // handle response.\r\n * });\r\n * @example\r\n * // suppress streaming for page-streaming method.\r\n * api.pageStreamingMethod(\r\n *     param, {optParam: aValue, autoPaginate: false}, function(err, page) {\r\n *   // not returning a stream, but callback is called with the paged response.\r\n * });\r\n */\r\n/**\r\n * Per-call configurable settings for retrying upon transient failure.\r\n * @typedef {Object} RetryOptions\r\n * @property {String[]} retryCodes\r\n * @property {BackoffSettings} backoffSettings\r\n */\r\nclass RetryOptions {\r\n    constructor(retryCodes, backoffSettings) {\r\n        this.retryCodes = retryCodes;\r\n        this.backoffSettings = backoffSettings;\r\n    }\r\n}\r\nexports.RetryOptions = RetryOptions;\r\nclass CallSettings {\r\n    /**\r\n     * @param {Object} settings - An object containing parameters of this settings.\r\n     * @param {number} settings.timeout - The client-side timeout for API calls.\r\n     *   This parameter is ignored for retrying calls.\r\n     * @param {RetryOptions} settings.retry - The configuration for retrying upon\r\n     *   transient error. If set to null, this call will not retry.\r\n     * @param {boolean} settings.autoPaginate - If there is no `pageDescriptor`,\r\n     *   this attrbute has no meaning. Otherwise, determines whether a page\r\n     * streamed response should make the page structure transparent to the user by\r\n     *   flattening the repeated field in the returned generator.\r\n     * @param {number} settings.pageToken - If there is no `pageDescriptor`,\r\n     *   this attribute has no meaning. Otherwise, determines the page token used\r\n     * in the page streaming request.\r\n     * @param {Object} settings.otherArgs - Additional arguments to be passed to\r\n     *   the API calls.\r\n     *\r\n     * @constructor\r\n     */\r\n    constructor(settings) {\r\n        var _a;\r\n        settings = settings || {};\r\n        this.timeout = settings.timeout || 30 * 1000;\r\n        this.retry = settings.retry;\r\n        this.autoPaginate =\r\n            'autoPaginate' in settings ? settings.autoPaginate : true;\r\n        this.pageToken = settings.pageToken;\r\n        this.maxResults = settings.maxResults;\r\n        this.otherArgs = settings.otherArgs || {};\r\n        this.bundleOptions = settings.bundleOptions;\r\n        this.isBundling = 'isBundling' in settings ? settings.isBundling : true;\r\n        this.longrunning =\r\n            'longrunning' in settings ? settings.longrunning : undefined;\r\n        this.apiName = (_a = settings.apiName) !== null && _a !== void 0 ? _a : undefined;\r\n        this.retryRequestOptions = settings.retryRequestOptions;\r\n    }\r\n    /**\r\n     * Returns a new CallSettings merged from this and a CallOptions object.\r\n     *\r\n     * @param {CallOptions} options - an instance whose values override\r\n     *   those in this object. If null, ``merge`` returns a copy of this\r\n     *   object\r\n     * @return {CallSettings} The merged CallSettings instance.\r\n     */\r\n    merge(options) {\r\n        if (!options) {\r\n            return new CallSettings(this);\r\n        }\r\n        let timeout = this.timeout;\r\n        let retry = this.retry;\r\n        let autoPaginate = this.autoPaginate;\r\n        let pageToken = this.pageToken;\r\n        let pageSize = this.pageSize;\r\n        let maxResults = this.maxResults;\r\n        let otherArgs = this.otherArgs;\r\n        let isBundling = this.isBundling;\r\n        let longrunning = this.longrunning;\r\n        let apiName = this.apiName;\r\n        let retryRequestOptions = this.retryRequestOptions;\r\n        if ('timeout' in options) {\r\n            timeout = options.timeout;\r\n        }\r\n        if ('retry' in options) {\r\n            retry = mergeRetryOptions(retry || {}, options.retry);\r\n        }\r\n        if ('autoPaginate' in options && !options.autoPaginate) {\r\n            autoPaginate = false;\r\n        }\r\n        if ('pageToken' in options) {\r\n            autoPaginate = false;\r\n            pageToken = options.pageToken;\r\n        }\r\n        if ('pageSize' in options) {\r\n            pageSize = options.pageSize;\r\n        }\r\n        if ('maxResults' in options) {\r\n            maxResults = options.maxResults;\r\n        }\r\n        if ('otherArgs' in options) {\r\n            otherArgs = {};\r\n            for (const key in this.otherArgs) {\r\n                otherArgs[key] = this.otherArgs[key];\r\n            }\r\n            for (const optionsKey in options.otherArgs) {\r\n                otherArgs[optionsKey] = options.otherArgs[optionsKey];\r\n            }\r\n        }\r\n        if ('isBundling' in options) {\r\n            isBundling = options.isBundling;\r\n        }\r\n        if ('maxRetries' in options) {\r\n            retry.backoffSettings.maxRetries = options.maxRetries;\r\n            delete retry.backoffSettings.totalTimeoutMillis;\r\n        }\r\n        if ('longrunning' in options) {\r\n            longrunning = options.longrunning;\r\n        }\r\n        if ('apiName' in options) {\r\n            apiName = options.apiName;\r\n        }\r\n        if ('retryRequestOptions' in options) {\r\n            retryRequestOptions = options.retryRequestOptions;\r\n        }\r\n        return new CallSettings({\r\n            timeout,\r\n            retry,\r\n            bundleOptions: this.bundleOptions,\r\n            longrunning,\r\n            autoPaginate,\r\n            pageToken,\r\n            pageSize,\r\n            maxResults,\r\n            otherArgs,\r\n            isBundling,\r\n            apiName,\r\n            retryRequestOptions,\r\n        });\r\n    }\r\n}\r\nexports.CallSettings = CallSettings;\r\n/**\r\n * Per-call configurable settings for retrying upon transient failure.\r\n *\r\n * @param {number[]} retryCodes - a list of Google API canonical error codes\r\n *   upon which a retry should be attempted.\r\n * @param {BackoffSettings} backoffSettings - configures the retry\r\n *   exponential backoff algorithm.\r\n * @return {RetryOptions} A new RetryOptions object.\r\n *\r\n */\r\nfunction createRetryOptions(retryCodes, backoffSettings) {\r\n    return {\r\n        retryCodes,\r\n        backoffSettings,\r\n    };\r\n}\r\nexports.createRetryOptions = createRetryOptions;\r\n/**\r\n * Parameters to the exponential backoff algorithm for retrying.\r\n *\r\n * @param {number} initialRetryDelayMillis - the initial delay time,\r\n *   in milliseconds, between the completion of the first failed request and the\r\n *   initiation of the first retrying request.\r\n * @param {number} retryDelayMultiplier - the multiplier by which to\r\n *   increase the delay time between the completion of failed requests, and the\r\n *   initiation of the subsequent retrying request.\r\n * @param {number} maxRetryDelayMillis - the maximum delay time, in\r\n *   milliseconds, between requests. When this value is reached,\r\n *   ``retryDelayMultiplier`` will no longer be used to increase delay time.\r\n * @param {number} initialRpcTimeoutMillis - the initial timeout parameter\r\n *   to the request.\r\n * @param {number} rpcTimeoutMultiplier - the multiplier by which to\r\n *   increase the timeout parameter between failed requests.\r\n * @param {number} maxRpcTimeoutMillis - the maximum timeout parameter, in\r\n *   milliseconds, for a request. When this value is reached,\r\n *   ``rpcTimeoutMultiplier`` will no longer be used to increase the timeout.\r\n * @param {number} totalTimeoutMillis - the total time, in milliseconds,\r\n *   starting from when the initial request is sent, after which an error will\r\n *   be returned, regardless of the retrying attempts made meanwhile.\r\n * @return {BackoffSettings} a new settings.\r\n *\r\n */\r\nfunction createBackoffSettings(initialRetryDelayMillis, retryDelayMultiplier, maxRetryDelayMillis, initialRpcTimeoutMillis, rpcTimeoutMultiplier, maxRpcTimeoutMillis, totalTimeoutMillis) {\r\n    return {\r\n        initialRetryDelayMillis,\r\n        retryDelayMultiplier,\r\n        maxRetryDelayMillis,\r\n        initialRpcTimeoutMillis,\r\n        rpcTimeoutMultiplier,\r\n        maxRpcTimeoutMillis,\r\n        totalTimeoutMillis,\r\n    };\r\n}\r\nexports.createBackoffSettings = createBackoffSettings;\r\nfunction createDefaultBackoffSettings() {\r\n    return createBackoffSettings(100, 1.3, 60000, null, null, null, null);\r\n}\r\nexports.createDefaultBackoffSettings = createDefaultBackoffSettings;\r\n/**\r\n * Parameters to the exponential backoff algorithm for retrying.\r\n * This function is unsupported, and intended for internal use only.\r\n *\r\n * @param {number} initialRetryDelayMillis - the initial delay time,\r\n *   in milliseconds, between the completion of the first failed request and the\r\n *   initiation of the first retrying request.\r\n * @param {number} retryDelayMultiplier - the multiplier by which to\r\n *   increase the delay time between the completion of failed requests, and the\r\n *   initiation of the subsequent retrying request.\r\n * @param {number} maxRetryDelayMillis - the maximum delay time, in\r\n *   milliseconds, between requests. When this value is reached,\r\n *   ``retryDelayMultiplier`` will no longer be used to increase delay time.\r\n * @param {number} initialRpcTimeoutMillis - the initial timeout parameter\r\n *   to the request.\r\n * @param {number} rpcTimeoutMultiplier - the multiplier by which to\r\n *   increase the timeout parameter between failed requests.\r\n * @param {number} maxRpcTimeoutMillis - the maximum timeout parameter, in\r\n *   milliseconds, for a request. When this value is reached,\r\n *   ``rpcTimeoutMultiplier`` will no longer be used to increase the timeout.\r\n * @param {number} maxRetries - the maximum number of retrying attempts that\r\n *   will be made. If reached, an error will be returned.\r\n * @return {BackoffSettings} a new settings.\r\n *\r\n */\r\nfunction createMaxRetriesBackoffSettings(initialRetryDelayMillis, retryDelayMultiplier, maxRetryDelayMillis, initialRpcTimeoutMillis, rpcTimeoutMultiplier, maxRpcTimeoutMillis, maxRetries) {\r\n    return {\r\n        initialRetryDelayMillis,\r\n        retryDelayMultiplier,\r\n        maxRetryDelayMillis,\r\n        initialRpcTimeoutMillis,\r\n        rpcTimeoutMultiplier,\r\n        maxRpcTimeoutMillis,\r\n        maxRetries,\r\n    };\r\n}\r\nexports.createMaxRetriesBackoffSettings = createMaxRetriesBackoffSettings;\r\n/**\r\n * Creates a new {@link BundleOptions}.\r\n *\r\n * @private\r\n * @param {Object} options - An object to hold optional parameters. See\r\n *   properties for the content of options.\r\n * @return {BundleOptions} - A new options.\r\n */\r\nfunction createBundleOptions(options) {\r\n    const params = [\r\n        'element_count_threshold',\r\n        'element_count_limit',\r\n        'request_byte_threshold',\r\n        'request_byte_limit',\r\n        'delay_threshold_millis',\r\n    ];\r\n    params.forEach(param => {\r\n        if (param in options && typeof options[param] !== 'number') {\r\n            throw new Error(`${param} should be a number`);\r\n        }\r\n    });\r\n    const elementCountThreshold = options.element_count_threshold || 0;\r\n    const elementCountLimit = options.element_count_limit || 0;\r\n    const requestByteThreshold = options.request_byte_threshold || 0;\r\n    const requestByteLimit = options.request_byte_limit || 0;\r\n    const delayThreshold = options.delay_threshold_millis || 0;\r\n    if (elementCountThreshold === 0 &&\r\n        requestByteThreshold === 0 &&\r\n        delayThreshold === 0) {\r\n        throw new Error('one threshold should be > 0');\r\n    }\r\n    return {\r\n        elementCountThreshold,\r\n        elementCountLimit,\r\n        requestByteThreshold,\r\n        requestByteLimit,\r\n        delayThreshold,\r\n    };\r\n}\r\nexports.createBundleOptions = createBundleOptions;\r\n/**\r\n * Helper for {@link constructSettings}\r\n *\r\n * @private\r\n *\r\n * @param {Object} methodConfig - A dictionary representing a single\r\n *   `methods` entry of the standard API client config file. (See\r\n *   {@link constructSettings} for information on this yaml.)\r\n * @param {?Object} retryCodes - A dictionary parsed from the\r\n *   `retry_codes_def` entry of the standard API client config\r\n *   file. (See {@link constructSettings} for information on this yaml.)\r\n * @param {Object} retryParams - A dictionary parsed from the\r\n *   `retry_params` entry of the standard API client config\r\n *   file. (See {@link constructSettings} for information on this yaml.)\r\n * @param {Object} retryNames - A dictionary mapping the string names\r\n *   used in the standard API client config file to API response\r\n *   status codes.\r\n * @return {?RetryOptions} The new retry options.\r\n */\r\nfunction constructRetry(methodConfig, retryCodes, retryParams, retryNames) {\r\n    if (!methodConfig) {\r\n        return null;\r\n    }\r\n    let codes = null;\r\n    if (retryCodes && 'retry_codes_name' in methodConfig) {\r\n        const retryCodesName = methodConfig['retry_codes_name'];\r\n        codes = (retryCodes[retryCodesName] || []).map(name => {\r\n            return Number(retryNames[name]);\r\n        });\r\n    }\r\n    let backoffSettings = null;\r\n    if (retryParams && 'retry_params_name' in methodConfig) {\r\n        const params = retryParams[methodConfig.retry_params_name];\r\n        backoffSettings = createBackoffSettings(params.initial_retry_delay_millis, params.retry_delay_multiplier, params.max_retry_delay_millis, params.initial_rpc_timeout_millis, params.rpc_timeout_multiplier, params.max_rpc_timeout_millis, params.total_timeout_millis);\r\n    }\r\n    return createRetryOptions(codes, backoffSettings);\r\n}\r\n/**\r\n * Helper for {@link constructSettings}\r\n *\r\n * Takes two retry options, and merges them into a single RetryOption instance.\r\n *\r\n * @private\r\n *\r\n * @param {RetryOptions} retry - The base RetryOptions.\r\n * @param {RetryOptions} overrides - The RetryOptions used for overriding\r\n *   `retry`. Use the values if it is not null. If entire `overrides` is null,\r\n *   ignore the base retry and return null.\r\n * @return {?RetryOptions} The merged RetryOptions.\r\n */\r\nfunction mergeRetryOptions(retry, overrides) {\r\n    if (!overrides) {\r\n        return null;\r\n    }\r\n    if (!overrides.retryCodes && !overrides.backoffSettings) {\r\n        return retry;\r\n    }\r\n    const codes = overrides.retryCodes ? overrides.retryCodes : retry.retryCodes;\r\n    const backoffSettings = overrides.backoffSettings\r\n        ? overrides.backoffSettings\r\n        : retry.backoffSettings;\r\n    return createRetryOptions(codes, backoffSettings);\r\n}\r\n/**\r\n * Constructs a dictionary mapping method names to {@link CallSettings}.\r\n *\r\n * The `clientConfig` parameter is parsed from a client configuration JSON\r\n * file of the form:\r\n *\r\n *     {\r\n *       \"interfaces\": {\r\n *         \"google.fake.v1.ServiceName\": {\r\n *           \"retry_codes\": {\r\n *             \"idempotent\": [\"UNAVAILABLE\", \"DEADLINE_EXCEEDED\"],\r\n *             \"non_idempotent\": []\r\n *           },\r\n *           \"retry_params\": {\r\n *             \"default\": {\r\n *               \"initial_retry_delay_millis\": 100,\r\n *               \"retry_delay_multiplier\": 1.2,\r\n *               \"max_retry_delay_millis\": 1000,\r\n *               \"initial_rpc_timeout_millis\": 2000,\r\n *               \"rpc_timeout_multiplier\": 1.5,\r\n *               \"max_rpc_timeout_millis\": 30000,\r\n *               \"total_timeout_millis\": 45000\r\n *             }\r\n *           },\r\n *           \"methods\": {\r\n *             \"CreateFoo\": {\r\n *               \"retry_codes_name\": \"idempotent\",\r\n *               \"retry_params_name\": \"default\"\r\n *             },\r\n *             \"Publish\": {\r\n *               \"retry_codes_name\": \"non_idempotent\",\r\n *               \"retry_params_name\": \"default\",\r\n *               \"bundling\": {\r\n *                 \"element_count_threshold\": 40,\r\n *                 \"element_count_limit\": 200,\r\n *                 \"request_byte_threshold\": 90000,\r\n *                 \"request_byte_limit\": 100000,\r\n *                 \"delay_threshold_millis\": 100\r\n *               }\r\n *             }\r\n *           }\r\n *         }\r\n *       }\r\n *     }\r\n *\r\n * @param {String} serviceName - The fully-qualified name of this\r\n *   service, used as a key into the client config file (in the\r\n *   example above, this value should be 'google.fake.v1.ServiceName').\r\n * @param {Object} clientConfig - A dictionary parsed from the\r\n *   standard API client config file.\r\n * @param {Object} configOverrides - A dictionary in the same structure of\r\n *   client_config to override the settings.\r\n * @param {Object.<string, string[]>} retryNames - A dictionary mapping the strings\r\n *   referring to response status codes to objects representing\r\n *   those codes.\r\n * @param {Object} otherArgs - the non-request arguments to be passed to the API\r\n *   calls.\r\n * @return {Object} A mapping from method name to CallSettings, or null if the\r\n *   service is not found in the config.\r\n */\r\nfunction constructSettings(serviceName, clientConfig, configOverrides, retryNames, otherArgs) {\r\n    otherArgs = otherArgs || {};\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    const defaults = {};\r\n    const serviceConfig = (clientConfig.interfaces || {})[serviceName];\r\n    if (!serviceConfig) {\r\n        return null;\r\n    }\r\n    // users can override the config from client side, like bundling options.\r\n    // The detailed structure of the clientConfig can be found here: https://github.com/googleapis/gax-nodejs/blob/master/src/gax.ts#L546\r\n    // The way to override bundling options:\r\n    //\r\n    // const customConfig = {\"interfaces\": {\"service\": {\"methods\": {\"methodName\": {\"bundling\": {..}}}}}}\r\n    // const client = new Client({ projectId, customConfig });\r\n    const overrides = (configOverrides.interfaces || {})[serviceName] || {};\r\n    const methods = serviceConfig.methods;\r\n    const overridingMethods = overrides.methods || {};\r\n    for (const methodName in methods) {\r\n        const methodConfig = methods[methodName];\r\n        const jsName = methodName[0].toLowerCase() + methodName.slice(1);\r\n        let retry = constructRetry(methodConfig, serviceConfig.retry_codes, serviceConfig.retry_params, retryNames);\r\n        let bundlingConfig = methodConfig.bundling;\r\n        let timeout = methodConfig.timeout_millis;\r\n        if (methodName in overridingMethods) {\r\n            const overridingMethod = overridingMethods[methodName];\r\n            if (overridingMethod) {\r\n                if ('bundling' in overridingMethod) {\r\n                    bundlingConfig = overridingMethod.bundling;\r\n                }\r\n                if ('timeout_millis' in overridingMethod) {\r\n                    timeout = overridingMethod.timeout_millis;\r\n                }\r\n            }\r\n            retry = mergeRetryOptions(retry, constructRetry(overridingMethod, overrides.retry_codes, overrides.retry_params, retryNames));\r\n        }\r\n        const apiName = serviceName;\r\n        defaults[jsName] = new CallSettings({\r\n            timeout,\r\n            retry,\r\n            bundleOptions: bundlingConfig\r\n                ? createBundleOptions(bundlingConfig)\r\n                : null,\r\n            otherArgs,\r\n            apiName,\r\n        });\r\n    }\r\n    return defaults;\r\n}\r\nexports.constructSettings = constructSettings;\r\n//# sourceMappingURL=gax.js.map"]},"metadata":{},"sourceType":"script"}