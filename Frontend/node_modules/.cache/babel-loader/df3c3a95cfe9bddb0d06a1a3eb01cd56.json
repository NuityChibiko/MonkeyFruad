{"ast":null,"code":"/*\r\n\r\nnodemon is a utility for node, and replaces the use of the executable\r\nnode. So the user calls `nodemon foo.js` instead.\r\n\r\nnodemon can be run in a number of ways:\r\n\r\n`nodemon` - tries to use package.json#main property to run\r\n`nodemon` - if no package, looks for index.js\r\n`nodemon app.js` - runs app.js\r\n`nodemon --arg app.js --apparg` - eats arg1, and runs app.js with apparg\r\n`nodemon --apparg` - as above, but passes apparg to package.json#main (or\r\n  index.js)\r\n`nodemon --debug app.js\r\n\r\n*/\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar existsSync = fs.existsSync || path.existsSync;\nmodule.exports = parse;\n/**\r\n * Parses the command line arguments `process.argv` and returns the\r\n * nodemon options, the user script and the executable script.\r\n *\r\n * @param  {Array} full process arguments, including `node` leading arg\r\n * @return {Object} { options, script, args }\r\n */\n\nfunction parse(argv) {\n  if (typeof argv === 'string') {\n    argv = argv.split(' ');\n  }\n\n  var eat = function (i, args) {\n    if (i <= args.length) {\n      return args.splice(i + 1, 1).pop();\n    }\n  };\n\n  var args = argv.slice(2);\n  var script = null;\n  var nodemonOptions = {\n    scriptPosition: null\n  };\n  var nodemonOpt = nodemonOption.bind(null, nodemonOptions);\n  var lookForArgs = true; // move forward through the arguments\n\n  for (var i = 0; i < args.length; i++) {\n    // if the argument looks like a file, then stop eating\n    if (!script) {\n      if (args[i] === '.' || existsSync(args[i])) {\n        script = args.splice(i, 1).pop(); // we capture the position of the script because we'll reinsert it in\n        // the right place in run.js:command (though I'm not sure we should even\n        // take it out of the array in the first place, but this solves passing\n        // arguments to the exec process for now).\n\n        nodemonOptions.scriptPosition = i;\n        i--;\n        continue;\n      }\n    }\n\n    if (lookForArgs) {\n      // respect the standard way of saying: hereafter belongs to my script\n      if (args[i] === '--') {\n        args.splice(i, 1);\n        nodemonOptions.scriptPosition = i; // cycle back one argument, as we just ate this one up\n\n        i--; // ignore all further nodemon arguments\n\n        lookForArgs = false; // move to the next iteration\n\n        continue;\n      }\n\n      if (nodemonOpt(args[i], eat.bind(null, i, args)) !== false) {\n        args.splice(i, 1); // cycle back one argument, as we just ate this one up\n\n        i--;\n      }\n    }\n  }\n\n  nodemonOptions.script = script;\n  nodemonOptions.args = args;\n  return nodemonOptions;\n}\n/**\r\n * Given an argument (ie. from process.argv), sets nodemon\r\n * options and can eat up the argument value\r\n *\r\n * @param {Object} options object that will be updated\r\n * @param {Sting} current argument from argv\r\n * @param {Function} the callback to eat up the next argument in argv\r\n * @return {Boolean} false if argument was not a nodemon arg\r\n */\n\n\nfunction nodemonOption(options, arg, eatNext) {\n  // line separation on purpose to help legibility\n  if (arg === '--help' || arg === '-h' || arg === '-?') {\n    var help = eatNext();\n    options.help = help ? help : true;\n  } else if (arg === '--version' || arg === '-v') {\n    options.version = true;\n  } else if (arg === '--no-update-notifier') {\n    options.noUpdateNotifier = true;\n  } else if (arg === '--spawn') {\n    options.spawn = true;\n  } else if (arg === '--dump') {\n    options.dump = true;\n  } else if (arg === '--verbose' || arg === '-V') {\n    options.verbose = true;\n  } else if (arg === '--legacy-watch' || arg === '-L') {\n    options.legacyWatch = true;\n  } else if (arg === '--polling-interval' || arg === '-P') {\n    options.pollingInterval = parseInt(eatNext(), 10);\n  } else // Depricated as this is \"on\" by default\n    if (arg === '--js') {\n      options.js = true;\n    } else if (arg === '--quiet' || arg === '-q') {\n      options.quiet = true;\n    } else if (arg === '--config') {\n      options.configFile = eatNext();\n    } else if (arg === '--watch' || arg === '-w') {\n      if (!options.watch) {\n        options.watch = [];\n      }\n\n      options.watch.push(eatNext());\n    } else if (arg === '--ignore' || arg === '-i') {\n      if (!options.ignore) {\n        options.ignore = [];\n      }\n\n      options.ignore.push(eatNext());\n    } else if (arg === '--exitcrash') {\n      options.exitcrash = true;\n    } else if (arg === '--delay' || arg === '-d') {\n      options.delay = parseDelay(eatNext());\n    } else if (arg === '--exec' || arg === '-x') {\n      options.exec = eatNext();\n    } else if (arg === '--no-stdin' || arg === '-I') {\n      options.stdin = false;\n    } else if (arg === '--on-change-only' || arg === '-C') {\n      options.runOnChangeOnly = true;\n    } else if (arg === '--ext' || arg === '-e') {\n      options.ext = eatNext();\n    } else if (arg === '--no-colours' || arg === '--no-colors') {\n      options.colours = false;\n    } else if (arg === '--signal' || arg === '-s') {\n      options.signal = eatNext();\n    } else if (arg === '--cwd') {\n      options.cwd = eatNext(); // go ahead and change directory. This is primarily for nodemon tools like\n      // grunt-nodemon - we're doing this early because it will affect where the\n      // user script is searched for.\n\n      process.chdir(path.resolve(options.cwd));\n    } else {\n      // this means we didn't match\n      return false;\n    }\n}\n/**\r\n * Given an argument (ie. from nodemonOption()), will parse and return the\r\n * equivalent millisecond value or 0 if the argument cannot be parsed\r\n *\r\n * @param {String} argument value given to the --delay option\r\n * @return {Number} millisecond equivalent of the argument\r\n */\n\n\nfunction parseDelay(value) {\n  var millisPerSecond = 1000;\n  var millis = 0;\n\n  if (value.match(/^\\d*ms$/)) {\n    // Explicitly parse for milliseconds when using ms time specifier\n    millis = parseInt(value, 10);\n  } else {\n    // Otherwise, parse for seconds, with or without time specifier then convert\n    millis = parseFloat(value) * millisPerSecond;\n  }\n\n  return isNaN(millis) ? 0 : millis;\n}","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Frontend/node_modules/nodemon/lib/cli/parse.js"],"names":["fs","require","path","existsSync","module","exports","parse","argv","split","eat","i","args","length","splice","pop","slice","script","nodemonOptions","scriptPosition","nodemonOpt","nodemonOption","bind","lookForArgs","options","arg","eatNext","help","version","noUpdateNotifier","spawn","dump","verbose","legacyWatch","pollingInterval","parseInt","js","quiet","configFile","watch","push","ignore","exitcrash","delay","parseDelay","exec","stdin","runOnChangeOnly","ext","colours","signal","cwd","process","chdir","resolve","value","millisPerSecond","millis","match","parseFloat","isNaN"],"mappings":"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","sourcesContent":["/*\r\n\r\nnodemon is a utility for node, and replaces the use of the executable\r\nnode. So the user calls `nodemon foo.js` instead.\r\n\r\nnodemon can be run in a number of ways:\r\n\r\n`nodemon` - tries to use package.json#main property to run\r\n`nodemon` - if no package, looks for index.js\r\n`nodemon app.js` - runs app.js\r\n`nodemon --arg app.js --apparg` - eats arg1, and runs app.js with apparg\r\n`nodemon --apparg` - as above, but passes apparg to package.json#main (or\r\n  index.js)\r\n`nodemon --debug app.js\r\n\r\n*/\r\n\r\nvar fs = require('fs');\r\nvar path = require('path');\r\nvar existsSync = fs.existsSync || path.existsSync;\r\n\r\nmodule.exports = parse;\r\n\r\n/**\r\n * Parses the command line arguments `process.argv` and returns the\r\n * nodemon options, the user script and the executable script.\r\n *\r\n * @param  {Array} full process arguments, including `node` leading arg\r\n * @return {Object} { options, script, args }\r\n */\r\nfunction parse(argv) {\r\n  if (typeof argv === 'string') {\r\n    argv = argv.split(' ');\r\n  }\r\n\r\n  var eat = function (i, args) {\r\n    if (i <= args.length) {\r\n      return args.splice(i + 1, 1).pop();\r\n    }\r\n  };\r\n\r\n  var args = argv.slice(2);\r\n  var script = null;\r\n  var nodemonOptions = { scriptPosition: null };\r\n\r\n  var nodemonOpt = nodemonOption.bind(null, nodemonOptions);\r\n  var lookForArgs = true;\r\n\r\n  // move forward through the arguments\r\n  for (var i = 0; i < args.length; i++) {\r\n    // if the argument looks like a file, then stop eating\r\n    if (!script) {\r\n      if (args[i] === '.' || existsSync(args[i])) {\r\n        script = args.splice(i, 1).pop();\r\n\r\n        // we capture the position of the script because we'll reinsert it in\r\n        // the right place in run.js:command (though I'm not sure we should even\r\n        // take it out of the array in the first place, but this solves passing\r\n        // arguments to the exec process for now).\r\n        nodemonOptions.scriptPosition = i;\r\n        i--;\r\n        continue;\r\n      }\r\n    }\r\n\r\n    if (lookForArgs) {\r\n      // respect the standard way of saying: hereafter belongs to my script\r\n      if (args[i] === '--') {\r\n        args.splice(i, 1);\r\n        nodemonOptions.scriptPosition = i;\r\n        // cycle back one argument, as we just ate this one up\r\n        i--;\r\n\r\n        // ignore all further nodemon arguments\r\n        lookForArgs = false;\r\n\r\n        // move to the next iteration\r\n        continue;\r\n      }\r\n\r\n      if (nodemonOpt(args[i], eat.bind(null, i, args)) !== false) {\r\n        args.splice(i, 1);\r\n        // cycle back one argument, as we just ate this one up\r\n        i--;\r\n      }\r\n    }\r\n  }\r\n\r\n  nodemonOptions.script = script;\r\n  nodemonOptions.args = args;\r\n\r\n  return nodemonOptions;\r\n}\r\n\r\n\r\n/**\r\n * Given an argument (ie. from process.argv), sets nodemon\r\n * options and can eat up the argument value\r\n *\r\n * @param {Object} options object that will be updated\r\n * @param {Sting} current argument from argv\r\n * @param {Function} the callback to eat up the next argument in argv\r\n * @return {Boolean} false if argument was not a nodemon arg\r\n */\r\nfunction nodemonOption(options, arg, eatNext) {\r\n  // line separation on purpose to help legibility\r\n  if (arg === '--help' || arg === '-h' || arg === '-?') {\r\n    var help = eatNext();\r\n    options.help = help ? help : true;\r\n  } else\r\n\r\n  if (arg === '--version' || arg === '-v') {\r\n    options.version = true;\r\n  } else\r\n\r\n  if (arg === '--no-update-notifier') {\r\n    options.noUpdateNotifier = true;\r\n  } else\r\n\r\n  if (arg === '--spawn') {\r\n    options.spawn = true;\r\n  } else\r\n\r\n  if (arg === '--dump') {\r\n    options.dump = true;\r\n  } else\r\n\r\n  if (arg === '--verbose' || arg === '-V') {\r\n    options.verbose = true;\r\n  } else\r\n\r\n  if (arg === '--legacy-watch' || arg === '-L') {\r\n    options.legacyWatch = true;\r\n  } else\r\n\r\n  if (arg === '--polling-interval' || arg === '-P') {\r\n    options.pollingInterval = parseInt(eatNext(), 10);\r\n  } else\r\n\r\n  // Depricated as this is \"on\" by default\r\n  if (arg === '--js') {\r\n    options.js = true;\r\n  } else\r\n\r\n  if (arg === '--quiet' || arg === '-q') {\r\n    options.quiet = true;\r\n  } else\r\n\r\n  if (arg === '--config') {\r\n    options.configFile = eatNext();\r\n  } else\r\n\r\n  if (arg === '--watch' || arg === '-w') {\r\n    if (!options.watch) { options.watch = []; }\r\n    options.watch.push(eatNext());\r\n  } else\r\n\r\n  if (arg === '--ignore' || arg === '-i') {\r\n    if (!options.ignore) { options.ignore = []; }\r\n    options.ignore.push(eatNext());\r\n  } else\r\n\r\n  if (arg === '--exitcrash') {\r\n    options.exitcrash = true;\r\n  } else\r\n\r\n  if (arg === '--delay' || arg === '-d') {\r\n    options.delay = parseDelay(eatNext());\r\n  } else\r\n\r\n  if (arg === '--exec' || arg === '-x') {\r\n    options.exec = eatNext();\r\n  } else\r\n\r\n  if (arg === '--no-stdin' || arg === '-I') {\r\n    options.stdin = false;\r\n  } else\r\n\r\n  if (arg === '--on-change-only' || arg === '-C') {\r\n    options.runOnChangeOnly = true;\r\n  } else\r\n\r\n  if (arg === '--ext' || arg === '-e') {\r\n    options.ext = eatNext();\r\n  } else\r\n\r\n  if (arg === '--no-colours' || arg === '--no-colors') {\r\n    options.colours = false;\r\n  } else\r\n\r\n  if (arg === '--signal' || arg === '-s') {\r\n    options.signal = eatNext();\r\n  } else\r\n\r\n  if (arg === '--cwd') {\r\n    options.cwd = eatNext();\r\n\r\n    // go ahead and change directory. This is primarily for nodemon tools like\r\n    // grunt-nodemon - we're doing this early because it will affect where the\r\n    // user script is searched for.\r\n    process.chdir(path.resolve(options.cwd));\r\n  } else {\r\n\r\n    // this means we didn't match\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Given an argument (ie. from nodemonOption()), will parse and return the\r\n * equivalent millisecond value or 0 if the argument cannot be parsed\r\n *\r\n * @param {String} argument value given to the --delay option\r\n * @return {Number} millisecond equivalent of the argument\r\n */\r\nfunction parseDelay(value) {\r\n  var millisPerSecond = 1000;\r\n  var millis = 0;\r\n\r\n  if (value.match(/^\\d*ms$/)) {\r\n    // Explicitly parse for milliseconds when using ms time specifier\r\n    millis = parseInt(value, 10);\r\n  } else {\r\n    // Otherwise, parse for seconds, with or without time specifier then convert\r\n    millis = parseFloat(value) * millisPerSecond;\r\n  }\r\n\r\n  return isNaN(millis) ? 0 : millis;\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"script"}