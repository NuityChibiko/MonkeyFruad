{"ast":null,"code":"/**\n * Authorization Token\n * @module auth_token\n */\nconst crypto = require('crypto');\n\nconst smart_escape = require('./utils/encoding/smart_escape');\n\nconst unsafe = /([ \"#%&'/:;<=>?@[\\]^`{|}~]+)/g;\n\nfunction digest(message, key) {\n  return crypto.createHmac(\"sha256\", Buffer.from(key, \"hex\")).update(message).digest('hex');\n}\n/**\n * Escape url using lowercase hex code\n * @param {string} url a url string\n * @return {string} escaped url\n */\n\n\nfunction escapeToLower(url) {\n  const safeUrl = smart_escape(url, unsafe);\n  return safeUrl.replace(/%../g, function (match) {\n    return match.toLowerCase();\n  });\n}\n/**\n * Auth token options\n * @typedef {object} authTokenOptions\n * @property {string} [token_name=\"__cld_token__\"] The name of the token.\n * @property {string} key The secret key required to sign the token.\n * @property {string} ip The IP address of the client.\n * @property {number} start_time=now The start time of the token in seconds from epoch.\n * @property {string} expiration The expiration time of the token in seconds from epoch.\n * @property {string} duration The duration of the token (from start_time).\n * @property {string} acl The ACL for the token.\n * @property {string} url The URL to authentication in case of a URL token.\n *\n */\n\n/**\n * Generate an authorization token\n * @param {authTokenOptions} options\n * @returns {string} the authorization token\n */\n\n\nmodule.exports = function (options) {\n  const tokenName = options.token_name ? options.token_name : \"__cld_token__\";\n  const tokenSeparator = \"~\";\n\n  if (options.expiration == null) {\n    if (options.duration != null) {\n      let start = options.start_time != null ? options.start_time : Math.round(Date.now() / 1000);\n      options.expiration = start + options.duration;\n    } else {\n      throw new Error(\"Must provide either expiration or duration\");\n    }\n  }\n\n  let tokenParts = [];\n\n  if (options.ip != null) {\n    tokenParts.push(`ip=${options.ip}`);\n  }\n\n  if (options.start_time != null) {\n    tokenParts.push(`st=${options.start_time}`);\n  }\n\n  tokenParts.push(`exp=${options.expiration}`);\n\n  if (options.acl != null) {\n    tokenParts.push(`acl=${escapeToLower(options.acl)}`);\n  }\n\n  let toSign = [...tokenParts];\n\n  if (options.url != null && options.acl == null) {\n    let url = escapeToLower(options.url);\n    toSign.push(`url=${url}`);\n  }\n\n  let auth = digest(toSign.join(tokenSeparator), options.key);\n  tokenParts.push(`hmac=${auth}`);\n  return `${tokenName}=${tokenParts.join(tokenSeparator)}`;\n};","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Frontend/node_modules/cloudinary/lib/auth_token.js"],"names":["crypto","require","smart_escape","unsafe","digest","message","key","createHmac","Buffer","from","update","escapeToLower","url","safeUrl","replace","match","toLowerCase","module","exports","options","tokenName","token_name","tokenSeparator","expiration","duration","start","start_time","Math","round","Date","now","Error","tokenParts","ip","push","acl","toSign","auth","join"],"mappings":"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","sourcesContent":["/**\n * Authorization Token\n * @module auth_token\n */\n\nconst crypto = require('crypto');\nconst smart_escape = require('./utils/encoding/smart_escape');\n\nconst unsafe = /([ \"#%&'/:;<=>?@[\\]^`{|}~]+)/g;\n\nfunction digest(message, key) {\n  return crypto.createHmac(\"sha256\", Buffer.from(key, \"hex\")).update(message).digest('hex');\n}\n\n/**\n * Escape url using lowercase hex code\n * @param {string} url a url string\n * @return {string} escaped url\n */\nfunction escapeToLower(url) {\n  const safeUrl = smart_escape(url, unsafe);\n  return safeUrl.replace(/%../g, function (match) {\n    return match.toLowerCase();\n  });\n}\n\n/**\n * Auth token options\n * @typedef {object} authTokenOptions\n * @property {string} [token_name=\"__cld_token__\"] The name of the token.\n * @property {string} key The secret key required to sign the token.\n * @property {string} ip The IP address of the client.\n * @property {number} start_time=now The start time of the token in seconds from epoch.\n * @property {string} expiration The expiration time of the token in seconds from epoch.\n * @property {string} duration The duration of the token (from start_time).\n * @property {string} acl The ACL for the token.\n * @property {string} url The URL to authentication in case of a URL token.\n *\n */\n\n/**\n * Generate an authorization token\n * @param {authTokenOptions} options\n * @returns {string} the authorization token\n */\nmodule.exports = function (options) {\n  const tokenName = options.token_name ? options.token_name : \"__cld_token__\";\n  const tokenSeparator = \"~\";\n  if (options.expiration == null) {\n    if (options.duration != null) {\n      let start = options.start_time != null ? options.start_time : Math.round(Date.now() / 1000);\n      options.expiration = start + options.duration;\n    } else {\n      throw new Error(\"Must provide either expiration or duration\");\n    }\n  }\n  let tokenParts = [];\n  if (options.ip != null) {\n    tokenParts.push(`ip=${options.ip}`);\n  }\n  if (options.start_time != null) {\n    tokenParts.push(`st=${options.start_time}`);\n  }\n  tokenParts.push(`exp=${options.expiration}`);\n  if (options.acl != null) {\n    tokenParts.push(`acl=${escapeToLower(options.acl)}`);\n  }\n  let toSign = [...tokenParts];\n  if (options.url != null && options.acl == null) {\n    let url = escapeToLower(options.url);\n    toSign.push(`url=${url}`);\n  }\n  let auth = digest(toSign.join(tokenSeparator), options.key);\n  tokenParts.push(`hmac=${auth}`);\n  return `${tokenName}=${tokenParts.join(tokenSeparator)}`;\n};\n"]},"metadata":{},"sourceType":"script"}