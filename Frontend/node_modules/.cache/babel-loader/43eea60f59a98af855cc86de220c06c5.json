{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.checkSchema = void 0;\n\nconst chain_1 = require(\"../chain\");\n\nconst check_1 = require(\"./check\");\n\nconst validLocations = ['body', 'cookies', 'headers', 'params', 'query'];\nconst protectedNames = ['errorMessage', 'in'];\n\nfunction checkSchema(schema, defaultLocations = validLocations) {\n  return Object.keys(schema).map(field => {\n    const config = schema[field];\n    const chain = check_1.check(field, ensureLocations(config, defaultLocations), config.errorMessage);\n    Object.keys(config).filter(method => {\n      return config[method] && !protectedNames.includes(method);\n    }).forEach(method => {\n      if (typeof chain[method] !== 'function') {\n        console.warn(`express-validator: a validator/sanitizer with name ${method} does not exist`);\n        return;\n      } // Using \"!\" because typescript doesn't know it isn't undefined.\n\n\n      const methodCfg = config[method];\n      let options = methodCfg === true ? [] : methodCfg.options || [];\n\n      if (options != null && !Array.isArray(options)) {\n        options = [options];\n      }\n\n      if (isValidatorOptions(method, methodCfg) && methodCfg.negated) {\n        chain.not();\n      }\n\n      chain[method](...options);\n\n      if (isValidatorOptions(method, methodCfg) && methodCfg.errorMessage) {\n        chain.withMessage(methodCfg.errorMessage);\n      }\n\n      if (isValidatorOptions(method, methodCfg) && methodCfg.bail) {\n        chain.bail();\n      }\n    });\n    return chain;\n  });\n}\n\nexports.checkSchema = checkSchema;\n\nfunction isValidatorOptions(method, methodCfg) {\n  return methodCfg !== true && method in chain_1.ValidatorsImpl.prototype;\n}\n\nfunction ensureLocations(config, defaults) {\n  // .filter(Boolean) is done because in can be undefined -- which is not going away from the type\n  // See https://github.com/Microsoft/TypeScript/pull/29955 for details\n  const locations = Array.isArray(config.in) ? config.in : [config.in].filter(Boolean);\n  const actualLocations = locations.length ? locations : defaults;\n  return actualLocations.filter(location => validLocations.includes(location));\n}","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Backend/node_modules/express-validator/src/middlewares/schema.js"],"names":["Object","defineProperty","exports","value","checkSchema","chain_1","require","check_1","validLocations","protectedNames","schema","defaultLocations","keys","map","field","config","chain","check","ensureLocations","errorMessage","filter","method","includes","forEach","console","warn","methodCfg","options","Array","isArray","isValidatorOptions","negated","not","withMessage","bail","ValidatorsImpl","prototype","defaults","locations","in","Boolean","actualLocations","length","location"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.checkSchema = void 0;\r\nconst chain_1 = require(\"../chain\");\r\nconst check_1 = require(\"./check\");\r\nconst validLocations = ['body', 'cookies', 'headers', 'params', 'query'];\r\nconst protectedNames = ['errorMessage', 'in'];\r\nfunction checkSchema(schema, defaultLocations = validLocations) {\r\n    return Object.keys(schema).map(field => {\r\n        const config = schema[field];\r\n        const chain = check_1.check(field, ensureLocations(config, defaultLocations), config.errorMessage);\r\n        Object.keys(config)\r\n            .filter((method) => {\r\n            return config[method] && !protectedNames.includes(method);\r\n        })\r\n            .forEach(method => {\r\n            if (typeof chain[method] !== 'function') {\r\n                console.warn(`express-validator: a validator/sanitizer with name ${method} does not exist`);\r\n                return;\r\n            }\r\n            // Using \"!\" because typescript doesn't know it isn't undefined.\r\n            const methodCfg = config[method];\r\n            let options = methodCfg === true ? [] : methodCfg.options || [];\r\n            if (options != null && !Array.isArray(options)) {\r\n                options = [options];\r\n            }\r\n            if (isValidatorOptions(method, methodCfg) && methodCfg.negated) {\r\n                chain.not();\r\n            }\r\n            chain[method](...options);\r\n            if (isValidatorOptions(method, methodCfg) && methodCfg.errorMessage) {\r\n                chain.withMessage(methodCfg.errorMessage);\r\n            }\r\n            if (isValidatorOptions(method, methodCfg) && methodCfg.bail) {\r\n                chain.bail();\r\n            }\r\n        });\r\n        return chain;\r\n    });\r\n}\r\nexports.checkSchema = checkSchema;\r\nfunction isValidatorOptions(method, methodCfg) {\r\n    return methodCfg !== true && method in chain_1.ValidatorsImpl.prototype;\r\n}\r\nfunction ensureLocations(config, defaults) {\r\n    // .filter(Boolean) is done because in can be undefined -- which is not going away from the type\r\n    // See https://github.com/Microsoft/TypeScript/pull/29955 for details\r\n    const locations = Array.isArray(config.in)\r\n        ? config.in\r\n        : [config.in].filter(Boolean);\r\n    const actualLocations = locations.length ? locations : defaults;\r\n    return actualLocations.filter(location => validLocations.includes(location));\r\n}\r\n"]},"metadata":{},"sourceType":"script"}