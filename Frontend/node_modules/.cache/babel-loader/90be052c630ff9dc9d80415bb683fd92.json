{"ast":null,"code":"/*! firebase-admin v9.4.2 */\n\"use strict\";\n/*!\r\n * Copyright 2020 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RemoteConfig = void 0;\n\nvar validator = require(\"../utils/validator\");\n\nvar remote_config_api_client_internal_1 = require(\"./remote-config-api-client-internal\");\n/**\r\n * Internals of an RemoteConfig service instance.\r\n */\n\n\nvar RemoteConfigInternals =\n/** @class */\nfunction () {\n  function RemoteConfigInternals() {}\n  /**\r\n   * Deletes the service and its associated resources.\r\n   *\r\n   * @return {Promise<()>} An empty Promise that will be fulfilled when the service is deleted.\r\n   */\n\n\n  RemoteConfigInternals.prototype.delete = function () {\n    // There are no resources to clean up\n    return Promise.resolve(undefined);\n  };\n\n  return RemoteConfigInternals;\n}();\n/**\r\n * Remote Config service bound to the provided app.\r\n */\n\n\nvar RemoteConfig =\n/** @class */\nfunction () {\n  /**\r\n   * @param app The app for this RemoteConfig service.\r\n   * @constructor\r\n   */\n  function RemoteConfig(app) {\n    this.app = app;\n    this.INTERNAL = new RemoteConfigInternals();\n    this.client = new remote_config_api_client_internal_1.RemoteConfigApiClient(app);\n  }\n  /**\r\n   * Gets the current active version of the {@link remoteConfig.RemoteConfigTemplate\r\n   * `RemoteConfigTemplate`} of the project.\r\n   *\r\n   * @return A promise that fulfills with a `RemoteConfigTemplate`.\r\n   */\n\n\n  RemoteConfig.prototype.getTemplate = function () {\n    return this.client.getTemplate().then(function (templateResponse) {\n      return new RemoteConfigTemplateImpl(templateResponse);\n    });\n  };\n  /**\r\n   * Gets the requested version of the {@link remoteConfig.RemoteConfigTemplate\r\n    * `RemoteConfigTemplate`} of the project.\r\n   *\r\n   * @param versionNumber Version number of the Remote Config template to look up.\r\n   *\r\n   * @return A promise that fulfills with a `RemoteConfigTemplate`.\r\n   */\n\n\n  RemoteConfig.prototype.getTemplateAtVersion = function (versionNumber) {\n    return this.client.getTemplateAtVersion(versionNumber).then(function (templateResponse) {\n      return new RemoteConfigTemplateImpl(templateResponse);\n    });\n  };\n  /**\r\n   * Validates a {@link remoteConfig.RemoteConfigTemplate `RemoteConfigTemplate`}.\r\n   *\r\n   * @param template The Remote Config template to be validated.\r\n   * @returns A promise that fulfills with the validated `RemoteConfigTemplate`.\r\n   */\n\n\n  RemoteConfig.prototype.validateTemplate = function (template) {\n    return this.client.validateTemplate(template).then(function (templateResponse) {\n      return new RemoteConfigTemplateImpl(templateResponse);\n    });\n  };\n  /**\r\n   * Publishes a Remote Config template.\r\n   *\r\n   * @param template The Remote Config template to be published.\r\n   * @param options Optional options object when publishing a Remote Config template:\r\n   *    - {boolean} `force` Setting this to `true` forces the Remote Config template to\r\n   *      be updated and circumvent the ETag. This approach is not recommended\r\n   *      because it risks causing the loss of updates to your Remote Config\r\n   *      template if multiple clients are updating the Remote Config template.\r\n   *      See {@link https://firebase.google.com/docs/remote-config/use-config-rest#etag_usage_and_forced_updates\r\n   *      ETag usage and forced updates}.\r\n   *\r\n   * @return A Promise that fulfills with the published `RemoteConfigTemplate`.\r\n   */\n\n\n  RemoteConfig.prototype.publishTemplate = function (template, options) {\n    return this.client.publishTemplate(template, options).then(function (templateResponse) {\n      return new RemoteConfigTemplateImpl(templateResponse);\n    });\n  };\n  /**\r\n   * Rolls back a project's published Remote Config template to the specified version.\r\n   * A rollback is equivalent to getting a previously published Remote Config\r\n   * template and re-publishing it using a force update.\r\n   *\r\n   * @param versionNumber The version number of the Remote Config template to roll back to.\r\n   *    The specified version number must be lower than the current version number, and not have\r\n   *    been deleted due to staleness. Only the last 300 versions are stored.\r\n   *    All versions that correspond to non-active Remote Config templates (that is, all except the\r\n   *    template that is being fetched by clients) are also deleted if they are more than 90 days old.\r\n   * @return A promise that fulfills with the published `RemoteConfigTemplate`.\r\n   */\n\n\n  RemoteConfig.prototype.rollback = function (versionNumber) {\n    return this.client.rollback(versionNumber).then(function (templateResponse) {\n      return new RemoteConfigTemplateImpl(templateResponse);\n    });\n  };\n  /**\r\n   * Gets a list of Remote Config template versions that have been published, sorted in reverse\r\n   * chronological order. Only the last 300 versions are stored.\r\n   * All versions that correspond to non-active Remote Config templates (i.e., all except the\r\n   * template that is being fetched by clients) are also deleted if they are older than 90 days.\r\n   *\r\n   * @param options Optional options object for getting a list of versions.\r\n   * @return A promise that fulfills with a `ListVersionsResult`.\r\n   */\n\n\n  RemoteConfig.prototype.listVersions = function (options) {\n    return this.client.listVersions(options).then(function (listVersionsResponse) {\n      var _a, _b;\n\n      return {\n        versions: (_b = (_a = listVersionsResponse.versions) === null || _a === void 0 ? void 0 : _a.map(function (version) {\n          return new VersionImpl(version);\n        })) !== null && _b !== void 0 ? _b : [],\n        nextPageToken: listVersionsResponse.nextPageToken\n      };\n    });\n  };\n  /**\r\n   * Creates and returns a new Remote Config template from a JSON string.\r\n   *\r\n   * @param json The JSON string to populate a Remote Config template.\r\n   *\r\n   * @return A new template instance.\r\n   */\n\n\n  RemoteConfig.prototype.createTemplateFromJSON = function (json) {\n    if (!validator.isNonEmptyString(json)) {\n      throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'JSON string must be a valid non-empty string');\n    }\n\n    var template;\n\n    try {\n      template = JSON.parse(json);\n    } catch (e) {\n      throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', \"Failed to parse the JSON string: \" + json + \". \" + e);\n    }\n\n    return new RemoteConfigTemplateImpl(template);\n  };\n\n  return RemoteConfig;\n}();\n\nexports.RemoteConfig = RemoteConfig;\n/**\r\n * Remote Config template internal implementation.\r\n */\n\nvar RemoteConfigTemplateImpl =\n/** @class */\nfunction () {\n  function RemoteConfigTemplateImpl(config) {\n    if (!validator.isNonNullObject(config) || !validator.isNonEmptyString(config.etag)) {\n      throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', \"Invalid Remote Config template: \" + JSON.stringify(config));\n    }\n\n    this.etagInternal = config.etag;\n\n    if (typeof config.parameters !== 'undefined') {\n      if (!validator.isNonNullObject(config.parameters)) {\n        throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Remote Config parameters must be a non-null object');\n      }\n\n      this.parameters = config.parameters;\n    } else {\n      this.parameters = {};\n    }\n\n    if (typeof config.parameterGroups !== 'undefined') {\n      if (!validator.isNonNullObject(config.parameterGroups)) {\n        throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Remote Config parameter groups must be a non-null object');\n      }\n\n      this.parameterGroups = config.parameterGroups;\n    } else {\n      this.parameterGroups = {};\n    }\n\n    if (typeof config.conditions !== 'undefined') {\n      if (!validator.isArray(config.conditions)) {\n        throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Remote Config conditions must be an array');\n      }\n\n      this.conditions = config.conditions;\n    } else {\n      this.conditions = [];\n    }\n\n    if (typeof config.version !== 'undefined') {\n      this.version = new VersionImpl(config.version);\n    }\n  }\n\n  Object.defineProperty(RemoteConfigTemplateImpl.prototype, \"etag\", {\n    /**\r\n     * Gets the ETag of the template.\r\n     *\r\n     * @return {string} The ETag of the Remote Config template.\r\n     */\n    get: function () {\n      return this.etagInternal;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * @return {RemoteConfigTemplate} A JSON-serializable representation of this object.\r\n   */\n\n  RemoteConfigTemplateImpl.prototype.toJSON = function () {\n    return {\n      conditions: this.conditions,\n      parameters: this.parameters,\n      parameterGroups: this.parameterGroups,\n      etag: this.etag,\n      version: this.version\n    };\n  };\n\n  return RemoteConfigTemplateImpl;\n}();\n/**\r\n* Remote Config Version internal implementation.\r\n*/\n\n\nvar VersionImpl =\n/** @class */\nfunction () {\n  function VersionImpl(version) {\n    if (!validator.isNonNullObject(version)) {\n      throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', \"Invalid Remote Config version instance: \" + JSON.stringify(version));\n    }\n\n    if (typeof version.versionNumber !== 'undefined') {\n      if (!validator.isNonEmptyString(version.versionNumber) && !validator.isNumber(version.versionNumber)) {\n        throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Version number must be a non-empty string in int64 format or a number');\n      }\n\n      if (!Number.isInteger(Number(version.versionNumber))) {\n        throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Version number must be an integer or a string in int64 format');\n      }\n\n      this.versionNumber = version.versionNumber;\n    }\n\n    if (typeof version.updateOrigin !== 'undefined') {\n      if (!validator.isNonEmptyString(version.updateOrigin)) {\n        throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Version update origin must be a non-empty string');\n      }\n\n      this.updateOrigin = version.updateOrigin;\n    }\n\n    if (typeof version.updateType !== 'undefined') {\n      if (!validator.isNonEmptyString(version.updateType)) {\n        throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Version update type must be a non-empty string');\n      }\n\n      this.updateType = version.updateType;\n    }\n\n    if (typeof version.updateUser !== 'undefined') {\n      if (!validator.isNonNullObject(version.updateUser)) {\n        throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Version update user must be a non-null object');\n      }\n\n      this.updateUser = version.updateUser;\n    }\n\n    if (typeof version.description !== 'undefined') {\n      if (!validator.isNonEmptyString(version.description)) {\n        throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Version description must be a non-empty string');\n      }\n\n      this.description = version.description;\n    }\n\n    if (typeof version.rollbackSource !== 'undefined') {\n      if (!validator.isNonEmptyString(version.rollbackSource)) {\n        throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Version rollback source must be a non-empty string');\n      }\n\n      this.rollbackSource = version.rollbackSource;\n    }\n\n    if (typeof version.isLegacy !== 'undefined') {\n      if (!validator.isBoolean(version.isLegacy)) {\n        throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Version.isLegacy must be a boolean');\n      }\n\n      this.isLegacy = version.isLegacy;\n    } // The backend API provides timestamps as ISO date strings. The Admin SDK exposes timestamps\n    // as UTC date strings. If a developer uses a previously obtained template with UTC timestamps\n    // we could still validate it below.\n\n\n    if (typeof version.updateTime !== 'undefined') {\n      if (!this.isValidTimestamp(version.updateTime)) {\n        throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Version update time must be a valid date string');\n      }\n\n      this.updateTime = new Date(version.updateTime).toUTCString();\n    }\n  }\n  /**\r\n   * @return {Version} A JSON-serializable representation of this object.\r\n   */\n\n\n  VersionImpl.prototype.toJSON = function () {\n    return {\n      versionNumber: this.versionNumber,\n      updateOrigin: this.updateOrigin,\n      updateType: this.updateType,\n      updateUser: this.updateUser,\n      description: this.description,\n      rollbackSource: this.rollbackSource,\n      isLegacy: this.isLegacy,\n      updateTime: this.updateTime\n    };\n  };\n\n  VersionImpl.prototype.isValidTimestamp = function (timestamp) {\n    return validator.isNonEmptyString(timestamp) && new Date(timestamp).getTime() > 0;\n  };\n\n  return VersionImpl;\n}();","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Backend/node_modules/firebase-admin/lib/remote-config/remote-config.js"],"names":["Object","defineProperty","exports","value","RemoteConfig","validator","require","remote_config_api_client_internal_1","RemoteConfigInternals","prototype","delete","Promise","resolve","undefined","app","INTERNAL","client","RemoteConfigApiClient","getTemplate","then","templateResponse","RemoteConfigTemplateImpl","getTemplateAtVersion","versionNumber","validateTemplate","template","publishTemplate","options","rollback","listVersions","listVersionsResponse","_a","_b","versions","map","version","VersionImpl","nextPageToken","createTemplateFromJSON","json","isNonEmptyString","FirebaseRemoteConfigError","JSON","parse","e","config","isNonNullObject","etag","stringify","etagInternal","parameters","parameterGroups","conditions","isArray","get","enumerable","configurable","toJSON","isNumber","Number","isInteger","updateOrigin","updateType","updateUser","description","rollbackSource","isLegacy","isBoolean","updateTime","isValidTimestamp","Date","toUTCString","timestamp","getTime"],"mappings":"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","sourcesContent":["/*! firebase-admin v9.4.2 */\r\n\"use strict\";\r\n/*!\r\n * Copyright 2020 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.RemoteConfig = void 0;\r\nvar validator = require(\"../utils/validator\");\r\nvar remote_config_api_client_internal_1 = require(\"./remote-config-api-client-internal\");\r\n/**\r\n * Internals of an RemoteConfig service instance.\r\n */\r\nvar RemoteConfigInternals = /** @class */ (function () {\r\n    function RemoteConfigInternals() {\r\n    }\r\n    /**\r\n     * Deletes the service and its associated resources.\r\n     *\r\n     * @return {Promise<()>} An empty Promise that will be fulfilled when the service is deleted.\r\n     */\r\n    RemoteConfigInternals.prototype.delete = function () {\r\n        // There are no resources to clean up\r\n        return Promise.resolve(undefined);\r\n    };\r\n    return RemoteConfigInternals;\r\n}());\r\n/**\r\n * Remote Config service bound to the provided app.\r\n */\r\nvar RemoteConfig = /** @class */ (function () {\r\n    /**\r\n     * @param app The app for this RemoteConfig service.\r\n     * @constructor\r\n     */\r\n    function RemoteConfig(app) {\r\n        this.app = app;\r\n        this.INTERNAL = new RemoteConfigInternals();\r\n        this.client = new remote_config_api_client_internal_1.RemoteConfigApiClient(app);\r\n    }\r\n    /**\r\n     * Gets the current active version of the {@link remoteConfig.RemoteConfigTemplate\r\n     * `RemoteConfigTemplate`} of the project.\r\n     *\r\n     * @return A promise that fulfills with a `RemoteConfigTemplate`.\r\n     */\r\n    RemoteConfig.prototype.getTemplate = function () {\r\n        return this.client.getTemplate()\r\n            .then(function (templateResponse) {\r\n            return new RemoteConfigTemplateImpl(templateResponse);\r\n        });\r\n    };\r\n    /**\r\n     * Gets the requested version of the {@link remoteConfig.RemoteConfigTemplate\r\n      * `RemoteConfigTemplate`} of the project.\r\n     *\r\n     * @param versionNumber Version number of the Remote Config template to look up.\r\n     *\r\n     * @return A promise that fulfills with a `RemoteConfigTemplate`.\r\n     */\r\n    RemoteConfig.prototype.getTemplateAtVersion = function (versionNumber) {\r\n        return this.client.getTemplateAtVersion(versionNumber)\r\n            .then(function (templateResponse) {\r\n            return new RemoteConfigTemplateImpl(templateResponse);\r\n        });\r\n    };\r\n    /**\r\n     * Validates a {@link remoteConfig.RemoteConfigTemplate `RemoteConfigTemplate`}.\r\n     *\r\n     * @param template The Remote Config template to be validated.\r\n     * @returns A promise that fulfills with the validated `RemoteConfigTemplate`.\r\n     */\r\n    RemoteConfig.prototype.validateTemplate = function (template) {\r\n        return this.client.validateTemplate(template)\r\n            .then(function (templateResponse) {\r\n            return new RemoteConfigTemplateImpl(templateResponse);\r\n        });\r\n    };\r\n    /**\r\n     * Publishes a Remote Config template.\r\n     *\r\n     * @param template The Remote Config template to be published.\r\n     * @param options Optional options object when publishing a Remote Config template:\r\n     *    - {boolean} `force` Setting this to `true` forces the Remote Config template to\r\n     *      be updated and circumvent the ETag. This approach is not recommended\r\n     *      because it risks causing the loss of updates to your Remote Config\r\n     *      template if multiple clients are updating the Remote Config template.\r\n     *      See {@link https://firebase.google.com/docs/remote-config/use-config-rest#etag_usage_and_forced_updates\r\n     *      ETag usage and forced updates}.\r\n     *\r\n     * @return A Promise that fulfills with the published `RemoteConfigTemplate`.\r\n     */\r\n    RemoteConfig.prototype.publishTemplate = function (template, options) {\r\n        return this.client.publishTemplate(template, options)\r\n            .then(function (templateResponse) {\r\n            return new RemoteConfigTemplateImpl(templateResponse);\r\n        });\r\n    };\r\n    /**\r\n     * Rolls back a project's published Remote Config template to the specified version.\r\n     * A rollback is equivalent to getting a previously published Remote Config\r\n     * template and re-publishing it using a force update.\r\n     *\r\n     * @param versionNumber The version number of the Remote Config template to roll back to.\r\n     *    The specified version number must be lower than the current version number, and not have\r\n     *    been deleted due to staleness. Only the last 300 versions are stored.\r\n     *    All versions that correspond to non-active Remote Config templates (that is, all except the\r\n     *    template that is being fetched by clients) are also deleted if they are more than 90 days old.\r\n     * @return A promise that fulfills with the published `RemoteConfigTemplate`.\r\n     */\r\n    RemoteConfig.prototype.rollback = function (versionNumber) {\r\n        return this.client.rollback(versionNumber)\r\n            .then(function (templateResponse) {\r\n            return new RemoteConfigTemplateImpl(templateResponse);\r\n        });\r\n    };\r\n    /**\r\n     * Gets a list of Remote Config template versions that have been published, sorted in reverse\r\n     * chronological order. Only the last 300 versions are stored.\r\n     * All versions that correspond to non-active Remote Config templates (i.e., all except the\r\n     * template that is being fetched by clients) are also deleted if they are older than 90 days.\r\n     *\r\n     * @param options Optional options object for getting a list of versions.\r\n     * @return A promise that fulfills with a `ListVersionsResult`.\r\n     */\r\n    RemoteConfig.prototype.listVersions = function (options) {\r\n        return this.client.listVersions(options)\r\n            .then(function (listVersionsResponse) {\r\n            var _a, _b;\r\n            return {\r\n                versions: (_b = (_a = listVersionsResponse.versions) === null || _a === void 0 ? void 0 : _a.map(function (version) { return new VersionImpl(version); })) !== null && _b !== void 0 ? _b : [],\r\n                nextPageToken: listVersionsResponse.nextPageToken,\r\n            };\r\n        });\r\n    };\r\n    /**\r\n     * Creates and returns a new Remote Config template from a JSON string.\r\n     *\r\n     * @param json The JSON string to populate a Remote Config template.\r\n     *\r\n     * @return A new template instance.\r\n     */\r\n    RemoteConfig.prototype.createTemplateFromJSON = function (json) {\r\n        if (!validator.isNonEmptyString(json)) {\r\n            throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'JSON string must be a valid non-empty string');\r\n        }\r\n        var template;\r\n        try {\r\n            template = JSON.parse(json);\r\n        }\r\n        catch (e) {\r\n            throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', \"Failed to parse the JSON string: \" + json + \". \" + e);\r\n        }\r\n        return new RemoteConfigTemplateImpl(template);\r\n    };\r\n    return RemoteConfig;\r\n}());\r\nexports.RemoteConfig = RemoteConfig;\r\n/**\r\n * Remote Config template internal implementation.\r\n */\r\nvar RemoteConfigTemplateImpl = /** @class */ (function () {\r\n    function RemoteConfigTemplateImpl(config) {\r\n        if (!validator.isNonNullObject(config) ||\r\n            !validator.isNonEmptyString(config.etag)) {\r\n            throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', \"Invalid Remote Config template: \" + JSON.stringify(config));\r\n        }\r\n        this.etagInternal = config.etag;\r\n        if (typeof config.parameters !== 'undefined') {\r\n            if (!validator.isNonNullObject(config.parameters)) {\r\n                throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Remote Config parameters must be a non-null object');\r\n            }\r\n            this.parameters = config.parameters;\r\n        }\r\n        else {\r\n            this.parameters = {};\r\n        }\r\n        if (typeof config.parameterGroups !== 'undefined') {\r\n            if (!validator.isNonNullObject(config.parameterGroups)) {\r\n                throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Remote Config parameter groups must be a non-null object');\r\n            }\r\n            this.parameterGroups = config.parameterGroups;\r\n        }\r\n        else {\r\n            this.parameterGroups = {};\r\n        }\r\n        if (typeof config.conditions !== 'undefined') {\r\n            if (!validator.isArray(config.conditions)) {\r\n                throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Remote Config conditions must be an array');\r\n            }\r\n            this.conditions = config.conditions;\r\n        }\r\n        else {\r\n            this.conditions = [];\r\n        }\r\n        if (typeof config.version !== 'undefined') {\r\n            this.version = new VersionImpl(config.version);\r\n        }\r\n    }\r\n    Object.defineProperty(RemoteConfigTemplateImpl.prototype, \"etag\", {\r\n        /**\r\n         * Gets the ETag of the template.\r\n         *\r\n         * @return {string} The ETag of the Remote Config template.\r\n         */\r\n        get: function () {\r\n            return this.etagInternal;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @return {RemoteConfigTemplate} A JSON-serializable representation of this object.\r\n     */\r\n    RemoteConfigTemplateImpl.prototype.toJSON = function () {\r\n        return {\r\n            conditions: this.conditions,\r\n            parameters: this.parameters,\r\n            parameterGroups: this.parameterGroups,\r\n            etag: this.etag,\r\n            version: this.version,\r\n        };\r\n    };\r\n    return RemoteConfigTemplateImpl;\r\n}());\r\n/**\r\n* Remote Config Version internal implementation.\r\n*/\r\nvar VersionImpl = /** @class */ (function () {\r\n    function VersionImpl(version) {\r\n        if (!validator.isNonNullObject(version)) {\r\n            throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', \"Invalid Remote Config version instance: \" + JSON.stringify(version));\r\n        }\r\n        if (typeof version.versionNumber !== 'undefined') {\r\n            if (!validator.isNonEmptyString(version.versionNumber) &&\r\n                !validator.isNumber(version.versionNumber)) {\r\n                throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Version number must be a non-empty string in int64 format or a number');\r\n            }\r\n            if (!Number.isInteger(Number(version.versionNumber))) {\r\n                throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Version number must be an integer or a string in int64 format');\r\n            }\r\n            this.versionNumber = version.versionNumber;\r\n        }\r\n        if (typeof version.updateOrigin !== 'undefined') {\r\n            if (!validator.isNonEmptyString(version.updateOrigin)) {\r\n                throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Version update origin must be a non-empty string');\r\n            }\r\n            this.updateOrigin = version.updateOrigin;\r\n        }\r\n        if (typeof version.updateType !== 'undefined') {\r\n            if (!validator.isNonEmptyString(version.updateType)) {\r\n                throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Version update type must be a non-empty string');\r\n            }\r\n            this.updateType = version.updateType;\r\n        }\r\n        if (typeof version.updateUser !== 'undefined') {\r\n            if (!validator.isNonNullObject(version.updateUser)) {\r\n                throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Version update user must be a non-null object');\r\n            }\r\n            this.updateUser = version.updateUser;\r\n        }\r\n        if (typeof version.description !== 'undefined') {\r\n            if (!validator.isNonEmptyString(version.description)) {\r\n                throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Version description must be a non-empty string');\r\n            }\r\n            this.description = version.description;\r\n        }\r\n        if (typeof version.rollbackSource !== 'undefined') {\r\n            if (!validator.isNonEmptyString(version.rollbackSource)) {\r\n                throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Version rollback source must be a non-empty string');\r\n            }\r\n            this.rollbackSource = version.rollbackSource;\r\n        }\r\n        if (typeof version.isLegacy !== 'undefined') {\r\n            if (!validator.isBoolean(version.isLegacy)) {\r\n                throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Version.isLegacy must be a boolean');\r\n            }\r\n            this.isLegacy = version.isLegacy;\r\n        }\r\n        // The backend API provides timestamps as ISO date strings. The Admin SDK exposes timestamps\r\n        // as UTC date strings. If a developer uses a previously obtained template with UTC timestamps\r\n        // we could still validate it below.\r\n        if (typeof version.updateTime !== 'undefined') {\r\n            if (!this.isValidTimestamp(version.updateTime)) {\r\n                throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Version update time must be a valid date string');\r\n            }\r\n            this.updateTime = new Date(version.updateTime).toUTCString();\r\n        }\r\n    }\r\n    /**\r\n     * @return {Version} A JSON-serializable representation of this object.\r\n     */\r\n    VersionImpl.prototype.toJSON = function () {\r\n        return {\r\n            versionNumber: this.versionNumber,\r\n            updateOrigin: this.updateOrigin,\r\n            updateType: this.updateType,\r\n            updateUser: this.updateUser,\r\n            description: this.description,\r\n            rollbackSource: this.rollbackSource,\r\n            isLegacy: this.isLegacy,\r\n            updateTime: this.updateTime,\r\n        };\r\n    };\r\n    VersionImpl.prototype.isValidTimestamp = function (timestamp) {\r\n        return validator.isNonEmptyString(timestamp) && (new Date(timestamp)).getTime() > 0;\r\n    };\r\n    return VersionImpl;\r\n}());\r\n"]},"metadata":{},"sourceType":"script"}