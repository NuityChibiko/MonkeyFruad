{"ast":null,"code":"/*! firebase-admin v9.4.2 */\n\"use strict\";\n/*!\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.deepExtend = exports.deepCopy = void 0;\n/**\r\n * Returns a deep copy of an object or array.\r\n *\r\n * @param {object|array} value The object or array to deep copy.\r\n * @return {object|array} A deep copy of the provided object or array.\r\n */\n\nfunction deepCopy(value) {\n  return deepExtend(undefined, value);\n}\n\nexports.deepCopy = deepCopy;\n/**\r\n * Copies properties from source to target (recursively allows extension of objects and arrays).\r\n * Scalar values in the target are over-written. If target is undefined, an object of the\r\n * appropriate type will be created (and returned).\r\n *\r\n * We recursively copy all child properties of plain objects in the source - so that namespace-like\r\n * objects are merged.\r\n *\r\n * Note that the target can be a function, in which case the properties in the source object are\r\n * copied onto it as static properties of the function.\r\n *\r\n * @param {any} target The value which is being extended.\r\n * @param {any} source The value whose properties are extending the target.\r\n * @return {any} The target value.\r\n */\n\nfunction deepExtend(target, source) {\n  if (!(source instanceof Object)) {\n    return source;\n  }\n\n  switch (source.constructor) {\n    case Date:\n      {\n        // Treat Dates like scalars; if the target date object had any child\n        // properties - they will be lost!\n        var dateValue = source;\n        return new Date(dateValue.getTime());\n      }\n\n    case Object:\n      if (target === undefined) {\n        target = {};\n      }\n\n      break;\n\n    case Array:\n      // Always copy the array source and overwrite the target.\n      target = [];\n      break;\n\n    default:\n      // Not a plain Object - treat it as a scalar.\n      return source;\n  }\n\n  for (var prop in source) {\n    if (!Object.prototype.hasOwnProperty.call(source, prop)) {\n      continue;\n    }\n\n    target[prop] = deepExtend(target[prop], source[prop]);\n  }\n\n  return target;\n}\n\nexports.deepExtend = deepExtend;","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Backend/node_modules/firebase-admin/lib/utils/deep-copy.js"],"names":["Object","defineProperty","exports","value","deepExtend","deepCopy","undefined","target","source","constructor","Date","dateValue","getTime","Array","prop","prototype","hasOwnProperty","call"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,UAAR,GAAqBF,OAAO,CAACG,QAAR,GAAmB,KAAK,CAA7C;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,QAAT,CAAkBF,KAAlB,EAAyB;AACrB,SAAOC,UAAU,CAACE,SAAD,EAAYH,KAAZ,CAAjB;AACH;;AACDD,OAAO,CAACG,QAAR,GAAmBA,QAAnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASD,UAAT,CAAoBG,MAApB,EAA4BC,MAA5B,EAAoC;AAChC,MAAI,EAAEA,MAAM,YAAYR,MAApB,CAAJ,EAAiC;AAC7B,WAAOQ,MAAP;AACH;;AACD,UAAQA,MAAM,CAACC,WAAf;AACI,SAAKC,IAAL;AAAW;AACP;AACA;AACA,YAAIC,SAAS,GAAGH,MAAhB;AACA,eAAO,IAAIE,IAAJ,CAASC,SAAS,CAACC,OAAV,EAAT,CAAP;AACH;;AACD,SAAKZ,MAAL;AACI,UAAIO,MAAM,KAAKD,SAAf,EAA0B;AACtBC,QAAAA,MAAM,GAAG,EAAT;AACH;;AACD;;AACJ,SAAKM,KAAL;AACI;AACAN,MAAAA,MAAM,GAAG,EAAT;AACA;;AACJ;AACI;AACA,aAAOC,MAAP;AAlBR;;AAoBA,OAAK,IAAIM,IAAT,IAAiBN,MAAjB,EAAyB;AACrB,QAAI,CAACR,MAAM,CAACe,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCT,MAArC,EAA6CM,IAA7C,CAAL,EAAyD;AACrD;AACH;;AACDP,IAAAA,MAAM,CAACO,IAAD,CAAN,GAAeV,UAAU,CAACG,MAAM,CAACO,IAAD,CAAP,EAAeN,MAAM,CAACM,IAAD,CAArB,CAAzB;AACH;;AACD,SAAOP,MAAP;AACH;;AACDL,OAAO,CAACE,UAAR,GAAqBA,UAArB","sourcesContent":["/*! firebase-admin v9.4.2 */\r\n\"use strict\";\r\n/*!\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.deepExtend = exports.deepCopy = void 0;\r\n/**\r\n * Returns a deep copy of an object or array.\r\n *\r\n * @param {object|array} value The object or array to deep copy.\r\n * @return {object|array} A deep copy of the provided object or array.\r\n */\r\nfunction deepCopy(value) {\r\n    return deepExtend(undefined, value);\r\n}\r\nexports.deepCopy = deepCopy;\r\n/**\r\n * Copies properties from source to target (recursively allows extension of objects and arrays).\r\n * Scalar values in the target are over-written. If target is undefined, an object of the\r\n * appropriate type will be created (and returned).\r\n *\r\n * We recursively copy all child properties of plain objects in the source - so that namespace-like\r\n * objects are merged.\r\n *\r\n * Note that the target can be a function, in which case the properties in the source object are\r\n * copied onto it as static properties of the function.\r\n *\r\n * @param {any} target The value which is being extended.\r\n * @param {any} source The value whose properties are extending the target.\r\n * @return {any} The target value.\r\n */\r\nfunction deepExtend(target, source) {\r\n    if (!(source instanceof Object)) {\r\n        return source;\r\n    }\r\n    switch (source.constructor) {\r\n        case Date: {\r\n            // Treat Dates like scalars; if the target date object had any child\r\n            // properties - they will be lost!\r\n            var dateValue = source;\r\n            return new Date(dateValue.getTime());\r\n        }\r\n        case Object:\r\n            if (target === undefined) {\r\n                target = {};\r\n            }\r\n            break;\r\n        case Array:\r\n            // Always copy the array source and overwrite the target.\r\n            target = [];\r\n            break;\r\n        default:\r\n            // Not a plain Object - treat it as a scalar.\r\n            return source;\r\n    }\r\n    for (var prop in source) {\r\n        if (!Object.prototype.hasOwnProperty.call(source, prop)) {\r\n            continue;\r\n        }\r\n        target[prop] = deepExtend(target[prop], source[prop]);\r\n    }\r\n    return target;\r\n}\r\nexports.deepExtend = deepExtend;\r\n"]},"metadata":{},"sourceType":"script"}