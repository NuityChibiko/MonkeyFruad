{"ast":null,"code":"\"use strict\";\n/*!\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst validate_1 = require(\"./validate\");\n/**\r\n * An immutable object representing a geographic location in Firestore. The\r\n * location is represented as a latitude/longitude pair.\r\n *\r\n * @class\r\n */\n\n\nclass GeoPoint {\n  /**\r\n   * Creates a [GeoPoint]{@link GeoPoint}.\r\n   *\r\n   * @param {number} latitude The latitude as a number between -90 and 90.\r\n   * @param {number} longitude The longitude as a number between -180 and 180.\r\n   *\r\n   * @example\r\n   * let data = {\r\n   *   google: new Firestore.GeoPoint(37.422, 122.084)\r\n   * };\r\n   *\r\n   * firestore.doc('col/doc').set(data).then(() => {\r\n   *   console.log(`Location is ${data.google.latitude}, ` +\r\n   *     `${data.google.longitude}`);\r\n   * });\r\n   */\n  constructor(latitude, longitude) {\n    validate_1.validateNumber('latitude', latitude, {\n      minValue: -90,\n      maxValue: 90\n    });\n    validate_1.validateNumber('longitude', longitude, {\n      minValue: -180,\n      maxValue: 180\n    });\n    this._latitude = latitude;\n    this._longitude = longitude;\n  }\n  /**\r\n   * The latitude as a number between -90 and 90.\r\n   *\r\n   * @type {number}\r\n   * @name GeoPoint#latitude\r\n   * @readonly\r\n   */\n\n\n  get latitude() {\n    return this._latitude;\n  }\n  /**\r\n   * The longitude as a number between -180 and 180.\r\n   *\r\n   * @type {number}\r\n   * @name GeoPoint#longitude\r\n   * @readonly\r\n   */\n\n\n  get longitude() {\n    return this._longitude;\n  }\n  /**\r\n   * Returns true if this `GeoPoint` is equal to the provided value.\r\n   *\r\n   * @param {*} other The value to compare against.\r\n   * @return {boolean} true if this `GeoPoint` is equal to the provided value.\r\n   */\n\n\n  isEqual(other) {\n    return this === other || other instanceof GeoPoint && this.latitude === other.latitude && this.longitude === other.longitude;\n  }\n  /**\r\n   * Converts the GeoPoint to a google.type.LatLng proto.\r\n   * @private\r\n   */\n\n\n  toProto() {\n    return {\n      geoPointValue: {\n        latitude: this.latitude,\n        longitude: this.longitude\n      }\n    };\n  }\n  /**\r\n   * Converts a google.type.LatLng proto to its GeoPoint representation.\r\n   * @private\r\n   */\n\n\n  static fromProto(proto) {\n    return new GeoPoint(proto.latitude || 0, proto.longitude || 0);\n  }\n\n}\n\nexports.GeoPoint = GeoPoint;","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Backend/node_modules/@google-cloud/firestore/build/src/geo-point.js"],"names":["Object","defineProperty","exports","value","validate_1","require","GeoPoint","constructor","latitude","longitude","validateNumber","minValue","maxValue","_latitude","_longitude","isEqual","other","toProto","geoPointValue","fromProto","proto"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,UAAU,GAAGC,OAAO,CAAC,YAAD,CAA1B;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,QAAN,CAAe;AACX;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,EAAAA,WAAW,CAACC,QAAD,EAAWC,SAAX,EAAsB;AAC7BL,IAAAA,UAAU,CAACM,cAAX,CAA0B,UAA1B,EAAsCF,QAAtC,EAAgD;AAAEG,MAAAA,QAAQ,EAAE,CAAC,EAAb;AAAiBC,MAAAA,QAAQ,EAAE;AAA3B,KAAhD;AACAR,IAAAA,UAAU,CAACM,cAAX,CAA0B,WAA1B,EAAuCD,SAAvC,EAAkD;AAAEE,MAAAA,QAAQ,EAAE,CAAC,GAAb;AAAkBC,MAAAA,QAAQ,EAAE;AAA5B,KAAlD;AACA,SAAKC,SAAL,GAAiBL,QAAjB;AACA,SAAKM,UAAL,GAAkBL,SAAlB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACI,MAAID,QAAJ,GAAe;AACX,WAAO,KAAKK,SAAZ;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACI,MAAIJ,SAAJ,GAAgB;AACZ,WAAO,KAAKK,UAAZ;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,OAAO,CAACC,KAAD,EAAQ;AACX,WAAQ,SAASA,KAAT,IACHA,KAAK,YAAYV,QAAjB,IACG,KAAKE,QAAL,KAAkBQ,KAAK,CAACR,QAD3B,IAEG,KAAKC,SAAL,KAAmBO,KAAK,CAACP,SAHjC;AAIH;AACD;AACJ;AACA;AACA;;;AACIQ,EAAAA,OAAO,GAAG;AACN,WAAO;AACHC,MAAAA,aAAa,EAAE;AACXV,QAAAA,QAAQ,EAAE,KAAKA,QADJ;AAEXC,QAAAA,SAAS,EAAE,KAAKA;AAFL;AADZ,KAAP;AAMH;AACD;AACJ;AACA;AACA;;;AACI,SAAOU,SAAP,CAAiBC,KAAjB,EAAwB;AACpB,WAAO,IAAId,QAAJ,CAAac,KAAK,CAACZ,QAAN,IAAkB,CAA/B,EAAkCY,KAAK,CAACX,SAAN,IAAmB,CAArD,CAAP;AACH;;AAzEU;;AA2EfP,OAAO,CAACI,QAAR,GAAmBA,QAAnB","sourcesContent":["\"use strict\";\r\n/*!\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst validate_1 = require(\"./validate\");\r\n/**\r\n * An immutable object representing a geographic location in Firestore. The\r\n * location is represented as a latitude/longitude pair.\r\n *\r\n * @class\r\n */\r\nclass GeoPoint {\r\n    /**\r\n     * Creates a [GeoPoint]{@link GeoPoint}.\r\n     *\r\n     * @param {number} latitude The latitude as a number between -90 and 90.\r\n     * @param {number} longitude The longitude as a number between -180 and 180.\r\n     *\r\n     * @example\r\n     * let data = {\r\n     *   google: new Firestore.GeoPoint(37.422, 122.084)\r\n     * };\r\n     *\r\n     * firestore.doc('col/doc').set(data).then(() => {\r\n     *   console.log(`Location is ${data.google.latitude}, ` +\r\n     *     `${data.google.longitude}`);\r\n     * });\r\n     */\r\n    constructor(latitude, longitude) {\r\n        validate_1.validateNumber('latitude', latitude, { minValue: -90, maxValue: 90 });\r\n        validate_1.validateNumber('longitude', longitude, { minValue: -180, maxValue: 180 });\r\n        this._latitude = latitude;\r\n        this._longitude = longitude;\r\n    }\r\n    /**\r\n     * The latitude as a number between -90 and 90.\r\n     *\r\n     * @type {number}\r\n     * @name GeoPoint#latitude\r\n     * @readonly\r\n     */\r\n    get latitude() {\r\n        return this._latitude;\r\n    }\r\n    /**\r\n     * The longitude as a number between -180 and 180.\r\n     *\r\n     * @type {number}\r\n     * @name GeoPoint#longitude\r\n     * @readonly\r\n     */\r\n    get longitude() {\r\n        return this._longitude;\r\n    }\r\n    /**\r\n     * Returns true if this `GeoPoint` is equal to the provided value.\r\n     *\r\n     * @param {*} other The value to compare against.\r\n     * @return {boolean} true if this `GeoPoint` is equal to the provided value.\r\n     */\r\n    isEqual(other) {\r\n        return (this === other ||\r\n            (other instanceof GeoPoint &&\r\n                this.latitude === other.latitude &&\r\n                this.longitude === other.longitude));\r\n    }\r\n    /**\r\n     * Converts the GeoPoint to a google.type.LatLng proto.\r\n     * @private\r\n     */\r\n    toProto() {\r\n        return {\r\n            geoPointValue: {\r\n                latitude: this.latitude,\r\n                longitude: this.longitude,\r\n            },\r\n        };\r\n    }\r\n    /**\r\n     * Converts a google.type.LatLng proto to its GeoPoint representation.\r\n     * @private\r\n     */\r\n    static fromProto(proto) {\r\n        return new GeoPoint(proto.latitude || 0, proto.longitude || 0);\r\n    }\r\n}\r\nexports.GeoPoint = GeoPoint;\r\n//# sourceMappingURL=geo-point.js.map"]},"metadata":{},"sourceType":"script"}