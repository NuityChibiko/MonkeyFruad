{"ast":null,"code":"'use strict';\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar sdkCode = 'M'; // Constant per SDK\n\n/**\r\n * @description Gets the relevant versions of the SDK(package version, node version and sdkCode)\r\n * @param {'default' | 'x.y.z' | 'x.y' | string} useSDKVersion Default uses package.json version\r\n * @param {'default' | 'x.y.z' | 'x.y' | string} useNodeVersion Default uses process.versions.node\r\n * @return {{sdkSemver:string, techVersion:string, sdkCode:string}} A map of relevant versions and codes\r\n */\n\nfunction getSDKVersions() {\n  var useSDKVersion = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';\n  var useNodeVersion = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';\n  var pkgJSONFile = fs.readFileSync(path.join(__dirname, '../../../../package.json'), 'utf-8'); // allow to pass a custom SDKVersion\n\n  var sdkSemver = useSDKVersion === 'default' ? JSON.parse(pkgJSONFile).version : useSDKVersion; // allow to pass a custom techVersion (Node version)\n\n  var techVersion = useNodeVersion === 'default' ? process.versions.node : useNodeVersion;\n  return {\n    sdkSemver,\n    techVersion,\n    sdkCode\n  };\n}\n\nmodule.exports = getSDKVersions;","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Backend/node_modules/cloudinary/lib-es5/utils/encoding/sdkAnalytics/getSDKVersions.js"],"names":["fs","require","path","sdkCode","getSDKVersions","useSDKVersion","arguments","length","undefined","useNodeVersion","pkgJSONFile","readFileSync","join","__dirname","sdkSemver","JSON","parse","version","techVersion","process","versions","node","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIE,OAAO,GAAG,GAAd,C,CAAmB;;AAEnB;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,cAAT,GAA0B;AACxB,MAAIC,aAAa,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,SAAxF;AACA,MAAIG,cAAc,GAAGH,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,SAAzF;AAEA,MAAII,WAAW,GAAGV,EAAE,CAACW,YAAH,CAAgBT,IAAI,CAACU,IAAL,CAAUC,SAAV,EAAqB,0BAArB,CAAhB,EAAkE,OAAlE,CAAlB,CAJwB,CAMxB;;AACA,MAAIC,SAAS,GAAGT,aAAa,KAAK,SAAlB,GAA8BU,IAAI,CAACC,KAAL,CAAWN,WAAX,EAAwBO,OAAtD,GAAgEZ,aAAhF,CAPwB,CASxB;;AACA,MAAIa,WAAW,GAAGT,cAAc,KAAK,SAAnB,GAA+BU,OAAO,CAACC,QAAR,CAAiBC,IAAhD,GAAuDZ,cAAzE;AAEA,SAAO;AACLK,IAAAA,SADK;AAELI,IAAAA,WAFK;AAGLf,IAAAA;AAHK,GAAP;AAKD;;AAEDmB,MAAM,CAACC,OAAP,GAAiBnB,cAAjB","sourcesContent":["'use strict';\r\n\r\nvar fs = require('fs');\r\nvar path = require('path');\r\nvar sdkCode = 'M'; // Constant per SDK\r\n\r\n/**\r\n * @description Gets the relevant versions of the SDK(package version, node version and sdkCode)\r\n * @param {'default' | 'x.y.z' | 'x.y' | string} useSDKVersion Default uses package.json version\r\n * @param {'default' | 'x.y.z' | 'x.y' | string} useNodeVersion Default uses process.versions.node\r\n * @return {{sdkSemver:string, techVersion:string, sdkCode:string}} A map of relevant versions and codes\r\n */\r\nfunction getSDKVersions() {\r\n  var useSDKVersion = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';\r\n  var useNodeVersion = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';\r\n\r\n  var pkgJSONFile = fs.readFileSync(path.join(__dirname, '../../../../package.json'), 'utf-8');\r\n\r\n  // allow to pass a custom SDKVersion\r\n  var sdkSemver = useSDKVersion === 'default' ? JSON.parse(pkgJSONFile).version : useSDKVersion;\r\n\r\n  // allow to pass a custom techVersion (Node version)\r\n  var techVersion = useNodeVersion === 'default' ? process.versions.node : useNodeVersion;\r\n\r\n  return {\r\n    sdkSemver,\r\n    techVersion,\r\n    sdkCode\r\n  };\r\n}\r\n\r\nmodule.exports = getSDKVersions;"]},"metadata":{},"sourceType":"script"}