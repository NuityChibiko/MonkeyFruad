{"ast":null,"code":"const express = require(\"express\"),\n      passport = require(\"passport\");\n\nrouter = express.Router();\n\nconst {\n  firestore\n} = require(\"../models/index\");\n\nconst admin = require(\"firebase-admin\");\n\nconst moment = require(\"moment\");\n\nconst {\n  v4: uuidv4\n} = require('uuid');\n\nconst cloudinary = require(\"../utils/cloudinary\");\n\nconst multer = require(\"multer\");\n\nconst path = require(\"path\");\n\nconst e = require(\"express\");\n\nlet storage = multer.diskStorage({\n  // destination: (req,file,cb) =>{\n  //   cb(null, path.join(__dirname, '../../Frontend/public/uploads'))\n  // },\n  filename: (req, file, cb) => {\n    cb(null, file.fieldname + \"-\" + Date.now() + path.extname(file.originalname));\n  }\n});\n\nlet fileFilter = (req, file, cb) => {\n  if (file.mimetype === \"image/jpeg\" || file.mimetype === \"image/png\" || file.mimetype === \"image/jpg\") {\n    cb(null, true);\n  } else {\n    return cb(new Error('** ต้องเป็นไฟล์ png หรือ jpeg เท่านั้น **'));\n  }\n};\n\nlet upload = multer({\n  storage: storage,\n  fileFilter: fileFilter,\n  limits: {\n    fileSize: 1 * 1024 * 1024\n  }\n});\n\nconst uploadFile = (req, res, next) => {\n  const upload2 = upload.fields([{\n    name: \"photo\",\n    maxCount: 1\n  }, {\n    name: \"eiei\",\n    maxCount: 10\n  }]);\n  upload2(req, res, function (err) {\n    if (err instanceof multer.MulterError) {\n      return res.status(400).json({\n        msg: \"** ไฟล์รูปต้องมีขนาดไม่เกิน 1 MB **\"\n      });\n    } else if (err) {\n      return res.status(400).json({\n        msg: err.message\n      });\n    }\n\n    next();\n  });\n}; // router.get(\"/\", function (req, res) {\n//   res.json({ success: true });\n// });\n\n\nrouter.post(\"/create\", uploadFile, async (req, res) => {\n  try {\n    let file = req.files.photo;\n    let files = req.files.eiei;\n    const {\n      name,\n      surname,\n      id,\n      accountnumber,\n      nameproduct,\n      productcategory,\n      money,\n      bank,\n      datetime,\n      social,\n      other,\n      useruid\n    } = req.body;\n    const uid = uuidv4();\n    const date = moment().format('MM/DD/YYYY, h:mm:ss a'); // console.log(file)\n    // console.log(files)\n\n    if (!files) {\n      return res.status(400).json({\n        msg: \"** กรุณาแนบหลักฐานการโอนเงินและหลักฐานการโดนโกง **\"\n      });\n    } else if (file && files) {\n      const resultfile = await cloudinary.uploader.upload(file[0].path);\n      const {\n        url,\n        public_id\n      } = resultfile;\n      const resultfileitem = {\n        url,\n        public_id\n      };\n      let item = [];\n\n      for (const file of files) {\n        const {\n          path\n        } = file;\n        const resultfiles = await cloudinary.uploader.upload(path);\n        let {\n          url,\n          public_id\n        } = resultfiles;\n        item.push({\n          url,\n          public_id\n        });\n      }\n\n      console.log(item);\n      const create = await firestore.collection(\"Post\").doc(uid).set({\n        name,\n        surname,\n        id,\n        accountnumber,\n        nameproduct,\n        productcategory,\n        money,\n        bank,\n        datetime,\n        social,\n        other,\n        uid,\n        useruid,\n        date,\n        resultfileitem,\n        item\n      });\n    } else if (file) {\n      const resultfile = await cloudinary.uploader.upload(file[0].path);\n      const {\n        url,\n        public_id\n      } = resultfile;\n      const resultfileitem = {\n        url,\n        public_id\n      };\n      const create = await firestore.collection(\"Post\").doc(uid).set({\n        name,\n        surname,\n        id,\n        accountnumber,\n        nameproduct,\n        productcategory,\n        money,\n        bank,\n        datetime,\n        social,\n        other,\n        uid,\n        useruid,\n        date,\n        resultfileitem\n      });\n    } else if (files) {\n      let item = [];\n\n      for (const file of files) {\n        const {\n          path\n        } = file;\n        const resultfiles = await cloudinary.uploader.upload(path);\n        let {\n          url,\n          public_id\n        } = resultfiles;\n        item.push({\n          url,\n          public_id\n        });\n      }\n\n      console.log(item);\n      const create = await firestore.collection(\"Post\").doc(uid).set({\n        name,\n        surname,\n        id,\n        accountnumber,\n        nameproduct,\n        productcategory,\n        money,\n        bank,\n        datetime,\n        social,\n        other,\n        uid,\n        useruid,\n        date,\n        item\n      });\n    } else if (!file && !files) {\n      const create = await firestore.collection(\"Post\").doc(uid).set({\n        name,\n        surname,\n        id,\n        accountnumber,\n        nameproduct,\n        productcategory,\n        money,\n        bank,\n        datetime,\n        social,\n        other,\n        uid,\n        useruid,\n        date\n      });\n    }\n\n    return res.json({\n      success: \"สร้างโพสสำเร็จ\"\n    });\n  } catch (err) {\n    // console.log(err)\n    return res.status(500).json({\n      msg: err\n    });\n  }\n});\nrouter.post(\"/edit/:uid\", uploadFile, async (req, res) => {\n  try {\n    let file = req.files.photo;\n    let files = req.files.eiei;\n    let uid = req.params.uid;\n    const date = moment().format('MM/DD/YYYY, h:mm:ss a');\n    const {\n      name,\n      surname,\n      id,\n      accountnumber,\n      nameproduct,\n      productcategory,\n      money,\n      bank,\n      datetime,\n      social,\n      other\n    } = req.body; // console.log(file)\n    // console.log(files)\n\n    if (file && files) {\n      const resultfile = await cloudinary.uploader.upload(file[0].path);\n      let item = [];\n\n      for (const file of files) {\n        const {\n          path\n        } = file;\n        const resultfiles = await cloudinary.uploader.upload(path);\n        let {\n          url,\n          public_id\n        } = resultfiles;\n        item.push({\n          url,\n          public_id\n        });\n      }\n\n      console.log(item);\n      const update = await firestore.collection(\"Post\").doc(uid).update({\n        name,\n        surname,\n        id,\n        accountnumber,\n        nameproduct,\n        productcategory,\n        money,\n        bank,\n        datetime,\n        social,\n        other,\n        date,\n        resultfile,\n        item\n      });\n    } else if (file) {\n      const resultfile = await cloudinary.uploader.upload(file[0].path);\n      const update = await firestore.collection(\"Post\").doc(uid).update({\n        name,\n        surname,\n        id,\n        accountnumber,\n        nameproduct,\n        productcategory,\n        money,\n        bank,\n        datetime,\n        social,\n        other,\n        date,\n        resultfile\n      });\n    } else if (files) {\n      let item = [];\n\n      for (const file of files) {\n        const {\n          path\n        } = file;\n        const resultfiles = await cloudinary.uploader.upload(path);\n        let {\n          url,\n          public_id\n        } = resultfiles;\n        item.push({\n          url,\n          public_id\n        });\n      }\n\n      console.log(item);\n      const update = await firestore.collection(\"Post\").doc(uid).update({\n        name,\n        surname,\n        id,\n        accountnumber,\n        nameproduct,\n        productcategory,\n        money,\n        bank,\n        datetime,\n        social,\n        other,\n        date,\n        item\n      });\n    } else if (!file && !files) {\n      const update = await firestore.collection(\"Post\").doc(uid).update({\n        name,\n        surname,\n        id,\n        accountnumber,\n        nameproduct,\n        productcategory,\n        money,\n        bank,\n        datetime,\n        social,\n        other,\n        date\n      });\n    }\n\n    return res.json({\n      success: \"แก้ไขสำเร็จ\"\n    });\n  } catch (err) {\n    return res.status(500).json({\n      msg: err\n    });\n  }\n}); // router.post(\"/create\" ,async(req, res) => { \n//   try{\n//     upload.fields([{name: \"photo\" ,maxCount:1} , {name: \"eiei\" , maxCount:10} ]) async(req , res , (err => {\n//       if (err) {\n//         console.log(err)\n//        }\n//     }) \n//     )\n//     const {name,surname,id,accountnumber,nameproduct,productcategory,money,bank,datetime,social,other,useruid} = req.body\n//     const uid = uuidv4()\n//     const date = moment().format('MM/DD/YYYY, h:mm:ss')\n//     let file = req.files.photo \n//     let files = req.files.eiei \n//     console.log(file)\n//     console.log(files)\n//     if(!files){\n//       return res.status(400).json({msg : \"กรุณาใส่ไฟลล์หลักฐาน\"})\n//     }\n//     else if(file && files ){\n//       const create = await firestore.collection(\"Post\").doc(uid).set({name,surname,id,accountnumber,nameproduct,productcategory,money,bank,datetime,social,other,uid,useruid,date,file,files})\n//     }\n//     else if(file){\n//       const create = await firestore.collection(\"Post\").doc(uid).set({name,surname,id,accountnumber,nameproduct,productcategory,money,bank,datetime,social,other,uid,useruid,date,file})\n//     }\n//     else if(files){\n//       const create = await firestore.collection(\"Post\").doc(uid).set({name,surname,id,accountnumber,nameproduct,productcategory,money,bank,datetime,social,other,uid,useruid,date,files})\n//     }else{\n//       const create = await firestore.collection(\"Post\").doc(uid).set({name,surname,id,accountnumber,nameproduct,productcategory,money,bank,datetime,social,other,uid,useruid,date})\n//     }\n//   return res.json({ success: \"สร้างโพสสำเร็จ\" });\n//   }catch(err){\n//     console.log(\"ok\")\n//     return res.status(500).json({msg : err})\n//   } \n// });\n// router.get(\"/search\", function (req, res) {\n//   res.json({ success: true });\n// });\n\nrouter.get(\"/edit/:uid\", async (req, res) => {\n  let uid = req.params.uid;\n\n  try {\n    const showdata = await firestore.collection(\"Post\").where(\"uid\", \"==\", uid).get();\n    showdata.forEach(doc => {\n      let item = [];\n      console.log(item);\n      item.push(doc.data());\n      return res.json({\n        item\n      });\n    });\n  } catch (err) {\n    console.log(err);\n  }\n});\nrouter.post(\"/delete/:uid\", (req, res) => {\n  try {\n    let getid = req.params.uid;\n    console.log(getid);\n    const postdelete = firestore.collection(\"Post\").doc(getid).delete();\n    return res.json({\n      success: \"Delete\"\n    });\n  } catch (err) {\n    return res.status(500).json({\n      msg: err\n    });\n  }\n});\nrouter.get(\"/mypost/:uid\", async (req, res) => {\n  try {\n    console.log(\"ok\");\n    let getid = req.params.uid;\n    const postdelete = await firestore.collection(\"Post\").where(\"uid\", \"==\", getid).get();\n    postdelete.forEach(doc => {\n      let item = [];\n      item.push(doc.data());\n      return res.json({\n        item\n      });\n    });\n  } catch (err) {\n    return res.status(500).json({\n      msg: err\n    });\n  }\n});\nrouter.post(\"/postapi\", async (req, res) => {\n  try {\n    const {\n      result\n    } = req.body;\n    const userRef = await firestore.collection(\"Post\").where(\"useruid\", \"==\", result.uid).orderBy(\"date\", \"desc\");\n    userRef.get().then(doc => {\n      let item = [];\n      doc.forEach(doc2 => {\n        item.push(doc2.data());\n      });\n      res.json({\n        item\n      });\n    });\n  } catch {\n    err => {\n      console.log(err);\n    };\n  }\n}); // router.post(\"/upload\", upload.array(\"eiei\"), async(req, res) => {\n//   try{\n//         console.log(req.files.path)\n//   }catch(err){\n//     res.status(500).json({msg : err})\n//   }\n// });\n// router.post(\"/comment/:id\", function (req, res) {\n//     res.json({ success: true });\n//   });\n\nconst userRef = firestore.collection(\"User\");\nmodule.exports = router;","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Backend/routes/Post.js"],"names":["express","require","passport","router","Router","firestore","admin","moment","v4","uuidv4","cloudinary","multer","path","e","storage","diskStorage","filename","req","file","cb","fieldname","Date","now","extname","originalname","fileFilter","mimetype","Error","upload","limits","fileSize","uploadFile","res","next","upload2","fields","name","maxCount","err","MulterError","status","json","msg","message","post","files","photo","eiei","surname","id","accountnumber","nameproduct","productcategory","money","bank","datetime","social","other","useruid","body","uid","date","format","resultfile","uploader","url","public_id","resultfileitem","item","resultfiles","push","console","log","create","collection","doc","set","success","params","update","get","showdata","where","forEach","data","getid","postdelete","delete","result","userRef","orderBy","then","doc2","module","exports"],"mappings":"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","sourcesContent":["const express = require(\"express\"),\r\n  passport = require(\"passport\");\r\n \r\nrouter = express.Router();\r\nconst {firestore} = require(\"../models/index\")\r\nconst admin = require(\"firebase-admin\");\r\nconst moment = require(\"moment\")\r\nconst { v4: uuidv4 } = require('uuid');\r\nconst cloudinary = require(\"../utils/cloudinary\")\r\nconst multer = require(\"multer\");\r\nconst path = require(\"path\");\r\nconst e = require(\"express\");\r\n\r\n\r\nlet storage = multer.diskStorage({\r\n  // destination: (req,file,cb) =>{\r\n  //   cb(null, path.join(__dirname, '../../Frontend/public/uploads'))\r\n   \r\n    \r\n  // },\r\n  filename : (req,file,cb) =>{\r\n    cb(null , file.fieldname + \"-\" + Date.now() + path.extname(file.originalname))\r\n  }\r\n})\r\n\r\nlet fileFilter = (req, file , cb ) =>{\r\n  if(file.mimetype === \"image/jpeg\" || file.mimetype === \"image/png\" || file.mimetype === \"image/jpg\"){\r\n    cb(null, true)\r\n   \r\n  }else{\r\n  \r\n    return cb(new Error('** ต้องเป็นไฟล์ png หรือ jpeg เท่านั้น **'));\r\n  }\r\n}\r\n\r\nlet upload = multer({\r\n  storage : storage,\r\n  fileFilter : fileFilter,\r\n  limits: {\r\n    fileSize: 1 * 1024 * 1024\r\n}\r\n})\r\n\r\nconst uploadFile = (req, res, next) =>{\r\n  const upload2 = upload.fields([{name: \"photo\" ,maxCount:1} , {name: \"eiei\" , maxCount:10} ])\r\n  upload2(req, res, function (err) {\r\n      if (err instanceof multer.MulterError) {\r\n        return res.status(400).json({msg : \"** ไฟล์รูปต้องมีขนาดไม่เกิน 1 MB **\"})\r\n      } else if (err) {\r\n        return res.status(400).json({msg : err.message})\r\n      } \r\n      next()\r\n  })\r\n}\r\n\r\n\r\n// router.get(\"/\", function (req, res) {\r\n//   res.json({ success: true });\r\n// });\r\n\r\n\r\n\r\nrouter.post(\"/create\",uploadFile,async(req, res) => { \r\n  try{\r\n    let file = req.files.photo \r\n    let files = req.files.eiei \r\n\r\n    \r\n    const {name,surname,id,accountnumber,nameproduct,productcategory,money,bank,datetime,social,other,useruid} = req.body\r\n    const uid = uuidv4()\r\n    const date = moment().format('MM/DD/YYYY, h:mm:ss a')\r\n    // console.log(file)\r\n    // console.log(files)\r\n    if(!files){\r\n      return res.status(400).json({msg : \"** กรุณาแนบหลักฐานการโอนเงินและหลักฐานการโดนโกง **\"})\r\n    }\r\n    else if(file && files ){\r\n      const resultfile = await cloudinary.uploader.upload(file[0].path)\r\n      const {url,public_id} = resultfile\r\n      const resultfileitem = {url,public_id}\r\n      let item = []\r\n      for(const file of files){\r\n        const {path} = file\r\n        const resultfiles = await cloudinary.uploader.upload(path)\r\n        let {url,public_id} = resultfiles\r\n        item.push({url,public_id})\r\n      }\r\n      console.log(item)\r\n      const create = await firestore.collection(\"Post\").doc(uid).set({name,surname,id,accountnumber,nameproduct,productcategory,money,bank,datetime,social,other,uid,useruid,date,resultfileitem,item})\r\n    }\r\n    else if(file){\r\n      const resultfile = await cloudinary.uploader.upload(file[0].path)\r\n      const {url,public_id} = resultfile\r\n      const resultfileitem = {url,public_id}\r\n      const create = await firestore.collection(\"Post\").doc(uid).set({name,surname,id,accountnumber,nameproduct,productcategory,money,bank,datetime,social,other,uid,useruid,date,resultfileitem})\r\n    }\r\n    else if(files){\r\n      let item = []\r\n      for(const file of files){\r\n        const {path} = file\r\n        const resultfiles = await cloudinary.uploader.upload(path)\r\n        let {url,public_id} = resultfiles\r\n        item.push({url,public_id})\r\n      }\r\n      console.log(item)\r\n      const create = await firestore.collection(\"Post\").doc(uid).set({name,surname,id,accountnumber,nameproduct,productcategory,money,bank,datetime,social,other,uid,useruid,date,item})\r\n    }\r\n    else if(!file && !files){\r\n      const create = await firestore.collection(\"Post\").doc(uid).set({name,surname,id,accountnumber,nameproduct,productcategory,money,bank,datetime,social,other,uid,useruid,date})\r\n    }\r\n      \r\n   \r\n      return res.json({ success: \"สร้างโพสสำเร็จ\" });\r\n  }catch(err){\r\n    // console.log(err)\r\n    return res.status(500).json({msg : err})\r\n  } \r\n  \r\n});\r\nrouter.post(\"/edit/:uid\",uploadFile,async (req, res) => {\r\n  try{\r\n    let file = req.files.photo\r\n    let files = req.files.eiei\r\n  let uid = req.params.uid\r\n  const date = moment().format('MM/DD/YYYY, h:mm:ss a')\r\n  const {name,surname,id,accountnumber,nameproduct,productcategory,money,bank,datetime,social,other} = req.body\r\n    // console.log(file)\r\n    // console.log(files)\r\n    if(file && files){\r\n      const resultfile = await cloudinary.uploader.upload(file[0].path )\r\n      let item = []\r\n      for(const file of files){\r\n        const {path} = file\r\n        const resultfiles = await cloudinary.uploader.upload(path)\r\n        let {url,public_id} = resultfiles\r\n        item.push({url,public_id})\r\n      }\r\n      console.log(item)\r\n      const update =await firestore.collection(\"Post\").doc(uid).update({name,surname,id,accountnumber,nameproduct,productcategory,money,bank,datetime,social,other,date,resultfile,item})\r\n    }\r\n    else if(file){\r\n      const resultfile = await cloudinary.uploader.upload(file[0].path )\r\n      const update =await firestore.collection(\"Post\").doc(uid).update({name,surname,id,accountnumber,nameproduct,productcategory,money,bank,datetime,social,other,date,resultfile})\r\n    }\r\n    else if(files){\r\n      let item = []\r\n      for(const file of files){\r\n        const {path} = file\r\n        const resultfiles = await cloudinary.uploader.upload(path)\r\n        let {url,public_id} = resultfiles\r\n        item.push({url,public_id})\r\n      }\r\n      console.log(item)\r\n      const update =await firestore.collection(\"Post\").doc(uid).update({name,surname,id,accountnumber,nameproduct,productcategory,money,bank,datetime,social,other,date,item})\r\n    }\r\n   else if(!file && !files){\r\n    const update =await firestore.collection(\"Post\").doc(uid).update({name,surname,id,accountnumber,nameproduct,productcategory,money,bank,datetime,social,other,date})\r\n   } \r\n   return res.json({\r\n      success : \"แก้ไขสำเร็จ\"\r\n    })\r\n  }catch(err){\r\n   return res.status(500).json({msg : err})\r\n  }\r\n  \r\n});\r\n\r\n\r\n\r\n\r\n// router.post(\"/create\" ,async(req, res) => { \r\n//   try{\r\n//     upload.fields([{name: \"photo\" ,maxCount:1} , {name: \"eiei\" , maxCount:10} ]) async(req , res , (err => {\r\n//       if (err) {\r\n//         console.log(err)\r\n//        }\r\n//     }) \r\n     \r\n//     )\r\n//     const {name,surname,id,accountnumber,nameproduct,productcategory,money,bank,datetime,social,other,useruid} = req.body\r\n//     const uid = uuidv4()\r\n//     const date = moment().format('MM/DD/YYYY, h:mm:ss')\r\n//     let file = req.files.photo \r\n//     let files = req.files.eiei \r\n//     console.log(file)\r\n//     console.log(files)\r\n//     if(!files){\r\n//       return res.status(400).json({msg : \"กรุณาใส่ไฟลล์หลักฐาน\"})\r\n//     }\r\n\r\n//     else if(file && files ){\r\n//       const create = await firestore.collection(\"Post\").doc(uid).set({name,surname,id,accountnumber,nameproduct,productcategory,money,bank,datetime,social,other,uid,useruid,date,file,files})\r\n//     }\r\n//     else if(file){\r\n//       const create = await firestore.collection(\"Post\").doc(uid).set({name,surname,id,accountnumber,nameproduct,productcategory,money,bank,datetime,social,other,uid,useruid,date,file})\r\n//     }\r\n//     else if(files){\r\n\r\n//       const create = await firestore.collection(\"Post\").doc(uid).set({name,surname,id,accountnumber,nameproduct,productcategory,money,bank,datetime,social,other,uid,useruid,date,files})\r\n//     }else{\r\n//       const create = await firestore.collection(\"Post\").doc(uid).set({name,surname,id,accountnumber,nameproduct,productcategory,money,bank,datetime,social,other,uid,useruid,date})\r\n//     }\r\n    \r\n      \r\n//   return res.json({ success: \"สร้างโพสสำเร็จ\" });\r\n//   }catch(err){\r\n//     console.log(\"ok\")\r\n//     return res.status(500).json({msg : err})\r\n//   } \r\n  \r\n// });\r\n\r\n\r\n// router.get(\"/search\", function (req, res) {\r\n//   res.json({ success: true });\r\n// });\r\n\r\nrouter.get(\"/edit/:uid\",async (req, res) => {\r\n  let uid = req.params.uid\r\n  try{\r\n    \r\n    const showdata = await firestore.collection(\"Post\").where(\"uid\", \"==\", uid).get()\r\n    showdata.forEach(doc =>{\r\n      let item = []\r\n      console.log(item)\r\n      item.push(doc.data())\r\n      return  res.json({\r\n        item\r\n      })\r\n    })\r\n  \r\n  }catch(err){\r\n    console.log(err)\r\n  }\r\n\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\nrouter.post(\"/delete/:uid\",(req, res) => {\r\n  try{\r\n    let getid = req.params.uid\r\n    console.log(getid)\r\n    const postdelete = firestore.collection(\"Post\").doc(getid).delete()\r\n    return  res.json({ success: \"Delete\" });\r\n  }catch(err){\r\n    return  res.status(500).json({msg : err})\r\n  }\r\n  \r\n});\r\n\r\n\r\n\r\nrouter.get(\"/mypost/:uid\",async(req, res) => {\r\n  try{\r\n    console.log(\"ok\")\r\n    let getid = req.params.uid\r\n  \r\n    const postdelete =await firestore.collection(\"Post\").where(\"uid\" , \"==\" , getid).get()\r\n    \r\n    postdelete.forEach(doc =>{\r\n      let item = []\r\n      item.push(doc.data())\r\n      return res.json({\r\n        item\r\n      })\r\n    })\r\n  }catch(err){\r\n   return res.status(500).json({msg : err})\r\n  }\r\n  \r\n});\r\n\r\nrouter.post(\"/postapi\",async (req,res)=>{\r\n  try{\r\n    const {\r\n      result\r\n      } = req.body;\r\n    const userRef =await firestore.collection(\"Post\").where(\"useruid\" , \"==\" ,result.uid).orderBy(\"date\", \"desc\")\r\n    userRef.get().then((doc)=>{\r\n     let item = []\r\n     doc.forEach(doc2 =>{\r\n      item.push(doc2.data())\r\n     })\r\n        res.json({\r\n          item\r\n        })\r\n     })\r\n  \r\n  }catch{(err)=>{\r\nconsole.log(err)\r\n  }}\r\n})\r\n\r\n// router.post(\"/upload\", upload.array(\"eiei\"), async(req, res) => {\r\n//   try{\r\n//         console.log(req.files.path)\r\n//   }catch(err){\r\n//     res.status(500).json({msg : err})\r\n//   }\r\n  \r\n// });\r\n// router.post(\"/comment/:id\", function (req, res) {\r\n//     res.json({ success: true });\r\n//   });\r\n\r\n\r\nconst userRef = firestore.collection(\"User\")\r\n\r\n\r\n\r\n\r\nmodule.exports = router;"]},"metadata":{},"sourceType":"script"}