{"ast":null,"code":"// Copyright 2018 Joyent, Inc.\nmodule.exports = {\n  read: read,\n  write: write\n};\n\nvar assert = require('assert-plus');\n\nvar Buffer = require('safer-buffer').Buffer;\n\nvar rfc4253 = require('./rfc4253');\n\nvar Key = require('../key');\n\nvar errors = require('../errors');\n\nfunction read(buf, options) {\n  var lines = buf.toString('ascii').split(/[\\r\\n]+/);\n  var found = false;\n  var parts;\n  var si = 0;\n\n  while (si < lines.length) {\n    parts = splitHeader(lines[si++]);\n\n    if (parts && parts[0].toLowerCase() === 'putty-user-key-file-2') {\n      found = true;\n      break;\n    }\n  }\n\n  if (!found) {\n    throw new Error('No PuTTY format first line found');\n  }\n\n  var alg = parts[1];\n  parts = splitHeader(lines[si++]);\n  assert.equal(parts[0].toLowerCase(), 'encryption');\n  parts = splitHeader(lines[si++]);\n  assert.equal(parts[0].toLowerCase(), 'comment');\n  var comment = parts[1];\n  parts = splitHeader(lines[si++]);\n  assert.equal(parts[0].toLowerCase(), 'public-lines');\n  var publicLines = parseInt(parts[1], 10);\n\n  if (!isFinite(publicLines) || publicLines < 0 || publicLines > lines.length) {\n    throw new Error('Invalid public-lines count');\n  }\n\n  var publicBuf = Buffer.from(lines.slice(si, si + publicLines).join(''), 'base64');\n  var keyType = rfc4253.algToKeyType(alg);\n  var key = rfc4253.read(publicBuf);\n\n  if (key.type !== keyType) {\n    throw new Error('Outer key algorithm mismatch');\n  }\n\n  key.comment = comment;\n  return key;\n}\n\nfunction splitHeader(line) {\n  var idx = line.indexOf(':');\n  if (idx === -1) return null;\n  var header = line.slice(0, idx);\n  ++idx;\n\n  while (line[idx] === ' ') ++idx;\n\n  var rest = line.slice(idx);\n  return [header, rest];\n}\n\nfunction write(key, options) {\n  assert.object(key);\n  if (!Key.isKey(key)) throw new Error('Must be a public key');\n  var alg = rfc4253.keyTypeToAlg(key);\n  var buf = rfc4253.write(key);\n  var comment = key.comment || '';\n  var b64 = buf.toString('base64');\n  var lines = wrap(b64, 64);\n  lines.unshift('Public-Lines: ' + lines.length);\n  lines.unshift('Comment: ' + comment);\n  lines.unshift('Encryption: none');\n  lines.unshift('PuTTY-User-Key-File-2: ' + alg);\n  return Buffer.from(lines.join('\\n') + '\\n');\n}\n\nfunction wrap(txt, len) {\n  var lines = [];\n  var pos = 0;\n\n  while (pos < txt.length) {\n    lines.push(txt.slice(pos, pos + 64));\n    pos += 64;\n  }\n\n  return lines;\n}","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Frontend/node_modules/sshpk/lib/formats/putty.js"],"names":["module","exports","read","write","assert","require","Buffer","rfc4253","Key","errors","buf","options","lines","toString","split","found","parts","si","length","splitHeader","toLowerCase","Error","alg","equal","comment","publicLines","parseInt","isFinite","publicBuf","from","slice","join","keyType","algToKeyType","key","type","line","idx","indexOf","header","rest","object","isKey","keyTypeToAlg","b64","wrap","unshift","txt","len","pos","push"],"mappings":"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","sourcesContent":["// Copyright 2018 Joyent, Inc.\r\n\r\nmodule.exports = {\r\n\tread: read,\r\n\twrite: write\r\n};\r\n\r\nvar assert = require('assert-plus');\r\nvar Buffer = require('safer-buffer').Buffer;\r\nvar rfc4253 = require('./rfc4253');\r\nvar Key = require('../key');\r\n\r\nvar errors = require('../errors');\r\n\r\nfunction read(buf, options) {\r\n\tvar lines = buf.toString('ascii').split(/[\\r\\n]+/);\r\n\tvar found = false;\r\n\tvar parts;\r\n\tvar si = 0;\r\n\twhile (si < lines.length) {\r\n\t\tparts = splitHeader(lines[si++]);\r\n\t\tif (parts &&\r\n\t\t    parts[0].toLowerCase() === 'putty-user-key-file-2') {\r\n\t\t\tfound = true;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\tif (!found) {\r\n\t\tthrow (new Error('No PuTTY format first line found'));\r\n\t}\r\n\tvar alg = parts[1];\r\n\r\n\tparts = splitHeader(lines[si++]);\r\n\tassert.equal(parts[0].toLowerCase(), 'encryption');\r\n\r\n\tparts = splitHeader(lines[si++]);\r\n\tassert.equal(parts[0].toLowerCase(), 'comment');\r\n\tvar comment = parts[1];\r\n\r\n\tparts = splitHeader(lines[si++]);\r\n\tassert.equal(parts[0].toLowerCase(), 'public-lines');\r\n\tvar publicLines = parseInt(parts[1], 10);\r\n\tif (!isFinite(publicLines) || publicLines < 0 ||\r\n\t    publicLines > lines.length) {\r\n\t\tthrow (new Error('Invalid public-lines count'));\r\n\t}\r\n\r\n\tvar publicBuf = Buffer.from(\r\n\t    lines.slice(si, si + publicLines).join(''), 'base64');\r\n\tvar keyType = rfc4253.algToKeyType(alg);\r\n\tvar key = rfc4253.read(publicBuf);\r\n\tif (key.type !== keyType) {\r\n\t\tthrow (new Error('Outer key algorithm mismatch'));\r\n\t}\r\n\tkey.comment = comment;\r\n\treturn (key);\r\n}\r\n\r\nfunction splitHeader(line) {\r\n\tvar idx = line.indexOf(':');\r\n\tif (idx === -1)\r\n\t\treturn (null);\r\n\tvar header = line.slice(0, idx);\r\n\t++idx;\r\n\twhile (line[idx] === ' ')\r\n\t\t++idx;\r\n\tvar rest = line.slice(idx);\r\n\treturn ([header, rest]);\r\n}\r\n\r\nfunction write(key, options) {\r\n\tassert.object(key);\r\n\tif (!Key.isKey(key))\r\n\t\tthrow (new Error('Must be a public key'));\r\n\r\n\tvar alg = rfc4253.keyTypeToAlg(key);\r\n\tvar buf = rfc4253.write(key);\r\n\tvar comment = key.comment || '';\r\n\r\n\tvar b64 = buf.toString('base64');\r\n\tvar lines = wrap(b64, 64);\r\n\r\n\tlines.unshift('Public-Lines: ' + lines.length);\r\n\tlines.unshift('Comment: ' + comment);\r\n\tlines.unshift('Encryption: none');\r\n\tlines.unshift('PuTTY-User-Key-File-2: ' + alg);\r\n\r\n\treturn (Buffer.from(lines.join('\\n') + '\\n'));\r\n}\r\n\r\nfunction wrap(txt, len) {\r\n\tvar lines = [];\r\n\tvar pos = 0;\r\n\twhile (pos < txt.length) {\r\n\t\tlines.push(txt.slice(pos, pos + 64));\r\n\t\tpos += 64;\r\n\t}\r\n\treturn (lines);\r\n}\r\n"]},"metadata":{},"sourceType":"script"}