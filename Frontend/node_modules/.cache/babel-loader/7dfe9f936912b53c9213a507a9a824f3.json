{"ast":null,"code":"/*! firebase-admin v9.4.2 */\n\"use strict\";\n/*!\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FirebaseTokenGenerator = exports.cryptoSignerFromApp = exports.EmulatedSigner = exports.IAMSigner = exports.ServiceAccountSigner = exports.BLACKLISTED_CLAIMS = void 0;\n\nvar credential_internal_1 = require(\"../credential/credential-internal\");\n\nvar error_1 = require(\"../utils/error\");\n\nvar api_request_1 = require(\"../utils/api-request\");\n\nvar validator = require(\"../utils/validator\");\n\nvar utils_1 = require(\"../utils\");\n\nvar ALGORITHM_RS256 = 'RS256';\nvar ALGORITHM_NONE = 'none';\nvar ONE_HOUR_IN_SECONDS = 60 * 60; // List of blacklisted claims which cannot be provided when creating a custom token\n\nexports.BLACKLISTED_CLAIMS = ['acr', 'amr', 'at_hash', 'aud', 'auth_time', 'azp', 'cnf', 'c_hash', 'exp', 'iat', 'iss', 'jti', 'nbf', 'nonce']; // Audience to use for Firebase Auth Custom tokens\n\nvar FIREBASE_AUDIENCE = 'https://identitytoolkit.googleapis.com/google.identity.identitytoolkit.v1.IdentityToolkit';\n/**\r\n * A CryptoSigner implementation that uses an explicitly specified service account private key to\r\n * sign data. Performs all operations locally, and does not make any RPC calls.\r\n */\n\nvar ServiceAccountSigner =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new CryptoSigner instance from the given service account credential.\r\n   *\r\n   * @param {ServiceAccountCredential} credential A service account credential.\r\n   */\n  function ServiceAccountSigner(credential) {\n    this.credential = credential;\n    this.algorithm = ALGORITHM_RS256;\n\n    if (!credential) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CREDENTIAL, 'INTERNAL ASSERT: Must provide a service account credential to initialize ServiceAccountSigner.');\n    }\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ServiceAccountSigner.prototype.sign = function (buffer) {\n    var crypto = require('crypto'); // eslint-disable-line @typescript-eslint/no-var-requires\n\n\n    var sign = crypto.createSign('RSA-SHA256');\n    sign.update(buffer);\n    return Promise.resolve(sign.sign(this.credential.privateKey));\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ServiceAccountSigner.prototype.getAccountId = function () {\n    return Promise.resolve(this.credential.clientEmail);\n  };\n\n  return ServiceAccountSigner;\n}();\n\nexports.ServiceAccountSigner = ServiceAccountSigner;\n/**\r\n * A CryptoSigner implementation that uses the remote IAM service to sign data. If initialized without\r\n * a service account ID, attempts to discover a service account ID by consulting the local Metadata\r\n * service. This will succeed in managed environments like Google Cloud Functions and App Engine.\r\n *\r\n * @see https://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts/signBlob\r\n * @see https://cloud.google.com/compute/docs/storing-retrieving-metadata\r\n */\n\nvar IAMSigner =\n/** @class */\nfunction () {\n  function IAMSigner(httpClient, serviceAccountId) {\n    this.algorithm = ALGORITHM_RS256;\n\n    if (!httpClient) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'INTERNAL ASSERT: Must provide a HTTP client to initialize IAMSigner.');\n    }\n\n    if (typeof serviceAccountId !== 'undefined' && !validator.isNonEmptyString(serviceAccountId)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'INTERNAL ASSERT: Service account ID must be undefined or a non-empty string.');\n    }\n\n    this.httpClient = httpClient;\n    this.serviceAccountId = serviceAccountId;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  IAMSigner.prototype.sign = function (buffer) {\n    var _this = this;\n\n    return this.getAccountId().then(function (serviceAccount) {\n      var request = {\n        method: 'POST',\n        url: \"https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/\" + serviceAccount + \":signBlob\",\n        data: {\n          payload: buffer.toString('base64')\n        }\n      };\n      return _this.httpClient.send(request);\n    }).then(function (response) {\n      // Response from IAM is base64 encoded. Decode it into a buffer and return.\n      return Buffer.from(response.data.signedBlob, 'base64');\n    }).catch(function (err) {\n      if (err instanceof api_request_1.HttpError) {\n        var error = err.response.data;\n\n        if (validator.isNonNullObject(error) && error.error) {\n          var errorCode = error.error.status;\n          var description = 'Please refer to https://firebase.google.com/docs/auth/admin/create-custom-tokens ' + 'for more details on how to use and troubleshoot this feature.';\n          var errorMsg = error.error.message + \"; \" + description;\n          throw error_1.FirebaseAuthError.fromServerError(errorCode, errorMsg, error);\n        }\n\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'Error returned from server: ' + error + '. Additionally, an ' + 'internal error occurred while attempting to extract the ' + 'errorcode from the error.');\n      }\n\n      throw err;\n    });\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  IAMSigner.prototype.getAccountId = function () {\n    var _this = this;\n\n    if (validator.isNonEmptyString(this.serviceAccountId)) {\n      return Promise.resolve(this.serviceAccountId);\n    }\n\n    var request = {\n      method: 'GET',\n      url: 'http://metadata/computeMetadata/v1/instance/service-accounts/default/email',\n      headers: {\n        'Metadata-Flavor': 'Google'\n      }\n    };\n    var client = new api_request_1.HttpClient();\n    return client.send(request).then(function (response) {\n      if (!response.text) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'HTTP Response missing payload');\n      }\n\n      _this.serviceAccountId = response.text;\n      return response.text;\n    }).catch(function (err) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CREDENTIAL, 'Failed to determine service account. Make sure to initialize ' + 'the SDK with a service account credential. Alternatively specify a service ' + (\"account with iam.serviceAccounts.signBlob permission. Original error: \" + err));\n    });\n  };\n\n  return IAMSigner;\n}();\n\nexports.IAMSigner = IAMSigner;\n/**\r\n * A CryptoSigner implementation that is used when communicating with the Auth emulator.\r\n * It produces unsigned tokens.\r\n */\n\nvar EmulatedSigner =\n/** @class */\nfunction () {\n  function EmulatedSigner() {\n    this.algorithm = ALGORITHM_NONE;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  EmulatedSigner.prototype.sign = function (buffer) {\n    return Promise.resolve(Buffer.from(''));\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  EmulatedSigner.prototype.getAccountId = function () {\n    return Promise.resolve('firebase-auth-emulator@example.com');\n  };\n\n  return EmulatedSigner;\n}();\n\nexports.EmulatedSigner = EmulatedSigner;\n/**\r\n * Create a new CryptoSigner instance for the given app. If the app has been initialized with a service\r\n * account credential, creates a ServiceAccountSigner. Otherwise creates an IAMSigner.\r\n *\r\n * @param {FirebaseApp} app A FirebaseApp instance.\r\n * @return {CryptoSigner} A CryptoSigner instance.\r\n */\n\nfunction cryptoSignerFromApp(app) {\n  var credential = app.options.credential;\n\n  if (credential instanceof credential_internal_1.ServiceAccountCredential) {\n    return new ServiceAccountSigner(credential);\n  }\n\n  return new IAMSigner(new api_request_1.AuthorizedHttpClient(app), app.options.serviceAccountId);\n}\n\nexports.cryptoSignerFromApp = cryptoSignerFromApp;\n/**\r\n * Class for generating different types of Firebase Auth tokens (JWTs).\r\n */\n\nvar FirebaseTokenGenerator =\n/** @class */\nfunction () {\n  /**\r\n   * @param tenantId The tenant ID to use for the generated Firebase Auth\r\n   *     Custom token. If absent, then no tenant ID claim will be set in the\r\n   *     resulting JWT.\r\n   */\n  function FirebaseTokenGenerator(signer, tenantId) {\n    this.tenantId = tenantId;\n\n    if (!validator.isNonNullObject(signer)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CREDENTIAL, 'INTERNAL ASSERT: Must provide a CryptoSigner to use FirebaseTokenGenerator.');\n    }\n\n    if (typeof this.tenantId !== 'undefined' && !validator.isNonEmptyString(this.tenantId)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '`tenantId` argument must be a non-empty string.');\n    }\n\n    this.signer = signer;\n  }\n  /**\r\n   * Creates a new Firebase Auth Custom token.\r\n   *\r\n   * @param uid The user ID to use for the generated Firebase Auth Custom token.\r\n   * @param developerClaims Optional developer claims to include in the generated Firebase\r\n   *     Auth Custom token.\r\n   * @return A Promise fulfilled with a Firebase Auth Custom token signed with a\r\n   *     service account key and containing the provided payload.\r\n   */\n\n\n  FirebaseTokenGenerator.prototype.createCustomToken = function (uid, developerClaims) {\n    var _this = this;\n\n    var errorMessage;\n\n    if (!validator.isNonEmptyString(uid)) {\n      errorMessage = '`uid` argument must be a non-empty string uid.';\n    } else if (uid.length > 128) {\n      errorMessage = '`uid` argument must a uid with less than or equal to 128 characters.';\n    } else if (!this.isDeveloperClaimsValid_(developerClaims)) {\n      errorMessage = '`developerClaims` argument must be a valid, non-null object containing the developer claims.';\n    }\n\n    if (errorMessage) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, errorMessage);\n    }\n\n    var claims = {};\n\n    if (typeof developerClaims !== 'undefined') {\n      for (var key in developerClaims) {\n        /* istanbul ignore else */\n        if (Object.prototype.hasOwnProperty.call(developerClaims, key)) {\n          if (exports.BLACKLISTED_CLAIMS.indexOf(key) !== -1) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"Developer claim \\\"\" + key + \"\\\" is reserved and cannot be specified.\");\n          }\n\n          claims[key] = developerClaims[key];\n        }\n      }\n    }\n\n    return this.signer.getAccountId().then(function (account) {\n      var header = {\n        alg: _this.signer.algorithm,\n        typ: 'JWT'\n      };\n      var iat = Math.floor(Date.now() / 1000);\n      var body = {\n        aud: FIREBASE_AUDIENCE,\n        iat: iat,\n        exp: iat + ONE_HOUR_IN_SECONDS,\n        iss: account,\n        sub: account,\n        uid: uid\n      };\n\n      if (_this.tenantId) {\n        // eslint-disable-next-line @typescript-eslint/camelcase\n        body.tenant_id = _this.tenantId;\n      }\n\n      if (Object.keys(claims).length > 0) {\n        body.claims = claims;\n      }\n\n      var token = _this.encodeSegment(header) + \".\" + _this.encodeSegment(body);\n\n      var signPromise = _this.signer.sign(Buffer.from(token));\n\n      return Promise.all([token, signPromise]);\n    }).then(function (_a) {\n      var token = _a[0],\n          signature = _a[1];\n      return token + \".\" + _this.encodeSegment(signature);\n    });\n  };\n\n  FirebaseTokenGenerator.prototype.encodeSegment = function (segment) {\n    var buffer = segment instanceof Buffer ? segment : Buffer.from(JSON.stringify(segment));\n    return utils_1.toWebSafeBase64(buffer).replace(/=+$/, '');\n  };\n  /**\r\n   * Returns whether or not the provided developer claims are valid.\r\n   *\r\n   * @param {object} [developerClaims] Optional developer claims to validate.\r\n   * @return {boolean} True if the provided claims are valid; otherwise, false.\r\n   */\n\n\n  FirebaseTokenGenerator.prototype.isDeveloperClaimsValid_ = function (developerClaims) {\n    if (typeof developerClaims === 'undefined') {\n      return true;\n    }\n\n    return validator.isNonNullObject(developerClaims);\n  };\n\n  return FirebaseTokenGenerator;\n}();\n\nexports.FirebaseTokenGenerator = FirebaseTokenGenerator;","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Backend/node_modules/firebase-admin/lib/auth/token-generator.js"],"names":["Object","defineProperty","exports","value","FirebaseTokenGenerator","cryptoSignerFromApp","EmulatedSigner","IAMSigner","ServiceAccountSigner","BLACKLISTED_CLAIMS","credential_internal_1","require","error_1","api_request_1","validator","utils_1","ALGORITHM_RS256","ALGORITHM_NONE","ONE_HOUR_IN_SECONDS","FIREBASE_AUDIENCE","credential","algorithm","FirebaseAuthError","AuthClientErrorCode","INVALID_CREDENTIAL","prototype","sign","buffer","crypto","createSign","update","Promise","resolve","privateKey","getAccountId","clientEmail","httpClient","serviceAccountId","INVALID_ARGUMENT","isNonEmptyString","_this","then","serviceAccount","request","method","url","data","payload","toString","send","response","Buffer","from","signedBlob","catch","err","HttpError","error","isNonNullObject","errorCode","status","description","errorMsg","message","fromServerError","INTERNAL_ERROR","headers","client","HttpClient","text","app","options","ServiceAccountCredential","AuthorizedHttpClient","signer","tenantId","createCustomToken","uid","developerClaims","errorMessage","length","isDeveloperClaimsValid_","claims","key","hasOwnProperty","call","indexOf","account","header","alg","typ","iat","Math","floor","Date","now","body","aud","exp","iss","sub","tenant_id","keys","token","encodeSegment","signPromise","all","_a","signature","segment","JSON","stringify","toWebSafeBase64","replace"],"mappings":"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","sourcesContent":["/*! firebase-admin v9.4.2 */\r\n\"use strict\";\r\n/*!\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.FirebaseTokenGenerator = exports.cryptoSignerFromApp = exports.EmulatedSigner = exports.IAMSigner = exports.ServiceAccountSigner = exports.BLACKLISTED_CLAIMS = void 0;\r\nvar credential_internal_1 = require(\"../credential/credential-internal\");\r\nvar error_1 = require(\"../utils/error\");\r\nvar api_request_1 = require(\"../utils/api-request\");\r\nvar validator = require(\"../utils/validator\");\r\nvar utils_1 = require(\"../utils\");\r\nvar ALGORITHM_RS256 = 'RS256';\r\nvar ALGORITHM_NONE = 'none';\r\nvar ONE_HOUR_IN_SECONDS = 60 * 60;\r\n// List of blacklisted claims which cannot be provided when creating a custom token\r\nexports.BLACKLISTED_CLAIMS = [\r\n    'acr', 'amr', 'at_hash', 'aud', 'auth_time', 'azp', 'cnf', 'c_hash', 'exp', 'iat', 'iss', 'jti',\r\n    'nbf', 'nonce',\r\n];\r\n// Audience to use for Firebase Auth Custom tokens\r\nvar FIREBASE_AUDIENCE = 'https://identitytoolkit.googleapis.com/google.identity.identitytoolkit.v1.IdentityToolkit';\r\n/**\r\n * A CryptoSigner implementation that uses an explicitly specified service account private key to\r\n * sign data. Performs all operations locally, and does not make any RPC calls.\r\n */\r\nvar ServiceAccountSigner = /** @class */ (function () {\r\n    /**\r\n     * Creates a new CryptoSigner instance from the given service account credential.\r\n     *\r\n     * @param {ServiceAccountCredential} credential A service account credential.\r\n     */\r\n    function ServiceAccountSigner(credential) {\r\n        this.credential = credential;\r\n        this.algorithm = ALGORITHM_RS256;\r\n        if (!credential) {\r\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CREDENTIAL, 'INTERNAL ASSERT: Must provide a service account credential to initialize ServiceAccountSigner.');\r\n        }\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ServiceAccountSigner.prototype.sign = function (buffer) {\r\n        var crypto = require('crypto'); // eslint-disable-line @typescript-eslint/no-var-requires\r\n        var sign = crypto.createSign('RSA-SHA256');\r\n        sign.update(buffer);\r\n        return Promise.resolve(sign.sign(this.credential.privateKey));\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ServiceAccountSigner.prototype.getAccountId = function () {\r\n        return Promise.resolve(this.credential.clientEmail);\r\n    };\r\n    return ServiceAccountSigner;\r\n}());\r\nexports.ServiceAccountSigner = ServiceAccountSigner;\r\n/**\r\n * A CryptoSigner implementation that uses the remote IAM service to sign data. If initialized without\r\n * a service account ID, attempts to discover a service account ID by consulting the local Metadata\r\n * service. This will succeed in managed environments like Google Cloud Functions and App Engine.\r\n *\r\n * @see https://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts/signBlob\r\n * @see https://cloud.google.com/compute/docs/storing-retrieving-metadata\r\n */\r\nvar IAMSigner = /** @class */ (function () {\r\n    function IAMSigner(httpClient, serviceAccountId) {\r\n        this.algorithm = ALGORITHM_RS256;\r\n        if (!httpClient) {\r\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'INTERNAL ASSERT: Must provide a HTTP client to initialize IAMSigner.');\r\n        }\r\n        if (typeof serviceAccountId !== 'undefined' && !validator.isNonEmptyString(serviceAccountId)) {\r\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'INTERNAL ASSERT: Service account ID must be undefined or a non-empty string.');\r\n        }\r\n        this.httpClient = httpClient;\r\n        this.serviceAccountId = serviceAccountId;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IAMSigner.prototype.sign = function (buffer) {\r\n        var _this = this;\r\n        return this.getAccountId().then(function (serviceAccount) {\r\n            var request = {\r\n                method: 'POST',\r\n                url: \"https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/\" + serviceAccount + \":signBlob\",\r\n                data: { payload: buffer.toString('base64') },\r\n            };\r\n            return _this.httpClient.send(request);\r\n        }).then(function (response) {\r\n            // Response from IAM is base64 encoded. Decode it into a buffer and return.\r\n            return Buffer.from(response.data.signedBlob, 'base64');\r\n        }).catch(function (err) {\r\n            if (err instanceof api_request_1.HttpError) {\r\n                var error = err.response.data;\r\n                if (validator.isNonNullObject(error) && error.error) {\r\n                    var errorCode = error.error.status;\r\n                    var description = 'Please refer to https://firebase.google.com/docs/auth/admin/create-custom-tokens ' +\r\n                        'for more details on how to use and troubleshoot this feature.';\r\n                    var errorMsg = error.error.message + \"; \" + description;\r\n                    throw error_1.FirebaseAuthError.fromServerError(errorCode, errorMsg, error);\r\n                }\r\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'Error returned from server: ' + error + '. Additionally, an ' +\r\n                    'internal error occurred while attempting to extract the ' +\r\n                    'errorcode from the error.');\r\n            }\r\n            throw err;\r\n        });\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IAMSigner.prototype.getAccountId = function () {\r\n        var _this = this;\r\n        if (validator.isNonEmptyString(this.serviceAccountId)) {\r\n            return Promise.resolve(this.serviceAccountId);\r\n        }\r\n        var request = {\r\n            method: 'GET',\r\n            url: 'http://metadata/computeMetadata/v1/instance/service-accounts/default/email',\r\n            headers: {\r\n                'Metadata-Flavor': 'Google',\r\n            },\r\n        };\r\n        var client = new api_request_1.HttpClient();\r\n        return client.send(request).then(function (response) {\r\n            if (!response.text) {\r\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'HTTP Response missing payload');\r\n            }\r\n            _this.serviceAccountId = response.text;\r\n            return response.text;\r\n        }).catch(function (err) {\r\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CREDENTIAL, 'Failed to determine service account. Make sure to initialize ' +\r\n                'the SDK with a service account credential. Alternatively specify a service ' +\r\n                (\"account with iam.serviceAccounts.signBlob permission. Original error: \" + err));\r\n        });\r\n    };\r\n    return IAMSigner;\r\n}());\r\nexports.IAMSigner = IAMSigner;\r\n/**\r\n * A CryptoSigner implementation that is used when communicating with the Auth emulator.\r\n * It produces unsigned tokens.\r\n */\r\nvar EmulatedSigner = /** @class */ (function () {\r\n    function EmulatedSigner() {\r\n        this.algorithm = ALGORITHM_NONE;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    EmulatedSigner.prototype.sign = function (buffer) {\r\n        return Promise.resolve(Buffer.from(''));\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    EmulatedSigner.prototype.getAccountId = function () {\r\n        return Promise.resolve('firebase-auth-emulator@example.com');\r\n    };\r\n    return EmulatedSigner;\r\n}());\r\nexports.EmulatedSigner = EmulatedSigner;\r\n/**\r\n * Create a new CryptoSigner instance for the given app. If the app has been initialized with a service\r\n * account credential, creates a ServiceAccountSigner. Otherwise creates an IAMSigner.\r\n *\r\n * @param {FirebaseApp} app A FirebaseApp instance.\r\n * @return {CryptoSigner} A CryptoSigner instance.\r\n */\r\nfunction cryptoSignerFromApp(app) {\r\n    var credential = app.options.credential;\r\n    if (credential instanceof credential_internal_1.ServiceAccountCredential) {\r\n        return new ServiceAccountSigner(credential);\r\n    }\r\n    return new IAMSigner(new api_request_1.AuthorizedHttpClient(app), app.options.serviceAccountId);\r\n}\r\nexports.cryptoSignerFromApp = cryptoSignerFromApp;\r\n/**\r\n * Class for generating different types of Firebase Auth tokens (JWTs).\r\n */\r\nvar FirebaseTokenGenerator = /** @class */ (function () {\r\n    /**\r\n     * @param tenantId The tenant ID to use for the generated Firebase Auth\r\n     *     Custom token. If absent, then no tenant ID claim will be set in the\r\n     *     resulting JWT.\r\n     */\r\n    function FirebaseTokenGenerator(signer, tenantId) {\r\n        this.tenantId = tenantId;\r\n        if (!validator.isNonNullObject(signer)) {\r\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CREDENTIAL, 'INTERNAL ASSERT: Must provide a CryptoSigner to use FirebaseTokenGenerator.');\r\n        }\r\n        if (typeof this.tenantId !== 'undefined' && !validator.isNonEmptyString(this.tenantId)) {\r\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '`tenantId` argument must be a non-empty string.');\r\n        }\r\n        this.signer = signer;\r\n    }\r\n    /**\r\n     * Creates a new Firebase Auth Custom token.\r\n     *\r\n     * @param uid The user ID to use for the generated Firebase Auth Custom token.\r\n     * @param developerClaims Optional developer claims to include in the generated Firebase\r\n     *     Auth Custom token.\r\n     * @return A Promise fulfilled with a Firebase Auth Custom token signed with a\r\n     *     service account key and containing the provided payload.\r\n     */\r\n    FirebaseTokenGenerator.prototype.createCustomToken = function (uid, developerClaims) {\r\n        var _this = this;\r\n        var errorMessage;\r\n        if (!validator.isNonEmptyString(uid)) {\r\n            errorMessage = '`uid` argument must be a non-empty string uid.';\r\n        }\r\n        else if (uid.length > 128) {\r\n            errorMessage = '`uid` argument must a uid with less than or equal to 128 characters.';\r\n        }\r\n        else if (!this.isDeveloperClaimsValid_(developerClaims)) {\r\n            errorMessage = '`developerClaims` argument must be a valid, non-null object containing the developer claims.';\r\n        }\r\n        if (errorMessage) {\r\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, errorMessage);\r\n        }\r\n        var claims = {};\r\n        if (typeof developerClaims !== 'undefined') {\r\n            for (var key in developerClaims) {\r\n                /* istanbul ignore else */\r\n                if (Object.prototype.hasOwnProperty.call(developerClaims, key)) {\r\n                    if (exports.BLACKLISTED_CLAIMS.indexOf(key) !== -1) {\r\n                        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"Developer claim \\\"\" + key + \"\\\" is reserved and cannot be specified.\");\r\n                    }\r\n                    claims[key] = developerClaims[key];\r\n                }\r\n            }\r\n        }\r\n        return this.signer.getAccountId().then(function (account) {\r\n            var header = {\r\n                alg: _this.signer.algorithm,\r\n                typ: 'JWT',\r\n            };\r\n            var iat = Math.floor(Date.now() / 1000);\r\n            var body = {\r\n                aud: FIREBASE_AUDIENCE,\r\n                iat: iat,\r\n                exp: iat + ONE_HOUR_IN_SECONDS,\r\n                iss: account,\r\n                sub: account,\r\n                uid: uid,\r\n            };\r\n            if (_this.tenantId) {\r\n                // eslint-disable-next-line @typescript-eslint/camelcase\r\n                body.tenant_id = _this.tenantId;\r\n            }\r\n            if (Object.keys(claims).length > 0) {\r\n                body.claims = claims;\r\n            }\r\n            var token = _this.encodeSegment(header) + \".\" + _this.encodeSegment(body);\r\n            var signPromise = _this.signer.sign(Buffer.from(token));\r\n            return Promise.all([token, signPromise]);\r\n        }).then(function (_a) {\r\n            var token = _a[0], signature = _a[1];\r\n            return token + \".\" + _this.encodeSegment(signature);\r\n        });\r\n    };\r\n    FirebaseTokenGenerator.prototype.encodeSegment = function (segment) {\r\n        var buffer = (segment instanceof Buffer) ? segment : Buffer.from(JSON.stringify(segment));\r\n        return utils_1.toWebSafeBase64(buffer).replace(/=+$/, '');\r\n    };\r\n    /**\r\n     * Returns whether or not the provided developer claims are valid.\r\n     *\r\n     * @param {object} [developerClaims] Optional developer claims to validate.\r\n     * @return {boolean} True if the provided claims are valid; otherwise, false.\r\n     */\r\n    FirebaseTokenGenerator.prototype.isDeveloperClaimsValid_ = function (developerClaims) {\r\n        if (typeof developerClaims === 'undefined') {\r\n            return true;\r\n        }\r\n        return validator.isNonNullObject(developerClaims);\r\n    };\r\n    return FirebaseTokenGenerator;\r\n}());\r\nexports.FirebaseTokenGenerator = FirebaseTokenGenerator;\r\n"]},"metadata":{},"sourceType":"script"}