{"ast":null,"code":"// vim:ts=4:sts=4:sw=4:\n\n/*!\r\n *\r\n * Copyright 2009-2017 Kris Kowal under the terms of the MIT\r\n * license found at https://github.com/kriskowal/q/blob/v1/LICENSE\r\n *\r\n * With parts by Tyler Close\r\n * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found\r\n * at http://www.opensource.org/licenses/mit-license.html\r\n * Forked at ref_send.js version: 2009-05-11\r\n *\r\n * With parts by Mark Miller\r\n * Copyright (C) 2011 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\n(function (definition) {\n  \"use strict\"; // This file will function properly as a <script> tag, or a module\n  // using CommonJS and NodeJS or RequireJS module formats.  In\n  // Common/Node/RequireJS, the module exports the Q API and when\n  // executed as a simple <script>, it creates a Q global instead.\n  // Montage Require\n\n  if (typeof bootstrap === \"function\") {\n    bootstrap(\"promise\", definition); // CommonJS\n  } else if (typeof exports === \"object\" && typeof module === \"object\") {\n    module.exports = definition(); // RequireJS\n  } else if (typeof define === \"function\" && define.amd) {\n    define(definition); // SES (Secure EcmaScript)\n  } else if (typeof ses !== \"undefined\") {\n    if (!ses.ok()) {\n      return;\n    } else {\n      ses.makeQ = definition;\n    } // <script>\n\n  } else if (typeof window !== \"undefined\" || typeof self !== \"undefined\") {\n    // Prefer window over self for add-on scripts. Use self for\n    // non-windowed contexts.\n    var global = typeof window !== \"undefined\" ? window : self; // Get the `window` object, save the previous Q global\n    // and initialize Q as a global.\n\n    var previousQ = global.Q;\n    global.Q = definition(); // Add a noConflict function so Q can be removed from the\n    // global namespace.\n\n    global.Q.noConflict = function () {\n      global.Q = previousQ;\n      return this;\n    };\n  } else {\n    throw new Error(\"This environment was not anticipated by Q. Please file a bug.\");\n  }\n})(function () {\n  \"use strict\";\n\n  var hasStacks = false;\n\n  try {\n    throw new Error();\n  } catch (e) {\n    hasStacks = !!e.stack;\n  } // All code after this point will be filtered from stack traces reported\n  // by Q.\n\n\n  var qStartingLine = captureLine();\n  var qFileName; // shims\n  // used for fallback in \"allResolved\"\n\n  var noop = function () {}; // Use the fastest possible means to execute a task in a future turn\n  // of the event loop.\n\n\n  var nextTick = function () {\n    // linked list of tasks (single, with head node)\n    var head = {\n      task: void 0,\n      next: null\n    };\n    var tail = head;\n    var flushing = false;\n    var requestTick = void 0;\n    var isNodeJS = false; // queue for late tasks, used by unhandled rejection tracking\n\n    var laterQueue = [];\n\n    function flush() {\n      /* jshint loopfunc: true */\n      var task, domain;\n\n      while (head.next) {\n        head = head.next;\n        task = head.task;\n        head.task = void 0;\n        domain = head.domain;\n\n        if (domain) {\n          head.domain = void 0;\n          domain.enter();\n        }\n\n        runSingle(task, domain);\n      }\n\n      while (laterQueue.length) {\n        task = laterQueue.pop();\n        runSingle(task);\n      }\n\n      flushing = false;\n    } // runs a single function in the async queue\n\n\n    function runSingle(task, domain) {\n      try {\n        task();\n      } catch (e) {\n        if (isNodeJS) {\n          // In node, uncaught exceptions are considered fatal errors.\n          // Re-throw them synchronously to interrupt flushing!\n          // Ensure continuation if the uncaught exception is suppressed\n          // listening \"uncaughtException\" events (as domains does).\n          // Continue in next event to avoid tick recursion.\n          if (domain) {\n            domain.exit();\n          }\n\n          setTimeout(flush, 0);\n\n          if (domain) {\n            domain.enter();\n          }\n\n          throw e;\n        } else {\n          // In browsers, uncaught exceptions are not fatal.\n          // Re-throw them asynchronously to avoid slow-downs.\n          setTimeout(function () {\n            throw e;\n          }, 0);\n        }\n      }\n\n      if (domain) {\n        domain.exit();\n      }\n    }\n\n    nextTick = function (task) {\n      tail = tail.next = {\n        task: task,\n        domain: isNodeJS && process.domain,\n        next: null\n      };\n\n      if (!flushing) {\n        flushing = true;\n        requestTick();\n      }\n    };\n\n    if (typeof process === \"object\" && process.toString() === \"[object process]\" && process.nextTick) {\n      // Ensure Q is in a real Node environment, with a `process.nextTick`.\n      // To see through fake Node environments:\n      // * Mocha test runner - exposes a `process` global without a `nextTick`\n      // * Browserify - exposes a `process.nexTick` function that uses\n      //   `setTimeout`. In this case `setImmediate` is preferred because\n      //    it is faster. Browserify's `process.toString()` yields\n      //   \"[object Object]\", while in a real Node environment\n      //   `process.toString()` yields \"[object process]\".\n      isNodeJS = true;\n\n      requestTick = function () {\n        process.nextTick(flush);\n      };\n    } else if (typeof setImmediate === \"function\") {\n      // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate\n      if (typeof window !== \"undefined\") {\n        requestTick = setImmediate.bind(window, flush);\n      } else {\n        requestTick = function () {\n          setImmediate(flush);\n        };\n      }\n    } else if (typeof MessageChannel !== \"undefined\") {\n      // modern browsers\n      // http://www.nonblocking.io/2011/06/windownexttick.html\n      var channel = new MessageChannel(); // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create\n      // working message ports the first time a page loads.\n\n      channel.port1.onmessage = function () {\n        requestTick = requestPortTick;\n        channel.port1.onmessage = flush;\n        flush();\n      };\n\n      var requestPortTick = function () {\n        // Opera requires us to provide a message payload, regardless of\n        // whether we use it.\n        channel.port2.postMessage(0);\n      };\n\n      requestTick = function () {\n        setTimeout(flush, 0);\n        requestPortTick();\n      };\n    } else {\n      // old browsers\n      requestTick = function () {\n        setTimeout(flush, 0);\n      };\n    } // runs a task after all other tasks have been run\n    // this is useful for unhandled rejection tracking that needs to happen\n    // after all `then`d tasks have been run.\n\n\n    nextTick.runAfter = function (task) {\n      laterQueue.push(task);\n\n      if (!flushing) {\n        flushing = true;\n        requestTick();\n      }\n    };\n\n    return nextTick;\n  }(); // Attempt to make generics safe in the face of downstream\n  // modifications.\n  // There is no situation where this is necessary.\n  // If you need a security guarantee, these primordials need to be\n  // deeply frozen anyway, and if you don’t need a security guarantee,\n  // this is just plain paranoid.\n  // However, this **might** have the nice side-effect of reducing the size of\n  // the minified code by reducing x.call() to merely x()\n  // See Mark Miller’s explanation of what this does.\n  // http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\n\n\n  var call = Function.call;\n\n  function uncurryThis(f) {\n    return function () {\n      return call.apply(f, arguments);\n    };\n  } // This is equivalent, but slower:\n  // uncurryThis = Function_bind.bind(Function_bind.call);\n  // http://jsperf.com/uncurrythis\n\n\n  var array_slice = uncurryThis(Array.prototype.slice);\n  var array_reduce = uncurryThis(Array.prototype.reduce || function (callback, basis) {\n    var index = 0,\n        length = this.length; // concerning the initial value, if one is not provided\n\n    if (arguments.length === 1) {\n      // seek to the first value in the array, accounting\n      // for the possibility that is is a sparse array\n      do {\n        if (index in this) {\n          basis = this[index++];\n          break;\n        }\n\n        if (++index >= length) {\n          throw new TypeError();\n        }\n      } while (1);\n    } // reduce\n\n\n    for (; index < length; index++) {\n      // account for the possibility that the array is sparse\n      if (index in this) {\n        basis = callback(basis, this[index], index);\n      }\n    }\n\n    return basis;\n  });\n  var array_indexOf = uncurryThis(Array.prototype.indexOf || function (value) {\n    // not a very good shim, but good enough for our one use of it\n    for (var i = 0; i < this.length; i++) {\n      if (this[i] === value) {\n        return i;\n      }\n    }\n\n    return -1;\n  });\n  var array_map = uncurryThis(Array.prototype.map || function (callback, thisp) {\n    var self = this;\n    var collect = [];\n    array_reduce(self, function (undefined, value, index) {\n      collect.push(callback.call(thisp, value, index, self));\n    }, void 0);\n    return collect;\n  });\n\n  var object_create = Object.create || function (prototype) {\n    function Type() {}\n\n    Type.prototype = prototype;\n    return new Type();\n  };\n\n  var object_defineProperty = Object.defineProperty || function (obj, prop, descriptor) {\n    obj[prop] = descriptor.value;\n    return obj;\n  };\n\n  var object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);\n\n  var object_keys = Object.keys || function (object) {\n    var keys = [];\n\n    for (var key in object) {\n      if (object_hasOwnProperty(object, key)) {\n        keys.push(key);\n      }\n    }\n\n    return keys;\n  };\n\n  var object_toString = uncurryThis(Object.prototype.toString);\n\n  function isObject(value) {\n    return value === Object(value);\n  } // generator related shims\n  // FIXME: Remove this function once ES6 generators are in SpiderMonkey.\n\n\n  function isStopIteration(exception) {\n    return object_toString(exception) === \"[object StopIteration]\" || exception instanceof QReturnValue;\n  } // FIXME: Remove this helper and Q.return once ES6 generators are in\n  // SpiderMonkey.\n\n\n  var QReturnValue;\n\n  if (typeof ReturnValue !== \"undefined\") {\n    QReturnValue = ReturnValue;\n  } else {\n    QReturnValue = function (value) {\n      this.value = value;\n    };\n  } // long stack traces\n\n\n  var STACK_JUMP_SEPARATOR = \"From previous event:\";\n\n  function makeStackTraceLong(error, promise) {\n    // If possible, transform the error stack trace by removing Node and Q\n    // cruft, then concatenating with the stack trace of `promise`. See #57.\n    if (hasStacks && promise.stack && typeof error === \"object\" && error !== null && error.stack) {\n      var stacks = [];\n\n      for (var p = promise; !!p; p = p.source) {\n        if (p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ > p.stackCounter)) {\n          object_defineProperty(error, \"__minimumStackCounter__\", {\n            value: p.stackCounter,\n            configurable: true\n          });\n          stacks.unshift(p.stack);\n        }\n      }\n\n      stacks.unshift(error.stack);\n      var concatedStacks = stacks.join(\"\\n\" + STACK_JUMP_SEPARATOR + \"\\n\");\n      var stack = filterStackString(concatedStacks);\n      object_defineProperty(error, \"stack\", {\n        value: stack,\n        configurable: true\n      });\n    }\n  }\n\n  function filterStackString(stackString) {\n    var lines = stackString.split(\"\\n\");\n    var desiredLines = [];\n\n    for (var i = 0; i < lines.length; ++i) {\n      var line = lines[i];\n\n      if (!isInternalFrame(line) && !isNodeFrame(line) && line) {\n        desiredLines.push(line);\n      }\n    }\n\n    return desiredLines.join(\"\\n\");\n  }\n\n  function isNodeFrame(stackLine) {\n    return stackLine.indexOf(\"(module.js:\") !== -1 || stackLine.indexOf(\"(node.js:\") !== -1;\n  }\n\n  function getFileNameAndLineNumber(stackLine) {\n    // Named functions: \"at functionName (filename:lineNumber:columnNumber)\"\n    // In IE10 function name can have spaces (\"Anonymous function\") O_o\n    var attempt1 = /at .+ \\((.+):(\\d+):(?:\\d+)\\)$/.exec(stackLine);\n\n    if (attempt1) {\n      return [attempt1[1], Number(attempt1[2])];\n    } // Anonymous functions: \"at filename:lineNumber:columnNumber\"\n\n\n    var attempt2 = /at ([^ ]+):(\\d+):(?:\\d+)$/.exec(stackLine);\n\n    if (attempt2) {\n      return [attempt2[1], Number(attempt2[2])];\n    } // Firefox style: \"function@filename:lineNumber or @filename:lineNumber\"\n\n\n    var attempt3 = /.*@(.+):(\\d+)$/.exec(stackLine);\n\n    if (attempt3) {\n      return [attempt3[1], Number(attempt3[2])];\n    }\n  }\n\n  function isInternalFrame(stackLine) {\n    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);\n\n    if (!fileNameAndLineNumber) {\n      return false;\n    }\n\n    var fileName = fileNameAndLineNumber[0];\n    var lineNumber = fileNameAndLineNumber[1];\n    return fileName === qFileName && lineNumber >= qStartingLine && lineNumber <= qEndingLine;\n  } // discover own file name and line number range for filtering stack\n  // traces\n\n\n  function captureLine() {\n    if (!hasStacks) {\n      return;\n    }\n\n    try {\n      throw new Error();\n    } catch (e) {\n      var lines = e.stack.split(\"\\n\");\n      var firstLine = lines[0].indexOf(\"@\") > 0 ? lines[1] : lines[2];\n      var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);\n\n      if (!fileNameAndLineNumber) {\n        return;\n      }\n\n      qFileName = fileNameAndLineNumber[0];\n      return fileNameAndLineNumber[1];\n    }\n  }\n\n  function deprecate(callback, name, alternative) {\n    return function () {\n      if (typeof console !== \"undefined\" && typeof console.warn === \"function\") {\n        console.warn(name + \" is deprecated, use \" + alternative + \" instead.\", new Error(\"\").stack);\n      }\n\n      return callback.apply(callback, arguments);\n    };\n  } // end of shims\n  // beginning of real work\n\n  /**\r\n   * Constructs a promise for an immediate reference, passes promises through, or\r\n   * coerces promises from different systems.\r\n   * @param value immediate reference or promise\r\n   */\n\n\n  function Q(value) {\n    // If the object is already a Promise, return it directly.  This enables\n    // the resolve function to both be used to created references from objects,\n    // but to tolerably coerce non-promises to promises.\n    if (value instanceof Promise) {\n      return value;\n    } // assimilate thenables\n\n\n    if (isPromiseAlike(value)) {\n      return coerce(value);\n    } else {\n      return fulfill(value);\n    }\n  }\n\n  Q.resolve = Q;\n  /**\r\n   * Performs a task in a future turn of the event loop.\r\n   * @param {Function} task\r\n   */\n\n  Q.nextTick = nextTick;\n  /**\r\n   * Controls whether or not long stack traces will be on\r\n   */\n\n  Q.longStackSupport = false;\n  /**\r\n   * The counter is used to determine the stopping point for building\r\n   * long stack traces. In makeStackTraceLong we walk backwards through\r\n   * the linked list of promises, only stacks which were created before\r\n   * the rejection are concatenated.\r\n   */\n\n  var longStackCounter = 1; // enable long stacks if Q_DEBUG is set\n\n  if (typeof process === \"object\" && process && process.env && process.env.Q_DEBUG) {\n    Q.longStackSupport = true;\n  }\n  /**\r\n   * Constructs a {promise, resolve, reject} object.\r\n   *\r\n   * `resolve` is a callback to invoke with a more resolved value for the\r\n   * promise. To fulfill the promise, invoke `resolve` with any value that is\r\n   * not a thenable. To reject the promise, invoke `resolve` with a rejected\r\n   * thenable, or invoke `reject` with the reason directly. To resolve the\r\n   * promise to another thenable, thus putting it in the same state, invoke\r\n   * `resolve` with that other thenable.\r\n   */\n\n\n  Q.defer = defer;\n\n  function defer() {\n    // if \"messages\" is an \"Array\", that indicates that the promise has not yet\n    // been resolved.  If it is \"undefined\", it has been resolved.  Each\n    // element of the messages array is itself an array of complete arguments to\n    // forward to the resolved promise.  We coerce the resolution value to a\n    // promise using the `resolve` function because it handles both fully\n    // non-thenable values and other thenables gracefully.\n    var messages = [],\n        progressListeners = [],\n        resolvedPromise;\n    var deferred = object_create(defer.prototype);\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, operands) {\n      var args = array_slice(arguments);\n\n      if (messages) {\n        messages.push(args);\n\n        if (op === \"when\" && operands[1]) {\n          // progress operand\n          progressListeners.push(operands[1]);\n        }\n      } else {\n        Q.nextTick(function () {\n          resolvedPromise.promiseDispatch.apply(resolvedPromise, args);\n        });\n      }\n    }; // XXX deprecated\n\n\n    promise.valueOf = function () {\n      if (messages) {\n        return promise;\n      }\n\n      var nearerValue = nearer(resolvedPromise);\n\n      if (isPromise(nearerValue)) {\n        resolvedPromise = nearerValue; // shorten chain\n      }\n\n      return nearerValue;\n    };\n\n    promise.inspect = function () {\n      if (!resolvedPromise) {\n        return {\n          state: \"pending\"\n        };\n      }\n\n      return resolvedPromise.inspect();\n    };\n\n    if (Q.longStackSupport && hasStacks) {\n      try {\n        throw new Error();\n      } catch (e) {\n        // NOTE: don't try to use `Error.captureStackTrace` or transfer the\n        // accessor around; that causes memory leaks as per GH-111. Just\n        // reify the stack trace as a string ASAP.\n        //\n        // At the same time, cut off the first line; it's always just\n        // \"[object Promise]\\n\", as per the `toString`.\n        promise.stack = e.stack.substring(e.stack.indexOf(\"\\n\") + 1);\n        promise.stackCounter = longStackCounter++;\n      }\n    } // NOTE: we do the checks for `resolvedPromise` in each method, instead of\n    // consolidating them into `become`, since otherwise we'd create new\n    // promises with the lines `become(whatever(value))`. See e.g. GH-252.\n\n\n    function become(newPromise) {\n      resolvedPromise = newPromise;\n\n      if (Q.longStackSupport && hasStacks) {\n        // Only hold a reference to the new promise if long stacks\n        // are enabled to reduce memory usage\n        promise.source = newPromise;\n      }\n\n      array_reduce(messages, function (undefined, message) {\n        Q.nextTick(function () {\n          newPromise.promiseDispatch.apply(newPromise, message);\n        });\n      }, void 0);\n      messages = void 0;\n      progressListeners = void 0;\n    }\n\n    deferred.promise = promise;\n\n    deferred.resolve = function (value) {\n      if (resolvedPromise) {\n        return;\n      }\n\n      become(Q(value));\n    };\n\n    deferred.fulfill = function (value) {\n      if (resolvedPromise) {\n        return;\n      }\n\n      become(fulfill(value));\n    };\n\n    deferred.reject = function (reason) {\n      if (resolvedPromise) {\n        return;\n      }\n\n      become(reject(reason));\n    };\n\n    deferred.notify = function (progress) {\n      if (resolvedPromise) {\n        return;\n      }\n\n      array_reduce(progressListeners, function (undefined, progressListener) {\n        Q.nextTick(function () {\n          progressListener(progress);\n        });\n      }, void 0);\n    };\n\n    return deferred;\n  }\n  /**\r\n   * Creates a Node-style callback that will resolve or reject the deferred\r\n   * promise.\r\n   * @returns a nodeback\r\n   */\n\n\n  defer.prototype.makeNodeResolver = function () {\n    var self = this;\n    return function (error, value) {\n      if (error) {\n        self.reject(error);\n      } else if (arguments.length > 2) {\n        self.resolve(array_slice(arguments, 1));\n      } else {\n        self.resolve(value);\n      }\n    };\n  };\n  /**\r\n   * @param resolver {Function} a function that returns nothing and accepts\r\n   * the resolve, reject, and notify functions for a deferred.\r\n   * @returns a promise that may be resolved with the given resolve and reject\r\n   * functions, or rejected by a thrown exception in resolver\r\n   */\n\n\n  Q.Promise = promise; // ES6\n\n  Q.promise = promise;\n\n  function promise(resolver) {\n    if (typeof resolver !== \"function\") {\n      throw new TypeError(\"resolver must be a function.\");\n    }\n\n    var deferred = defer();\n\n    try {\n      resolver(deferred.resolve, deferred.reject, deferred.notify);\n    } catch (reason) {\n      deferred.reject(reason);\n    }\n\n    return deferred.promise;\n  }\n\n  promise.race = race; // ES6\n\n  promise.all = all; // ES6\n\n  promise.reject = reject; // ES6\n\n  promise.resolve = Q; // ES6\n  // XXX experimental.  This method is a way to denote that a local value is\n  // serializable and should be immediately dispatched to a remote upon request,\n  // instead of passing a reference.\n\n  Q.passByCopy = function (object) {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return object;\n  };\n\n  Promise.prototype.passByCopy = function () {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return this;\n  };\n  /**\r\n   * If two promises eventually fulfill to the same value, promises that value,\r\n   * but otherwise rejects.\r\n   * @param x {Any*}\r\n   * @param y {Any*}\r\n   * @returns {Any*} a promise for x and y if they are the same, but a rejection\r\n   * otherwise.\r\n   *\r\n   */\n\n\n  Q.join = function (x, y) {\n    return Q(x).join(y);\n  };\n\n  Promise.prototype.join = function (that) {\n    return Q([this, that]).spread(function (x, y) {\n      if (x === y) {\n        // TODO: \"===\" should be Object.is or equiv\n        return x;\n      } else {\n        throw new Error(\"Q can't join: not the same: \" + x + \" \" + y);\n      }\n    });\n  };\n  /**\r\n   * Returns a promise for the first of an array of promises to become settled.\r\n   * @param answers {Array[Any*]} promises to race\r\n   * @returns {Any*} the first promise to be settled\r\n   */\n\n\n  Q.race = race;\n\n  function race(answerPs) {\n    return promise(function (resolve, reject) {\n      // Switch to this once we can assume at least ES5\n      // answerPs.forEach(function (answerP) {\n      //     Q(answerP).then(resolve, reject);\n      // });\n      // Use this in the meantime\n      for (var i = 0, len = answerPs.length; i < len; i++) {\n        Q(answerPs[i]).then(resolve, reject);\n      }\n    });\n  }\n\n  Promise.prototype.race = function () {\n    return this.then(Q.race);\n  };\n  /**\r\n   * Constructs a Promise with a promise descriptor object and optional fallback\r\n   * function.  The descriptor contains methods like when(rejected), get(name),\r\n   * set(name, value), post(name, args), and delete(name), which all\r\n   * return either a value, a promise for a value, or a rejection.  The fallback\r\n   * accepts the operation name, a resolver, and any further arguments that would\r\n   * have been forwarded to the appropriate method above had a method been\r\n   * provided with the proper name.  The API makes no guarantees about the nature\r\n   * of the returned object, apart from that it is usable whereever promises are\r\n   * bought and sold.\r\n   */\n\n\n  Q.makePromise = Promise;\n\n  function Promise(descriptor, fallback, inspect) {\n    if (fallback === void 0) {\n      fallback = function (op) {\n        return reject(new Error(\"Promise does not support operation: \" + op));\n      };\n    }\n\n    if (inspect === void 0) {\n      inspect = function () {\n        return {\n          state: \"unknown\"\n        };\n      };\n    }\n\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, args) {\n      var result;\n\n      try {\n        if (descriptor[op]) {\n          result = descriptor[op].apply(promise, args);\n        } else {\n          result = fallback.call(promise, op, args);\n        }\n      } catch (exception) {\n        result = reject(exception);\n      }\n\n      if (resolve) {\n        resolve(result);\n      }\n    };\n\n    promise.inspect = inspect; // XXX deprecated `valueOf` and `exception` support\n\n    if (inspect) {\n      var inspected = inspect();\n\n      if (inspected.state === \"rejected\") {\n        promise.exception = inspected.reason;\n      }\n\n      promise.valueOf = function () {\n        var inspected = inspect();\n\n        if (inspected.state === \"pending\" || inspected.state === \"rejected\") {\n          return promise;\n        }\n\n        return inspected.value;\n      };\n    }\n\n    return promise;\n  }\n\n  Promise.prototype.toString = function () {\n    return \"[object Promise]\";\n  };\n\n  Promise.prototype.then = function (fulfilled, rejected, progressed) {\n    var self = this;\n    var deferred = defer();\n    var done = false; // ensure the untrusted promise makes at most a\n    // single call to one of the callbacks\n\n    function _fulfilled(value) {\n      try {\n        return typeof fulfilled === \"function\" ? fulfilled(value) : value;\n      } catch (exception) {\n        return reject(exception);\n      }\n    }\n\n    function _rejected(exception) {\n      if (typeof rejected === \"function\") {\n        makeStackTraceLong(exception, self);\n\n        try {\n          return rejected(exception);\n        } catch (newException) {\n          return reject(newException);\n        }\n      }\n\n      return reject(exception);\n    }\n\n    function _progressed(value) {\n      return typeof progressed === \"function\" ? progressed(value) : value;\n    }\n\n    Q.nextTick(function () {\n      self.promiseDispatch(function (value) {\n        if (done) {\n          return;\n        }\n\n        done = true;\n        deferred.resolve(_fulfilled(value));\n      }, \"when\", [function (exception) {\n        if (done) {\n          return;\n        }\n\n        done = true;\n        deferred.resolve(_rejected(exception));\n      }]);\n    }); // Progress propagator need to be attached in the current tick.\n\n    self.promiseDispatch(void 0, \"when\", [void 0, function (value) {\n      var newValue;\n      var threw = false;\n\n      try {\n        newValue = _progressed(value);\n      } catch (e) {\n        threw = true;\n\n        if (Q.onerror) {\n          Q.onerror(e);\n        } else {\n          throw e;\n        }\n      }\n\n      if (!threw) {\n        deferred.notify(newValue);\n      }\n    }]);\n    return deferred.promise;\n  };\n\n  Q.tap = function (promise, callback) {\n    return Q(promise).tap(callback);\n  };\n  /**\r\n   * Works almost like \"finally\", but not called for rejections.\r\n   * Original resolution value is passed through callback unaffected.\r\n   * Callback may return a promise that will be awaited for.\r\n   * @param {Function} callback\r\n   * @returns {Q.Promise}\r\n   * @example\r\n   * doSomething()\r\n   *   .then(...)\r\n   *   .tap(console.log)\r\n   *   .then(...);\r\n   */\n\n\n  Promise.prototype.tap = function (callback) {\n    callback = Q(callback);\n    return this.then(function (value) {\n      return callback.fcall(value).thenResolve(value);\n    });\n  };\n  /**\r\n   * Registers an observer on a promise.\r\n   *\r\n   * Guarantees:\r\n   *\r\n   * 1. that fulfilled and rejected will be called only once.\r\n   * 2. that either the fulfilled callback or the rejected callback will be\r\n   *    called, but not both.\r\n   * 3. that fulfilled and rejected will not be called in this turn.\r\n   *\r\n   * @param value      promise or immediate reference to observe\r\n   * @param fulfilled  function to be called with the fulfilled value\r\n   * @param rejected   function to be called with the rejection exception\r\n   * @param progressed function to be called on any progress notifications\r\n   * @return promise for the return value from the invoked callback\r\n   */\n\n\n  Q.when = when;\n\n  function when(value, fulfilled, rejected, progressed) {\n    return Q(value).then(fulfilled, rejected, progressed);\n  }\n\n  Promise.prototype.thenResolve = function (value) {\n    return this.then(function () {\n      return value;\n    });\n  };\n\n  Q.thenResolve = function (promise, value) {\n    return Q(promise).thenResolve(value);\n  };\n\n  Promise.prototype.thenReject = function (reason) {\n    return this.then(function () {\n      throw reason;\n    });\n  };\n\n  Q.thenReject = function (promise, reason) {\n    return Q(promise).thenReject(reason);\n  };\n  /**\r\n   * If an object is not a promise, it is as \"near\" as possible.\r\n   * If a promise is rejected, it is as \"near\" as possible too.\r\n   * If it’s a fulfilled promise, the fulfillment value is nearer.\r\n   * If it’s a deferred promise and the deferred has been resolved, the\r\n   * resolution is \"nearer\".\r\n   * @param object\r\n   * @returns most resolved (nearest) form of the object\r\n   */\n  // XXX should we re-do this?\n\n\n  Q.nearer = nearer;\n\n  function nearer(value) {\n    if (isPromise(value)) {\n      var inspected = value.inspect();\n\n      if (inspected.state === \"fulfilled\") {\n        return inspected.value;\n      }\n    }\n\n    return value;\n  }\n  /**\r\n   * @returns whether the given object is a promise.\r\n   * Otherwise it is a fulfilled value.\r\n   */\n\n\n  Q.isPromise = isPromise;\n\n  function isPromise(object) {\n    return object instanceof Promise;\n  }\n\n  Q.isPromiseAlike = isPromiseAlike;\n\n  function isPromiseAlike(object) {\n    return isObject(object) && typeof object.then === \"function\";\n  }\n  /**\r\n   * @returns whether the given object is a pending promise, meaning not\r\n   * fulfilled or rejected.\r\n   */\n\n\n  Q.isPending = isPending;\n\n  function isPending(object) {\n    return isPromise(object) && object.inspect().state === \"pending\";\n  }\n\n  Promise.prototype.isPending = function () {\n    return this.inspect().state === \"pending\";\n  };\n  /**\r\n   * @returns whether the given object is a value or fulfilled\r\n   * promise.\r\n   */\n\n\n  Q.isFulfilled = isFulfilled;\n\n  function isFulfilled(object) {\n    return !isPromise(object) || object.inspect().state === \"fulfilled\";\n  }\n\n  Promise.prototype.isFulfilled = function () {\n    return this.inspect().state === \"fulfilled\";\n  };\n  /**\r\n   * @returns whether the given object is a rejected promise.\r\n   */\n\n\n  Q.isRejected = isRejected;\n\n  function isRejected(object) {\n    return isPromise(object) && object.inspect().state === \"rejected\";\n  }\n\n  Promise.prototype.isRejected = function () {\n    return this.inspect().state === \"rejected\";\n  }; //// BEGIN UNHANDLED REJECTION TRACKING\n  // This promise library consumes exceptions thrown in handlers so they can be\n  // handled by a subsequent promise.  The exceptions get added to this array when\n  // they are created, and removed when they are handled.  Note that in ES6 or\n  // shimmed environments, this would naturally be a `Set`.\n\n\n  var unhandledReasons = [];\n  var unhandledRejections = [];\n  var reportedUnhandledRejections = [];\n  var trackUnhandledRejections = true;\n\n  function resetUnhandledRejections() {\n    unhandledReasons.length = 0;\n    unhandledRejections.length = 0;\n\n    if (!trackUnhandledRejections) {\n      trackUnhandledRejections = true;\n    }\n  }\n\n  function trackRejection(promise, reason) {\n    if (!trackUnhandledRejections) {\n      return;\n    }\n\n    if (typeof process === \"object\" && typeof process.emit === \"function\") {\n      Q.nextTick.runAfter(function () {\n        if (array_indexOf(unhandledRejections, promise) !== -1) {\n          process.emit(\"unhandledRejection\", reason, promise);\n          reportedUnhandledRejections.push(promise);\n        }\n      });\n    }\n\n    unhandledRejections.push(promise);\n\n    if (reason && typeof reason.stack !== \"undefined\") {\n      unhandledReasons.push(reason.stack);\n    } else {\n      unhandledReasons.push(\"(no stack) \" + reason);\n    }\n  }\n\n  function untrackRejection(promise) {\n    if (!trackUnhandledRejections) {\n      return;\n    }\n\n    var at = array_indexOf(unhandledRejections, promise);\n\n    if (at !== -1) {\n      if (typeof process === \"object\" && typeof process.emit === \"function\") {\n        Q.nextTick.runAfter(function () {\n          var atReport = array_indexOf(reportedUnhandledRejections, promise);\n\n          if (atReport !== -1) {\n            process.emit(\"rejectionHandled\", unhandledReasons[at], promise);\n            reportedUnhandledRejections.splice(atReport, 1);\n          }\n        });\n      }\n\n      unhandledRejections.splice(at, 1);\n      unhandledReasons.splice(at, 1);\n    }\n  }\n\n  Q.resetUnhandledRejections = resetUnhandledRejections;\n\n  Q.getUnhandledReasons = function () {\n    // Make a copy so that consumers can't interfere with our internal state.\n    return unhandledReasons.slice();\n  };\n\n  Q.stopUnhandledRejectionTracking = function () {\n    resetUnhandledRejections();\n    trackUnhandledRejections = false;\n  };\n\n  resetUnhandledRejections(); //// END UNHANDLED REJECTION TRACKING\n\n  /**\r\n   * Constructs a rejected promise.\r\n   * @param reason value describing the failure\r\n   */\n\n  Q.reject = reject;\n\n  function reject(reason) {\n    var rejection = Promise({\n      \"when\": function (rejected) {\n        // note that the error has been handled\n        if (rejected) {\n          untrackRejection(this);\n        }\n\n        return rejected ? rejected(reason) : this;\n      }\n    }, function fallback() {\n      return this;\n    }, function inspect() {\n      return {\n        state: \"rejected\",\n        reason: reason\n      };\n    }); // Note that the reason has not been handled.\n\n    trackRejection(rejection, reason);\n    return rejection;\n  }\n  /**\r\n   * Constructs a fulfilled promise for an immediate reference.\r\n   * @param value immediate reference\r\n   */\n\n\n  Q.fulfill = fulfill;\n\n  function fulfill(value) {\n    return Promise({\n      \"when\": function () {\n        return value;\n      },\n      \"get\": function (name) {\n        return value[name];\n      },\n      \"set\": function (name, rhs) {\n        value[name] = rhs;\n      },\n      \"delete\": function (name) {\n        delete value[name];\n      },\n      \"post\": function (name, args) {\n        // Mark Miller proposes that post with no name should apply a\n        // promised function.\n        if (name === null || name === void 0) {\n          return value.apply(void 0, args);\n        } else {\n          return value[name].apply(value, args);\n        }\n      },\n      \"apply\": function (thisp, args) {\n        return value.apply(thisp, args);\n      },\n      \"keys\": function () {\n        return object_keys(value);\n      }\n    }, void 0, function inspect() {\n      return {\n        state: \"fulfilled\",\n        value: value\n      };\n    });\n  }\n  /**\r\n   * Converts thenables to Q promises.\r\n   * @param promise thenable promise\r\n   * @returns a Q promise\r\n   */\n\n\n  function coerce(promise) {\n    var deferred = defer();\n    Q.nextTick(function () {\n      try {\n        promise.then(deferred.resolve, deferred.reject, deferred.notify);\n      } catch (exception) {\n        deferred.reject(exception);\n      }\n    });\n    return deferred.promise;\n  }\n  /**\r\n   * Annotates an object such that it will never be\r\n   * transferred away from this process over any promise\r\n   * communication channel.\r\n   * @param object\r\n   * @returns promise a wrapping of that object that\r\n   * additionally responds to the \"isDef\" message\r\n   * without a rejection.\r\n   */\n\n\n  Q.master = master;\n\n  function master(object) {\n    return Promise({\n      \"isDef\": function () {}\n    }, function fallback(op, args) {\n      return dispatch(object, op, args);\n    }, function () {\n      return Q(object).inspect();\n    });\n  }\n  /**\r\n   * Spreads the values of a promised array of arguments into the\r\n   * fulfillment callback.\r\n   * @param fulfilled callback that receives variadic arguments from the\r\n   * promised array\r\n   * @param rejected callback that receives the exception if the promise\r\n   * is rejected.\r\n   * @returns a promise for the return value or thrown exception of\r\n   * either callback.\r\n   */\n\n\n  Q.spread = spread;\n\n  function spread(value, fulfilled, rejected) {\n    return Q(value).spread(fulfilled, rejected);\n  }\n\n  Promise.prototype.spread = function (fulfilled, rejected) {\n    return this.all().then(function (array) {\n      return fulfilled.apply(void 0, array);\n    }, rejected);\n  };\n  /**\r\n   * The async function is a decorator for generator functions, turning\r\n   * them into asynchronous generators.  Although generators are only part\r\n   * of the newest ECMAScript 6 drafts, this code does not cause syntax\r\n   * errors in older engines.  This code should continue to work and will\r\n   * in fact improve over time as the language improves.\r\n   *\r\n   * ES6 generators are currently part of V8 version 3.19 with the\r\n   * --harmony-generators runtime flag enabled.  SpiderMonkey has had them\r\n   * for longer, but under an older Python-inspired form.  This function\r\n   * works on both kinds of generators.\r\n   *\r\n   * Decorates a generator function such that:\r\n   *  - it may yield promises\r\n   *  - execution will continue when that promise is fulfilled\r\n   *  - the value of the yield expression will be the fulfilled value\r\n   *  - it returns a promise for the return value (when the generator\r\n   *    stops iterating)\r\n   *  - the decorated function returns a promise for the return value\r\n   *    of the generator or the first rejected promise among those\r\n   *    yielded.\r\n   *  - if an error is thrown in the generator, it propagates through\r\n   *    every following yield until it is caught, or until it escapes\r\n   *    the generator function altogether, and is translated into a\r\n   *    rejection for the promise returned by the decorated generator.\r\n   */\n\n\n  Q.async = async;\n\n  function async(makeGenerator) {\n    return function () {\n      // when verb is \"send\", arg is a value\n      // when verb is \"throw\", arg is an exception\n      function continuer(verb, arg) {\n        var result; // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only\n        // engine that has a deployed base of browsers that support generators.\n        // However, SM's generators use the Python-inspired semantics of\n        // outdated ES6 drafts.  We would like to support ES6, but we'd also\n        // like to make it possible to use generators in deployed browsers, so\n        // we also support Python-style generators.  At some point we can remove\n        // this block.\n\n        if (typeof StopIteration === \"undefined\") {\n          // ES6 Generators\n          try {\n            result = generator[verb](arg);\n          } catch (exception) {\n            return reject(exception);\n          }\n\n          if (result.done) {\n            return Q(result.value);\n          } else {\n            return when(result.value, callback, errback);\n          }\n        } else {\n          // SpiderMonkey Generators\n          // FIXME: Remove this case when SM does ES6 generators.\n          try {\n            result = generator[verb](arg);\n          } catch (exception) {\n            if (isStopIteration(exception)) {\n              return Q(exception.value);\n            } else {\n              return reject(exception);\n            }\n          }\n\n          return when(result, callback, errback);\n        }\n      }\n\n      var generator = makeGenerator.apply(this, arguments);\n      var callback = continuer.bind(continuer, \"next\");\n      var errback = continuer.bind(continuer, \"throw\");\n      return callback();\n    };\n  }\n  /**\r\n   * The spawn function is a small wrapper around async that immediately\r\n   * calls the generator and also ends the promise chain, so that any\r\n   * unhandled errors are thrown instead of forwarded to the error\r\n   * handler. This is useful because it's extremely common to run\r\n   * generators at the top-level to work with libraries.\r\n   */\n\n\n  Q.spawn = spawn;\n\n  function spawn(makeGenerator) {\n    Q.done(Q.async(makeGenerator)());\n  } // FIXME: Remove this interface once ES6 generators are in SpiderMonkey.\n\n  /**\r\n   * Throws a ReturnValue exception to stop an asynchronous generator.\r\n   *\r\n   * This interface is a stop-gap measure to support generator return\r\n   * values in older Firefox/SpiderMonkey.  In browsers that support ES6\r\n   * generators like Chromium 29, just use \"return\" in your generator\r\n   * functions.\r\n   *\r\n   * @param value the return value for the surrounding generator\r\n   * @throws ReturnValue exception with the value.\r\n   * @example\r\n   * // ES6 style\r\n   * Q.async(function* () {\r\n   *      var foo = yield getFooPromise();\r\n   *      var bar = yield getBarPromise();\r\n   *      return foo + bar;\r\n   * })\r\n   * // Older SpiderMonkey style\r\n   * Q.async(function () {\r\n   *      var foo = yield getFooPromise();\r\n   *      var bar = yield getBarPromise();\r\n   *      Q.return(foo + bar);\r\n   * })\r\n   */\n\n\n  Q[\"return\"] = _return;\n\n  function _return(value) {\n    throw new QReturnValue(value);\n  }\n  /**\r\n   * The promised function decorator ensures that any promise arguments\r\n   * are settled and passed as values (`this` is also settled and passed\r\n   * as a value).  It will also ensure that the result of a function is\r\n   * always a promise.\r\n   *\r\n   * @example\r\n   * var add = Q.promised(function (a, b) {\r\n   *     return a + b;\r\n   * });\r\n   * add(Q(a), Q(B));\r\n   *\r\n   * @param {function} callback The function to decorate\r\n   * @returns {function} a function that has been decorated.\r\n   */\n\n\n  Q.promised = promised;\n\n  function promised(callback) {\n    return function () {\n      return spread([this, all(arguments)], function (self, args) {\n        return callback.apply(self, args);\n      });\n    };\n  }\n  /**\r\n   * sends a message to a value in a future turn\r\n   * @param object* the recipient\r\n   * @param op the name of the message operation, e.g., \"when\",\r\n   * @param args further arguments to be forwarded to the operation\r\n   * @returns result {Promise} a promise for the result of the operation\r\n   */\n\n\n  Q.dispatch = dispatch;\n\n  function dispatch(object, op, args) {\n    return Q(object).dispatch(op, args);\n  }\n\n  Promise.prototype.dispatch = function (op, args) {\n    var self = this;\n    var deferred = defer();\n    Q.nextTick(function () {\n      self.promiseDispatch(deferred.resolve, op, args);\n    });\n    return deferred.promise;\n  };\n  /**\r\n   * Gets the value of a property in a future turn.\r\n   * @param object    promise or immediate reference for target object\r\n   * @param name      name of property to get\r\n   * @return promise for the property value\r\n   */\n\n\n  Q.get = function (object, key) {\n    return Q(object).dispatch(\"get\", [key]);\n  };\n\n  Promise.prototype.get = function (key) {\n    return this.dispatch(\"get\", [key]);\n  };\n  /**\r\n   * Sets the value of a property in a future turn.\r\n   * @param object    promise or immediate reference for object object\r\n   * @param name      name of property to set\r\n   * @param value     new value of property\r\n   * @return promise for the return value\r\n   */\n\n\n  Q.set = function (object, key, value) {\n    return Q(object).dispatch(\"set\", [key, value]);\n  };\n\n  Promise.prototype.set = function (key, value) {\n    return this.dispatch(\"set\", [key, value]);\n  };\n  /**\r\n   * Deletes a property in a future turn.\r\n   * @param object    promise or immediate reference for target object\r\n   * @param name      name of property to delete\r\n   * @return promise for the return value\r\n   */\n\n\n  Q.del = // XXX legacy\n  Q[\"delete\"] = function (object, key) {\n    return Q(object).dispatch(\"delete\", [key]);\n  };\n\n  Promise.prototype.del = // XXX legacy\n  Promise.prototype[\"delete\"] = function (key) {\n    return this.dispatch(\"delete\", [key]);\n  };\n  /**\r\n   * Invokes a method in a future turn.\r\n   * @param object    promise or immediate reference for target object\r\n   * @param name      name of method to invoke\r\n   * @param value     a value to post, typically an array of\r\n   *                  invocation arguments for promises that\r\n   *                  are ultimately backed with `resolve` values,\r\n   *                  as opposed to those backed with URLs\r\n   *                  wherein the posted value can be any\r\n   *                  JSON serializable object.\r\n   * @return promise for the return value\r\n   */\n  // bound locally because it is used by other methods\n\n\n  Q.mapply = // XXX As proposed by \"Redsandro\"\n  Q.post = function (object, name, args) {\n    return Q(object).dispatch(\"post\", [name, args]);\n  };\n\n  Promise.prototype.mapply = // XXX As proposed by \"Redsandro\"\n  Promise.prototype.post = function (name, args) {\n    return this.dispatch(\"post\", [name, args]);\n  };\n  /**\r\n   * Invokes a method in a future turn.\r\n   * @param object    promise or immediate reference for target object\r\n   * @param name      name of method to invoke\r\n   * @param ...args   array of invocation arguments\r\n   * @return promise for the return value\r\n   */\n\n\n  Q.send = // XXX Mark Miller's proposed parlance\n  Q.mcall = // XXX As proposed by \"Redsandro\"\n  Q.invoke = function (object, name\n  /*...args*/\n  ) {\n    return Q(object).dispatch(\"post\", [name, array_slice(arguments, 2)]);\n  };\n\n  Promise.prototype.send = // XXX Mark Miller's proposed parlance\n  Promise.prototype.mcall = // XXX As proposed by \"Redsandro\"\n  Promise.prototype.invoke = function (name\n  /*...args*/\n  ) {\n    return this.dispatch(\"post\", [name, array_slice(arguments, 1)]);\n  };\n  /**\r\n   * Applies the promised function in a future turn.\r\n   * @param object    promise or immediate reference for target function\r\n   * @param args      array of application arguments\r\n   */\n\n\n  Q.fapply = function (object, args) {\n    return Q(object).dispatch(\"apply\", [void 0, args]);\n  };\n\n  Promise.prototype.fapply = function (args) {\n    return this.dispatch(\"apply\", [void 0, args]);\n  };\n  /**\r\n   * Calls the promised function in a future turn.\r\n   * @param object    promise or immediate reference for target function\r\n   * @param ...args   array of application arguments\r\n   */\n\n\n  Q[\"try\"] = Q.fcall = function (object\n  /* ...args*/\n  ) {\n    return Q(object).dispatch(\"apply\", [void 0, array_slice(arguments, 1)]);\n  };\n\n  Promise.prototype.fcall = function ()\n  /*...args*/\n  {\n    return this.dispatch(\"apply\", [void 0, array_slice(arguments)]);\n  };\n  /**\r\n   * Binds the promised function, transforming return values into a fulfilled\r\n   * promise and thrown errors into a rejected one.\r\n   * @param object    promise or immediate reference for target function\r\n   * @param ...args   array of application arguments\r\n   */\n\n\n  Q.fbind = function (object\n  /*...args*/\n  ) {\n    var promise = Q(object);\n    var args = array_slice(arguments, 1);\n    return function fbound() {\n      return promise.dispatch(\"apply\", [this, args.concat(array_slice(arguments))]);\n    };\n  };\n\n  Promise.prototype.fbind = function ()\n  /*...args*/\n  {\n    var promise = this;\n    var args = array_slice(arguments);\n    return function fbound() {\n      return promise.dispatch(\"apply\", [this, args.concat(array_slice(arguments))]);\n    };\n  };\n  /**\r\n   * Requests the names of the owned properties of a promised\r\n   * object in a future turn.\r\n   * @param object    promise or immediate reference for target object\r\n   * @return promise for the keys of the eventually settled object\r\n   */\n\n\n  Q.keys = function (object) {\n    return Q(object).dispatch(\"keys\", []);\n  };\n\n  Promise.prototype.keys = function () {\n    return this.dispatch(\"keys\", []);\n  };\n  /**\r\n   * Turns an array of promises into a promise for an array.  If any of\r\n   * the promises gets rejected, the whole array is rejected immediately.\r\n   * @param {Array*} an array (or promise for an array) of values (or\r\n   * promises for values)\r\n   * @returns a promise for an array of the corresponding values\r\n   */\n  // By Mark Miller\n  // http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled\n\n\n  Q.all = all;\n\n  function all(promises) {\n    return when(promises, function (promises) {\n      var pendingCount = 0;\n      var deferred = defer();\n      array_reduce(promises, function (undefined, promise, index) {\n        var snapshot;\n\n        if (isPromise(promise) && (snapshot = promise.inspect()).state === \"fulfilled\") {\n          promises[index] = snapshot.value;\n        } else {\n          ++pendingCount;\n          when(promise, function (value) {\n            promises[index] = value;\n\n            if (--pendingCount === 0) {\n              deferred.resolve(promises);\n            }\n          }, deferred.reject, function (progress) {\n            deferred.notify({\n              index: index,\n              value: progress\n            });\n          });\n        }\n      }, void 0);\n\n      if (pendingCount === 0) {\n        deferred.resolve(promises);\n      }\n\n      return deferred.promise;\n    });\n  }\n\n  Promise.prototype.all = function () {\n    return all(this);\n  };\n  /**\r\n   * Returns the first resolved promise of an array. Prior rejected promises are\r\n   * ignored.  Rejects only if all promises are rejected.\r\n   * @param {Array*} an array containing values or promises for values\r\n   * @returns a promise fulfilled with the value of the first resolved promise,\r\n   * or a rejected promise if all promises are rejected.\r\n   */\n\n\n  Q.any = any;\n\n  function any(promises) {\n    if (promises.length === 0) {\n      return Q.resolve();\n    }\n\n    var deferred = Q.defer();\n    var pendingCount = 0;\n    array_reduce(promises, function (prev, current, index) {\n      var promise = promises[index];\n      pendingCount++;\n      when(promise, onFulfilled, onRejected, onProgress);\n\n      function onFulfilled(result) {\n        deferred.resolve(result);\n      }\n\n      function onRejected(err) {\n        pendingCount--;\n\n        if (pendingCount === 0) {\n          var rejection = err || new Error(\"\" + err);\n          rejection.message = \"Q can't get fulfillment value from any promise, all \" + \"promises were rejected. Last error message: \" + rejection.message;\n          deferred.reject(rejection);\n        }\n      }\n\n      function onProgress(progress) {\n        deferred.notify({\n          index: index,\n          value: progress\n        });\n      }\n    }, undefined);\n    return deferred.promise;\n  }\n\n  Promise.prototype.any = function () {\n    return any(this);\n  };\n  /**\r\n   * Waits for all promises to be settled, either fulfilled or\r\n   * rejected.  This is distinct from `all` since that would stop\r\n   * waiting at the first rejection.  The promise returned by\r\n   * `allResolved` will never be rejected.\r\n   * @param promises a promise for an array (or an array) of promises\r\n   * (or values)\r\n   * @return a promise for an array of promises\r\n   */\n\n\n  Q.allResolved = deprecate(allResolved, \"allResolved\", \"allSettled\");\n\n  function allResolved(promises) {\n    return when(promises, function (promises) {\n      promises = array_map(promises, Q);\n      return when(all(array_map(promises, function (promise) {\n        return when(promise, noop, noop);\n      })), function () {\n        return promises;\n      });\n    });\n  }\n\n  Promise.prototype.allResolved = function () {\n    return allResolved(this);\n  };\n  /**\r\n   * @see Promise#allSettled\r\n   */\n\n\n  Q.allSettled = allSettled;\n\n  function allSettled(promises) {\n    return Q(promises).allSettled();\n  }\n  /**\r\n   * Turns an array of promises into a promise for an array of their states (as\r\n   * returned by `inspect`) when they have all settled.\r\n   * @param {Array[Any*]} values an array (or promise for an array) of values (or\r\n   * promises for values)\r\n   * @returns {Array[State]} an array of states for the respective values.\r\n   */\n\n\n  Promise.prototype.allSettled = function () {\n    return this.then(function (promises) {\n      return all(array_map(promises, function (promise) {\n        promise = Q(promise);\n\n        function regardless() {\n          return promise.inspect();\n        }\n\n        return promise.then(regardless, regardless);\n      }));\n    });\n  };\n  /**\r\n   * Captures the failure of a promise, giving an oportunity to recover\r\n   * with a callback.  If the given promise is fulfilled, the returned\r\n   * promise is fulfilled.\r\n   * @param {Any*} promise for something\r\n   * @param {Function} callback to fulfill the returned promise if the\r\n   * given promise is rejected\r\n   * @returns a promise for the return value of the callback\r\n   */\n\n\n  Q.fail = // XXX legacy\n  Q[\"catch\"] = function (object, rejected) {\n    return Q(object).then(void 0, rejected);\n  };\n\n  Promise.prototype.fail = // XXX legacy\n  Promise.prototype[\"catch\"] = function (rejected) {\n    return this.then(void 0, rejected);\n  };\n  /**\r\n   * Attaches a listener that can respond to progress notifications from a\r\n   * promise's originating deferred. This listener receives the exact arguments\r\n   * passed to ``deferred.notify``.\r\n   * @param {Any*} promise for something\r\n   * @param {Function} callback to receive any progress notifications\r\n   * @returns the given promise, unchanged\r\n   */\n\n\n  Q.progress = progress;\n\n  function progress(object, progressed) {\n    return Q(object).then(void 0, void 0, progressed);\n  }\n\n  Promise.prototype.progress = function (progressed) {\n    return this.then(void 0, void 0, progressed);\n  };\n  /**\r\n   * Provides an opportunity to observe the settling of a promise,\r\n   * regardless of whether the promise is fulfilled or rejected.  Forwards\r\n   * the resolution to the returned promise when the callback is done.\r\n   * The callback can return a promise to defer completion.\r\n   * @param {Any*} promise\r\n   * @param {Function} callback to observe the resolution of the given\r\n   * promise, takes no arguments.\r\n   * @returns a promise for the resolution of the given promise when\r\n   * ``fin`` is done.\r\n   */\n\n\n  Q.fin = // XXX legacy\n  Q[\"finally\"] = function (object, callback) {\n    return Q(object)[\"finally\"](callback);\n  };\n\n  Promise.prototype.fin = // XXX legacy\n  Promise.prototype[\"finally\"] = function (callback) {\n    if (!callback || typeof callback.apply !== \"function\") {\n      throw new Error(\"Q can't apply finally callback\");\n    }\n\n    callback = Q(callback);\n    return this.then(function (value) {\n      return callback.fcall().then(function () {\n        return value;\n      });\n    }, function (reason) {\n      // TODO attempt to recycle the rejection with \"this\".\n      return callback.fcall().then(function () {\n        throw reason;\n      });\n    });\n  };\n  /**\r\n   * Terminates a chain of promises, forcing rejections to be\r\n   * thrown as exceptions.\r\n   * @param {Any*} promise at the end of a chain of promises\r\n   * @returns nothing\r\n   */\n\n\n  Q.done = function (object, fulfilled, rejected, progress) {\n    return Q(object).done(fulfilled, rejected, progress);\n  };\n\n  Promise.prototype.done = function (fulfilled, rejected, progress) {\n    var onUnhandledError = function (error) {\n      // forward to a future turn so that ``when``\n      // does not catch it and turn it into a rejection.\n      Q.nextTick(function () {\n        makeStackTraceLong(error, promise);\n\n        if (Q.onerror) {\n          Q.onerror(error);\n        } else {\n          throw error;\n        }\n      });\n    }; // Avoid unnecessary `nextTick`ing via an unnecessary `when`.\n\n\n    var promise = fulfilled || rejected || progress ? this.then(fulfilled, rejected, progress) : this;\n\n    if (typeof process === \"object\" && process && process.domain) {\n      onUnhandledError = process.domain.bind(onUnhandledError);\n    }\n\n    promise.then(void 0, onUnhandledError);\n  };\n  /**\r\n   * Causes a promise to be rejected if it does not get fulfilled before\r\n   * some milliseconds time out.\r\n   * @param {Any*} promise\r\n   * @param {Number} milliseconds timeout\r\n   * @param {Any*} custom error message or Error object (optional)\r\n   * @returns a promise for the resolution of the given promise if it is\r\n   * fulfilled before the timeout, otherwise rejected.\r\n   */\n\n\n  Q.timeout = function (object, ms, error) {\n    return Q(object).timeout(ms, error);\n  };\n\n  Promise.prototype.timeout = function (ms, error) {\n    var deferred = defer();\n    var timeoutId = setTimeout(function () {\n      if (!error || \"string\" === typeof error) {\n        error = new Error(error || \"Timed out after \" + ms + \" ms\");\n        error.code = \"ETIMEDOUT\";\n      }\n\n      deferred.reject(error);\n    }, ms);\n    this.then(function (value) {\n      clearTimeout(timeoutId);\n      deferred.resolve(value);\n    }, function (exception) {\n      clearTimeout(timeoutId);\n      deferred.reject(exception);\n    }, deferred.notify);\n    return deferred.promise;\n  };\n  /**\r\n   * Returns a promise for the given value (or promised value), some\r\n   * milliseconds after it resolved. Passes rejections immediately.\r\n   * @param {Any*} promise\r\n   * @param {Number} milliseconds\r\n   * @returns a promise for the resolution of the given promise after milliseconds\r\n   * time has elapsed since the resolution of the given promise.\r\n   * If the given promise rejects, that is passed immediately.\r\n   */\n\n\n  Q.delay = function (object, timeout) {\n    if (timeout === void 0) {\n      timeout = object;\n      object = void 0;\n    }\n\n    return Q(object).delay(timeout);\n  };\n\n  Promise.prototype.delay = function (timeout) {\n    return this.then(function (value) {\n      var deferred = defer();\n      setTimeout(function () {\n        deferred.resolve(value);\n      }, timeout);\n      return deferred.promise;\n    });\n  };\n  /**\r\n   * Passes a continuation to a Node function, which is called with the given\r\n   * arguments provided as an array, and returns a promise.\r\n   *\r\n   *      Q.nfapply(FS.readFile, [__filename])\r\n   *      .then(function (content) {\r\n   *      })\r\n   *\r\n   */\n\n\n  Q.nfapply = function (callback, args) {\n    return Q(callback).nfapply(args);\n  };\n\n  Promise.prototype.nfapply = function (args) {\n    var deferred = defer();\n    var nodeArgs = array_slice(args);\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n  };\n  /**\r\n   * Passes a continuation to a Node function, which is called with the given\r\n   * arguments provided individually, and returns a promise.\r\n   * @example\r\n   * Q.nfcall(FS.readFile, __filename)\r\n   * .then(function (content) {\r\n   * })\r\n   *\r\n   */\n\n\n  Q.nfcall = function (callback\n  /*...args*/\n  ) {\n    var args = array_slice(arguments, 1);\n    return Q(callback).nfapply(args);\n  };\n\n  Promise.prototype.nfcall = function ()\n  /*...args*/\n  {\n    var nodeArgs = array_slice(arguments);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n  };\n  /**\r\n   * Wraps a NodeJS continuation passing function and returns an equivalent\r\n   * version that returns a promise.\r\n   * @example\r\n   * Q.nfbind(FS.readFile, __filename)(\"utf-8\")\r\n   * .then(console.log)\r\n   * .done()\r\n   */\n\n\n  Q.nfbind = Q.denodeify = function (callback\n  /*...args*/\n  ) {\n    if (callback === undefined) {\n      throw new Error(\"Q can't wrap an undefined function\");\n    }\n\n    var baseArgs = array_slice(arguments, 1);\n    return function () {\n      var nodeArgs = baseArgs.concat(array_slice(arguments));\n      var deferred = defer();\n      nodeArgs.push(deferred.makeNodeResolver());\n      Q(callback).fapply(nodeArgs).fail(deferred.reject);\n      return deferred.promise;\n    };\n  };\n\n  Promise.prototype.nfbind = Promise.prototype.denodeify = function ()\n  /*...args*/\n  {\n    var args = array_slice(arguments);\n    args.unshift(this);\n    return Q.denodeify.apply(void 0, args);\n  };\n\n  Q.nbind = function (callback, thisp\n  /*...args*/\n  ) {\n    var baseArgs = array_slice(arguments, 2);\n    return function () {\n      var nodeArgs = baseArgs.concat(array_slice(arguments));\n      var deferred = defer();\n      nodeArgs.push(deferred.makeNodeResolver());\n\n      function bound() {\n        return callback.apply(thisp, arguments);\n      }\n\n      Q(bound).fapply(nodeArgs).fail(deferred.reject);\n      return deferred.promise;\n    };\n  };\n\n  Promise.prototype.nbind = function ()\n  /*thisp, ...args*/\n  {\n    var args = array_slice(arguments, 0);\n    args.unshift(this);\n    return Q.nbind.apply(void 0, args);\n  };\n  /**\r\n   * Calls a method of a Node-style object that accepts a Node-style\r\n   * callback with a given array of arguments, plus a provided callback.\r\n   * @param object an object that has the named method\r\n   * @param {String} name name of the method of object\r\n   * @param {Array} args arguments to pass to the method; the callback\r\n   * will be provided by Q and appended to these arguments.\r\n   * @returns a promise for the value or error\r\n   */\n\n\n  Q.nmapply = // XXX As proposed by \"Redsandro\"\n  Q.npost = function (object, name, args) {\n    return Q(object).npost(name, args);\n  };\n\n  Promise.prototype.nmapply = // XXX As proposed by \"Redsandro\"\n  Promise.prototype.npost = function (name, args) {\n    var nodeArgs = array_slice(args || []);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n  };\n  /**\r\n   * Calls a method of a Node-style object that accepts a Node-style\r\n   * callback, forwarding the given variadic arguments, plus a provided\r\n   * callback argument.\r\n   * @param object an object that has the named method\r\n   * @param {String} name name of the method of object\r\n   * @param ...args arguments to pass to the method; the callback will\r\n   * be provided by Q and appended to these arguments.\r\n   * @returns a promise for the value or error\r\n   */\n\n\n  Q.nsend = // XXX Based on Mark Miller's proposed \"send\"\n  Q.nmcall = // XXX Based on \"Redsandro's\" proposal\n  Q.ninvoke = function (object, name\n  /*...args*/\n  ) {\n    var nodeArgs = array_slice(arguments, 2);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    Q(object).dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n  };\n\n  Promise.prototype.nsend = // XXX Based on Mark Miller's proposed \"send\"\n  Promise.prototype.nmcall = // XXX Based on \"Redsandro's\" proposal\n  Promise.prototype.ninvoke = function (name\n  /*...args*/\n  ) {\n    var nodeArgs = array_slice(arguments, 1);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n  };\n  /**\r\n   * If a function would like to support both Node continuation-passing-style and\r\n   * promise-returning-style, it can end its internal promise chain with\r\n   * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user\r\n   * elects to use a nodeback, the result will be sent there.  If they do not\r\n   * pass a nodeback, they will receive the result promise.\r\n   * @param object a result (or a promise for a result)\r\n   * @param {Function} nodeback a Node.js-style callback\r\n   * @returns either the promise or nothing\r\n   */\n\n\n  Q.nodeify = nodeify;\n\n  function nodeify(object, nodeback) {\n    return Q(object).nodeify(nodeback);\n  }\n\n  Promise.prototype.nodeify = function (nodeback) {\n    if (nodeback) {\n      this.then(function (value) {\n        Q.nextTick(function () {\n          nodeback(null, value);\n        });\n      }, function (error) {\n        Q.nextTick(function () {\n          nodeback(error);\n        });\n      });\n    } else {\n      return this;\n    }\n  };\n\n  Q.noConflict = function () {\n    throw new Error(\"Q.noConflict only works when Q is used as a global\");\n  }; // All code before this point will be filtered from stack traces.\n\n\n  var qEndingLine = captureLine();\n  return Q;\n});","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Frontend/node_modules/q/q.js"],"names":["definition","bootstrap","exports","module","define","amd","ses","ok","makeQ","window","self","global","previousQ","Q","noConflict","Error","hasStacks","e","stack","qStartingLine","captureLine","qFileName","noop","nextTick","head","task","next","tail","flushing","requestTick","isNodeJS","laterQueue","flush","domain","enter","runSingle","length","pop","exit","setTimeout","process","toString","setImmediate","bind","MessageChannel","channel","port1","onmessage","requestPortTick","port2","postMessage","runAfter","push","call","Function","uncurryThis","f","apply","arguments","array_slice","Array","prototype","slice","array_reduce","reduce","callback","basis","index","TypeError","array_indexOf","indexOf","value","i","array_map","map","thisp","collect","undefined","object_create","Object","create","Type","object_defineProperty","defineProperty","obj","prop","descriptor","object_hasOwnProperty","hasOwnProperty","object_keys","keys","object","key","object_toString","isObject","isStopIteration","exception","QReturnValue","ReturnValue","STACK_JUMP_SEPARATOR","makeStackTraceLong","error","promise","stacks","p","source","__minimumStackCounter__","stackCounter","configurable","unshift","concatedStacks","join","filterStackString","stackString","lines","split","desiredLines","line","isInternalFrame","isNodeFrame","stackLine","getFileNameAndLineNumber","attempt1","exec","Number","attempt2","attempt3","fileNameAndLineNumber","fileName","lineNumber","qEndingLine","firstLine","deprecate","name","alternative","console","warn","Promise","isPromiseAlike","coerce","fulfill","resolve","longStackSupport","longStackCounter","env","Q_DEBUG","defer","messages","progressListeners","resolvedPromise","deferred","promiseDispatch","op","operands","args","valueOf","nearerValue","nearer","isPromise","inspect","state","substring","become","newPromise","message","reject","reason","notify","progress","progressListener","makeNodeResolver","resolver","race","all","passByCopy","x","y","that","spread","answerPs","len","then","makePromise","fallback","result","inspected","fulfilled","rejected","progressed","done","_fulfilled","_rejected","newException","_progressed","newValue","threw","onerror","tap","fcall","thenResolve","when","thenReject","isPending","isFulfilled","isRejected","unhandledReasons","unhandledRejections","reportedUnhandledRejections","trackUnhandledRejections","resetUnhandledRejections","trackRejection","emit","untrackRejection","at","atReport","splice","getUnhandledReasons","stopUnhandledRejectionTracking","rejection","rhs","master","dispatch","array","async","makeGenerator","continuer","verb","arg","StopIteration","generator","errback","spawn","_return","promised","get","set","del","mapply","post","send","mcall","invoke","fapply","fbind","fbound","concat","promises","pendingCount","snapshot","any","prev","current","onFulfilled","onRejected","onProgress","err","allResolved","allSettled","regardless","fail","fin","onUnhandledError","timeout","ms","timeoutId","code","clearTimeout","delay","nfapply","nodeArgs","nfcall","nfbind","denodeify","baseArgs","nbind","bound","nmapply","npost","nsend","nmcall","ninvoke","nodeify","nodeback"],"mappings":"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","sourcesContent":["// vim:ts=4:sts=4:sw=4:\r\n/*!\r\n *\r\n * Copyright 2009-2017 Kris Kowal under the terms of the MIT\r\n * license found at https://github.com/kriskowal/q/blob/v1/LICENSE\r\n *\r\n * With parts by Tyler Close\r\n * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found\r\n * at http://www.opensource.org/licenses/mit-license.html\r\n * Forked at ref_send.js version: 2009-05-11\r\n *\r\n * With parts by Mark Miller\r\n * Copyright (C) 2011 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\n\r\n(function (definition) {\r\n    \"use strict\";\r\n\r\n    // This file will function properly as a <script> tag, or a module\r\n    // using CommonJS and NodeJS or RequireJS module formats.  In\r\n    // Common/Node/RequireJS, the module exports the Q API and when\r\n    // executed as a simple <script>, it creates a Q global instead.\r\n\r\n    // Montage Require\r\n    if (typeof bootstrap === \"function\") {\r\n        bootstrap(\"promise\", definition);\r\n\r\n    // CommonJS\r\n    } else if (typeof exports === \"object\" && typeof module === \"object\") {\r\n        module.exports = definition();\r\n\r\n    // RequireJS\r\n    } else if (typeof define === \"function\" && define.amd) {\r\n        define(definition);\r\n\r\n    // SES (Secure EcmaScript)\r\n    } else if (typeof ses !== \"undefined\") {\r\n        if (!ses.ok()) {\r\n            return;\r\n        } else {\r\n            ses.makeQ = definition;\r\n        }\r\n\r\n    // <script>\r\n    } else if (typeof window !== \"undefined\" || typeof self !== \"undefined\") {\r\n        // Prefer window over self for add-on scripts. Use self for\r\n        // non-windowed contexts.\r\n        var global = typeof window !== \"undefined\" ? window : self;\r\n\r\n        // Get the `window` object, save the previous Q global\r\n        // and initialize Q as a global.\r\n        var previousQ = global.Q;\r\n        global.Q = definition();\r\n\r\n        // Add a noConflict function so Q can be removed from the\r\n        // global namespace.\r\n        global.Q.noConflict = function () {\r\n            global.Q = previousQ;\r\n            return this;\r\n        };\r\n\r\n    } else {\r\n        throw new Error(\"This environment was not anticipated by Q. Please file a bug.\");\r\n    }\r\n\r\n})(function () {\r\n\"use strict\";\r\n\r\nvar hasStacks = false;\r\ntry {\r\n    throw new Error();\r\n} catch (e) {\r\n    hasStacks = !!e.stack;\r\n}\r\n\r\n// All code after this point will be filtered from stack traces reported\r\n// by Q.\r\nvar qStartingLine = captureLine();\r\nvar qFileName;\r\n\r\n// shims\r\n\r\n// used for fallback in \"allResolved\"\r\nvar noop = function () {};\r\n\r\n// Use the fastest possible means to execute a task in a future turn\r\n// of the event loop.\r\nvar nextTick =(function () {\r\n    // linked list of tasks (single, with head node)\r\n    var head = {task: void 0, next: null};\r\n    var tail = head;\r\n    var flushing = false;\r\n    var requestTick = void 0;\r\n    var isNodeJS = false;\r\n    // queue for late tasks, used by unhandled rejection tracking\r\n    var laterQueue = [];\r\n\r\n    function flush() {\r\n        /* jshint loopfunc: true */\r\n        var task, domain;\r\n\r\n        while (head.next) {\r\n            head = head.next;\r\n            task = head.task;\r\n            head.task = void 0;\r\n            domain = head.domain;\r\n\r\n            if (domain) {\r\n                head.domain = void 0;\r\n                domain.enter();\r\n            }\r\n            runSingle(task, domain);\r\n\r\n        }\r\n        while (laterQueue.length) {\r\n            task = laterQueue.pop();\r\n            runSingle(task);\r\n        }\r\n        flushing = false;\r\n    }\r\n    // runs a single function in the async queue\r\n    function runSingle(task, domain) {\r\n        try {\r\n            task();\r\n\r\n        } catch (e) {\r\n            if (isNodeJS) {\r\n                // In node, uncaught exceptions are considered fatal errors.\r\n                // Re-throw them synchronously to interrupt flushing!\r\n\r\n                // Ensure continuation if the uncaught exception is suppressed\r\n                // listening \"uncaughtException\" events (as domains does).\r\n                // Continue in next event to avoid tick recursion.\r\n                if (domain) {\r\n                    domain.exit();\r\n                }\r\n                setTimeout(flush, 0);\r\n                if (domain) {\r\n                    domain.enter();\r\n                }\r\n\r\n                throw e;\r\n\r\n            } else {\r\n                // In browsers, uncaught exceptions are not fatal.\r\n                // Re-throw them asynchronously to avoid slow-downs.\r\n                setTimeout(function () {\r\n                    throw e;\r\n                }, 0);\r\n            }\r\n        }\r\n\r\n        if (domain) {\r\n            domain.exit();\r\n        }\r\n    }\r\n\r\n    nextTick = function (task) {\r\n        tail = tail.next = {\r\n            task: task,\r\n            domain: isNodeJS && process.domain,\r\n            next: null\r\n        };\r\n\r\n        if (!flushing) {\r\n            flushing = true;\r\n            requestTick();\r\n        }\r\n    };\r\n\r\n    if (typeof process === \"object\" &&\r\n        process.toString() === \"[object process]\" && process.nextTick) {\r\n        // Ensure Q is in a real Node environment, with a `process.nextTick`.\r\n        // To see through fake Node environments:\r\n        // * Mocha test runner - exposes a `process` global without a `nextTick`\r\n        // * Browserify - exposes a `process.nexTick` function that uses\r\n        //   `setTimeout`. In this case `setImmediate` is preferred because\r\n        //    it is faster. Browserify's `process.toString()` yields\r\n        //   \"[object Object]\", while in a real Node environment\r\n        //   `process.toString()` yields \"[object process]\".\r\n        isNodeJS = true;\r\n\r\n        requestTick = function () {\r\n            process.nextTick(flush);\r\n        };\r\n\r\n    } else if (typeof setImmediate === \"function\") {\r\n        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate\r\n        if (typeof window !== \"undefined\") {\r\n            requestTick = setImmediate.bind(window, flush);\r\n        } else {\r\n            requestTick = function () {\r\n                setImmediate(flush);\r\n            };\r\n        }\r\n\r\n    } else if (typeof MessageChannel !== \"undefined\") {\r\n        // modern browsers\r\n        // http://www.nonblocking.io/2011/06/windownexttick.html\r\n        var channel = new MessageChannel();\r\n        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create\r\n        // working message ports the first time a page loads.\r\n        channel.port1.onmessage = function () {\r\n            requestTick = requestPortTick;\r\n            channel.port1.onmessage = flush;\r\n            flush();\r\n        };\r\n        var requestPortTick = function () {\r\n            // Opera requires us to provide a message payload, regardless of\r\n            // whether we use it.\r\n            channel.port2.postMessage(0);\r\n        };\r\n        requestTick = function () {\r\n            setTimeout(flush, 0);\r\n            requestPortTick();\r\n        };\r\n\r\n    } else {\r\n        // old browsers\r\n        requestTick = function () {\r\n            setTimeout(flush, 0);\r\n        };\r\n    }\r\n    // runs a task after all other tasks have been run\r\n    // this is useful for unhandled rejection tracking that needs to happen\r\n    // after all `then`d tasks have been run.\r\n    nextTick.runAfter = function (task) {\r\n        laterQueue.push(task);\r\n        if (!flushing) {\r\n            flushing = true;\r\n            requestTick();\r\n        }\r\n    };\r\n    return nextTick;\r\n})();\r\n\r\n// Attempt to make generics safe in the face of downstream\r\n// modifications.\r\n// There is no situation where this is necessary.\r\n// If you need a security guarantee, these primordials need to be\r\n// deeply frozen anyway, and if you don’t need a security guarantee,\r\n// this is just plain paranoid.\r\n// However, this **might** have the nice side-effect of reducing the size of\r\n// the minified code by reducing x.call() to merely x()\r\n// See Mark Miller’s explanation of what this does.\r\n// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\r\nvar call = Function.call;\r\nfunction uncurryThis(f) {\r\n    return function () {\r\n        return call.apply(f, arguments);\r\n    };\r\n}\r\n// This is equivalent, but slower:\r\n// uncurryThis = Function_bind.bind(Function_bind.call);\r\n// http://jsperf.com/uncurrythis\r\n\r\nvar array_slice = uncurryThis(Array.prototype.slice);\r\n\r\nvar array_reduce = uncurryThis(\r\n    Array.prototype.reduce || function (callback, basis) {\r\n        var index = 0,\r\n            length = this.length;\r\n        // concerning the initial value, if one is not provided\r\n        if (arguments.length === 1) {\r\n            // seek to the first value in the array, accounting\r\n            // for the possibility that is is a sparse array\r\n            do {\r\n                if (index in this) {\r\n                    basis = this[index++];\r\n                    break;\r\n                }\r\n                if (++index >= length) {\r\n                    throw new TypeError();\r\n                }\r\n            } while (1);\r\n        }\r\n        // reduce\r\n        for (; index < length; index++) {\r\n            // account for the possibility that the array is sparse\r\n            if (index in this) {\r\n                basis = callback(basis, this[index], index);\r\n            }\r\n        }\r\n        return basis;\r\n    }\r\n);\r\n\r\nvar array_indexOf = uncurryThis(\r\n    Array.prototype.indexOf || function (value) {\r\n        // not a very good shim, but good enough for our one use of it\r\n        for (var i = 0; i < this.length; i++) {\r\n            if (this[i] === value) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n);\r\n\r\nvar array_map = uncurryThis(\r\n    Array.prototype.map || function (callback, thisp) {\r\n        var self = this;\r\n        var collect = [];\r\n        array_reduce(self, function (undefined, value, index) {\r\n            collect.push(callback.call(thisp, value, index, self));\r\n        }, void 0);\r\n        return collect;\r\n    }\r\n);\r\n\r\nvar object_create = Object.create || function (prototype) {\r\n    function Type() { }\r\n    Type.prototype = prototype;\r\n    return new Type();\r\n};\r\n\r\nvar object_defineProperty = Object.defineProperty || function (obj, prop, descriptor) {\r\n    obj[prop] = descriptor.value;\r\n    return obj;\r\n};\r\n\r\nvar object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);\r\n\r\nvar object_keys = Object.keys || function (object) {\r\n    var keys = [];\r\n    for (var key in object) {\r\n        if (object_hasOwnProperty(object, key)) {\r\n            keys.push(key);\r\n        }\r\n    }\r\n    return keys;\r\n};\r\n\r\nvar object_toString = uncurryThis(Object.prototype.toString);\r\n\r\nfunction isObject(value) {\r\n    return value === Object(value);\r\n}\r\n\r\n// generator related shims\r\n\r\n// FIXME: Remove this function once ES6 generators are in SpiderMonkey.\r\nfunction isStopIteration(exception) {\r\n    return (\r\n        object_toString(exception) === \"[object StopIteration]\" ||\r\n        exception instanceof QReturnValue\r\n    );\r\n}\r\n\r\n// FIXME: Remove this helper and Q.return once ES6 generators are in\r\n// SpiderMonkey.\r\nvar QReturnValue;\r\nif (typeof ReturnValue !== \"undefined\") {\r\n    QReturnValue = ReturnValue;\r\n} else {\r\n    QReturnValue = function (value) {\r\n        this.value = value;\r\n    };\r\n}\r\n\r\n// long stack traces\r\n\r\nvar STACK_JUMP_SEPARATOR = \"From previous event:\";\r\n\r\nfunction makeStackTraceLong(error, promise) {\r\n    // If possible, transform the error stack trace by removing Node and Q\r\n    // cruft, then concatenating with the stack trace of `promise`. See #57.\r\n    if (hasStacks &&\r\n        promise.stack &&\r\n        typeof error === \"object\" &&\r\n        error !== null &&\r\n        error.stack\r\n    ) {\r\n        var stacks = [];\r\n        for (var p = promise; !!p; p = p.source) {\r\n            if (p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ > p.stackCounter)) {\r\n                object_defineProperty(error, \"__minimumStackCounter__\", {value: p.stackCounter, configurable: true});\r\n                stacks.unshift(p.stack);\r\n            }\r\n        }\r\n        stacks.unshift(error.stack);\r\n\r\n        var concatedStacks = stacks.join(\"\\n\" + STACK_JUMP_SEPARATOR + \"\\n\");\r\n        var stack = filterStackString(concatedStacks);\r\n        object_defineProperty(error, \"stack\", {value: stack, configurable: true});\r\n    }\r\n}\r\n\r\nfunction filterStackString(stackString) {\r\n    var lines = stackString.split(\"\\n\");\r\n    var desiredLines = [];\r\n    for (var i = 0; i < lines.length; ++i) {\r\n        var line = lines[i];\r\n\r\n        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {\r\n            desiredLines.push(line);\r\n        }\r\n    }\r\n    return desiredLines.join(\"\\n\");\r\n}\r\n\r\nfunction isNodeFrame(stackLine) {\r\n    return stackLine.indexOf(\"(module.js:\") !== -1 ||\r\n           stackLine.indexOf(\"(node.js:\") !== -1;\r\n}\r\n\r\nfunction getFileNameAndLineNumber(stackLine) {\r\n    // Named functions: \"at functionName (filename:lineNumber:columnNumber)\"\r\n    // In IE10 function name can have spaces (\"Anonymous function\") O_o\r\n    var attempt1 = /at .+ \\((.+):(\\d+):(?:\\d+)\\)$/.exec(stackLine);\r\n    if (attempt1) {\r\n        return [attempt1[1], Number(attempt1[2])];\r\n    }\r\n\r\n    // Anonymous functions: \"at filename:lineNumber:columnNumber\"\r\n    var attempt2 = /at ([^ ]+):(\\d+):(?:\\d+)$/.exec(stackLine);\r\n    if (attempt2) {\r\n        return [attempt2[1], Number(attempt2[2])];\r\n    }\r\n\r\n    // Firefox style: \"function@filename:lineNumber or @filename:lineNumber\"\r\n    var attempt3 = /.*@(.+):(\\d+)$/.exec(stackLine);\r\n    if (attempt3) {\r\n        return [attempt3[1], Number(attempt3[2])];\r\n    }\r\n}\r\n\r\nfunction isInternalFrame(stackLine) {\r\n    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);\r\n\r\n    if (!fileNameAndLineNumber) {\r\n        return false;\r\n    }\r\n\r\n    var fileName = fileNameAndLineNumber[0];\r\n    var lineNumber = fileNameAndLineNumber[1];\r\n\r\n    return fileName === qFileName &&\r\n        lineNumber >= qStartingLine &&\r\n        lineNumber <= qEndingLine;\r\n}\r\n\r\n// discover own file name and line number range for filtering stack\r\n// traces\r\nfunction captureLine() {\r\n    if (!hasStacks) {\r\n        return;\r\n    }\r\n\r\n    try {\r\n        throw new Error();\r\n    } catch (e) {\r\n        var lines = e.stack.split(\"\\n\");\r\n        var firstLine = lines[0].indexOf(\"@\") > 0 ? lines[1] : lines[2];\r\n        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);\r\n        if (!fileNameAndLineNumber) {\r\n            return;\r\n        }\r\n\r\n        qFileName = fileNameAndLineNumber[0];\r\n        return fileNameAndLineNumber[1];\r\n    }\r\n}\r\n\r\nfunction deprecate(callback, name, alternative) {\r\n    return function () {\r\n        if (typeof console !== \"undefined\" &&\r\n            typeof console.warn === \"function\") {\r\n            console.warn(name + \" is deprecated, use \" + alternative +\r\n                         \" instead.\", new Error(\"\").stack);\r\n        }\r\n        return callback.apply(callback, arguments);\r\n    };\r\n}\r\n\r\n// end of shims\r\n// beginning of real work\r\n\r\n/**\r\n * Constructs a promise for an immediate reference, passes promises through, or\r\n * coerces promises from different systems.\r\n * @param value immediate reference or promise\r\n */\r\nfunction Q(value) {\r\n    // If the object is already a Promise, return it directly.  This enables\r\n    // the resolve function to both be used to created references from objects,\r\n    // but to tolerably coerce non-promises to promises.\r\n    if (value instanceof Promise) {\r\n        return value;\r\n    }\r\n\r\n    // assimilate thenables\r\n    if (isPromiseAlike(value)) {\r\n        return coerce(value);\r\n    } else {\r\n        return fulfill(value);\r\n    }\r\n}\r\nQ.resolve = Q;\r\n\r\n/**\r\n * Performs a task in a future turn of the event loop.\r\n * @param {Function} task\r\n */\r\nQ.nextTick = nextTick;\r\n\r\n/**\r\n * Controls whether or not long stack traces will be on\r\n */\r\nQ.longStackSupport = false;\r\n\r\n/**\r\n * The counter is used to determine the stopping point for building\r\n * long stack traces. In makeStackTraceLong we walk backwards through\r\n * the linked list of promises, only stacks which were created before\r\n * the rejection are concatenated.\r\n */\r\nvar longStackCounter = 1;\r\n\r\n// enable long stacks if Q_DEBUG is set\r\nif (typeof process === \"object\" && process && process.env && process.env.Q_DEBUG) {\r\n    Q.longStackSupport = true;\r\n}\r\n\r\n/**\r\n * Constructs a {promise, resolve, reject} object.\r\n *\r\n * `resolve` is a callback to invoke with a more resolved value for the\r\n * promise. To fulfill the promise, invoke `resolve` with any value that is\r\n * not a thenable. To reject the promise, invoke `resolve` with a rejected\r\n * thenable, or invoke `reject` with the reason directly. To resolve the\r\n * promise to another thenable, thus putting it in the same state, invoke\r\n * `resolve` with that other thenable.\r\n */\r\nQ.defer = defer;\r\nfunction defer() {\r\n    // if \"messages\" is an \"Array\", that indicates that the promise has not yet\r\n    // been resolved.  If it is \"undefined\", it has been resolved.  Each\r\n    // element of the messages array is itself an array of complete arguments to\r\n    // forward to the resolved promise.  We coerce the resolution value to a\r\n    // promise using the `resolve` function because it handles both fully\r\n    // non-thenable values and other thenables gracefully.\r\n    var messages = [], progressListeners = [], resolvedPromise;\r\n\r\n    var deferred = object_create(defer.prototype);\r\n    var promise = object_create(Promise.prototype);\r\n\r\n    promise.promiseDispatch = function (resolve, op, operands) {\r\n        var args = array_slice(arguments);\r\n        if (messages) {\r\n            messages.push(args);\r\n            if (op === \"when\" && operands[1]) { // progress operand\r\n                progressListeners.push(operands[1]);\r\n            }\r\n        } else {\r\n            Q.nextTick(function () {\r\n                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);\r\n            });\r\n        }\r\n    };\r\n\r\n    // XXX deprecated\r\n    promise.valueOf = function () {\r\n        if (messages) {\r\n            return promise;\r\n        }\r\n        var nearerValue = nearer(resolvedPromise);\r\n        if (isPromise(nearerValue)) {\r\n            resolvedPromise = nearerValue; // shorten chain\r\n        }\r\n        return nearerValue;\r\n    };\r\n\r\n    promise.inspect = function () {\r\n        if (!resolvedPromise) {\r\n            return { state: \"pending\" };\r\n        }\r\n        return resolvedPromise.inspect();\r\n    };\r\n\r\n    if (Q.longStackSupport && hasStacks) {\r\n        try {\r\n            throw new Error();\r\n        } catch (e) {\r\n            // NOTE: don't try to use `Error.captureStackTrace` or transfer the\r\n            // accessor around; that causes memory leaks as per GH-111. Just\r\n            // reify the stack trace as a string ASAP.\r\n            //\r\n            // At the same time, cut off the first line; it's always just\r\n            // \"[object Promise]\\n\", as per the `toString`.\r\n            promise.stack = e.stack.substring(e.stack.indexOf(\"\\n\") + 1);\r\n            promise.stackCounter = longStackCounter++;\r\n        }\r\n    }\r\n\r\n    // NOTE: we do the checks for `resolvedPromise` in each method, instead of\r\n    // consolidating them into `become`, since otherwise we'd create new\r\n    // promises with the lines `become(whatever(value))`. See e.g. GH-252.\r\n\r\n    function become(newPromise) {\r\n        resolvedPromise = newPromise;\r\n\r\n        if (Q.longStackSupport && hasStacks) {\r\n            // Only hold a reference to the new promise if long stacks\r\n            // are enabled to reduce memory usage\r\n            promise.source = newPromise;\r\n        }\r\n\r\n        array_reduce(messages, function (undefined, message) {\r\n            Q.nextTick(function () {\r\n                newPromise.promiseDispatch.apply(newPromise, message);\r\n            });\r\n        }, void 0);\r\n\r\n        messages = void 0;\r\n        progressListeners = void 0;\r\n    }\r\n\r\n    deferred.promise = promise;\r\n    deferred.resolve = function (value) {\r\n        if (resolvedPromise) {\r\n            return;\r\n        }\r\n\r\n        become(Q(value));\r\n    };\r\n\r\n    deferred.fulfill = function (value) {\r\n        if (resolvedPromise) {\r\n            return;\r\n        }\r\n\r\n        become(fulfill(value));\r\n    };\r\n    deferred.reject = function (reason) {\r\n        if (resolvedPromise) {\r\n            return;\r\n        }\r\n\r\n        become(reject(reason));\r\n    };\r\n    deferred.notify = function (progress) {\r\n        if (resolvedPromise) {\r\n            return;\r\n        }\r\n\r\n        array_reduce(progressListeners, function (undefined, progressListener) {\r\n            Q.nextTick(function () {\r\n                progressListener(progress);\r\n            });\r\n        }, void 0);\r\n    };\r\n\r\n    return deferred;\r\n}\r\n\r\n/**\r\n * Creates a Node-style callback that will resolve or reject the deferred\r\n * promise.\r\n * @returns a nodeback\r\n */\r\ndefer.prototype.makeNodeResolver = function () {\r\n    var self = this;\r\n    return function (error, value) {\r\n        if (error) {\r\n            self.reject(error);\r\n        } else if (arguments.length > 2) {\r\n            self.resolve(array_slice(arguments, 1));\r\n        } else {\r\n            self.resolve(value);\r\n        }\r\n    };\r\n};\r\n\r\n/**\r\n * @param resolver {Function} a function that returns nothing and accepts\r\n * the resolve, reject, and notify functions for a deferred.\r\n * @returns a promise that may be resolved with the given resolve and reject\r\n * functions, or rejected by a thrown exception in resolver\r\n */\r\nQ.Promise = promise; // ES6\r\nQ.promise = promise;\r\nfunction promise(resolver) {\r\n    if (typeof resolver !== \"function\") {\r\n        throw new TypeError(\"resolver must be a function.\");\r\n    }\r\n    var deferred = defer();\r\n    try {\r\n        resolver(deferred.resolve, deferred.reject, deferred.notify);\r\n    } catch (reason) {\r\n        deferred.reject(reason);\r\n    }\r\n    return deferred.promise;\r\n}\r\n\r\npromise.race = race; // ES6\r\npromise.all = all; // ES6\r\npromise.reject = reject; // ES6\r\npromise.resolve = Q; // ES6\r\n\r\n// XXX experimental.  This method is a way to denote that a local value is\r\n// serializable and should be immediately dispatched to a remote upon request,\r\n// instead of passing a reference.\r\nQ.passByCopy = function (object) {\r\n    //freeze(object);\r\n    //passByCopies.set(object, true);\r\n    return object;\r\n};\r\n\r\nPromise.prototype.passByCopy = function () {\r\n    //freeze(object);\r\n    //passByCopies.set(object, true);\r\n    return this;\r\n};\r\n\r\n/**\r\n * If two promises eventually fulfill to the same value, promises that value,\r\n * but otherwise rejects.\r\n * @param x {Any*}\r\n * @param y {Any*}\r\n * @returns {Any*} a promise for x and y if they are the same, but a rejection\r\n * otherwise.\r\n *\r\n */\r\nQ.join = function (x, y) {\r\n    return Q(x).join(y);\r\n};\r\n\r\nPromise.prototype.join = function (that) {\r\n    return Q([this, that]).spread(function (x, y) {\r\n        if (x === y) {\r\n            // TODO: \"===\" should be Object.is or equiv\r\n            return x;\r\n        } else {\r\n            throw new Error(\"Q can't join: not the same: \" + x + \" \" + y);\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Returns a promise for the first of an array of promises to become settled.\r\n * @param answers {Array[Any*]} promises to race\r\n * @returns {Any*} the first promise to be settled\r\n */\r\nQ.race = race;\r\nfunction race(answerPs) {\r\n    return promise(function (resolve, reject) {\r\n        // Switch to this once we can assume at least ES5\r\n        // answerPs.forEach(function (answerP) {\r\n        //     Q(answerP).then(resolve, reject);\r\n        // });\r\n        // Use this in the meantime\r\n        for (var i = 0, len = answerPs.length; i < len; i++) {\r\n            Q(answerPs[i]).then(resolve, reject);\r\n        }\r\n    });\r\n}\r\n\r\nPromise.prototype.race = function () {\r\n    return this.then(Q.race);\r\n};\r\n\r\n/**\r\n * Constructs a Promise with a promise descriptor object and optional fallback\r\n * function.  The descriptor contains methods like when(rejected), get(name),\r\n * set(name, value), post(name, args), and delete(name), which all\r\n * return either a value, a promise for a value, or a rejection.  The fallback\r\n * accepts the operation name, a resolver, and any further arguments that would\r\n * have been forwarded to the appropriate method above had a method been\r\n * provided with the proper name.  The API makes no guarantees about the nature\r\n * of the returned object, apart from that it is usable whereever promises are\r\n * bought and sold.\r\n */\r\nQ.makePromise = Promise;\r\nfunction Promise(descriptor, fallback, inspect) {\r\n    if (fallback === void 0) {\r\n        fallback = function (op) {\r\n            return reject(new Error(\r\n                \"Promise does not support operation: \" + op\r\n            ));\r\n        };\r\n    }\r\n    if (inspect === void 0) {\r\n        inspect = function () {\r\n            return {state: \"unknown\"};\r\n        };\r\n    }\r\n\r\n    var promise = object_create(Promise.prototype);\r\n\r\n    promise.promiseDispatch = function (resolve, op, args) {\r\n        var result;\r\n        try {\r\n            if (descriptor[op]) {\r\n                result = descriptor[op].apply(promise, args);\r\n            } else {\r\n                result = fallback.call(promise, op, args);\r\n            }\r\n        } catch (exception) {\r\n            result = reject(exception);\r\n        }\r\n        if (resolve) {\r\n            resolve(result);\r\n        }\r\n    };\r\n\r\n    promise.inspect = inspect;\r\n\r\n    // XXX deprecated `valueOf` and `exception` support\r\n    if (inspect) {\r\n        var inspected = inspect();\r\n        if (inspected.state === \"rejected\") {\r\n            promise.exception = inspected.reason;\r\n        }\r\n\r\n        promise.valueOf = function () {\r\n            var inspected = inspect();\r\n            if (inspected.state === \"pending\" ||\r\n                inspected.state === \"rejected\") {\r\n                return promise;\r\n            }\r\n            return inspected.value;\r\n        };\r\n    }\r\n\r\n    return promise;\r\n}\r\n\r\nPromise.prototype.toString = function () {\r\n    return \"[object Promise]\";\r\n};\r\n\r\nPromise.prototype.then = function (fulfilled, rejected, progressed) {\r\n    var self = this;\r\n    var deferred = defer();\r\n    var done = false;   // ensure the untrusted promise makes at most a\r\n                        // single call to one of the callbacks\r\n\r\n    function _fulfilled(value) {\r\n        try {\r\n            return typeof fulfilled === \"function\" ? fulfilled(value) : value;\r\n        } catch (exception) {\r\n            return reject(exception);\r\n        }\r\n    }\r\n\r\n    function _rejected(exception) {\r\n        if (typeof rejected === \"function\") {\r\n            makeStackTraceLong(exception, self);\r\n            try {\r\n                return rejected(exception);\r\n            } catch (newException) {\r\n                return reject(newException);\r\n            }\r\n        }\r\n        return reject(exception);\r\n    }\r\n\r\n    function _progressed(value) {\r\n        return typeof progressed === \"function\" ? progressed(value) : value;\r\n    }\r\n\r\n    Q.nextTick(function () {\r\n        self.promiseDispatch(function (value) {\r\n            if (done) {\r\n                return;\r\n            }\r\n            done = true;\r\n\r\n            deferred.resolve(_fulfilled(value));\r\n        }, \"when\", [function (exception) {\r\n            if (done) {\r\n                return;\r\n            }\r\n            done = true;\r\n\r\n            deferred.resolve(_rejected(exception));\r\n        }]);\r\n    });\r\n\r\n    // Progress propagator need to be attached in the current tick.\r\n    self.promiseDispatch(void 0, \"when\", [void 0, function (value) {\r\n        var newValue;\r\n        var threw = false;\r\n        try {\r\n            newValue = _progressed(value);\r\n        } catch (e) {\r\n            threw = true;\r\n            if (Q.onerror) {\r\n                Q.onerror(e);\r\n            } else {\r\n                throw e;\r\n            }\r\n        }\r\n\r\n        if (!threw) {\r\n            deferred.notify(newValue);\r\n        }\r\n    }]);\r\n\r\n    return deferred.promise;\r\n};\r\n\r\nQ.tap = function (promise, callback) {\r\n    return Q(promise).tap(callback);\r\n};\r\n\r\n/**\r\n * Works almost like \"finally\", but not called for rejections.\r\n * Original resolution value is passed through callback unaffected.\r\n * Callback may return a promise that will be awaited for.\r\n * @param {Function} callback\r\n * @returns {Q.Promise}\r\n * @example\r\n * doSomething()\r\n *   .then(...)\r\n *   .tap(console.log)\r\n *   .then(...);\r\n */\r\nPromise.prototype.tap = function (callback) {\r\n    callback = Q(callback);\r\n\r\n    return this.then(function (value) {\r\n        return callback.fcall(value).thenResolve(value);\r\n    });\r\n};\r\n\r\n/**\r\n * Registers an observer on a promise.\r\n *\r\n * Guarantees:\r\n *\r\n * 1. that fulfilled and rejected will be called only once.\r\n * 2. that either the fulfilled callback or the rejected callback will be\r\n *    called, but not both.\r\n * 3. that fulfilled and rejected will not be called in this turn.\r\n *\r\n * @param value      promise or immediate reference to observe\r\n * @param fulfilled  function to be called with the fulfilled value\r\n * @param rejected   function to be called with the rejection exception\r\n * @param progressed function to be called on any progress notifications\r\n * @return promise for the return value from the invoked callback\r\n */\r\nQ.when = when;\r\nfunction when(value, fulfilled, rejected, progressed) {\r\n    return Q(value).then(fulfilled, rejected, progressed);\r\n}\r\n\r\nPromise.prototype.thenResolve = function (value) {\r\n    return this.then(function () { return value; });\r\n};\r\n\r\nQ.thenResolve = function (promise, value) {\r\n    return Q(promise).thenResolve(value);\r\n};\r\n\r\nPromise.prototype.thenReject = function (reason) {\r\n    return this.then(function () { throw reason; });\r\n};\r\n\r\nQ.thenReject = function (promise, reason) {\r\n    return Q(promise).thenReject(reason);\r\n};\r\n\r\n/**\r\n * If an object is not a promise, it is as \"near\" as possible.\r\n * If a promise is rejected, it is as \"near\" as possible too.\r\n * If it’s a fulfilled promise, the fulfillment value is nearer.\r\n * If it’s a deferred promise and the deferred has been resolved, the\r\n * resolution is \"nearer\".\r\n * @param object\r\n * @returns most resolved (nearest) form of the object\r\n */\r\n\r\n// XXX should we re-do this?\r\nQ.nearer = nearer;\r\nfunction nearer(value) {\r\n    if (isPromise(value)) {\r\n        var inspected = value.inspect();\r\n        if (inspected.state === \"fulfilled\") {\r\n            return inspected.value;\r\n        }\r\n    }\r\n    return value;\r\n}\r\n\r\n/**\r\n * @returns whether the given object is a promise.\r\n * Otherwise it is a fulfilled value.\r\n */\r\nQ.isPromise = isPromise;\r\nfunction isPromise(object) {\r\n    return object instanceof Promise;\r\n}\r\n\r\nQ.isPromiseAlike = isPromiseAlike;\r\nfunction isPromiseAlike(object) {\r\n    return isObject(object) && typeof object.then === \"function\";\r\n}\r\n\r\n/**\r\n * @returns whether the given object is a pending promise, meaning not\r\n * fulfilled or rejected.\r\n */\r\nQ.isPending = isPending;\r\nfunction isPending(object) {\r\n    return isPromise(object) && object.inspect().state === \"pending\";\r\n}\r\n\r\nPromise.prototype.isPending = function () {\r\n    return this.inspect().state === \"pending\";\r\n};\r\n\r\n/**\r\n * @returns whether the given object is a value or fulfilled\r\n * promise.\r\n */\r\nQ.isFulfilled = isFulfilled;\r\nfunction isFulfilled(object) {\r\n    return !isPromise(object) || object.inspect().state === \"fulfilled\";\r\n}\r\n\r\nPromise.prototype.isFulfilled = function () {\r\n    return this.inspect().state === \"fulfilled\";\r\n};\r\n\r\n/**\r\n * @returns whether the given object is a rejected promise.\r\n */\r\nQ.isRejected = isRejected;\r\nfunction isRejected(object) {\r\n    return isPromise(object) && object.inspect().state === \"rejected\";\r\n}\r\n\r\nPromise.prototype.isRejected = function () {\r\n    return this.inspect().state === \"rejected\";\r\n};\r\n\r\n//// BEGIN UNHANDLED REJECTION TRACKING\r\n\r\n// This promise library consumes exceptions thrown in handlers so they can be\r\n// handled by a subsequent promise.  The exceptions get added to this array when\r\n// they are created, and removed when they are handled.  Note that in ES6 or\r\n// shimmed environments, this would naturally be a `Set`.\r\nvar unhandledReasons = [];\r\nvar unhandledRejections = [];\r\nvar reportedUnhandledRejections = [];\r\nvar trackUnhandledRejections = true;\r\n\r\nfunction resetUnhandledRejections() {\r\n    unhandledReasons.length = 0;\r\n    unhandledRejections.length = 0;\r\n\r\n    if (!trackUnhandledRejections) {\r\n        trackUnhandledRejections = true;\r\n    }\r\n}\r\n\r\nfunction trackRejection(promise, reason) {\r\n    if (!trackUnhandledRejections) {\r\n        return;\r\n    }\r\n    if (typeof process === \"object\" && typeof process.emit === \"function\") {\r\n        Q.nextTick.runAfter(function () {\r\n            if (array_indexOf(unhandledRejections, promise) !== -1) {\r\n                process.emit(\"unhandledRejection\", reason, promise);\r\n                reportedUnhandledRejections.push(promise);\r\n            }\r\n        });\r\n    }\r\n\r\n    unhandledRejections.push(promise);\r\n    if (reason && typeof reason.stack !== \"undefined\") {\r\n        unhandledReasons.push(reason.stack);\r\n    } else {\r\n        unhandledReasons.push(\"(no stack) \" + reason);\r\n    }\r\n}\r\n\r\nfunction untrackRejection(promise) {\r\n    if (!trackUnhandledRejections) {\r\n        return;\r\n    }\r\n\r\n    var at = array_indexOf(unhandledRejections, promise);\r\n    if (at !== -1) {\r\n        if (typeof process === \"object\" && typeof process.emit === \"function\") {\r\n            Q.nextTick.runAfter(function () {\r\n                var atReport = array_indexOf(reportedUnhandledRejections, promise);\r\n                if (atReport !== -1) {\r\n                    process.emit(\"rejectionHandled\", unhandledReasons[at], promise);\r\n                    reportedUnhandledRejections.splice(atReport, 1);\r\n                }\r\n            });\r\n        }\r\n        unhandledRejections.splice(at, 1);\r\n        unhandledReasons.splice(at, 1);\r\n    }\r\n}\r\n\r\nQ.resetUnhandledRejections = resetUnhandledRejections;\r\n\r\nQ.getUnhandledReasons = function () {\r\n    // Make a copy so that consumers can't interfere with our internal state.\r\n    return unhandledReasons.slice();\r\n};\r\n\r\nQ.stopUnhandledRejectionTracking = function () {\r\n    resetUnhandledRejections();\r\n    trackUnhandledRejections = false;\r\n};\r\n\r\nresetUnhandledRejections();\r\n\r\n//// END UNHANDLED REJECTION TRACKING\r\n\r\n/**\r\n * Constructs a rejected promise.\r\n * @param reason value describing the failure\r\n */\r\nQ.reject = reject;\r\nfunction reject(reason) {\r\n    var rejection = Promise({\r\n        \"when\": function (rejected) {\r\n            // note that the error has been handled\r\n            if (rejected) {\r\n                untrackRejection(this);\r\n            }\r\n            return rejected ? rejected(reason) : this;\r\n        }\r\n    }, function fallback() {\r\n        return this;\r\n    }, function inspect() {\r\n        return { state: \"rejected\", reason: reason };\r\n    });\r\n\r\n    // Note that the reason has not been handled.\r\n    trackRejection(rejection, reason);\r\n\r\n    return rejection;\r\n}\r\n\r\n/**\r\n * Constructs a fulfilled promise for an immediate reference.\r\n * @param value immediate reference\r\n */\r\nQ.fulfill = fulfill;\r\nfunction fulfill(value) {\r\n    return Promise({\r\n        \"when\": function () {\r\n            return value;\r\n        },\r\n        \"get\": function (name) {\r\n            return value[name];\r\n        },\r\n        \"set\": function (name, rhs) {\r\n            value[name] = rhs;\r\n        },\r\n        \"delete\": function (name) {\r\n            delete value[name];\r\n        },\r\n        \"post\": function (name, args) {\r\n            // Mark Miller proposes that post with no name should apply a\r\n            // promised function.\r\n            if (name === null || name === void 0) {\r\n                return value.apply(void 0, args);\r\n            } else {\r\n                return value[name].apply(value, args);\r\n            }\r\n        },\r\n        \"apply\": function (thisp, args) {\r\n            return value.apply(thisp, args);\r\n        },\r\n        \"keys\": function () {\r\n            return object_keys(value);\r\n        }\r\n    }, void 0, function inspect() {\r\n        return { state: \"fulfilled\", value: value };\r\n    });\r\n}\r\n\r\n/**\r\n * Converts thenables to Q promises.\r\n * @param promise thenable promise\r\n * @returns a Q promise\r\n */\r\nfunction coerce(promise) {\r\n    var deferred = defer();\r\n    Q.nextTick(function () {\r\n        try {\r\n            promise.then(deferred.resolve, deferred.reject, deferred.notify);\r\n        } catch (exception) {\r\n            deferred.reject(exception);\r\n        }\r\n    });\r\n    return deferred.promise;\r\n}\r\n\r\n/**\r\n * Annotates an object such that it will never be\r\n * transferred away from this process over any promise\r\n * communication channel.\r\n * @param object\r\n * @returns promise a wrapping of that object that\r\n * additionally responds to the \"isDef\" message\r\n * without a rejection.\r\n */\r\nQ.master = master;\r\nfunction master(object) {\r\n    return Promise({\r\n        \"isDef\": function () {}\r\n    }, function fallback(op, args) {\r\n        return dispatch(object, op, args);\r\n    }, function () {\r\n        return Q(object).inspect();\r\n    });\r\n}\r\n\r\n/**\r\n * Spreads the values of a promised array of arguments into the\r\n * fulfillment callback.\r\n * @param fulfilled callback that receives variadic arguments from the\r\n * promised array\r\n * @param rejected callback that receives the exception if the promise\r\n * is rejected.\r\n * @returns a promise for the return value or thrown exception of\r\n * either callback.\r\n */\r\nQ.spread = spread;\r\nfunction spread(value, fulfilled, rejected) {\r\n    return Q(value).spread(fulfilled, rejected);\r\n}\r\n\r\nPromise.prototype.spread = function (fulfilled, rejected) {\r\n    return this.all().then(function (array) {\r\n        return fulfilled.apply(void 0, array);\r\n    }, rejected);\r\n};\r\n\r\n/**\r\n * The async function is a decorator for generator functions, turning\r\n * them into asynchronous generators.  Although generators are only part\r\n * of the newest ECMAScript 6 drafts, this code does not cause syntax\r\n * errors in older engines.  This code should continue to work and will\r\n * in fact improve over time as the language improves.\r\n *\r\n * ES6 generators are currently part of V8 version 3.19 with the\r\n * --harmony-generators runtime flag enabled.  SpiderMonkey has had them\r\n * for longer, but under an older Python-inspired form.  This function\r\n * works on both kinds of generators.\r\n *\r\n * Decorates a generator function such that:\r\n *  - it may yield promises\r\n *  - execution will continue when that promise is fulfilled\r\n *  - the value of the yield expression will be the fulfilled value\r\n *  - it returns a promise for the return value (when the generator\r\n *    stops iterating)\r\n *  - the decorated function returns a promise for the return value\r\n *    of the generator or the first rejected promise among those\r\n *    yielded.\r\n *  - if an error is thrown in the generator, it propagates through\r\n *    every following yield until it is caught, or until it escapes\r\n *    the generator function altogether, and is translated into a\r\n *    rejection for the promise returned by the decorated generator.\r\n */\r\nQ.async = async;\r\nfunction async(makeGenerator) {\r\n    return function () {\r\n        // when verb is \"send\", arg is a value\r\n        // when verb is \"throw\", arg is an exception\r\n        function continuer(verb, arg) {\r\n            var result;\r\n\r\n            // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only\r\n            // engine that has a deployed base of browsers that support generators.\r\n            // However, SM's generators use the Python-inspired semantics of\r\n            // outdated ES6 drafts.  We would like to support ES6, but we'd also\r\n            // like to make it possible to use generators in deployed browsers, so\r\n            // we also support Python-style generators.  At some point we can remove\r\n            // this block.\r\n\r\n            if (typeof StopIteration === \"undefined\") {\r\n                // ES6 Generators\r\n                try {\r\n                    result = generator[verb](arg);\r\n                } catch (exception) {\r\n                    return reject(exception);\r\n                }\r\n                if (result.done) {\r\n                    return Q(result.value);\r\n                } else {\r\n                    return when(result.value, callback, errback);\r\n                }\r\n            } else {\r\n                // SpiderMonkey Generators\r\n                // FIXME: Remove this case when SM does ES6 generators.\r\n                try {\r\n                    result = generator[verb](arg);\r\n                } catch (exception) {\r\n                    if (isStopIteration(exception)) {\r\n                        return Q(exception.value);\r\n                    } else {\r\n                        return reject(exception);\r\n                    }\r\n                }\r\n                return when(result, callback, errback);\r\n            }\r\n        }\r\n        var generator = makeGenerator.apply(this, arguments);\r\n        var callback = continuer.bind(continuer, \"next\");\r\n        var errback = continuer.bind(continuer, \"throw\");\r\n        return callback();\r\n    };\r\n}\r\n\r\n/**\r\n * The spawn function is a small wrapper around async that immediately\r\n * calls the generator and also ends the promise chain, so that any\r\n * unhandled errors are thrown instead of forwarded to the error\r\n * handler. This is useful because it's extremely common to run\r\n * generators at the top-level to work with libraries.\r\n */\r\nQ.spawn = spawn;\r\nfunction spawn(makeGenerator) {\r\n    Q.done(Q.async(makeGenerator)());\r\n}\r\n\r\n// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.\r\n/**\r\n * Throws a ReturnValue exception to stop an asynchronous generator.\r\n *\r\n * This interface is a stop-gap measure to support generator return\r\n * values in older Firefox/SpiderMonkey.  In browsers that support ES6\r\n * generators like Chromium 29, just use \"return\" in your generator\r\n * functions.\r\n *\r\n * @param value the return value for the surrounding generator\r\n * @throws ReturnValue exception with the value.\r\n * @example\r\n * // ES6 style\r\n * Q.async(function* () {\r\n *      var foo = yield getFooPromise();\r\n *      var bar = yield getBarPromise();\r\n *      return foo + bar;\r\n * })\r\n * // Older SpiderMonkey style\r\n * Q.async(function () {\r\n *      var foo = yield getFooPromise();\r\n *      var bar = yield getBarPromise();\r\n *      Q.return(foo + bar);\r\n * })\r\n */\r\nQ[\"return\"] = _return;\r\nfunction _return(value) {\r\n    throw new QReturnValue(value);\r\n}\r\n\r\n/**\r\n * The promised function decorator ensures that any promise arguments\r\n * are settled and passed as values (`this` is also settled and passed\r\n * as a value).  It will also ensure that the result of a function is\r\n * always a promise.\r\n *\r\n * @example\r\n * var add = Q.promised(function (a, b) {\r\n *     return a + b;\r\n * });\r\n * add(Q(a), Q(B));\r\n *\r\n * @param {function} callback The function to decorate\r\n * @returns {function} a function that has been decorated.\r\n */\r\nQ.promised = promised;\r\nfunction promised(callback) {\r\n    return function () {\r\n        return spread([this, all(arguments)], function (self, args) {\r\n            return callback.apply(self, args);\r\n        });\r\n    };\r\n}\r\n\r\n/**\r\n * sends a message to a value in a future turn\r\n * @param object* the recipient\r\n * @param op the name of the message operation, e.g., \"when\",\r\n * @param args further arguments to be forwarded to the operation\r\n * @returns result {Promise} a promise for the result of the operation\r\n */\r\nQ.dispatch = dispatch;\r\nfunction dispatch(object, op, args) {\r\n    return Q(object).dispatch(op, args);\r\n}\r\n\r\nPromise.prototype.dispatch = function (op, args) {\r\n    var self = this;\r\n    var deferred = defer();\r\n    Q.nextTick(function () {\r\n        self.promiseDispatch(deferred.resolve, op, args);\r\n    });\r\n    return deferred.promise;\r\n};\r\n\r\n/**\r\n * Gets the value of a property in a future turn.\r\n * @param object    promise or immediate reference for target object\r\n * @param name      name of property to get\r\n * @return promise for the property value\r\n */\r\nQ.get = function (object, key) {\r\n    return Q(object).dispatch(\"get\", [key]);\r\n};\r\n\r\nPromise.prototype.get = function (key) {\r\n    return this.dispatch(\"get\", [key]);\r\n};\r\n\r\n/**\r\n * Sets the value of a property in a future turn.\r\n * @param object    promise or immediate reference for object object\r\n * @param name      name of property to set\r\n * @param value     new value of property\r\n * @return promise for the return value\r\n */\r\nQ.set = function (object, key, value) {\r\n    return Q(object).dispatch(\"set\", [key, value]);\r\n};\r\n\r\nPromise.prototype.set = function (key, value) {\r\n    return this.dispatch(\"set\", [key, value]);\r\n};\r\n\r\n/**\r\n * Deletes a property in a future turn.\r\n * @param object    promise or immediate reference for target object\r\n * @param name      name of property to delete\r\n * @return promise for the return value\r\n */\r\nQ.del = // XXX legacy\r\nQ[\"delete\"] = function (object, key) {\r\n    return Q(object).dispatch(\"delete\", [key]);\r\n};\r\n\r\nPromise.prototype.del = // XXX legacy\r\nPromise.prototype[\"delete\"] = function (key) {\r\n    return this.dispatch(\"delete\", [key]);\r\n};\r\n\r\n/**\r\n * Invokes a method in a future turn.\r\n * @param object    promise or immediate reference for target object\r\n * @param name      name of method to invoke\r\n * @param value     a value to post, typically an array of\r\n *                  invocation arguments for promises that\r\n *                  are ultimately backed with `resolve` values,\r\n *                  as opposed to those backed with URLs\r\n *                  wherein the posted value can be any\r\n *                  JSON serializable object.\r\n * @return promise for the return value\r\n */\r\n// bound locally because it is used by other methods\r\nQ.mapply = // XXX As proposed by \"Redsandro\"\r\nQ.post = function (object, name, args) {\r\n    return Q(object).dispatch(\"post\", [name, args]);\r\n};\r\n\r\nPromise.prototype.mapply = // XXX As proposed by \"Redsandro\"\r\nPromise.prototype.post = function (name, args) {\r\n    return this.dispatch(\"post\", [name, args]);\r\n};\r\n\r\n/**\r\n * Invokes a method in a future turn.\r\n * @param object    promise or immediate reference for target object\r\n * @param name      name of method to invoke\r\n * @param ...args   array of invocation arguments\r\n * @return promise for the return value\r\n */\r\nQ.send = // XXX Mark Miller's proposed parlance\r\nQ.mcall = // XXX As proposed by \"Redsandro\"\r\nQ.invoke = function (object, name /*...args*/) {\r\n    return Q(object).dispatch(\"post\", [name, array_slice(arguments, 2)]);\r\n};\r\n\r\nPromise.prototype.send = // XXX Mark Miller's proposed parlance\r\nPromise.prototype.mcall = // XXX As proposed by \"Redsandro\"\r\nPromise.prototype.invoke = function (name /*...args*/) {\r\n    return this.dispatch(\"post\", [name, array_slice(arguments, 1)]);\r\n};\r\n\r\n/**\r\n * Applies the promised function in a future turn.\r\n * @param object    promise or immediate reference for target function\r\n * @param args      array of application arguments\r\n */\r\nQ.fapply = function (object, args) {\r\n    return Q(object).dispatch(\"apply\", [void 0, args]);\r\n};\r\n\r\nPromise.prototype.fapply = function (args) {\r\n    return this.dispatch(\"apply\", [void 0, args]);\r\n};\r\n\r\n/**\r\n * Calls the promised function in a future turn.\r\n * @param object    promise or immediate reference for target function\r\n * @param ...args   array of application arguments\r\n */\r\nQ[\"try\"] =\r\nQ.fcall = function (object /* ...args*/) {\r\n    return Q(object).dispatch(\"apply\", [void 0, array_slice(arguments, 1)]);\r\n};\r\n\r\nPromise.prototype.fcall = function (/*...args*/) {\r\n    return this.dispatch(\"apply\", [void 0, array_slice(arguments)]);\r\n};\r\n\r\n/**\r\n * Binds the promised function, transforming return values into a fulfilled\r\n * promise and thrown errors into a rejected one.\r\n * @param object    promise or immediate reference for target function\r\n * @param ...args   array of application arguments\r\n */\r\nQ.fbind = function (object /*...args*/) {\r\n    var promise = Q(object);\r\n    var args = array_slice(arguments, 1);\r\n    return function fbound() {\r\n        return promise.dispatch(\"apply\", [\r\n            this,\r\n            args.concat(array_slice(arguments))\r\n        ]);\r\n    };\r\n};\r\nPromise.prototype.fbind = function (/*...args*/) {\r\n    var promise = this;\r\n    var args = array_slice(arguments);\r\n    return function fbound() {\r\n        return promise.dispatch(\"apply\", [\r\n            this,\r\n            args.concat(array_slice(arguments))\r\n        ]);\r\n    };\r\n};\r\n\r\n/**\r\n * Requests the names of the owned properties of a promised\r\n * object in a future turn.\r\n * @param object    promise or immediate reference for target object\r\n * @return promise for the keys of the eventually settled object\r\n */\r\nQ.keys = function (object) {\r\n    return Q(object).dispatch(\"keys\", []);\r\n};\r\n\r\nPromise.prototype.keys = function () {\r\n    return this.dispatch(\"keys\", []);\r\n};\r\n\r\n/**\r\n * Turns an array of promises into a promise for an array.  If any of\r\n * the promises gets rejected, the whole array is rejected immediately.\r\n * @param {Array*} an array (or promise for an array) of values (or\r\n * promises for values)\r\n * @returns a promise for an array of the corresponding values\r\n */\r\n// By Mark Miller\r\n// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled\r\nQ.all = all;\r\nfunction all(promises) {\r\n    return when(promises, function (promises) {\r\n        var pendingCount = 0;\r\n        var deferred = defer();\r\n        array_reduce(promises, function (undefined, promise, index) {\r\n            var snapshot;\r\n            if (\r\n                isPromise(promise) &&\r\n                (snapshot = promise.inspect()).state === \"fulfilled\"\r\n            ) {\r\n                promises[index] = snapshot.value;\r\n            } else {\r\n                ++pendingCount;\r\n                when(\r\n                    promise,\r\n                    function (value) {\r\n                        promises[index] = value;\r\n                        if (--pendingCount === 0) {\r\n                            deferred.resolve(promises);\r\n                        }\r\n                    },\r\n                    deferred.reject,\r\n                    function (progress) {\r\n                        deferred.notify({ index: index, value: progress });\r\n                    }\r\n                );\r\n            }\r\n        }, void 0);\r\n        if (pendingCount === 0) {\r\n            deferred.resolve(promises);\r\n        }\r\n        return deferred.promise;\r\n    });\r\n}\r\n\r\nPromise.prototype.all = function () {\r\n    return all(this);\r\n};\r\n\r\n/**\r\n * Returns the first resolved promise of an array. Prior rejected promises are\r\n * ignored.  Rejects only if all promises are rejected.\r\n * @param {Array*} an array containing values or promises for values\r\n * @returns a promise fulfilled with the value of the first resolved promise,\r\n * or a rejected promise if all promises are rejected.\r\n */\r\nQ.any = any;\r\n\r\nfunction any(promises) {\r\n    if (promises.length === 0) {\r\n        return Q.resolve();\r\n    }\r\n\r\n    var deferred = Q.defer();\r\n    var pendingCount = 0;\r\n    array_reduce(promises, function (prev, current, index) {\r\n        var promise = promises[index];\r\n\r\n        pendingCount++;\r\n\r\n        when(promise, onFulfilled, onRejected, onProgress);\r\n        function onFulfilled(result) {\r\n            deferred.resolve(result);\r\n        }\r\n        function onRejected(err) {\r\n            pendingCount--;\r\n            if (pendingCount === 0) {\r\n                var rejection = err || new Error(\"\" + err);\r\n\r\n                rejection.message = (\"Q can't get fulfillment value from any promise, all \" +\r\n                    \"promises were rejected. Last error message: \" + rejection.message);\r\n\r\n                deferred.reject(rejection);\r\n            }\r\n        }\r\n        function onProgress(progress) {\r\n            deferred.notify({\r\n                index: index,\r\n                value: progress\r\n            });\r\n        }\r\n    }, undefined);\r\n\r\n    return deferred.promise;\r\n}\r\n\r\nPromise.prototype.any = function () {\r\n    return any(this);\r\n};\r\n\r\n/**\r\n * Waits for all promises to be settled, either fulfilled or\r\n * rejected.  This is distinct from `all` since that would stop\r\n * waiting at the first rejection.  The promise returned by\r\n * `allResolved` will never be rejected.\r\n * @param promises a promise for an array (or an array) of promises\r\n * (or values)\r\n * @return a promise for an array of promises\r\n */\r\nQ.allResolved = deprecate(allResolved, \"allResolved\", \"allSettled\");\r\nfunction allResolved(promises) {\r\n    return when(promises, function (promises) {\r\n        promises = array_map(promises, Q);\r\n        return when(all(array_map(promises, function (promise) {\r\n            return when(promise, noop, noop);\r\n        })), function () {\r\n            return promises;\r\n        });\r\n    });\r\n}\r\n\r\nPromise.prototype.allResolved = function () {\r\n    return allResolved(this);\r\n};\r\n\r\n/**\r\n * @see Promise#allSettled\r\n */\r\nQ.allSettled = allSettled;\r\nfunction allSettled(promises) {\r\n    return Q(promises).allSettled();\r\n}\r\n\r\n/**\r\n * Turns an array of promises into a promise for an array of their states (as\r\n * returned by `inspect`) when they have all settled.\r\n * @param {Array[Any*]} values an array (or promise for an array) of values (or\r\n * promises for values)\r\n * @returns {Array[State]} an array of states for the respective values.\r\n */\r\nPromise.prototype.allSettled = function () {\r\n    return this.then(function (promises) {\r\n        return all(array_map(promises, function (promise) {\r\n            promise = Q(promise);\r\n            function regardless() {\r\n                return promise.inspect();\r\n            }\r\n            return promise.then(regardless, regardless);\r\n        }));\r\n    });\r\n};\r\n\r\n/**\r\n * Captures the failure of a promise, giving an oportunity to recover\r\n * with a callback.  If the given promise is fulfilled, the returned\r\n * promise is fulfilled.\r\n * @param {Any*} promise for something\r\n * @param {Function} callback to fulfill the returned promise if the\r\n * given promise is rejected\r\n * @returns a promise for the return value of the callback\r\n */\r\nQ.fail = // XXX legacy\r\nQ[\"catch\"] = function (object, rejected) {\r\n    return Q(object).then(void 0, rejected);\r\n};\r\n\r\nPromise.prototype.fail = // XXX legacy\r\nPromise.prototype[\"catch\"] = function (rejected) {\r\n    return this.then(void 0, rejected);\r\n};\r\n\r\n/**\r\n * Attaches a listener that can respond to progress notifications from a\r\n * promise's originating deferred. This listener receives the exact arguments\r\n * passed to ``deferred.notify``.\r\n * @param {Any*} promise for something\r\n * @param {Function} callback to receive any progress notifications\r\n * @returns the given promise, unchanged\r\n */\r\nQ.progress = progress;\r\nfunction progress(object, progressed) {\r\n    return Q(object).then(void 0, void 0, progressed);\r\n}\r\n\r\nPromise.prototype.progress = function (progressed) {\r\n    return this.then(void 0, void 0, progressed);\r\n};\r\n\r\n/**\r\n * Provides an opportunity to observe the settling of a promise,\r\n * regardless of whether the promise is fulfilled or rejected.  Forwards\r\n * the resolution to the returned promise when the callback is done.\r\n * The callback can return a promise to defer completion.\r\n * @param {Any*} promise\r\n * @param {Function} callback to observe the resolution of the given\r\n * promise, takes no arguments.\r\n * @returns a promise for the resolution of the given promise when\r\n * ``fin`` is done.\r\n */\r\nQ.fin = // XXX legacy\r\nQ[\"finally\"] = function (object, callback) {\r\n    return Q(object)[\"finally\"](callback);\r\n};\r\n\r\nPromise.prototype.fin = // XXX legacy\r\nPromise.prototype[\"finally\"] = function (callback) {\r\n    if (!callback || typeof callback.apply !== \"function\") {\r\n        throw new Error(\"Q can't apply finally callback\");\r\n    }\r\n    callback = Q(callback);\r\n    return this.then(function (value) {\r\n        return callback.fcall().then(function () {\r\n            return value;\r\n        });\r\n    }, function (reason) {\r\n        // TODO attempt to recycle the rejection with \"this\".\r\n        return callback.fcall().then(function () {\r\n            throw reason;\r\n        });\r\n    });\r\n};\r\n\r\n/**\r\n * Terminates a chain of promises, forcing rejections to be\r\n * thrown as exceptions.\r\n * @param {Any*} promise at the end of a chain of promises\r\n * @returns nothing\r\n */\r\nQ.done = function (object, fulfilled, rejected, progress) {\r\n    return Q(object).done(fulfilled, rejected, progress);\r\n};\r\n\r\nPromise.prototype.done = function (fulfilled, rejected, progress) {\r\n    var onUnhandledError = function (error) {\r\n        // forward to a future turn so that ``when``\r\n        // does not catch it and turn it into a rejection.\r\n        Q.nextTick(function () {\r\n            makeStackTraceLong(error, promise);\r\n            if (Q.onerror) {\r\n                Q.onerror(error);\r\n            } else {\r\n                throw error;\r\n            }\r\n        });\r\n    };\r\n\r\n    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.\r\n    var promise = fulfilled || rejected || progress ?\r\n        this.then(fulfilled, rejected, progress) :\r\n        this;\r\n\r\n    if (typeof process === \"object\" && process && process.domain) {\r\n        onUnhandledError = process.domain.bind(onUnhandledError);\r\n    }\r\n\r\n    promise.then(void 0, onUnhandledError);\r\n};\r\n\r\n/**\r\n * Causes a promise to be rejected if it does not get fulfilled before\r\n * some milliseconds time out.\r\n * @param {Any*} promise\r\n * @param {Number} milliseconds timeout\r\n * @param {Any*} custom error message or Error object (optional)\r\n * @returns a promise for the resolution of the given promise if it is\r\n * fulfilled before the timeout, otherwise rejected.\r\n */\r\nQ.timeout = function (object, ms, error) {\r\n    return Q(object).timeout(ms, error);\r\n};\r\n\r\nPromise.prototype.timeout = function (ms, error) {\r\n    var deferred = defer();\r\n    var timeoutId = setTimeout(function () {\r\n        if (!error || \"string\" === typeof error) {\r\n            error = new Error(error || \"Timed out after \" + ms + \" ms\");\r\n            error.code = \"ETIMEDOUT\";\r\n        }\r\n        deferred.reject(error);\r\n    }, ms);\r\n\r\n    this.then(function (value) {\r\n        clearTimeout(timeoutId);\r\n        deferred.resolve(value);\r\n    }, function (exception) {\r\n        clearTimeout(timeoutId);\r\n        deferred.reject(exception);\r\n    }, deferred.notify);\r\n\r\n    return deferred.promise;\r\n};\r\n\r\n/**\r\n * Returns a promise for the given value (or promised value), some\r\n * milliseconds after it resolved. Passes rejections immediately.\r\n * @param {Any*} promise\r\n * @param {Number} milliseconds\r\n * @returns a promise for the resolution of the given promise after milliseconds\r\n * time has elapsed since the resolution of the given promise.\r\n * If the given promise rejects, that is passed immediately.\r\n */\r\nQ.delay = function (object, timeout) {\r\n    if (timeout === void 0) {\r\n        timeout = object;\r\n        object = void 0;\r\n    }\r\n    return Q(object).delay(timeout);\r\n};\r\n\r\nPromise.prototype.delay = function (timeout) {\r\n    return this.then(function (value) {\r\n        var deferred = defer();\r\n        setTimeout(function () {\r\n            deferred.resolve(value);\r\n        }, timeout);\r\n        return deferred.promise;\r\n    });\r\n};\r\n\r\n/**\r\n * Passes a continuation to a Node function, which is called with the given\r\n * arguments provided as an array, and returns a promise.\r\n *\r\n *      Q.nfapply(FS.readFile, [__filename])\r\n *      .then(function (content) {\r\n *      })\r\n *\r\n */\r\nQ.nfapply = function (callback, args) {\r\n    return Q(callback).nfapply(args);\r\n};\r\n\r\nPromise.prototype.nfapply = function (args) {\r\n    var deferred = defer();\r\n    var nodeArgs = array_slice(args);\r\n    nodeArgs.push(deferred.makeNodeResolver());\r\n    this.fapply(nodeArgs).fail(deferred.reject);\r\n    return deferred.promise;\r\n};\r\n\r\n/**\r\n * Passes a continuation to a Node function, which is called with the given\r\n * arguments provided individually, and returns a promise.\r\n * @example\r\n * Q.nfcall(FS.readFile, __filename)\r\n * .then(function (content) {\r\n * })\r\n *\r\n */\r\nQ.nfcall = function (callback /*...args*/) {\r\n    var args = array_slice(arguments, 1);\r\n    return Q(callback).nfapply(args);\r\n};\r\n\r\nPromise.prototype.nfcall = function (/*...args*/) {\r\n    var nodeArgs = array_slice(arguments);\r\n    var deferred = defer();\r\n    nodeArgs.push(deferred.makeNodeResolver());\r\n    this.fapply(nodeArgs).fail(deferred.reject);\r\n    return deferred.promise;\r\n};\r\n\r\n/**\r\n * Wraps a NodeJS continuation passing function and returns an equivalent\r\n * version that returns a promise.\r\n * @example\r\n * Q.nfbind(FS.readFile, __filename)(\"utf-8\")\r\n * .then(console.log)\r\n * .done()\r\n */\r\nQ.nfbind =\r\nQ.denodeify = function (callback /*...args*/) {\r\n    if (callback === undefined) {\r\n        throw new Error(\"Q can't wrap an undefined function\");\r\n    }\r\n    var baseArgs = array_slice(arguments, 1);\r\n    return function () {\r\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\r\n        var deferred = defer();\r\n        nodeArgs.push(deferred.makeNodeResolver());\r\n        Q(callback).fapply(nodeArgs).fail(deferred.reject);\r\n        return deferred.promise;\r\n    };\r\n};\r\n\r\nPromise.prototype.nfbind =\r\nPromise.prototype.denodeify = function (/*...args*/) {\r\n    var args = array_slice(arguments);\r\n    args.unshift(this);\r\n    return Q.denodeify.apply(void 0, args);\r\n};\r\n\r\nQ.nbind = function (callback, thisp /*...args*/) {\r\n    var baseArgs = array_slice(arguments, 2);\r\n    return function () {\r\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\r\n        var deferred = defer();\r\n        nodeArgs.push(deferred.makeNodeResolver());\r\n        function bound() {\r\n            return callback.apply(thisp, arguments);\r\n        }\r\n        Q(bound).fapply(nodeArgs).fail(deferred.reject);\r\n        return deferred.promise;\r\n    };\r\n};\r\n\r\nPromise.prototype.nbind = function (/*thisp, ...args*/) {\r\n    var args = array_slice(arguments, 0);\r\n    args.unshift(this);\r\n    return Q.nbind.apply(void 0, args);\r\n};\r\n\r\n/**\r\n * Calls a method of a Node-style object that accepts a Node-style\r\n * callback with a given array of arguments, plus a provided callback.\r\n * @param object an object that has the named method\r\n * @param {String} name name of the method of object\r\n * @param {Array} args arguments to pass to the method; the callback\r\n * will be provided by Q and appended to these arguments.\r\n * @returns a promise for the value or error\r\n */\r\nQ.nmapply = // XXX As proposed by \"Redsandro\"\r\nQ.npost = function (object, name, args) {\r\n    return Q(object).npost(name, args);\r\n};\r\n\r\nPromise.prototype.nmapply = // XXX As proposed by \"Redsandro\"\r\nPromise.prototype.npost = function (name, args) {\r\n    var nodeArgs = array_slice(args || []);\r\n    var deferred = defer();\r\n    nodeArgs.push(deferred.makeNodeResolver());\r\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\r\n    return deferred.promise;\r\n};\r\n\r\n/**\r\n * Calls a method of a Node-style object that accepts a Node-style\r\n * callback, forwarding the given variadic arguments, plus a provided\r\n * callback argument.\r\n * @param object an object that has the named method\r\n * @param {String} name name of the method of object\r\n * @param ...args arguments to pass to the method; the callback will\r\n * be provided by Q and appended to these arguments.\r\n * @returns a promise for the value or error\r\n */\r\nQ.nsend = // XXX Based on Mark Miller's proposed \"send\"\r\nQ.nmcall = // XXX Based on \"Redsandro's\" proposal\r\nQ.ninvoke = function (object, name /*...args*/) {\r\n    var nodeArgs = array_slice(arguments, 2);\r\n    var deferred = defer();\r\n    nodeArgs.push(deferred.makeNodeResolver());\r\n    Q(object).dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\r\n    return deferred.promise;\r\n};\r\n\r\nPromise.prototype.nsend = // XXX Based on Mark Miller's proposed \"send\"\r\nPromise.prototype.nmcall = // XXX Based on \"Redsandro's\" proposal\r\nPromise.prototype.ninvoke = function (name /*...args*/) {\r\n    var nodeArgs = array_slice(arguments, 1);\r\n    var deferred = defer();\r\n    nodeArgs.push(deferred.makeNodeResolver());\r\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\r\n    return deferred.promise;\r\n};\r\n\r\n/**\r\n * If a function would like to support both Node continuation-passing-style and\r\n * promise-returning-style, it can end its internal promise chain with\r\n * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user\r\n * elects to use a nodeback, the result will be sent there.  If they do not\r\n * pass a nodeback, they will receive the result promise.\r\n * @param object a result (or a promise for a result)\r\n * @param {Function} nodeback a Node.js-style callback\r\n * @returns either the promise or nothing\r\n */\r\nQ.nodeify = nodeify;\r\nfunction nodeify(object, nodeback) {\r\n    return Q(object).nodeify(nodeback);\r\n}\r\n\r\nPromise.prototype.nodeify = function (nodeback) {\r\n    if (nodeback) {\r\n        this.then(function (value) {\r\n            Q.nextTick(function () {\r\n                nodeback(null, value);\r\n            });\r\n        }, function (error) {\r\n            Q.nextTick(function () {\r\n                nodeback(error);\r\n            });\r\n        });\r\n    } else {\r\n        return this;\r\n    }\r\n};\r\n\r\nQ.noConflict = function() {\r\n    throw new Error(\"Q.noConflict only works when Q is used as a global\");\r\n};\r\n\r\n// All code before this point will be filtered from stack traces.\r\nvar qEndingLine = captureLine();\r\n\r\nreturn Q;\r\n\r\n});\r\n"]},"metadata":{},"sourceType":"script"}