{"ast":null,"code":"'use strict';\n\nvar ArrayBufferViewCore = require('../internals/array-buffer-view-core');\n\nvar toLength = require('../internals/to-length');\n\nvar toOffset = require('../internals/to-offset');\n\nvar toObject = require('../internals/to-object');\n\nvar fails = require('../internals/fails');\n\nvar aTypedArray = ArrayBufferViewCore.aTypedArray;\nvar exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\nvar FORCED = fails(function () {\n  // eslint-disable-next-line no-undef\n  new Int8Array(1).set({});\n}); // `%TypedArray%.prototype.set` method\n// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.set\n\nexportTypedArrayMethod('set', function set(arrayLike\n/* , offset */\n) {\n  aTypedArray(this);\n  var offset = toOffset(arguments.length > 1 ? arguments[1] : undefined, 1);\n  var length = this.length;\n  var src = toObject(arrayLike);\n  var len = toLength(src.length);\n  var index = 0;\n  if (len + offset > length) throw RangeError('Wrong length');\n\n  while (index < len) this[offset + index] = src[index++];\n}, FORCED);","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Backend/node_modules/core-js/modules/es.typed-array.set.js"],"names":["ArrayBufferViewCore","require","toLength","toOffset","toObject","fails","aTypedArray","exportTypedArrayMethod","FORCED","Int8Array","set","arrayLike","offset","arguments","length","undefined","src","len","index","RangeError"],"mappings":"AAAA;;AACA,IAAIA,mBAAmB,GAAGC,OAAO,CAAC,qCAAD,CAAjC;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,wBAAD,CAAtB;;AACA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,wBAAD,CAAtB;;AACA,IAAIG,QAAQ,GAAGH,OAAO,CAAC,wBAAD,CAAtB;;AACA,IAAII,KAAK,GAAGJ,OAAO,CAAC,oBAAD,CAAnB;;AAEA,IAAIK,WAAW,GAAGN,mBAAmB,CAACM,WAAtC;AACA,IAAIC,sBAAsB,GAAGP,mBAAmB,CAACO,sBAAjD;AAEA,IAAIC,MAAM,GAAGH,KAAK,CAAC,YAAY;AAC7B;AACA,MAAII,SAAJ,CAAc,CAAd,EAAiBC,GAAjB,CAAqB,EAArB;AACD,CAHiB,CAAlB,C,CAKA;AACA;;AACAH,sBAAsB,CAAC,KAAD,EAAQ,SAASG,GAAT,CAAaC;AAAU;AAAvB,EAAuC;AACnEL,EAAAA,WAAW,CAAC,IAAD,CAAX;AACA,MAAIM,MAAM,GAAGT,QAAQ,CAACU,SAAS,CAACC,MAAV,GAAmB,CAAnB,GAAuBD,SAAS,CAAC,CAAD,CAAhC,GAAsCE,SAAvC,EAAkD,CAAlD,CAArB;AACA,MAAID,MAAM,GAAG,KAAKA,MAAlB;AACA,MAAIE,GAAG,GAAGZ,QAAQ,CAACO,SAAD,CAAlB;AACA,MAAIM,GAAG,GAAGf,QAAQ,CAACc,GAAG,CAACF,MAAL,CAAlB;AACA,MAAII,KAAK,GAAG,CAAZ;AACA,MAAID,GAAG,GAAGL,MAAN,GAAeE,MAAnB,EAA2B,MAAMK,UAAU,CAAC,cAAD,CAAhB;;AAC3B,SAAOD,KAAK,GAAGD,GAAf,EAAoB,KAAKL,MAAM,GAAGM,KAAd,IAAuBF,GAAG,CAACE,KAAK,EAAN,CAA1B;AACrB,CATqB,EASnBV,MATmB,CAAtB","sourcesContent":["'use strict';\r\nvar ArrayBufferViewCore = require('../internals/array-buffer-view-core');\r\nvar toLength = require('../internals/to-length');\r\nvar toOffset = require('../internals/to-offset');\r\nvar toObject = require('../internals/to-object');\r\nvar fails = require('../internals/fails');\r\n\r\nvar aTypedArray = ArrayBufferViewCore.aTypedArray;\r\nvar exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\r\n\r\nvar FORCED = fails(function () {\r\n  // eslint-disable-next-line no-undef\r\n  new Int8Array(1).set({});\r\n});\r\n\r\n// `%TypedArray%.prototype.set` method\r\n// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.set\r\nexportTypedArrayMethod('set', function set(arrayLike /* , offset */) {\r\n  aTypedArray(this);\r\n  var offset = toOffset(arguments.length > 1 ? arguments[1] : undefined, 1);\r\n  var length = this.length;\r\n  var src = toObject(arrayLike);\r\n  var len = toLength(src.length);\r\n  var index = 0;\r\n  if (len + offset > length) throw RangeError('Wrong length');\r\n  while (index < len) this[offset + index] = src[index++];\r\n}, FORCED);\r\n"]},"metadata":{},"sourceType":"script"}