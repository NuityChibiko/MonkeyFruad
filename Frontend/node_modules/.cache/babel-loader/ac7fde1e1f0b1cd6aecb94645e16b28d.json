{"ast":null,"code":"/*!\r\n *  Copyright 2010 LearnBoost <dev@learnboost.com>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Module dependencies.\r\n */\nvar crypto = require('crypto'),\n    parse = require('url').parse;\n/**\r\n * Valid keys.\r\n */\n\n\nvar keys = ['acl', 'location', 'logging', 'notification', 'partNumber', 'policy', 'requestPayment', 'torrent', 'uploadId', 'uploads', 'versionId', 'versioning', 'versions', 'website'];\n/**\r\n * Return an \"Authorization\" header value with the given `options`\r\n * in the form of \"AWS <key>:<signature>\"\r\n *\r\n * @param {Object} options\r\n * @return {String}\r\n * @api private\r\n */\n\nfunction authorization(options) {\n  return 'AWS ' + options.key + ':' + sign(options);\n}\n\nmodule.exports = authorization;\nmodule.exports.authorization = authorization;\n/**\r\n * Simple HMAC-SHA1 Wrapper\r\n *\r\n * @param {Object} options\r\n * @return {String}\r\n * @api private\r\n */\n\nfunction hmacSha1(options) {\n  return crypto.createHmac('sha1', options.secret).update(options.message).digest('base64');\n}\n\nmodule.exports.hmacSha1 = hmacSha1;\n/**\r\n * Create a base64 sha1 HMAC for `options`. \r\n * \r\n * @param {Object} options\r\n * @return {String}\r\n * @api private\r\n */\n\nfunction sign(options) {\n  options.message = stringToSign(options);\n  return hmacSha1(options);\n}\n\nmodule.exports.sign = sign;\n/**\r\n * Create a base64 sha1 HMAC for `options`. \r\n *\r\n * Specifically to be used with S3 presigned URLs\r\n * \r\n * @param {Object} options\r\n * @return {String}\r\n * @api private\r\n */\n\nfunction signQuery(options) {\n  options.message = queryStringToSign(options);\n  return hmacSha1(options);\n}\n\nmodule.exports.signQuery = signQuery;\n/**\r\n * Return a string for sign() with the given `options`.\r\n *\r\n * Spec:\r\n * \r\n *    <verb>\\n\r\n *    <md5>\\n\r\n *    <content-type>\\n\r\n *    <date>\\n\r\n *    [headers\\n]\r\n *    <resource>\r\n *\r\n * @param {Object} options\r\n * @return {String}\r\n * @api private\r\n */\n\nfunction stringToSign(options) {\n  var headers = options.amazonHeaders || '';\n  if (headers) headers += '\\n';\n  var r = [options.verb, options.md5, options.contentType, options.date ? options.date.toUTCString() : '', headers + options.resource];\n  return r.join('\\n');\n}\n\nmodule.exports.stringToSign = stringToSign;\n/**\r\n * Return a string for sign() with the given `options`, but is meant exclusively\r\n * for S3 presigned URLs\r\n *\r\n * Spec:\r\n * \r\n *    <date>\\n\r\n *    <resource>\r\n *\r\n * @param {Object} options\r\n * @return {String}\r\n * @api private\r\n */\n\nfunction queryStringToSign(options) {\n  return 'GET\\n\\n\\n' + options.date + '\\n' + options.resource;\n}\n\nmodule.exports.queryStringToSign = queryStringToSign;\n/**\r\n * Perform the following:\r\n *\r\n *  - ignore non-amazon headers\r\n *  - lowercase fields\r\n *  - sort lexicographically\r\n *  - trim whitespace between \":\"\r\n *  - join with newline\r\n *\r\n * @param {Object} headers\r\n * @return {String}\r\n * @api private\r\n */\n\nfunction canonicalizeHeaders(headers) {\n  var buf = [],\n      fields = Object.keys(headers);\n\n  for (var i = 0, len = fields.length; i < len; ++i) {\n    var field = fields[i],\n        val = headers[field],\n        field = field.toLowerCase();\n    if (0 !== field.indexOf('x-amz')) continue;\n    buf.push(field + ':' + val);\n  }\n\n  return buf.sort().join('\\n');\n}\n\nmodule.exports.canonicalizeHeaders = canonicalizeHeaders;\n/**\r\n * Perform the following:\r\n *\r\n *  - ignore non sub-resources\r\n *  - sort lexicographically\r\n *\r\n * @param {String} resource\r\n * @return {String}\r\n * @api private\r\n */\n\nfunction canonicalizeResource(resource) {\n  var url = parse(resource, true),\n      path = url.pathname,\n      buf = [];\n  Object.keys(url.query).forEach(function (key) {\n    if (!~keys.indexOf(key)) return;\n    var val = '' == url.query[key] ? '' : '=' + encodeURIComponent(url.query[key]);\n    buf.push(key + val);\n  });\n  return path + (buf.length ? '?' + buf.sort().join('&') : '');\n}\n\nmodule.exports.canonicalizeResource = canonicalizeResource;","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Frontend/node_modules/aws-sign2/index.js"],"names":["crypto","require","parse","keys","authorization","options","key","sign","module","exports","hmacSha1","createHmac","secret","update","message","digest","stringToSign","signQuery","queryStringToSign","headers","amazonHeaders","r","verb","md5","contentType","date","toUTCString","resource","join","canonicalizeHeaders","buf","fields","Object","i","len","length","field","val","toLowerCase","indexOf","push","sort","canonicalizeResource","url","path","pathname","query","forEach","encodeURIComponent"],"mappings":"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","sourcesContent":["\r\n/*!\r\n *  Copyright 2010 LearnBoost <dev@learnboost.com>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar crypto = require('crypto')\r\n  , parse = require('url').parse\r\n  ;\r\n\r\n/**\r\n * Valid keys.\r\n */\r\n\r\nvar keys = \r\n  [ 'acl'\r\n  , 'location'\r\n  , 'logging'\r\n  , 'notification'\r\n  , 'partNumber'\r\n  , 'policy'\r\n  , 'requestPayment'\r\n  , 'torrent'\r\n  , 'uploadId'\r\n  , 'uploads'\r\n  , 'versionId'\r\n  , 'versioning'\r\n  , 'versions'\r\n  , 'website'\r\n  ]\r\n\r\n/**\r\n * Return an \"Authorization\" header value with the given `options`\r\n * in the form of \"AWS <key>:<signature>\"\r\n *\r\n * @param {Object} options\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nfunction authorization (options) {\r\n  return 'AWS ' + options.key + ':' + sign(options)\r\n}\r\n\r\nmodule.exports = authorization\r\nmodule.exports.authorization = authorization\r\n\r\n/**\r\n * Simple HMAC-SHA1 Wrapper\r\n *\r\n * @param {Object} options\r\n * @return {String}\r\n * @api private\r\n */ \r\n\r\nfunction hmacSha1 (options) {\r\n  return crypto.createHmac('sha1', options.secret).update(options.message).digest('base64')\r\n}\r\n\r\nmodule.exports.hmacSha1 = hmacSha1\r\n\r\n/**\r\n * Create a base64 sha1 HMAC for `options`. \r\n * \r\n * @param {Object} options\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nfunction sign (options) {\r\n  options.message = stringToSign(options)\r\n  return hmacSha1(options)\r\n}\r\nmodule.exports.sign = sign\r\n\r\n/**\r\n * Create a base64 sha1 HMAC for `options`. \r\n *\r\n * Specifically to be used with S3 presigned URLs\r\n * \r\n * @param {Object} options\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nfunction signQuery (options) {\r\n  options.message = queryStringToSign(options)\r\n  return hmacSha1(options)\r\n}\r\nmodule.exports.signQuery= signQuery\r\n\r\n/**\r\n * Return a string for sign() with the given `options`.\r\n *\r\n * Spec:\r\n * \r\n *    <verb>\\n\r\n *    <md5>\\n\r\n *    <content-type>\\n\r\n *    <date>\\n\r\n *    [headers\\n]\r\n *    <resource>\r\n *\r\n * @param {Object} options\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nfunction stringToSign (options) {\r\n  var headers = options.amazonHeaders || ''\r\n  if (headers) headers += '\\n'\r\n  var r = \r\n    [ options.verb\r\n    , options.md5\r\n    , options.contentType\r\n    , options.date ? options.date.toUTCString() : ''\r\n    , headers + options.resource\r\n    ]\r\n  return r.join('\\n')\r\n}\r\nmodule.exports.stringToSign = stringToSign\r\n\r\n/**\r\n * Return a string for sign() with the given `options`, but is meant exclusively\r\n * for S3 presigned URLs\r\n *\r\n * Spec:\r\n * \r\n *    <date>\\n\r\n *    <resource>\r\n *\r\n * @param {Object} options\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nfunction queryStringToSign (options){\r\n  return 'GET\\n\\n\\n' + options.date + '\\n' + options.resource\r\n}\r\nmodule.exports.queryStringToSign = queryStringToSign\r\n\r\n/**\r\n * Perform the following:\r\n *\r\n *  - ignore non-amazon headers\r\n *  - lowercase fields\r\n *  - sort lexicographically\r\n *  - trim whitespace between \":\"\r\n *  - join with newline\r\n *\r\n * @param {Object} headers\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nfunction canonicalizeHeaders (headers) {\r\n  var buf = []\r\n    , fields = Object.keys(headers)\r\n    ;\r\n  for (var i = 0, len = fields.length; i < len; ++i) {\r\n    var field = fields[i]\r\n      , val = headers[field]\r\n      , field = field.toLowerCase()\r\n      ;\r\n    if (0 !== field.indexOf('x-amz')) continue\r\n    buf.push(field + ':' + val)\r\n  }\r\n  return buf.sort().join('\\n')\r\n}\r\nmodule.exports.canonicalizeHeaders = canonicalizeHeaders\r\n\r\n/**\r\n * Perform the following:\r\n *\r\n *  - ignore non sub-resources\r\n *  - sort lexicographically\r\n *\r\n * @param {String} resource\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nfunction canonicalizeResource (resource) {\r\n  var url = parse(resource, true)\r\n    , path = url.pathname\r\n    , buf = []\r\n    ;\r\n\r\n  Object.keys(url.query).forEach(function(key){\r\n    if (!~keys.indexOf(key)) return\r\n    var val = '' == url.query[key] ? '' : '=' + encodeURIComponent(url.query[key])\r\n    buf.push(key + val)\r\n  })\r\n\r\n  return path + (buf.length ? '?' + buf.sort().join('&') : '')\r\n}\r\nmodule.exports.canonicalizeResource = canonicalizeResource\r\n"]},"metadata":{},"sourceType":"script"}