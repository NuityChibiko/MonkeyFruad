{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.oneOf = void 0;\n\nconst _ = require(\"lodash\");\n\nconst chain_1 = require(\"../chain\");\n\nconst context_builder_1 = require(\"../context-builder\"); // A dummy context item that gets added to surrogate contexts just to make them run\n\n\nconst dummyItem = {\n  async run() {}\n\n};\n\nfunction oneOf(chains, message) {\n  return async (req, _res, next) => {\n    const surrogateContext = new context_builder_1.ContextBuilder().addItem(dummyItem).build(); // Run each group of chains in parallel, and within each group, run each chain in parallel too.\n\n    const promises = chains.map(async chain => {\n      const group = Array.isArray(chain) ? chain : [chain];\n      const results = await Promise.all(group.map(chain => chain.run(req, {\n        dryRun: true\n      })));\n      const contexts = results.map(result => result.context);\n\n      const groupErrors = _.flatMap(contexts, 'errors'); // #536: The data from a chain within oneOf() can only be made available to e.g. matchedData()\n      // if its entire group is valid.\n\n\n      if (!groupErrors.length) {\n        contexts.forEach(context => {\n          surrogateContext.addFieldInstances(context.getData());\n        });\n      }\n\n      return groupErrors;\n    });\n\n    try {\n      const allErrors = await Promise.all(promises);\n      const success = allErrors.some(groupErrors => groupErrors.length === 0);\n\n      if (!success) {\n        // Only add an error to the context if no group of chains had success.\n        surrogateContext.addError(typeof message === 'function' ? message({\n          req\n        }) : message || 'Invalid value(s)', _.flatMap(allErrors));\n      } // Final context running pass to ensure contexts are added and values are modified properly\n\n\n      await new chain_1.ContextRunnerImpl(surrogateContext).run(req);\n      next();\n    } catch (e) {\n      next(e);\n    }\n  };\n}\n\nexports.oneOf = oneOf;","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Backend/node_modules/express-validator/src/middlewares/one-of.js"],"names":["Object","defineProperty","exports","value","oneOf","_","require","chain_1","context_builder_1","dummyItem","run","chains","message","req","_res","next","surrogateContext","ContextBuilder","addItem","build","promises","map","chain","group","Array","isArray","results","Promise","all","dryRun","contexts","result","context","groupErrors","flatMap","length","forEach","addFieldInstances","getData","allErrors","success","some","addError","ContextRunnerImpl","e"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,KAAR,GAAgB,KAAK,CAArB;;AACA,MAAMC,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,oBAAD,CAAjC,C,CACA;;;AACA,MAAMG,SAAS,GAAG;AAAE,QAAMC,GAAN,GAAY,CAAG;;AAAjB,CAAlB;;AACA,SAASN,KAAT,CAAeO,MAAf,EAAuBC,OAAvB,EAAgC;AAC5B,SAAO,OAAOC,GAAP,EAAYC,IAAZ,EAAkBC,IAAlB,KAA2B;AAC9B,UAAMC,gBAAgB,GAAG,IAAIR,iBAAiB,CAACS,cAAtB,GAAuCC,OAAvC,CAA+CT,SAA/C,EAA0DU,KAA1D,EAAzB,CAD8B,CAE9B;;AACA,UAAMC,QAAQ,GAAGT,MAAM,CAACU,GAAP,CAAW,MAAOC,KAAP,IAAiB;AACzC,YAAMC,KAAK,GAAGC,KAAK,CAACC,OAAN,CAAcH,KAAd,IAAuBA,KAAvB,GAA+B,CAACA,KAAD,CAA7C;AACA,YAAMI,OAAO,GAAG,MAAMC,OAAO,CAACC,GAAR,CAAYL,KAAK,CAACF,GAAN,CAAUC,KAAK,IAAIA,KAAK,CAACZ,GAAN,CAAUG,GAAV,EAAe;AAAEgB,QAAAA,MAAM,EAAE;AAAV,OAAf,CAAnB,CAAZ,CAAtB;AACA,YAAMC,QAAQ,GAAGJ,OAAO,CAACL,GAAR,CAAYU,MAAM,IAAIA,MAAM,CAACC,OAA7B,CAAjB;;AACA,YAAMC,WAAW,GAAG5B,CAAC,CAAC6B,OAAF,CAAUJ,QAAV,EAAoB,QAApB,CAApB,CAJyC,CAKzC;AACA;;;AACA,UAAI,CAACG,WAAW,CAACE,MAAjB,EAAyB;AACrBL,QAAAA,QAAQ,CAACM,OAAT,CAAiBJ,OAAO,IAAI;AACxBhB,UAAAA,gBAAgB,CAACqB,iBAAjB,CAAmCL,OAAO,CAACM,OAAR,EAAnC;AACH,SAFD;AAGH;;AACD,aAAOL,WAAP;AACH,KAbgB,CAAjB;;AAcA,QAAI;AACA,YAAMM,SAAS,GAAG,MAAMZ,OAAO,CAACC,GAAR,CAAYR,QAAZ,CAAxB;AACA,YAAMoB,OAAO,GAAGD,SAAS,CAACE,IAAV,CAAeR,WAAW,IAAIA,WAAW,CAACE,MAAZ,KAAuB,CAArD,CAAhB;;AACA,UAAI,CAACK,OAAL,EAAc;AACV;AACAxB,QAAAA,gBAAgB,CAAC0B,QAAjB,CAA0B,OAAO9B,OAAP,KAAmB,UAAnB,GAAgCA,OAAO,CAAC;AAAEC,UAAAA;AAAF,SAAD,CAAvC,GAAmDD,OAAO,IAAI,kBAAxF,EAA4GP,CAAC,CAAC6B,OAAF,CAAUK,SAAV,CAA5G;AACH,OAND,CAOA;;;AACA,YAAM,IAAIhC,OAAO,CAACoC,iBAAZ,CAA8B3B,gBAA9B,EAAgDN,GAAhD,CAAoDG,GAApD,CAAN;AACAE,MAAAA,IAAI;AACP,KAVD,CAWA,OAAO6B,CAAP,EAAU;AACN7B,MAAAA,IAAI,CAAC6B,CAAD,CAAJ;AACH;AACJ,GA/BD;AAgCH;;AACD1C,OAAO,CAACE,KAAR,GAAgBA,KAAhB","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.oneOf = void 0;\r\nconst _ = require(\"lodash\");\r\nconst chain_1 = require(\"../chain\");\r\nconst context_builder_1 = require(\"../context-builder\");\r\n// A dummy context item that gets added to surrogate contexts just to make them run\r\nconst dummyItem = { async run() { } };\r\nfunction oneOf(chains, message) {\r\n    return async (req, _res, next) => {\r\n        const surrogateContext = new context_builder_1.ContextBuilder().addItem(dummyItem).build();\r\n        // Run each group of chains in parallel, and within each group, run each chain in parallel too.\r\n        const promises = chains.map(async (chain) => {\r\n            const group = Array.isArray(chain) ? chain : [chain];\r\n            const results = await Promise.all(group.map(chain => chain.run(req, { dryRun: true })));\r\n            const contexts = results.map(result => result.context);\r\n            const groupErrors = _.flatMap(contexts, 'errors');\r\n            // #536: The data from a chain within oneOf() can only be made available to e.g. matchedData()\r\n            // if its entire group is valid.\r\n            if (!groupErrors.length) {\r\n                contexts.forEach(context => {\r\n                    surrogateContext.addFieldInstances(context.getData());\r\n                });\r\n            }\r\n            return groupErrors;\r\n        });\r\n        try {\r\n            const allErrors = await Promise.all(promises);\r\n            const success = allErrors.some(groupErrors => groupErrors.length === 0);\r\n            if (!success) {\r\n                // Only add an error to the context if no group of chains had success.\r\n                surrogateContext.addError(typeof message === 'function' ? message({ req }) : message || 'Invalid value(s)', _.flatMap(allErrors));\r\n            }\r\n            // Final context running pass to ensure contexts are added and values are modified properly\r\n            await new chain_1.ContextRunnerImpl(surrogateContext).run(req);\r\n            next();\r\n        }\r\n        catch (e) {\r\n            next(e);\r\n        }\r\n    };\r\n}\r\nexports.oneOf = oneOf;\r\n"]},"metadata":{},"sourceType":"script"}