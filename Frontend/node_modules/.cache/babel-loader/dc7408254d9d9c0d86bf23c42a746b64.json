{"ast":null,"code":"'use strict';\n\nvar $ = require('../internals/export');\n\nvar IS_PURE = require('../internals/is-pure');\n\nvar getBuiltIn = require('../internals/get-built-in');\n\nvar anObject = require('../internals/an-object');\n\nvar aFunction = require('../internals/a-function');\n\nvar bind = require('../internals/function-bind-context');\n\nvar speciesConstructor = require('../internals/species-constructor');\n\nvar getSetIterator = require('../internals/get-set-iterator');\n\nvar iterate = require('../internals/iterate'); // `Set.prototype.map` method\n// https://github.com/tc39/proposal-collection-methods\n\n\n$({\n  target: 'Set',\n  proto: true,\n  real: true,\n  forced: IS_PURE\n}, {\n  map: function map(callbackfn\n  /* , thisArg */\n  ) {\n    var set = anObject(this);\n    var iterator = getSetIterator(set);\n    var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);\n    var newSet = new (speciesConstructor(set, getBuiltIn('Set')))();\n    var adder = aFunction(newSet.add);\n    iterate(iterator, function (value) {\n      adder.call(newSet, boundFunction(value, value, set));\n    }, undefined, false, true);\n    return newSet;\n  }\n});","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Backend/node_modules/core-js/modules/esnext.set.map.js"],"names":["$","require","IS_PURE","getBuiltIn","anObject","aFunction","bind","speciesConstructor","getSetIterator","iterate","target","proto","real","forced","map","callbackfn","set","iterator","boundFunction","arguments","length","undefined","newSet","adder","add","value","call"],"mappings":"AAAA;;AACA,IAAIA,CAAC,GAAGC,OAAO,CAAC,qBAAD,CAAf;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,sBAAD,CAArB;;AACA,IAAIE,UAAU,GAAGF,OAAO,CAAC,2BAAD,CAAxB;;AACA,IAAIG,QAAQ,GAAGH,OAAO,CAAC,wBAAD,CAAtB;;AACA,IAAII,SAAS,GAAGJ,OAAO,CAAC,yBAAD,CAAvB;;AACA,IAAIK,IAAI,GAAGL,OAAO,CAAC,oCAAD,CAAlB;;AACA,IAAIM,kBAAkB,GAAGN,OAAO,CAAC,kCAAD,CAAhC;;AACA,IAAIO,cAAc,GAAGP,OAAO,CAAC,+BAAD,CAA5B;;AACA,IAAIQ,OAAO,GAAGR,OAAO,CAAC,sBAAD,CAArB,C,CAEA;AACA;;;AACAD,CAAC,CAAC;AAAEU,EAAAA,MAAM,EAAE,KAAV;AAAiBC,EAAAA,KAAK,EAAE,IAAxB;AAA8BC,EAAAA,IAAI,EAAE,IAApC;AAA0CC,EAAAA,MAAM,EAAEX;AAAlD,CAAD,EAA8D;AAC7DY,EAAAA,GAAG,EAAE,SAASA,GAAT,CAAaC;AAAW;AAAxB,IAAyC;AAC5C,QAAIC,GAAG,GAAGZ,QAAQ,CAAC,IAAD,CAAlB;AACA,QAAIa,QAAQ,GAAGT,cAAc,CAACQ,GAAD,CAA7B;AACA,QAAIE,aAAa,GAAGZ,IAAI,CAACS,UAAD,EAAaI,SAAS,CAACC,MAAV,GAAmB,CAAnB,GAAuBD,SAAS,CAAC,CAAD,CAAhC,GAAsCE,SAAnD,EAA8D,CAA9D,CAAxB;AACA,QAAIC,MAAM,GAAG,KAAKf,kBAAkB,CAACS,GAAD,EAAMb,UAAU,CAAC,KAAD,CAAhB,CAAvB,GAAb;AACA,QAAIoB,KAAK,GAAGlB,SAAS,CAACiB,MAAM,CAACE,GAAR,CAArB;AACAf,IAAAA,OAAO,CAACQ,QAAD,EAAW,UAAUQ,KAAV,EAAiB;AACjCF,MAAAA,KAAK,CAACG,IAAN,CAAWJ,MAAX,EAAmBJ,aAAa,CAACO,KAAD,EAAQA,KAAR,EAAeT,GAAf,CAAhC;AACD,KAFM,EAEJK,SAFI,EAEO,KAFP,EAEc,IAFd,CAAP;AAGA,WAAOC,MAAP;AACD;AAX4D,CAA9D,CAAD","sourcesContent":["'use strict';\r\nvar $ = require('../internals/export');\r\nvar IS_PURE = require('../internals/is-pure');\r\nvar getBuiltIn = require('../internals/get-built-in');\r\nvar anObject = require('../internals/an-object');\r\nvar aFunction = require('../internals/a-function');\r\nvar bind = require('../internals/function-bind-context');\r\nvar speciesConstructor = require('../internals/species-constructor');\r\nvar getSetIterator = require('../internals/get-set-iterator');\r\nvar iterate = require('../internals/iterate');\r\n\r\n// `Set.prototype.map` method\r\n// https://github.com/tc39/proposal-collection-methods\r\n$({ target: 'Set', proto: true, real: true, forced: IS_PURE }, {\r\n  map: function map(callbackfn /* , thisArg */) {\r\n    var set = anObject(this);\r\n    var iterator = getSetIterator(set);\r\n    var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);\r\n    var newSet = new (speciesConstructor(set, getBuiltIn('Set')))();\r\n    var adder = aFunction(newSet.add);\r\n    iterate(iterator, function (value) {\r\n      adder.call(newSet, boundFunction(value, value, set));\r\n    }, undefined, false, true);\r\n    return newSet;\r\n  }\r\n});\r\n"]},"metadata":{},"sourceType":"script"}