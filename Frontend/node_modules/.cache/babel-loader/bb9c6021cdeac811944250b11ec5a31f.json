{"ast":null,"code":"const {\n  auth,\n  firestore,\n  googleProvider\n} = require(\"../models/index\");\n\nconst express = require(\"express\"),\n      passport = require(\"passport\");\n\nmulter = require(\"multer\"), router = express.Router();\n\nconst bcrypt = require(\"bcryptjs\");\n\nconst {\n  Result\n} = require(\"express-validator\");\n\nrouter.post(\"/signup\", async (req, res) => {\n  try {\n    const {\n      firstname,\n      surname,\n      sex,\n      province,\n      email,\n      password,\n      username,\n      phone\n    } = req.body;\n    console.log(firstname, surname, sex, province, email, password, username, phone);\n    auth.createUserWithEmailAndPassword(email, password).then(result => {\n      console.log(result);\n\n      if (result) {\n        const userRef = firestore.collection(\"User\").doc(result.user.uid);\n        userRef.set({\n          uid: result.user.uid,\n          username: username,\n          email: result.user.email,\n          firstname: firstname,\n          surname: surname,\n          sex: sex,\n          phone: phone,\n          province: province,\n          role: \"user\",\n          type: \"On web\"\n        });\n        return res.json({\n          msg: \"signup success\"\n        });\n      }\n    }).catch(err => {\n      res.status(400).json({\n        error: err\n      });\n    });\n  } catch (err) {\n    res.status(400).json({\n      error: err.message\n    });\n  }\n});\nrouter.post(\"/googlesignup\", function (req, res) {\n  try {\n    const {\n      result\n    } = req.body;\n\n    if (result) {\n      const userRef = firestore.collection(\"User\").doc(result.user.uid);\n      userRef.get().then(doc => {\n        if (!doc.data()) {\n          userRef.set({\n            uid: result.user.uid,\n            email: result.user.email,\n            displayName: result.user.displayName,\n            photoURL: result.user.photoURL,\n            created: new Date().valueOf(),\n            role: \"user\",\n            type: \"Google\"\n          });\n          return res.json({\n            msg: \"google signup success\"\n          });\n        } else {\n          res.status(200).json({\n            msg: \"มีผู้ใช้งานนี้อยู่แล้ว\"\n          });\n        }\n      });\n    }\n  } catch {\n    err => {\n      res.status(400).json({\n        error: err\n      });\n    };\n  }\n});\nrouter.post(\"/facebooksignup\", function (req, res) {\n  try {\n    const {\n      result\n    } = req.body;\n\n    if (result) {\n      const userRef = firestore.collection(\"User\").doc(result.user.uid);\n      userRef.get().then(doc => {\n        if (!doc.data()) {\n          userRef.set({\n            uid: result.user.uid,\n            email: result.user.email,\n            displayName: result.user.displayName,\n            photoURL: result.user.photoURL,\n            created: new Date().valueOf(),\n            role: \"user\",\n            type: \"Facebook\"\n          });\n          return res.json({\n            msg: \"facebook signup success\"\n          });\n        } else {\n          res.status(200).json({\n            msg: \"มีผู้ใช้งานนี้อยู่แล้ว\"\n          });\n        }\n      });\n    }\n  } catch {\n    err => {\n      res.status(400).json({\n        error: err\n      });\n    };\n  }\n});\nrouter.post(\"/remember\", function (req, res) {\n  res.json({\n    success: true\n  });\n});\nrouter.post(\"/session\", function (req, res) {\n  const {\n    user\n  } = req.body;\n  firestore.collection(\"User\").doc(user.uid).get().then(doc => {\n    if (doc.exists) {\n      return res.json({\n        data: doc.data()\n      });\n    } else {\n      console.log(\"No such document\");\n    }\n  }).catch(Error => {\n    connsole.log(Error);\n  });\n});\nrouter.post(\"/login\", function (req, res) {\n  const {\n    email,\n    password\n  } = req.body;\n  const userLogin = auth.signInWithEmailAndPassword(email, password).then(result => {\n    res.json({\n      success: result\n    });\n  }).catch(err => {\n    res.status(400).json({\n      error: err\n    });\n  });\n});\nrouter.post(\"/userid\", (req, res) => {\n  try {\n    const {\n      result\n    } = req.body;\n    const userRef = firestore.collection(\"User\").where(\"uid\", \"==\", result.uid);\n    userRef.get().then(doc => {\n      let item = [];\n      doc.forEach(doc2 => {\n        item.push(doc2.data());\n      });\n      res.json({\n        item\n      });\n    });\n  } catch {\n    err => {\n      console.log(err);\n    };\n  }\n});\nrouter.get(\"/:id\", function (req, res) {\n  const userID = req.params.id;\n  res.json({\n    success: true\n  });\n});\nmodule.exports = router;","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Backend/routes/User.js"],"names":["auth","firestore","googleProvider","require","express","passport","multer","router","Router","bcrypt","Result","post","req","res","firstname","surname","sex","province","email","password","username","phone","body","console","log","createUserWithEmailAndPassword","then","result","userRef","collection","doc","user","uid","set","role","type","json","msg","catch","err","status","error","message","get","data","displayName","photoURL","created","Date","valueOf","success","exists","Error","connsole","userLogin","signInWithEmailAndPassword","where","item","forEach","doc2","push","userID","params","id","module","exports"],"mappings":"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","sourcesContent":["const { auth, firestore, googleProvider } = require(\"../models/index\");\r\nconst express = require(\"express\"),\r\n  passport = require(\"passport\");\r\n(multer = require(\"multer\")), (router = express.Router());\r\nconst bcrypt = require(\"bcryptjs\");\r\nconst { Result } = require(\"express-validator\");\r\nrouter.post(\"/signup\", async (req, res) => {\r\n  try {\r\n    const {\r\n      firstname,\r\n      surname,\r\n      sex,\r\n      province,\r\n      email,\r\n      password,\r\n      username,\r\n      phone\r\n    } = req.body;\r\n    console.log(firstname,\r\n      surname,\r\n      sex,\r\n      province,\r\n      email,\r\n      password,\r\n      username,\r\n      phone)\r\n      auth\r\n        .createUserWithEmailAndPassword(email, password)\r\n        .then((result) => {\r\n          console.log(result)\r\n          if (result) {\r\n            const userRef = firestore.collection(\"User\").doc(result.user.uid);\r\n            userRef.set({\r\n              uid: result.user.uid,\r\n              username:username,\r\n              email: result.user.email,\r\n              firstname: firstname,\r\n              surname: surname,\r\n              sex: sex,\r\n              phone : phone,\r\n              province: province,\r\n              role: \"user\",\r\n              type:\"On web\"\r\n            });\r\n            return res.json({ msg: \"signup success\" });\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          res.status(400).json({ error: err });\r\n        }); \r\n  } catch (err) {\r\n    res.status(400).json({ error: err.message });\r\n  }\r\n});\r\nrouter.post(\"/googlesignup\", function (req, res) {\r\n try{\r\n  const {\r\n  result\r\n  } = req.body;\r\n\r\n  if (result) {\r\n    const userRef = firestore.collection(\"User\").doc(result.user.uid);\r\n    userRef.get().then((doc)=>{\r\n      if(!doc.data()){\r\n      userRef.set({\r\n        uid: result.user.uid,\r\n        email: result.user.email,\r\n        displayName : result.user.displayName,\r\n        photoURL : result.user.photoURL,\r\n        created: new Date().valueOf(),\r\n        role: \"user\",\r\n        type:\"Google\"\r\n      });\r\n      return res.json({ msg: \"google signup success\" });\r\n    } else {\r\n      res.status(200).json({msg:\"มีผู้ใช้งานนี้อยู่แล้ว\"})\r\n    }\r\n    })\r\n  }\r\n }\r\n catch{(err)=>{\r\n  res.status(400).json({ error: err });\r\n }\r\n }\r\n});\r\n\r\nrouter.post(\"/facebooksignup\", function (req, res) {\r\n  try{\r\n   const {\r\n   result\r\n   } = req.body;\r\n   if (result) {\r\n    \r\n     const userRef = firestore.collection(\"User\").doc(result.user.uid);\r\n     userRef.get().then((doc)=>{\r\n       if(!doc.data()){\r\n       userRef.set({\r\n         uid: result.user.uid,\r\n         email: result.user.email,\r\n         displayName : result.user.displayName,\r\n         photoURL : result.user.photoURL,\r\n         created: new Date().valueOf(),\r\n         role: \"user\",\r\n         type:\"Facebook\"\r\n       });\r\n       return res.json({ msg: \"facebook signup success\" });\r\n     } else {\r\n       res.status(200).json({msg:\"มีผู้ใช้งานนี้อยู่แล้ว\"})\r\n     }\r\n     })\r\n   }\r\n  }\r\n  catch{(err)=>{\r\n   res.status(400).json({ error: err });\r\n  }\r\n  }\r\n });\r\n\r\nrouter.post(\"/remember\", function (req, res) {\r\n  res.json({ success: true });\r\n});\r\n\r\nrouter.post(\"/session\", function (req, res) {\r\n  const { user } = req.body;\r\n   firestore.collection(\"User\").doc(user.uid).get().then((doc)=>{\r\n    if(doc.exists){\r\n      return res.json({data:doc.data()})\r\n    }\r\n    else{\r\n      console.log(\"No such document\")\r\n    }\r\n  }).catch((Error)=>{\r\n    connsole.log(Error)\r\n  })\r\n});\r\n\r\nrouter.post(\"/login\", function (req, res) {\r\n  const { email, password } = req.body;\r\n  const userLogin = auth\r\n    .signInWithEmailAndPassword(email, password)\r\n    .then((result) => {\r\n      res.json({ success: result });\r\n    })\r\n    .catch((err) => {\r\n      res.status(400).json({ error: err });\r\n    });\r\n});\r\n\r\nrouter.post(\"/userid\",(req,res)=>{\r\n  try{\r\n    const {\r\n      result\r\n      } = req.body;\r\n      \r\n    const userRef = firestore.collection(\"User\").where(\"uid\" , \"==\" ,result.uid)\r\n    userRef.get().then((doc)=>{\r\n     let item = []\r\n     doc.forEach(doc2 =>{\r\n      item.push(doc2.data())\r\n     })\r\n        res.json({\r\n          item\r\n        })\r\n     })\r\n  \r\n  }catch{(err)=>{\r\nconsole.log(err)\r\n  }}\r\n})\r\nrouter.get(\"/:id\", function (req, res) {\r\n  const userID = req.params.id;\r\n  res.json({ success: true });\r\n});\r\nmodule.exports = router;"]},"metadata":{},"sourceType":"script"}