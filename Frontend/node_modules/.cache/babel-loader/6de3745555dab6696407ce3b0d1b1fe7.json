{"ast":null,"code":"\"use strict\";\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PageDescriptor = void 0;\n\nconst ended = require(\"is-stream-ended\");\n\nconst stream_1 = require(\"stream\");\n\nconst normalApiCaller_1 = require(\"../normalCalls/normalApiCaller\");\n\nconst pagedApiCaller_1 = require(\"./pagedApiCaller\");\n/**\r\n * A descriptor for methods that support pagination.\r\n */\n\n\nclass PageDescriptor {\n  constructor(requestPageTokenField, responsePageTokenField, resourceField) {\n    this.requestPageTokenField = requestPageTokenField;\n    this.responsePageTokenField = responsePageTokenField;\n    this.resourceField = resourceField;\n  }\n  /**\r\n   * Creates a new object Stream which emits the resource on 'data' event.\r\n   */\n\n\n  createStream(apiCall, request, options) {\n    const stream = new stream_1.PassThrough({\n      objectMode: true\n    });\n    options = Object.assign({}, options, {\n      autoPaginate: false\n    });\n    const maxResults = 'maxResults' in options ? options.maxResults : -1;\n    let pushCount = 0;\n    let started = false;\n\n    function callback(err, resources, next, apiResp) {\n      if (err) {\n        stream.emit('error', err);\n        return;\n      } // emit full api response with every page.\n\n\n      stream.emit('response', apiResp);\n\n      for (let i = 0; i < resources.length; ++i) {\n        if (ended(stream)) {\n          return;\n        }\n\n        if (resources[i] === null) {\n          continue;\n        }\n\n        stream.push(resources[i]);\n        pushCount++;\n\n        if (pushCount === maxResults) {\n          stream.end();\n        }\n      }\n\n      if (ended(stream)) {\n        return;\n      }\n\n      if (!next) {\n        stream.end();\n        return;\n      } // When pageToken is specified in the original options, it will overwrite\n      // the page token field in the next request. Therefore it must be cleared.\n\n\n      if ('pageToken' in options) {\n        delete options.pageToken;\n      }\n\n      if (stream.isPaused()) {\n        request = next;\n        started = false;\n      } else {\n        setImmediate(apiCall, next, options, callback);\n      }\n    }\n\n    stream.on('resume', () => {\n      if (!started) {\n        started = true;\n        apiCall(request, options, callback);\n      }\n    });\n    return stream;\n  }\n  /**\r\n   * Create an async iterable which can be recursively called for data on-demand.\r\n   */\n\n\n  asyncIterate(apiCall, request, options) {\n    options = Object.assign({}, options, {\n      autoPaginate: false\n    });\n    const iterable = this.createIterator(apiCall, request, options);\n    return iterable;\n  }\n\n  createIterator(apiCall, request, options) {\n    const asyncIterable = {\n      [Symbol.asyncIterator]() {\n        let nextPageRequest = request;\n        const cache = [];\n        return {\n          async next() {\n            if (cache.length > 0) {\n              return Promise.resolve({\n                done: false,\n                value: cache.shift()\n              });\n            }\n\n            if (nextPageRequest) {\n              let result;\n              [result, nextPageRequest] = await apiCall(nextPageRequest, options);\n              cache.push(...result);\n            }\n\n            if (cache.length === 0) {\n              return Promise.resolve({\n                done: true,\n                value: undefined\n              });\n            }\n\n            return Promise.resolve({\n              done: false,\n              value: cache.shift()\n            });\n          }\n\n        };\n      }\n\n    };\n    return asyncIterable;\n  }\n\n  getApiCaller(settings) {\n    if (!settings.autoPaginate) {\n      return new normalApiCaller_1.NormalApiCaller();\n    }\n\n    return new pagedApiCaller_1.PagedApiCaller(this);\n  }\n\n}\n\nexports.PageDescriptor = PageDescriptor;","map":{"version":3,"sources":["../../../src/paginationCalls/pageDescriptor.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.PageDescriptor = void 0;\r\nconst ended = require(\"is-stream-ended\");\r\nconst stream_1 = require(\"stream\");\r\nconst normalApiCaller_1 = require(\"../normalCalls/normalApiCaller\");\r\nconst pagedApiCaller_1 = require(\"./pagedApiCaller\");\r\n/**\r\n * A descriptor for methods that support pagination.\r\n */\r\nclass PageDescriptor {\r\n    constructor(requestPageTokenField, responsePageTokenField, resourceField) {\r\n        this.requestPageTokenField = requestPageTokenField;\r\n        this.responsePageTokenField = responsePageTokenField;\r\n        this.resourceField = resourceField;\r\n    }\r\n    /**\r\n     * Creates a new object Stream which emits the resource on 'data' event.\r\n     */\r\n    createStream(apiCall, request, options) {\r\n        const stream = new stream_1.PassThrough({ objectMode: true });\r\n        options = Object.assign({}, options, { autoPaginate: false });\r\n        const maxResults = 'maxResults' in options ? options.maxResults : -1;\r\n        let pushCount = 0;\r\n        let started = false;\r\n        function callback(err, resources, next, apiResp) {\r\n            if (err) {\r\n                stream.emit('error', err);\r\n                return;\r\n            }\r\n            // emit full api response with every page.\r\n            stream.emit('response', apiResp);\r\n            for (let i = 0; i < resources.length; ++i) {\r\n                if (ended(stream)) {\r\n                    return;\r\n                }\r\n                if (resources[i] === null) {\r\n                    continue;\r\n                }\r\n                stream.push(resources[i]);\r\n                pushCount++;\r\n                if (pushCount === maxResults) {\r\n                    stream.end();\r\n                }\r\n            }\r\n            if (ended(stream)) {\r\n                return;\r\n            }\r\n            if (!next) {\r\n                stream.end();\r\n                return;\r\n            }\r\n            // When pageToken is specified in the original options, it will overwrite\r\n            // the page token field in the next request. Therefore it must be cleared.\r\n            if ('pageToken' in options) {\r\n                delete options.pageToken;\r\n            }\r\n            if (stream.isPaused()) {\r\n                request = next;\r\n                started = false;\r\n            }\r\n            else {\r\n                setImmediate(apiCall, next, options, callback);\r\n            }\r\n        }\r\n        stream.on('resume', () => {\r\n            if (!started) {\r\n                started = true;\r\n                apiCall(request, options, callback);\r\n            }\r\n        });\r\n        return stream;\r\n    }\r\n    /**\r\n     * Create an async iterable which can be recursively called for data on-demand.\r\n     */\r\n    asyncIterate(apiCall, request, options) {\r\n        options = Object.assign({}, options, { autoPaginate: false });\r\n        const iterable = this.createIterator(apiCall, request, options);\r\n        return iterable;\r\n    }\r\n    createIterator(apiCall, request, options) {\r\n        const asyncIterable = {\r\n            [Symbol.asyncIterator]() {\r\n                let nextPageRequest = request;\r\n                const cache = [];\r\n                return {\r\n                    async next() {\r\n                        if (cache.length > 0) {\r\n                            return Promise.resolve({\r\n                                done: false,\r\n                                value: cache.shift(),\r\n                            });\r\n                        }\r\n                        if (nextPageRequest) {\r\n                            let result;\r\n                            [result, nextPageRequest] = (await apiCall(nextPageRequest, options));\r\n                            cache.push(...result);\r\n                        }\r\n                        if (cache.length === 0) {\r\n                            return Promise.resolve({ done: true, value: undefined });\r\n                        }\r\n                        return Promise.resolve({ done: false, value: cache.shift() });\r\n                    },\r\n                };\r\n            },\r\n        };\r\n        return asyncIterable;\r\n    }\r\n    getApiCaller(settings) {\r\n        if (!settings.autoPaginate) {\r\n            return new normalApiCaller_1.NormalApiCaller();\r\n        }\r\n        return new pagedApiCaller_1.PagedApiCaller(this);\r\n    }\r\n}\r\nexports.PageDescriptor = PageDescriptor;\r\n//# sourceMappingURL=pageDescriptor.js.map"]},"metadata":{},"sourceType":"script"}