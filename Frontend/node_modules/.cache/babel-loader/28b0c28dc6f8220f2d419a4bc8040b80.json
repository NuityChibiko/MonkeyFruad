{"ast":null,"code":"'use strict';\n\nconst fs = require('fs');\n\nconst path = require('path');\n\nconst {\n  promisify\n} = require('util');\n\nconst semver = require('semver');\n\nconst useNativeRecursiveOption = semver.satisfies(process.version, '>=10.12.0'); // https://github.com/nodejs/node/issues/8987\n// https://github.com/libuv/libuv/pull/1088\n\nconst checkPath = pth => {\n  if (process.platform === 'win32') {\n    const pathHasInvalidWinCharacters = /[<>:\"|?*]/.test(pth.replace(path.parse(pth).root, ''));\n\n    if (pathHasInvalidWinCharacters) {\n      const error = new Error(`Path contains invalid characters: ${pth}`);\n      error.code = 'EINVAL';\n      throw error;\n    }\n  }\n};\n\nconst processOptions = options => {\n  // https://github.com/sindresorhus/make-dir/issues/18\n  const defaults = {\n    mode: 0o777,\n    fs\n  };\n  return { ...defaults,\n    ...options\n  };\n};\n\nconst permissionError = pth => {\n  // This replicates the exception of `fs.mkdir` with native the\n  // `recusive` option when run on an invalid drive under Windows.\n  const error = new Error(`operation not permitted, mkdir '${pth}'`);\n  error.code = 'EPERM';\n  error.errno = -4048;\n  error.path = pth;\n  error.syscall = 'mkdir';\n  return error;\n};\n\nconst makeDir = async (input, options) => {\n  checkPath(input);\n  options = processOptions(options);\n  const mkdir = promisify(options.fs.mkdir);\n  const stat = promisify(options.fs.stat);\n\n  if (useNativeRecursiveOption && options.fs.mkdir === fs.mkdir) {\n    const pth = path.resolve(input);\n    await mkdir(pth, {\n      mode: options.mode,\n      recursive: true\n    });\n    return pth;\n  }\n\n  const make = async pth => {\n    try {\n      await mkdir(pth, options.mode);\n      return pth;\n    } catch (error) {\n      if (error.code === 'EPERM') {\n        throw error;\n      }\n\n      if (error.code === 'ENOENT') {\n        if (path.dirname(pth) === pth) {\n          throw permissionError(pth);\n        }\n\n        if (error.message.includes('null bytes')) {\n          throw error;\n        }\n\n        await make(path.dirname(pth));\n        return make(pth);\n      }\n\n      try {\n        const stats = await stat(pth);\n\n        if (!stats.isDirectory()) {\n          throw new Error('The path is not a directory');\n        }\n      } catch (_) {\n        throw error;\n      }\n\n      return pth;\n    }\n  };\n\n  return make(path.resolve(input));\n};\n\nmodule.exports = makeDir;\n\nmodule.exports.sync = (input, options) => {\n  checkPath(input);\n  options = processOptions(options);\n\n  if (useNativeRecursiveOption && options.fs.mkdirSync === fs.mkdirSync) {\n    const pth = path.resolve(input);\n    fs.mkdirSync(pth, {\n      mode: options.mode,\n      recursive: true\n    });\n    return pth;\n  }\n\n  const make = pth => {\n    try {\n      options.fs.mkdirSync(pth, options.mode);\n    } catch (error) {\n      if (error.code === 'EPERM') {\n        throw error;\n      }\n\n      if (error.code === 'ENOENT') {\n        if (path.dirname(pth) === pth) {\n          throw permissionError(pth);\n        }\n\n        if (error.message.includes('null bytes')) {\n          throw error;\n        }\n\n        make(path.dirname(pth));\n        return make(pth);\n      }\n\n      try {\n        if (!options.fs.statSync(pth).isDirectory()) {\n          throw new Error('The path is not a directory');\n        }\n      } catch (_) {\n        throw error;\n      }\n    }\n\n    return pth;\n  };\n\n  return make(path.resolve(input));\n};","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Backend/node_modules/make-dir/index.js"],"names":["fs","require","path","promisify","semver","useNativeRecursiveOption","satisfies","process","version","checkPath","pth","platform","pathHasInvalidWinCharacters","test","replace","parse","root","error","Error","code","processOptions","options","defaults","mode","permissionError","errno","syscall","makeDir","input","mkdir","stat","resolve","recursive","make","dirname","message","includes","stats","isDirectory","_","module","exports","sync","mkdirSync","statSync"],"mappings":"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","sourcesContent":["'use strict';\r\nconst fs = require('fs');\r\nconst path = require('path');\r\nconst {promisify} = require('util');\r\nconst semver = require('semver');\r\n\r\nconst useNativeRecursiveOption = semver.satisfies(process.version, '>=10.12.0');\r\n\r\n// https://github.com/nodejs/node/issues/8987\r\n// https://github.com/libuv/libuv/pull/1088\r\nconst checkPath = pth => {\r\n\tif (process.platform === 'win32') {\r\n\t\tconst pathHasInvalidWinCharacters = /[<>:\"|?*]/.test(pth.replace(path.parse(pth).root, ''));\r\n\r\n\t\tif (pathHasInvalidWinCharacters) {\r\n\t\t\tconst error = new Error(`Path contains invalid characters: ${pth}`);\r\n\t\t\terror.code = 'EINVAL';\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t}\r\n};\r\n\r\nconst processOptions = options => {\r\n\t// https://github.com/sindresorhus/make-dir/issues/18\r\n\tconst defaults = {\r\n\t\tmode: 0o777,\r\n\t\tfs\r\n\t};\r\n\r\n\treturn {\r\n\t\t...defaults,\r\n\t\t...options\r\n\t};\r\n};\r\n\r\nconst permissionError = pth => {\r\n\t// This replicates the exception of `fs.mkdir` with native the\r\n\t// `recusive` option when run on an invalid drive under Windows.\r\n\tconst error = new Error(`operation not permitted, mkdir '${pth}'`);\r\n\terror.code = 'EPERM';\r\n\terror.errno = -4048;\r\n\terror.path = pth;\r\n\terror.syscall = 'mkdir';\r\n\treturn error;\r\n};\r\n\r\nconst makeDir = async (input, options) => {\r\n\tcheckPath(input);\r\n\toptions = processOptions(options);\r\n\r\n\tconst mkdir = promisify(options.fs.mkdir);\r\n\tconst stat = promisify(options.fs.stat);\r\n\r\n\tif (useNativeRecursiveOption && options.fs.mkdir === fs.mkdir) {\r\n\t\tconst pth = path.resolve(input);\r\n\r\n\t\tawait mkdir(pth, {\r\n\t\t\tmode: options.mode,\r\n\t\t\trecursive: true\r\n\t\t});\r\n\r\n\t\treturn pth;\r\n\t}\r\n\r\n\tconst make = async pth => {\r\n\t\ttry {\r\n\t\t\tawait mkdir(pth, options.mode);\r\n\r\n\t\t\treturn pth;\r\n\t\t} catch (error) {\r\n\t\t\tif (error.code === 'EPERM') {\r\n\t\t\t\tthrow error;\r\n\t\t\t}\r\n\r\n\t\t\tif (error.code === 'ENOENT') {\r\n\t\t\t\tif (path.dirname(pth) === pth) {\r\n\t\t\t\t\tthrow permissionError(pth);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (error.message.includes('null bytes')) {\r\n\t\t\t\t\tthrow error;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tawait make(path.dirname(pth));\r\n\r\n\t\t\t\treturn make(pth);\r\n\t\t\t}\r\n\r\n\t\t\ttry {\r\n\t\t\t\tconst stats = await stat(pth);\r\n\t\t\t\tif (!stats.isDirectory()) {\r\n\t\t\t\t\tthrow new Error('The path is not a directory');\r\n\t\t\t\t}\r\n\t\t\t} catch (_) {\r\n\t\t\t\tthrow error;\r\n\t\t\t}\r\n\r\n\t\t\treturn pth;\r\n\t\t}\r\n\t};\r\n\r\n\treturn make(path.resolve(input));\r\n};\r\n\r\nmodule.exports = makeDir;\r\n\r\nmodule.exports.sync = (input, options) => {\r\n\tcheckPath(input);\r\n\toptions = processOptions(options);\r\n\r\n\tif (useNativeRecursiveOption && options.fs.mkdirSync === fs.mkdirSync) {\r\n\t\tconst pth = path.resolve(input);\r\n\r\n\t\tfs.mkdirSync(pth, {\r\n\t\t\tmode: options.mode,\r\n\t\t\trecursive: true\r\n\t\t});\r\n\r\n\t\treturn pth;\r\n\t}\r\n\r\n\tconst make = pth => {\r\n\t\ttry {\r\n\t\t\toptions.fs.mkdirSync(pth, options.mode);\r\n\t\t} catch (error) {\r\n\t\t\tif (error.code === 'EPERM') {\r\n\t\t\t\tthrow error;\r\n\t\t\t}\r\n\r\n\t\t\tif (error.code === 'ENOENT') {\r\n\t\t\t\tif (path.dirname(pth) === pth) {\r\n\t\t\t\t\tthrow permissionError(pth);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (error.message.includes('null bytes')) {\r\n\t\t\t\t\tthrow error;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tmake(path.dirname(pth));\r\n\t\t\t\treturn make(pth);\r\n\t\t\t}\r\n\r\n\t\t\ttry {\r\n\t\t\t\tif (!options.fs.statSync(pth).isDirectory()) {\r\n\t\t\t\t\tthrow new Error('The path is not a directory');\r\n\t\t\t\t}\r\n\t\t\t} catch (_) {\r\n\t\t\t\tthrow error;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn pth;\r\n\t};\r\n\r\n\treturn make(path.resolve(input));\r\n};\r\n"]},"metadata":{},"sourceType":"script"}