{"ast":null,"code":"\"use strict\";\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StreamingApiCaller = void 0;\n\nconst warnings_1 = require(\"../warnings\");\n\nconst streaming_1 = require(\"./streaming\");\n\nclass StreamingApiCaller {\n  /**\r\n   * An API caller for methods of gRPC streaming.\r\n   * @private\r\n   * @constructor\r\n   * @param {StreamDescriptor} descriptor - the descriptor of the method structure.\r\n   */\n  constructor(descriptor) {\n    this.descriptor = descriptor;\n  }\n\n  init(callback) {\n    return new streaming_1.StreamProxy(this.descriptor.type, callback);\n  }\n\n  wrap(func) {\n    switch (this.descriptor.type) {\n      case streaming_1.StreamType.SERVER_STREAMING:\n        return (argument, metadata, options) => {\n          return func(argument, metadata, options);\n        };\n\n      case streaming_1.StreamType.CLIENT_STREAMING:\n        return (argument, metadata, options, callback) => {\n          return func(metadata, options, callback);\n        };\n\n      case streaming_1.StreamType.BIDI_STREAMING:\n        return (argument, metadata, options) => {\n          return func(metadata, options);\n        };\n\n      default:\n        warnings_1.warn('streaming_wrap_unknown_stream_type', `Unknown stream type: ${this.descriptor.type}`);\n    }\n\n    return func;\n  }\n\n  call(apiCall, argument, settings, stream) {\n    stream.setStream(apiCall, argument, settings.retryRequestOptions);\n  }\n\n  fail(stream, err) {\n    stream.emit('error', err);\n  }\n\n  result(stream) {\n    return stream;\n  }\n\n}\n\nexports.StreamingApiCaller = StreamingApiCaller;","map":{"version":3,"sources":["../../../src/streamingCalls/streamingApiCaller.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;AAcG;;;;;;;AAYH,MAAA,UAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAGA,MAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAGA,MAAa,kBAAb,CAA+B;AAG7B;;;;;AAKG;AACH,EAAA,WAAA,CAAY,UAAZ,EAAwC;AACtC,SAAK,UAAL,GAAkB,UAAlB;AACD;;AAED,EAAA,IAAI,CAAC,QAAD,EAAsB;AACxB,WAAO,IAAI,WAAA,CAAA,WAAJ,CAAgB,KAAK,UAAL,CAAgB,IAAhC,EAAsC,QAAtC,CAAP;AACD;;AAED,EAAA,IAAI,CAAC,IAAD,EAAe;AACjB,YAAQ,KAAK,UAAL,CAAgB,IAAxB;AACE,WAAK,WAAA,CAAA,UAAA,CAAW,gBAAhB;AACE,eAAO,CAAC,QAAD,EAAe,QAAf,EAA6B,OAA7B,KAA4C;AACjD,iBAAQ,IAA4B,CAAC,QAAD,EAAW,QAAX,EAAqB,OAArB,CAApC;AACD,SAFD;;AAGF,WAAK,WAAA,CAAA,UAAA,CAAW,gBAAhB;AACE,eAAO,CACL,QADK,EAEL,QAFK,EAGL,OAHK,EAIL,QAJK,KAKH;AACF,iBAAQ,IAA4B,CAAC,QAAD,EAAW,OAAX,EAAoB,QAApB,CAApC;AACD,SAPD;;AAQF,WAAK,WAAA,CAAA,UAAA,CAAW,cAAhB;AACE,eAAO,CAAC,QAAD,EAAe,QAAf,EAA6B,OAA7B,KAA4C;AACjD,iBAAQ,IAA0B,CAAC,QAAD,EAAW,OAAX,CAAlC;AACD,SAFD;;AAGF;AACE,QAAA,UAAA,CAAA,IAAA,CACE,oCADF,EAEE,wBAAwB,KAAK,UAAL,CAAgB,IAAI,EAF9C;AAnBJ;;AAwBA,WAAO,IAAP;AACD;;AAED,EAAA,IAAI,CACF,OADE,EAEF,QAFE,EAGF,QAHE,EAIF,MAJE,EAIiB;AAEnB,IAAA,MAAM,CAAC,SAAP,CAAiB,OAAjB,EAA0B,QAA1B,EAAoC,QAAQ,CAAC,mBAA7C;AACD;;AAED,EAAA,IAAI,CAAC,MAAD,EAA4B,GAA5B,EAAsC;AACxC,IAAA,MAAM,CAAC,IAAP,CAAY,OAAZ,EAAqB,GAArB;AACD;;AAED,EAAA,MAAM,CAAC,MAAD,EAA0B;AAC9B,WAAO,MAAP;AACD;;AA5D4B;;AAA/B,OAAA,CAAA,kBAAA,GAAA,kBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\r\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.StreamingApiCaller = void 0;\r\nconst warnings_1 = require(\"../warnings\");\r\nconst streaming_1 = require(\"./streaming\");\r\nclass StreamingApiCaller {\r\n    /**\r\n     * An API caller for methods of gRPC streaming.\r\n     * @private\r\n     * @constructor\r\n     * @param {StreamDescriptor} descriptor - the descriptor of the method structure.\r\n     */\r\n    constructor(descriptor) {\r\n        this.descriptor = descriptor;\r\n    }\r\n    init(callback) {\r\n        return new streaming_1.StreamProxy(this.descriptor.type, callback);\r\n    }\r\n    wrap(func) {\r\n        switch (this.descriptor.type) {\r\n            case streaming_1.StreamType.SERVER_STREAMING:\r\n                return (argument, metadata, options) => {\r\n                    return func(argument, metadata, options);\r\n                };\r\n            case streaming_1.StreamType.CLIENT_STREAMING:\r\n                return (argument, metadata, options, callback) => {\r\n                    return func(metadata, options, callback);\r\n                };\r\n            case streaming_1.StreamType.BIDI_STREAMING:\r\n                return (argument, metadata, options) => {\r\n                    return func(metadata, options);\r\n                };\r\n            default:\r\n                warnings_1.warn('streaming_wrap_unknown_stream_type', `Unknown stream type: ${this.descriptor.type}`);\r\n        }\r\n        return func;\r\n    }\r\n    call(apiCall, argument, settings, stream) {\r\n        stream.setStream(apiCall, argument, settings.retryRequestOptions);\r\n    }\r\n    fail(stream, err) {\r\n        stream.emit('error', err);\r\n    }\r\n    result(stream) {\r\n        return stream;\r\n    }\r\n}\r\nexports.StreamingApiCaller = StreamingApiCaller;\r\n//# sourceMappingURL=streamingApiCaller.js.map"]},"metadata":{},"sourceType":"script"}