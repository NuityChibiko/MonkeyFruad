{"ast":null,"code":"\"use strict\"; // Copyright 2016 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*!\r\n * @module common/operation\r\n */\n\nconst service_object_1 = require(\"./service-object\");\n\nconst util_1 = require(\"util\"); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nclass Operation extends service_object_1.ServiceObject {\n  /**\r\n   * An Operation object allows you to interact with APIs that take longer to\r\n   * process things.\r\n   *\r\n   * @constructor\r\n   * @alias module:common/operation\r\n   *\r\n   * @param {object} config - Configuration object.\r\n   * @param {module:common/service|module:common/serviceObject|module:common/grpcService|module:common/grpcServiceObject} config.parent - The parent object.\r\n   */\n  constructor(config) {\n    const methods = {\n      /**\r\n       * Checks to see if an operation exists.\r\n       */\n      exists: true,\n\n      /**\r\n       * Retrieves the operation.\r\n       */\n      get: true,\n\n      /**\r\n       * Retrieves metadata for the operation.\r\n       */\n      getMetadata: {\n        reqOpts: {\n          name: config.id\n        }\n      }\n    };\n    config = Object.assign({\n      baseUrl: ''\n    }, config); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    config.methods = config.methods || methods;\n    super(config);\n    this.completeListeners = 0;\n    this.hasActiveListeners = false;\n    this.listenForEvents_();\n  }\n  /**\r\n   * Wraps the `complete` and `error` events in a Promise.\r\n   *\r\n   * @return {Promise}\r\n   */\n\n\n  promise() {\n    return new Promise((resolve, reject) => {\n      this.on('error', reject).on('complete', metadata => {\n        resolve([metadata]);\n      });\n    });\n  }\n  /**\r\n   * Begin listening for events on the operation. This method keeps track of how\r\n   * many \"complete\" listeners are registered and removed, making sure polling\r\n   * is handled automatically.\r\n   *\r\n   * As long as there is one active \"complete\" listener, the connection is open.\r\n   * When there are no more listeners, the polling stops.\r\n   *\r\n   * @private\r\n   */\n\n\n  listenForEvents_() {\n    this.on('newListener', event => {\n      if (event === 'complete') {\n        this.completeListeners++;\n\n        if (!this.hasActiveListeners) {\n          this.hasActiveListeners = true;\n          this.startPolling_();\n        }\n      }\n    });\n    this.on('removeListener', event => {\n      if (event === 'complete' && --this.completeListeners === 0) {\n        this.hasActiveListeners = false;\n      }\n    });\n  }\n  /**\r\n   * Poll for a status update. Returns null for an incomplete\r\n   * status, and metadata for a complete status.\r\n   *\r\n   * @private\r\n   */\n\n\n  poll_(callback) {\n    this.getMetadata((err, body) => {\n      if (err || body.error) {\n        callback(err || body.error);\n        return;\n      }\n\n      if (!body.done) {\n        callback(null);\n        return;\n      }\n\n      callback(null, body);\n    });\n  }\n  /**\r\n   * Poll `getMetadata` to check the operation's status. This runs a loop to\r\n   * ping the API on an interval.\r\n   *\r\n   * Note: This method is automatically called once a \"complete\" event handler\r\n   * is registered on the operation.\r\n   *\r\n   * @private\r\n   */\n\n\n  async startPolling_() {\n    if (!this.hasActiveListeners) {\n      return;\n    }\n\n    try {\n      const metadata = await util_1.promisify(this.poll_.bind(this))();\n\n      if (!metadata) {\n        setTimeout(this.startPolling_.bind(this), this.pollIntervalMs || 500);\n        return;\n      }\n\n      this.emit('complete', metadata);\n    } catch (err) {\n      this.emit('error', err);\n    }\n  }\n\n}\n\nexports.Operation = Operation;","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Backend/node_modules/@google-cloud/common/build/src/operation.js"],"names":["Object","defineProperty","exports","value","service_object_1","require","util_1","Operation","ServiceObject","constructor","config","methods","exists","get","getMetadata","reqOpts","name","id","assign","baseUrl","completeListeners","hasActiveListeners","listenForEvents_","promise","Promise","resolve","reject","on","metadata","event","startPolling_","poll_","callback","err","body","error","done","promisify","bind","setTimeout","pollIntervalMs","emit"],"mappings":"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","sourcesContent":["\"use strict\";\r\n// Copyright 2016 Google LLC\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/*!\r\n * @module common/operation\r\n */\r\nconst service_object_1 = require(\"./service-object\");\r\nconst util_1 = require(\"util\");\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nclass Operation extends service_object_1.ServiceObject {\r\n    /**\r\n     * An Operation object allows you to interact with APIs that take longer to\r\n     * process things.\r\n     *\r\n     * @constructor\r\n     * @alias module:common/operation\r\n     *\r\n     * @param {object} config - Configuration object.\r\n     * @param {module:common/service|module:common/serviceObject|module:common/grpcService|module:common/grpcServiceObject} config.parent - The parent object.\r\n     */\r\n    constructor(config) {\r\n        const methods = {\r\n            /**\r\n             * Checks to see if an operation exists.\r\n             */\r\n            exists: true,\r\n            /**\r\n             * Retrieves the operation.\r\n             */\r\n            get: true,\r\n            /**\r\n             * Retrieves metadata for the operation.\r\n             */\r\n            getMetadata: {\r\n                reqOpts: {\r\n                    name: config.id,\r\n                },\r\n            },\r\n        };\r\n        config = Object.assign({\r\n            baseUrl: '',\r\n        }, config);\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        config.methods = (config.methods || methods);\r\n        super(config);\r\n        this.completeListeners = 0;\r\n        this.hasActiveListeners = false;\r\n        this.listenForEvents_();\r\n    }\r\n    /**\r\n     * Wraps the `complete` and `error` events in a Promise.\r\n     *\r\n     * @return {Promise}\r\n     */\r\n    promise() {\r\n        return new Promise((resolve, reject) => {\r\n            this.on('error', reject).on('complete', (metadata) => {\r\n                resolve([metadata]);\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Begin listening for events on the operation. This method keeps track of how\r\n     * many \"complete\" listeners are registered and removed, making sure polling\r\n     * is handled automatically.\r\n     *\r\n     * As long as there is one active \"complete\" listener, the connection is open.\r\n     * When there are no more listeners, the polling stops.\r\n     *\r\n     * @private\r\n     */\r\n    listenForEvents_() {\r\n        this.on('newListener', (event) => {\r\n            if (event === 'complete') {\r\n                this.completeListeners++;\r\n                if (!this.hasActiveListeners) {\r\n                    this.hasActiveListeners = true;\r\n                    this.startPolling_();\r\n                }\r\n            }\r\n        });\r\n        this.on('removeListener', (event) => {\r\n            if (event === 'complete' && --this.completeListeners === 0) {\r\n                this.hasActiveListeners = false;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Poll for a status update. Returns null for an incomplete\r\n     * status, and metadata for a complete status.\r\n     *\r\n     * @private\r\n     */\r\n    poll_(callback) {\r\n        this.getMetadata((err, body) => {\r\n            if (err || body.error) {\r\n                callback(err || body.error);\r\n                return;\r\n            }\r\n            if (!body.done) {\r\n                callback(null);\r\n                return;\r\n            }\r\n            callback(null, body);\r\n        });\r\n    }\r\n    /**\r\n     * Poll `getMetadata` to check the operation's status. This runs a loop to\r\n     * ping the API on an interval.\r\n     *\r\n     * Note: This method is automatically called once a \"complete\" event handler\r\n     * is registered on the operation.\r\n     *\r\n     * @private\r\n     */\r\n    async startPolling_() {\r\n        if (!this.hasActiveListeners) {\r\n            return;\r\n        }\r\n        try {\r\n            const metadata = await util_1.promisify(this.poll_.bind(this))();\r\n            if (!metadata) {\r\n                setTimeout(this.startPolling_.bind(this), this.pollIntervalMs || 500);\r\n                return;\r\n            }\r\n            this.emit('complete', metadata);\r\n        }\r\n        catch (err) {\r\n            this.emit('error', err);\r\n        }\r\n    }\r\n}\r\nexports.Operation = Operation;\r\n//# sourceMappingURL=operation.js.map"]},"metadata":{},"sourceType":"script"}