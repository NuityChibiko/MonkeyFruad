{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SanitizersImpl = void 0;\n\nconst validator = require(\"validator\");\n\nconst sanitization_1 = require(\"../context-items/sanitization\");\n\nclass SanitizersImpl {\n  constructor(builder, chain) {\n    this.builder = builder;\n    this.chain = chain;\n  } // custom sanitizers\n\n\n  customSanitizer(sanitizer) {\n    this.builder.addItem(new sanitization_1.Sanitization(sanitizer, true));\n    return this.chain;\n  }\n\n  default(default_value) {\n    return this.customSanitizer(value => [undefined, null, NaN, ''].includes(value) ? default_value : value);\n  }\n\n  replace(values_to_replace, new_value) {\n    if (!Array.isArray(values_to_replace)) {\n      values_to_replace = [values_to_replace];\n    }\n\n    return this.customSanitizer(value => values_to_replace.includes(value) ? new_value : value);\n  } // Standard sanitizers\n\n\n  addStandardSanitization(sanitizer, ...options) {\n    this.builder.addItem(new sanitization_1.Sanitization(sanitizer, false, options));\n    return this.chain;\n  }\n\n  blacklist(chars) {\n    return this.addStandardSanitization(validator.blacklist, chars);\n  }\n\n  escape() {\n    return this.addStandardSanitization(validator.escape);\n  }\n\n  unescape() {\n    return this.addStandardSanitization(validator.unescape);\n  }\n\n  ltrim(chars) {\n    return this.addStandardSanitization(validator.ltrim, chars);\n  }\n\n  normalizeEmail(options) {\n    return this.addStandardSanitization(validator.normalizeEmail, options);\n  }\n\n  rtrim(chars) {\n    return this.addStandardSanitization(validator.rtrim, chars);\n  }\n\n  stripLow(keep_new_lines) {\n    return this.addStandardSanitization(validator.stripLow, keep_new_lines);\n  }\n\n  toArray() {\n    return this.customSanitizer(value => value !== undefined && (Array.isArray(value) && value || [value]) || []);\n  }\n\n  toBoolean(strict) {\n    return this.addStandardSanitization(validator.toBoolean, strict);\n  }\n\n  toDate() {\n    return this.addStandardSanitization(validator.toDate);\n  }\n\n  toFloat() {\n    return this.addStandardSanitization(validator.toFloat);\n  }\n\n  toInt(radix) {\n    return this.addStandardSanitization(validator.toInt, radix);\n  }\n\n  toLowerCase() {\n    return this.customSanitizer(value => typeof value === 'string' ? value.toLowerCase() : value);\n  }\n\n  toUpperCase() {\n    return this.customSanitizer(value => typeof value === 'string' ? value.toUpperCase() : value);\n  }\n\n  trim(chars) {\n    return this.addStandardSanitization(validator.trim, chars);\n  }\n\n  whitelist(chars) {\n    return this.addStandardSanitization(validator.whitelist, chars);\n  }\n\n}\n\nexports.SanitizersImpl = SanitizersImpl;","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Backend/node_modules/express-validator/src/chain/sanitizers-impl.js"],"names":["Object","defineProperty","exports","value","SanitizersImpl","validator","require","sanitization_1","constructor","builder","chain","customSanitizer","sanitizer","addItem","Sanitization","default","default_value","undefined","NaN","includes","replace","values_to_replace","new_value","Array","isArray","addStandardSanitization","options","blacklist","chars","escape","unescape","ltrim","normalizeEmail","rtrim","stripLow","keep_new_lines","toArray","toBoolean","strict","toDate","toFloat","toInt","radix","toLowerCase","toUpperCase","trim","whitelist"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SanitizersImpl = void 0;\r\nconst validator = require(\"validator\");\r\nconst sanitization_1 = require(\"../context-items/sanitization\");\r\nclass SanitizersImpl {\r\n    constructor(builder, chain) {\r\n        this.builder = builder;\r\n        this.chain = chain;\r\n    }\r\n    // custom sanitizers\r\n    customSanitizer(sanitizer) {\r\n        this.builder.addItem(new sanitization_1.Sanitization(sanitizer, true));\r\n        return this.chain;\r\n    }\r\n    default(default_value) {\r\n        return this.customSanitizer(value => [undefined, null, NaN, ''].includes(value) ? default_value : value);\r\n    }\r\n    replace(values_to_replace, new_value) {\r\n        if (!Array.isArray(values_to_replace)) {\r\n            values_to_replace = [values_to_replace];\r\n        }\r\n        return this.customSanitizer(value => (values_to_replace.includes(value) ? new_value : value));\r\n    }\r\n    // Standard sanitizers\r\n    addStandardSanitization(sanitizer, ...options) {\r\n        this.builder.addItem(new sanitization_1.Sanitization(sanitizer, false, options));\r\n        return this.chain;\r\n    }\r\n    blacklist(chars) {\r\n        return this.addStandardSanitization(validator.blacklist, chars);\r\n    }\r\n    escape() {\r\n        return this.addStandardSanitization(validator.escape);\r\n    }\r\n    unescape() {\r\n        return this.addStandardSanitization(validator.unescape);\r\n    }\r\n    ltrim(chars) {\r\n        return this.addStandardSanitization(validator.ltrim, chars);\r\n    }\r\n    normalizeEmail(options) {\r\n        return this.addStandardSanitization(validator.normalizeEmail, options);\r\n    }\r\n    rtrim(chars) {\r\n        return this.addStandardSanitization(validator.rtrim, chars);\r\n    }\r\n    stripLow(keep_new_lines) {\r\n        return this.addStandardSanitization(validator.stripLow, keep_new_lines);\r\n    }\r\n    toArray() {\r\n        return this.customSanitizer(value => (value !== undefined && ((Array.isArray(value) && value) || [value])) || []);\r\n    }\r\n    toBoolean(strict) {\r\n        return this.addStandardSanitization(validator.toBoolean, strict);\r\n    }\r\n    toDate() {\r\n        return this.addStandardSanitization(validator.toDate);\r\n    }\r\n    toFloat() {\r\n        return this.addStandardSanitization(validator.toFloat);\r\n    }\r\n    toInt(radix) {\r\n        return this.addStandardSanitization(validator.toInt, radix);\r\n    }\r\n    toLowerCase() {\r\n        return this.customSanitizer(value => (typeof value === 'string' ? value.toLowerCase() : value));\r\n    }\r\n    toUpperCase() {\r\n        return this.customSanitizer(value => (typeof value === 'string' ? value.toUpperCase() : value));\r\n    }\r\n    trim(chars) {\r\n        return this.addStandardSanitization(validator.trim, chars);\r\n    }\r\n    whitelist(chars) {\r\n        return this.addStandardSanitization(validator.whitelist, chars);\r\n    }\r\n}\r\nexports.SanitizersImpl = SanitizersImpl;\r\n"]},"metadata":{},"sourceType":"script"}