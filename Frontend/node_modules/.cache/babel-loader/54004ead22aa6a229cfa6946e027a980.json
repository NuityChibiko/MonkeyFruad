{"ast":null,"code":"\"use strict\";\n/*!\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst google_gax_1 = require(\"google-gax\");\n\nconst stream_1 = require(\"stream\");\n\nconst url_1 = require(\"url\");\n\nconst backoff_1 = require(\"./backoff\");\n\nconst bulk_writer_1 = require(\"./bulk-writer\");\n\nconst bundle_1 = require(\"./bundle\");\n\nconst convert_1 = require(\"./convert\");\n\nconst document_1 = require(\"./document\");\n\nconst logger_1 = require(\"./logger\");\n\nconst path_1 = require(\"./path\");\n\nconst pool_1 = require(\"./pool\");\n\nconst reference_1 = require(\"./reference\");\n\nconst reference_2 = require(\"./reference\");\n\nconst serializer_1 = require(\"./serializer\");\n\nconst timestamp_1 = require(\"./timestamp\");\n\nconst transaction_1 = require(\"./transaction\");\n\nconst util_1 = require(\"./util\");\n\nconst validate_1 = require(\"./validate\");\n\nconst write_batch_1 = require(\"./write-batch\");\n\nconst firestore_client_config_json_1 = require(\"./v1/firestore_client_config.json\");\n\nconst serviceConfig = firestore_client_config_json_1.interfaces['google.firestore.v1.Firestore'];\n\nconst collection_group_1 = require(\"./collection-group\");\n\nexports.CollectionGroup = collection_group_1.CollectionGroup;\n\nvar reference_3 = require(\"./reference\");\n\nexports.CollectionReference = reference_3.CollectionReference;\nexports.DocumentReference = reference_3.DocumentReference;\nexports.QuerySnapshot = reference_3.QuerySnapshot;\nexports.Query = reference_3.Query;\n\nvar bulk_writer_2 = require(\"./bulk-writer\");\n\nexports.BulkWriter = bulk_writer_2.BulkWriter;\n\nvar document_2 = require(\"./document\");\n\nexports.DocumentSnapshot = document_2.DocumentSnapshot;\nexports.QueryDocumentSnapshot = document_2.QueryDocumentSnapshot;\n\nvar field_value_1 = require(\"./field-value\");\n\nexports.FieldValue = field_value_1.FieldValue;\n\nvar write_batch_2 = require(\"./write-batch\");\n\nexports.WriteBatch = write_batch_2.WriteBatch;\nexports.WriteResult = write_batch_2.WriteResult;\n\nvar transaction_2 = require(\"./transaction\");\n\nexports.Transaction = transaction_2.Transaction;\n\nvar timestamp_2 = require(\"./timestamp\");\n\nexports.Timestamp = timestamp_2.Timestamp;\n\nvar document_change_1 = require(\"./document-change\");\n\nexports.DocumentChange = document_change_1.DocumentChange;\n\nvar path_2 = require(\"./path\");\n\nexports.FieldPath = path_2.FieldPath;\n\nvar geo_point_1 = require(\"./geo-point\");\n\nexports.GeoPoint = geo_point_1.GeoPoint;\n\nvar query_partition_1 = require(\"./query-partition\");\n\nexports.QueryPartition = query_partition_1.QueryPartition;\n\nvar logger_2 = require(\"./logger\");\n\nexports.setLogFunction = logger_2.setLogFunction;\n\nvar google_gax_2 = require(\"google-gax\");\n\nexports.GrpcStatus = google_gax_2.Status;\n\nconst libVersion = require('../../package.json').version;\n\nlogger_1.setLibVersion(libVersion);\n/*!\r\n * DO NOT REMOVE THE FOLLOWING NAMESPACE DEFINITIONS\r\n */\n\n/**\r\n * @namespace google.protobuf\r\n */\n\n/**\r\n * @namespace google.rpc\r\n */\n\n/**\r\n * @namespace google.longrunning\r\n */\n\n/**\r\n * @namespace google.firestore.v1\r\n */\n\n/**\r\n * @namespace google.firestore.v1beta1\r\n */\n\n/**\r\n * @namespace google.firestore.admin.v1\r\n */\n\n/*!\r\n * @see v1\r\n */\n\nlet v1; // Lazy-loaded in `_runRequest()`\n\n/*!\r\n * @see v1beta1\r\n */\n\nlet v1beta1; // Lazy-loaded upon access.\n\n/*!\r\n * HTTP header for the resource prefix to improve routing and project isolation\r\n * by the backend.\r\n */\n\nconst CLOUD_RESOURCE_HEADER = 'google-cloud-resource-prefix';\n/*!\r\n * The maximum number of times to retry idempotent requests.\r\n */\n\nconst MAX_REQUEST_RETRIES = 5;\n/*!\r\n * The default number of idle GRPC channel to keep.\r\n */\n\nconst DEFAULT_MAX_IDLE_CHANNELS = 1;\n/*!\r\n * The maximum number of concurrent requests supported by a single GRPC channel,\r\n * as enforced by Google's Frontend. If the SDK issues more than 100 concurrent\r\n * operations, we need to use more than one GAPIC client since these clients\r\n * multiplex all requests over a single channel.\r\n */\n\nconst MAX_CONCURRENT_REQUESTS_PER_CLIENT = 100;\n/**\r\n * Document data (e.g. for use with\r\n * [set()]{@link DocumentReference#set}) consisting of fields mapped\r\n * to values.\r\n *\r\n * @typedef {Object.<string, *>} DocumentData\r\n */\n\n/**\r\n * Converter used by [withConverter()]{@link Query#withConverter} to transform\r\n * user objects of type T into Firestore data.\r\n *\r\n * Using the converter allows you to specify generic type arguments when storing\r\n * and retrieving objects from Firestore.\r\n *\r\n * @example\r\n * class Post {\r\n *   constructor(readonly title: string, readonly author: string) {}\r\n *\r\n *   toString(): string {\r\n *     return this.title + ', by ' + this.author;\r\n *   }\r\n * }\r\n *\r\n * const postConverter = {\r\n *   toFirestore(post: Post): FirebaseFirestore.DocumentData {\r\n *     return {title: post.title, author: post.author};\r\n *   },\r\n *   fromFirestore(\r\n *     data: FirebaseFirestore.QueryDocumentSnapshot\r\n *   ): Post {\r\n *     const data = snapshot.data();\r\n *     return new Post(data.title, data.author);\r\n *   }\r\n * };\r\n *\r\n * const postSnap = await Firestore()\r\n *   .collection('posts')\r\n *   .withConverter(postConverter)\r\n *   .doc().get();\r\n * const post = postSnap.data();\r\n * if (post !== undefined) {\r\n *   post.title; // string\r\n *   post.toString(); // Should be defined\r\n *   post.someNonExistentProperty; // TS error\r\n * }\r\n *\r\n * @property {Function} toFirestore Called by the Firestore SDK to convert a\r\n * custom model object of type T into a plain Javascript object (suitable for\r\n * writing directly to the Firestore database).\r\n * @property {Function} fromFirestore Called by the Firestore SDK to convert\r\n * Firestore data into an object of type T.\r\n * @typedef {Object} FirestoreDataConverter\r\n */\n\n/**\r\n * Update data (for use with [update]{@link DocumentReference#update})\r\n * that contains paths (e.g. 'foo' or 'foo.baz') mapped to values. Fields that\r\n * contain dots reference nested fields within the document.\r\n *\r\n * @typedef {Object.<string, *>} UpdateData\r\n */\n\n/**\r\n * An options object that configures conditional behavior of\r\n * [update()]{@link DocumentReference#update} and\r\n * [delete()]{@link DocumentReference#delete} calls in\r\n * [DocumentReference]{@link DocumentReference},\r\n * [WriteBatch]{@link WriteBatch}, and\r\n * [Transaction]{@link Transaction}. Using Preconditions, these calls\r\n * can be restricted to only apply to documents that match the specified\r\n * conditions.\r\n *\r\n * @example\r\n * const documentRef = firestore.doc('coll/doc');\r\n *\r\n * documentRef.get().then(snapshot => {\r\n *   const updateTime = snapshot.updateTime;\r\n *\r\n *   console.log(`Deleting document at update time: ${updateTime.toDate()}`);\r\n *   return documentRef.delete({ lastUpdateTime: updateTime });\r\n * });\r\n *\r\n * @property {Timestamp} lastUpdateTime The update time to enforce. If set,\r\n *  enforces that the document was last updated at lastUpdateTime. Fails the\r\n *  operation if the document was last updated at a different time.\r\n * @typedef {Object} Precondition\r\n */\n\n/**\r\n * An options object that configures the behavior of\r\n * [set()]{@link DocumentReference#set} calls in\r\n * [DocumentReference]{@link DocumentReference},\r\n * [WriteBatch]{@link WriteBatch}, and\r\n * [Transaction]{@link Transaction}. These calls can be\r\n * configured to perform granular merges instead of overwriting the target\r\n * documents in their entirety by providing a SetOptions object with\r\n * { merge : true }.\r\n *\r\n * @property {boolean} merge Changes the behavior of a set() call to only\r\n * replace the values specified in its data argument. Fields omitted from the\r\n * set() call remain untouched.\r\n * @property {Array<(string|FieldPath)>} mergeFields Changes the behavior of\r\n * set() calls to only replace the specified field paths. Any field path that is\r\n * not specified is ignored and remains untouched.\r\n * It is an error to pass a SetOptions object to a set() call that is missing a\r\n * value for any of the fields specified here.\r\n * @typedef {Object} SetOptions\r\n */\n\n/**\r\n * An options object that can be used to configure the behavior of\r\n * [getAll()]{@link Firestore#getAll} calls. By providing a `fieldMask`, these\r\n * calls can be configured to only return a subset of fields.\r\n *\r\n * @property {Array<(string|FieldPath)>} fieldMask Specifies the set of fields\r\n * to return and reduces the amount of data transmitted by the backend.\r\n * Adding a field mask does not filter results. Documents do not need to\r\n * contain values for all the fields in the mask to be part of the result set.\r\n * @typedef {Object} ReadOptions\r\n */\n\n/**\r\n * An options object to configure throttling on BulkWriter.\r\n *\r\n * Whether to disable or configure throttling. By default, throttling is\r\n * enabled. `throttling` can be set to either a boolean or a config object.\r\n * Setting it to `true` will use default values. You can override the defaults\r\n * by setting it to `false` to disable throttling, or by setting the config\r\n * values to enable throttling with the provided values.\r\n *\r\n * @property {boolean|Object} throttling Whether to disable or enable\r\n * throttling. Throttling is enabled by default, if the field is set to `true`\r\n * or if any custom throttling options are provided. `{ initialOpsPerSecond:\r\n * number }` sets the initial maximum number of operations per second allowed by\r\n * the throttler. If `initialOpsPerSecond` is not set, the default is 500\r\n * operations per second. `{ maxOpsPerSecond: number }` sets the maximum number\r\n * of operations per second allowed by the throttler. If `maxOpsPerSecond` is\r\n * not set, no maximum is enforced.\r\n * @typedef {Object} BulkWriterOptions\r\n */\n\n/**\r\n * Status codes returned by GRPC operations.\r\n *\r\n * @see https://github.com/grpc/grpc/blob/master/doc/statuscodes.md\r\n *\r\n * @enum {number}\r\n * @typedef {Object} GrpcStatus\r\n */\n\n/**\r\n * The Firestore client represents a Firestore Database and is the entry point\r\n * for all Firestore operations.\r\n *\r\n * @see [Firestore Documentation]{@link https://firebase.google.com/docs/firestore/}\r\n *\r\n * @class\r\n *\r\n * @example <caption>Install the client library with <a\r\n * href=\"https://www.npmjs.com/\">npm</a>:</caption> npm install --save\r\n * @google-cloud/firestore\r\n *\r\n * @example <caption>Import the client library</caption>\r\n * var Firestore = require('@google-cloud/firestore');\r\n *\r\n * @example <caption>Create a client that uses <a\r\n * href=\"https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\">Application\r\n * Default Credentials (ADC)</a>:</caption> var firestore = new Firestore();\r\n *\r\n * @example <caption>Create a client with <a\r\n * href=\"https://cloud.google.com/docs/authentication/production#obtaining_and_providing_service_account_credentials_manually\">explicit\r\n * credentials</a>:</caption> var firestore = new Firestore({ projectId:\r\n * 'your-project-id', keyFilename: '/path/to/keyfile.json'\r\n * });\r\n *\r\n * @example <caption>include:samples/quickstart.js</caption>\r\n * region_tag:firestore_quickstart\r\n * Full quickstart example:\r\n */\n\nclass Firestore {\n  /**\r\n   * @param {Object=} settings [Configuration object](#/docs).\r\n   * @param {string=} settings.projectId The project ID from the Google\r\n   * Developer's Console, e.g. 'grape-spaceship-123'. We will also check the\r\n   * environment variable GCLOUD_PROJECT for your project ID.  Can be omitted in\r\n   * environments that support\r\n   * {@link https://cloud.google.com/docs/authentication Application Default\r\n   * Credentials}\r\n   * @param {string=} settings.keyFilename Local file containing the Service\r\n   * Account credentials as downloaded from the Google Developers Console. Can\r\n   * be omitted in environments that support\r\n   * {@link https://cloud.google.com/docs/authentication Application Default\r\n   * Credentials}. To configure Firestore with custom credentials, use\r\n   * `settings.credentials` and provide the `client_email` and `private_key` of\r\n   * your service account.\r\n   * @param {{client_email:string=, private_key:string=}=} settings.credentials\r\n   * The `client_email` and `private_key` properties of the service account\r\n   * to use with your Firestore project. Can be omitted in environments that\r\n   * support {@link https://cloud.google.com/docs/authentication Application\r\n   * Default Credentials}. If your credentials are stored in a JSON file, you\r\n   * can specify a `keyFilename` instead.\r\n   * @param {string=} settings.host The host to connect to.\r\n   * @param {boolean=} settings.ssl Whether to use SSL when connecting.\r\n   * @param {number=} settings.maxIdleChannels The maximum number of idle GRPC\r\n   * channels to keep. A smaller number of idle channels reduces memory usage\r\n   * but increases request latency for clients with fluctuating request rates.\r\n   * If set to 0, shuts down all GRPC channels when the client becomes idle.\r\n   * Defaults to 1.\r\n   * @param {boolean=} settings.ignoreUndefinedProperties Whether to skip nested\r\n   * properties that are set to `undefined` during object serialization. If set\r\n   * to `true`, these properties are skipped and not written to Firestore. If\r\n   * set `false` or omitted, the SDK throws an exception when it encounters\r\n   * properties of type `undefined`.\r\n   */\n  constructor(settings) {\n    /**\r\n     * The configuration options for the GAPIC client.\r\n     * @private\r\n     */\n    this._settings = {};\n    /**\r\n     * Whether the initialization settings can still be changed by invoking\r\n     * `settings()`.\r\n     * @private\r\n     */\n\n    this._settingsFrozen = false;\n    /**\r\n     * The serializer to use for the Protobuf transformation.\r\n     * @private\r\n     */\n\n    this._serializer = null;\n    /**\r\n     * The project ID for this client.\r\n     *\r\n     * The project ID is auto-detected during the first request unless a project\r\n     * ID is passed to the constructor (or provided via `.settings()`).\r\n     * @private\r\n     */\n\n    this._projectId = undefined;\n    /**\r\n     * Count of listeners that have been registered on the client.\r\n     *\r\n     * The client can only be terminated when there are no pending writes or\r\n     * registered listeners.\r\n     * @private\r\n     */\n\n    this.registeredListenersCount = 0;\n    /**\r\n     * Number of pending operations on the client.\r\n     *\r\n     * The client can only be terminated when there are no pending writes or\r\n     * registered listeners.\r\n     * @private\r\n     */\n\n    this.bulkWritersCount = 0;\n    const libraryHeader = {\n      libName: 'gccl',\n      libVersion\n    };\n\n    if (settings && settings.firebaseVersion) {\n      libraryHeader.libVersion += ' fire/' + settings.firebaseVersion;\n    }\n\n    this.validateAndApplySettings({ ...settings,\n      ...libraryHeader\n    });\n    const retryConfig = serviceConfig.retry_params.default;\n    this._backoffSettings = {\n      initialDelayMs: retryConfig.initial_retry_delay_millis,\n      maxDelayMs: retryConfig.max_retry_delay_millis,\n      backoffFactor: retryConfig.retry_delay_multiplier\n    };\n    const maxIdleChannels = this._settings.maxIdleChannels === undefined ? DEFAULT_MAX_IDLE_CHANNELS : this._settings.maxIdleChannels;\n    this._clientPool = new pool_1.ClientPool(MAX_CONCURRENT_REQUESTS_PER_CLIENT, maxIdleChannels,\n    /* clientFactory= */\n    () => {\n      var _a;\n\n      let client;\n\n      if (this._settings.ssl === false) {\n        const grpcModule = (_a = this._settings.grpc) !== null && _a !== void 0 ? _a : google_gax_1.grpc;\n        const sslCreds = grpcModule.credentials.createInsecure();\n        client = new module.exports.v1({\n          sslCreds,\n          ...this._settings\n        });\n      } else {\n        client = new module.exports.v1(this._settings);\n      }\n\n      logger_1.logger('Firestore', null, 'Initialized Firestore GAPIC Client');\n      return client;\n    },\n    /* clientDestructor= */\n    client => client.close());\n    logger_1.logger('Firestore', null, 'Initialized Firestore');\n  }\n  /**\r\n   * Specifies custom settings to be used to configure the `Firestore`\r\n   * instance. Can only be invoked once and before any other Firestore method.\r\n   *\r\n   * If settings are provided via both `settings()` and the `Firestore`\r\n   * constructor, both settings objects are merged and any settings provided via\r\n   * `settings()` take precedence.\r\n   *\r\n   * @param {object} settings The settings to use for all Firestore operations.\r\n   */\n\n\n  settings(settings) {\n    validate_1.validateObject('settings', settings);\n    validate_1.validateString('settings.projectId', settings.projectId, {\n      optional: true\n    });\n\n    if (this._settingsFrozen) {\n      throw new Error('Firestore has already been initialized. You can only call ' + 'settings() once, and only before calling any other methods on a ' + 'Firestore object.');\n    }\n\n    const mergedSettings = { ...this._settings,\n      ...settings\n    };\n    this.validateAndApplySettings(mergedSettings);\n    this._settingsFrozen = true;\n  }\n\n  validateAndApplySettings(settings) {\n    var _a;\n\n    if (settings.projectId !== undefined) {\n      validate_1.validateString('settings.projectId', settings.projectId);\n      this._projectId = settings.projectId;\n    }\n\n    let url = null; // If the environment variable is set, it should always take precedence\n    // over any user passed in settings.\n\n    if (process.env.FIRESTORE_EMULATOR_HOST) {\n      validate_1.validateHost('FIRESTORE_EMULATOR_HOST', process.env.FIRESTORE_EMULATOR_HOST);\n      settings = { ...settings,\n        host: process.env.FIRESTORE_EMULATOR_HOST,\n        ssl: false\n      };\n      url = new url_1.URL(`http://${settings.host}`);\n    } else if (settings.host !== undefined) {\n      validate_1.validateHost('settings.host', settings.host);\n      url = new url_1.URL(`http://${settings.host}`);\n    } // Only store the host if a valid value was provided in `host`.\n\n\n    if (url !== null) {\n      if (settings.servicePath !== undefined && settings.servicePath !== url.hostname || settings.apiEndpoint !== undefined && settings.apiEndpoint !== url.hostname) {\n        // eslint-disable-next-line no-console\n        console.warn(`The provided host (${url.hostname}) in \"settings\" does not ` + `match the existing host (${(_a = settings.servicePath) !== null && _a !== void 0 ? _a : settings.apiEndpoint}). Using the provided host.`);\n      }\n\n      settings.servicePath = url.hostname;\n\n      if (url.port !== '' && settings.port === undefined) {\n        settings.port = Number(url.port);\n      } // We need to remove the `host` and `apiEndpoint` setting, in case a user\n      // calls `settings()`, which will compare the the provided `host` to the\n      // existing hostname stored on `servicePath`.\n\n\n      delete settings.host;\n      delete settings.apiEndpoint;\n    }\n\n    if (settings.ssl !== undefined) {\n      validate_1.validateBoolean('settings.ssl', settings.ssl);\n    }\n\n    if (settings.maxIdleChannels !== undefined) {\n      validate_1.validateInteger('settings.maxIdleChannels', settings.maxIdleChannels, {\n        minValue: 0\n      });\n    }\n\n    this._settings = settings;\n    this._serializer = new serializer_1.Serializer(this);\n  }\n  /**\r\n   * Returns the Project ID for this Firestore instance. Validates that\r\n   * `initializeIfNeeded()` was called before.\r\n   *\r\n   * @private\r\n   */\n\n\n  get projectId() {\n    if (this._projectId === undefined) {\n      throw new Error('INTERNAL ERROR: Client is not yet ready to issue requests.');\n    }\n\n    return this._projectId;\n  }\n  /**\r\n   * Returns the root path of the database. Validates that\r\n   * `initializeIfNeeded()` was called before.\r\n   *\r\n   * @private\r\n   */\n\n\n  get formattedName() {\n    return `projects/${this.projectId}/databases/${path_1.DEFAULT_DATABASE_ID}`;\n  }\n  /**\r\n   * Gets a [DocumentReference]{@link DocumentReference} instance that\r\n   * refers to the document at the specified path.\r\n   *\r\n   * @param {string} documentPath A slash-separated path to a document.\r\n   * @returns {DocumentReference} The\r\n   * [DocumentReference]{@link DocumentReference} instance.\r\n   *\r\n   * @example\r\n   * let documentRef = firestore.doc('collection/document');\r\n   * console.log(`Path of document is ${documentRef.path}`);\r\n   */\n\n\n  doc(documentPath) {\n    path_1.validateResourcePath('documentPath', documentPath);\n    const path = path_1.ResourcePath.EMPTY.append(documentPath);\n\n    if (!path.isDocument) {\n      throw new Error(`Value for argument \"documentPath\" must point to a document, but was \"${documentPath}\". Your path does not contain an even number of components.`);\n    }\n\n    return new reference_2.DocumentReference(this, path);\n  }\n  /**\r\n   * Gets a [CollectionReference]{@link CollectionReference} instance\r\n   * that refers to the collection at the specified path.\r\n   *\r\n   * @param {string} collectionPath A slash-separated path to a collection.\r\n   * @returns {CollectionReference} The\r\n   * [CollectionReference]{@link CollectionReference} instance.\r\n   *\r\n   * @example\r\n   * let collectionRef = firestore.collection('collection');\r\n   *\r\n   * // Add a document with an auto-generated ID.\r\n   * collectionRef.add({foo: 'bar'}).then((documentRef) => {\r\n   *   console.log(`Added document at ${documentRef.path})`);\r\n   * });\r\n   */\n\n\n  collection(collectionPath) {\n    path_1.validateResourcePath('collectionPath', collectionPath);\n    const path = path_1.ResourcePath.EMPTY.append(collectionPath);\n\n    if (!path.isCollection) {\n      throw new Error(`Value for argument \"collectionPath\" must point to a collection, but was \"${collectionPath}\". Your path does not contain an odd number of components.`);\n    }\n\n    return new reference_1.CollectionReference(this, path);\n  }\n  /**\r\n   * Creates and returns a new Query that includes all documents in the\r\n   * database that are contained in a collection or subcollection with the\r\n   * given collectionId.\r\n   *\r\n   * @param {string} collectionId Identifies the collections to query over.\r\n   * Every collection or subcollection with this ID as the last segment of its\r\n   * path will be included. Cannot contain a slash.\r\n   * @returns {CollectionGroup} The created CollectionGroup.\r\n   *\r\n   * @example\r\n   * let docA = firestore.doc('mygroup/docA').set({foo: 'bar'});\r\n   * let docB = firestore.doc('abc/def/mygroup/docB').set({foo: 'bar'});\r\n   *\r\n   * Promise.all([docA, docB]).then(() => {\r\n   *    let query = firestore.collectionGroup('mygroup');\r\n   *    query = query.where('foo', '==', 'bar');\r\n   *    return query.get().then(snapshot => {\r\n   *       console.log(`Found ${snapshot.size} documents.`);\r\n   *    });\r\n   * });\r\n   */\n\n\n  collectionGroup(collectionId) {\n    if (collectionId.indexOf('/') !== -1) {\n      throw new Error(`Invalid collectionId '${collectionId}'. Collection IDs must not contain '/'.`);\n    }\n\n    return new collection_group_1.CollectionGroup(this, collectionId,\n    /* converter= */\n    undefined);\n  }\n  /**\r\n   * Creates a [WriteBatch]{@link WriteBatch}, used for performing\r\n   * multiple writes as a single atomic operation.\r\n   *\r\n   * @returns {WriteBatch} A WriteBatch that operates on this Firestore\r\n   * client.\r\n   *\r\n   * @example\r\n   * let writeBatch = firestore.batch();\r\n   *\r\n   * // Add two documents in an atomic batch.\r\n   * let data = { foo: 'bar' };\r\n   * writeBatch.set(firestore.doc('col/doc1'), data);\r\n   * writeBatch.set(firestore.doc('col/doc2'), data);\r\n   *\r\n   * writeBatch.commit().then(res => {\r\n   *   console.log('Successfully executed batch.');\r\n   * });\r\n   */\n\n\n  batch() {\n    return new write_batch_1.WriteBatch(this);\n  }\n  /**\r\n   * Creates a [BulkWriter]{@link BulkWriter}, used for performing\r\n   * multiple writes in parallel. Gradually ramps up writes as specified\r\n   * by the 500/50/5 rule.\r\n   *\r\n   * @see [500/50/5 Documentation]{@link https://cloud.google.com/datastore/docs/best-practices#ramping_up_traffic}\r\n   *\r\n   * @param {object=} options BulkWriter options.\r\n   * @param {boolean=} options.disableThrottling Whether to disable throttling\r\n   * as specified by the 500/50/5 rule.\r\n   * @returns {WriteBatch} A BulkWriter that operates on this Firestore\r\n   * client.\r\n   *\r\n   * @example\r\n   * let bulkWriter = firestore.bulkWriter();\r\n   *\r\n   * bulkWriter.create(firestore.doc('col/doc1'), {foo: 'bar'})\r\n   *   .then(res => {\r\n   *     console.log(`Added document at ${res.writeTime}`);\r\n   *   });\r\n   * bulkWriter.update(firestore.doc('col/doc2'), {foo: 'bar'})\r\n   *   .then(res => {\r\n   *     console.log(`Updated document at ${res.writeTime}`);\r\n   *   });\r\n   * bulkWriter.delete(firestore.doc('col/doc3'))\r\n   *   .then(res => {\r\n   *     console.log(`Deleted document at ${res.writeTime}`);\r\n   *   });\r\n   * await bulkWriter.close().then(() => {\r\n   *   console.log('Executed all writes');\r\n   * });\r\n   */\n\n\n  bulkWriter(options) {\n    return new bulk_writer_1.BulkWriter(this, options);\n  }\n\n  snapshot_(documentOrName, readTime, encoding) {\n    // TODO: Assert that Firestore Project ID is valid.\n    let convertTimestamp;\n    let convertFields;\n\n    if (encoding === undefined || encoding === 'protobufJS') {\n      convertTimestamp = data => data;\n\n      convertFields = data => data;\n    } else if (encoding === 'json') {\n      // Google Cloud Functions calls us with Proto3 JSON format data, which we\n      // must convert to Protobuf JS.\n      convertTimestamp = convert_1.timestampFromJson;\n      convertFields = convert_1.fieldsFromJson;\n    } else {\n      throw new Error('Unsupported encoding format. Expected \"json\" or \"protobufJS\", ' + `but was \"${encoding}\".`);\n    }\n\n    let ref;\n    let document;\n\n    if (typeof documentOrName === 'string') {\n      ref = new reference_2.DocumentReference(this, path_1.QualifiedResourcePath.fromSlashSeparatedString(documentOrName));\n      document = new document_1.DocumentSnapshotBuilder(ref);\n    } else {\n      ref = new reference_2.DocumentReference(this, path_1.QualifiedResourcePath.fromSlashSeparatedString(documentOrName.name));\n      document = new document_1.DocumentSnapshotBuilder(ref);\n      document.fieldsProto = documentOrName.fields ? convertFields(documentOrName.fields) : {};\n      document.createTime = timestamp_1.Timestamp.fromProto(convertTimestamp(documentOrName.createTime, 'documentOrName.createTime'));\n      document.updateTime = timestamp_1.Timestamp.fromProto(convertTimestamp(documentOrName.updateTime, 'documentOrName.updateTime'));\n    }\n\n    if (readTime) {\n      document.readTime = timestamp_1.Timestamp.fromProto(convertTimestamp(readTime, 'readTime'));\n    }\n\n    return document.build();\n  }\n  /**\r\n   * Creates a new `BundleBuilder` instance to package selected Firestore data into\r\n   * a bundle.\r\n   *\r\n   * @param bundleId. The id of the bundle. When loaded on clients, client SDKs use this id\r\n   * and the timestamp associated with the built bundle to tell if it has been loaded already.\r\n   * If not specified, a random identifier will be used.\r\n   */\n\n\n  bundle(name) {\n    return new bundle_1.BundleBuilder(name || util_1.autoId());\n  }\n  /**\r\n   * Executes the given updateFunction and commits the changes applied within\r\n   * the transaction.\r\n   *\r\n   * You can use the transaction object passed to 'updateFunction' to read and\r\n   * modify Firestore documents under lock. Transactions are committed once\r\n   * 'updateFunction' resolves and attempted up to five times on failure.\r\n   *\r\n   * @param {function(Transaction)} updateFunction The function to execute\r\n   * within the transaction context.\r\n   * @param {object=} transactionOptions Transaction options.\r\n   * @param {number=} transactionOptions.maxAttempts - The maximum number of\r\n   * attempts for this transaction.\r\n   * @returns {Promise} If the transaction completed successfully or was\r\n   * explicitly aborted (by the updateFunction returning a failed Promise), the\r\n   * Promise returned by the updateFunction will be returned here. Else if the\r\n   * transaction failed, a rejected Promise with the corresponding failure\r\n   * error will be returned.\r\n   *\r\n   * @example\r\n   * let counterTransaction = firestore.runTransaction(transaction => {\r\n   *   let documentRef = firestore.doc('col/doc');\r\n   *   return transaction.get(documentRef).then(doc => {\r\n   *     if (doc.exists) {\r\n   *       let count =  doc.get('count') || 0;\r\n   *       if (count > 10) {\r\n   *         return Promise.reject('Reached maximum count');\r\n   *       }\r\n   *       transaction.update(documentRef, { count: ++count });\r\n   *       return Promise.resolve(count);\r\n   *     }\r\n   *\r\n   *     transaction.create(documentRef, { count: 1 });\r\n   *     return Promise.resolve(1);\r\n   *   });\r\n   * });\r\n   *\r\n   * counterTransaction.then(res => {\r\n   *   console.log(`Count updated to ${res}`);\r\n   * });\r\n   */\n\n\n  runTransaction(updateFunction, transactionOptions) {\n    validate_1.validateFunction('updateFunction', updateFunction);\n    const defaultAttempts = 5;\n    const tag = util_1.requestTag();\n    let maxAttempts;\n\n    if (transactionOptions) {\n      validate_1.validateObject('transactionOptions', transactionOptions);\n      validate_1.validateInteger('transactionOptions.maxAttempts', transactionOptions.maxAttempts, {\n        optional: true,\n        minValue: 1\n      });\n      maxAttempts = transactionOptions.maxAttempts || defaultAttempts;\n    } else {\n      maxAttempts = defaultAttempts;\n    }\n\n    const transaction = new transaction_1.Transaction(this, tag);\n    return this.initializeIfNeeded(tag).then(() => transaction.runTransaction(updateFunction, maxAttempts));\n  }\n  /**\r\n   * Fetches the root collections that are associated with this Firestore\r\n   * database.\r\n   *\r\n   * @returns {Promise.<Array.<CollectionReference>>} A Promise that resolves\r\n   * with an array of CollectionReferences.\r\n   *\r\n   * @example\r\n   * firestore.listCollections().then(collections => {\r\n   *   for (let collection of collections) {\r\n   *     console.log(`Found collection with id: ${collection.id}`);\r\n   *   }\r\n   * });\r\n   */\n\n\n  listCollections() {\n    const rootDocument = new reference_2.DocumentReference(this, path_1.ResourcePath.EMPTY);\n    return rootDocument.listCollections();\n  }\n  /**\r\n   * Retrieves multiple documents from Firestore.\r\n   *\r\n   * The first argument is required and must be of type `DocumentReference`\r\n   * followed by any additional `DocumentReference` documents. If used, the\r\n   * optional `ReadOptions` must be the last argument.\r\n   *\r\n   * @param {...DocumentReference|ReadOptions} documentRefsOrReadOptions The\r\n   * `DocumentReferences` to receive, followed by an optional field mask.\r\n   * @returns {Promise<Array.<DocumentSnapshot>>} A Promise that\r\n   * contains an array with the resulting document snapshots.\r\n   *\r\n   * @example\r\n   * let docRef1 = firestore.doc('col/doc1');\r\n   * let docRef2 = firestore.doc('col/doc2');\r\n   *\r\n   * firestore.getAll(docRef1, docRef2, { fieldMask: ['user'] }).then(docs => {\r\n   *   console.log(`First document: ${JSON.stringify(docs[0])}`);\r\n   *   console.log(`Second document: ${JSON.stringify(docs[1])}`);\r\n   * });\r\n   */\n\n\n  getAll(...documentRefsOrReadOptions) {\n    validate_1.validateMinNumberOfArguments('Firestore.getAll', documentRefsOrReadOptions, 1);\n    const {\n      documents,\n      fieldMask\n    } = transaction_1.parseGetAllArguments(documentRefsOrReadOptions);\n    const tag = util_1.requestTag(); // Capture the error stack to preserve stack tracing across async calls.\n\n    const stack = Error().stack;\n    return this.initializeIfNeeded(tag).then(() => this.getAll_(documents, fieldMask, tag)).catch(err => {\n      throw util_1.wrapError(err, stack);\n    });\n  }\n  /**\r\n   * Internal method to retrieve multiple documents from Firestore, optionally\r\n   * as part of a transaction.\r\n   *\r\n   * @private\r\n   * @param docRefs The documents to receive.\r\n   * @param fieldMask An optional field mask to apply to this read.\r\n   * @param requestTag A unique client-assigned identifier for this request.\r\n   * @param transactionId The transaction ID to use for this read.\r\n   * @returns A Promise that contains an array with the resulting documents.\r\n   */\n\n\n  getAll_(docRefs, fieldMask, requestTag, transactionId) {\n    const requestedDocuments = new Set();\n    const retrievedDocuments = new Map();\n\n    for (const docRef of docRefs) {\n      requestedDocuments.add(docRef.formattedName);\n    }\n\n    const request = {\n      database: this.formattedName,\n      transaction: transactionId,\n      documents: Array.from(requestedDocuments)\n    };\n\n    if (fieldMask) {\n      const fieldPaths = fieldMask.map(fieldPath => fieldPath.formattedName);\n      request.mask = {\n        fieldPaths\n      };\n    }\n\n    return this.requestStream('batchGetDocuments', request, requestTag).then(stream => {\n      return new Promise((resolve, reject) => {\n        stream.on('error', err => {\n          logger_1.logger('Firestore.getAll_', requestTag, 'GetAll failed with error:', err);\n          reject(err);\n        }).on('data', response => {\n          try {\n            let document;\n\n            if (response.found) {\n              logger_1.logger('Firestore.getAll_', requestTag, 'Received document: %s', response.found.name);\n              document = this.snapshot_(response.found, response.readTime);\n            } else {\n              logger_1.logger('Firestore.getAll_', requestTag, 'Document missing: %s', response.missing);\n              document = this.snapshot_(response.missing, response.readTime);\n            }\n\n            const path = document.ref.path;\n            retrievedDocuments.set(path, document);\n          } catch (err) {\n            logger_1.logger('Firestore.getAll_', requestTag, 'GetAll failed with exception:', err);\n            reject(err);\n          }\n        }).on('end', () => {\n          logger_1.logger('Firestore.getAll_', requestTag, 'Received %d results', retrievedDocuments.size); // BatchGetDocuments doesn't preserve document order. We use\n          // the request order to sort the resulting documents.\n\n          const orderedDocuments = [];\n\n          for (const docRef of docRefs) {\n            const document = retrievedDocuments.get(docRef.path);\n\n            if (document !== undefined) {\n              // Recreate the DocumentSnapshot with the DocumentReference\n              // containing the original converter.\n              const finalDoc = new document_1.DocumentSnapshotBuilder(docRef);\n              finalDoc.fieldsProto = document._fieldsProto;\n              finalDoc.readTime = document.readTime;\n              finalDoc.createTime = document.createTime;\n              finalDoc.updateTime = document.updateTime;\n              orderedDocuments.push(finalDoc.build());\n            } else {\n              reject(new Error(`Did not receive document for \"${docRef.path}\".`));\n            }\n          }\n\n          resolve(orderedDocuments);\n        });\n        stream.resume();\n      });\n    });\n  }\n  /**\r\n   * Registers a listener on this client, incrementing the listener count. This\r\n   * is used to verify that all listeners are unsubscribed when terminate() is\r\n   * called.\r\n   *\r\n   * @private\r\n   */\n\n\n  registerListener() {\n    this.registeredListenersCount += 1;\n  }\n  /**\r\n   * Unregisters a listener on this client, decrementing the listener count.\r\n   * This is used to verify that all listeners are unsubscribed when terminate()\r\n   * is called.\r\n   *\r\n   * @private\r\n   */\n\n\n  unregisterListener() {\n    this.registeredListenersCount -= 1;\n  }\n  /**\r\n   * Increments the number of open BulkWriter instances. This is used to verify\r\n   * that all pending operations are complete when terminate() is called.\r\n   *\r\n   * @private\r\n   */\n\n\n  _incrementBulkWritersCount() {\n    this.bulkWritersCount += 1;\n  }\n  /**\r\n   * Decrements the number of open BulkWriter instances. This is used to verify\r\n   * that all pending operations are complete when terminate() is called.\r\n   *\r\n   * @private\r\n   */\n\n\n  _decrementBulkWritersCount() {\n    this.bulkWritersCount -= 1;\n  }\n  /**\r\n   * Terminates the Firestore client and closes all open streams.\r\n   *\r\n   * @return A Promise that resolves when the client is terminated.\r\n   */\n\n\n  terminate() {\n    if (this.registeredListenersCount > 0 || this.bulkWritersCount > 0) {\n      return Promise.reject('All onSnapshot() listeners must be unsubscribed, and all BulkWriter ' + 'instances must be closed before terminating the client. ' + `There are ${this.registeredListenersCount} active listeners and ` + `${this.bulkWritersCount} open BulkWriter instances.`);\n    }\n\n    return this._clientPool.terminate();\n  }\n  /**\r\n   * Initializes the client if it is not already initialized. All methods in the\r\n   * SDK can be used after this method completes.\r\n   *\r\n   * @private\r\n   * @param requestTag A unique client-assigned identifier that caused this\r\n   * initialization.\r\n   * @return A Promise that resolves when the client is initialized.\r\n   */\n\n\n  async initializeIfNeeded(requestTag) {\n    this._settingsFrozen = true;\n\n    if (this._settings.ssl === false) {\n      // If SSL is false, we assume that we are talking to the emulator. We\n      // provide an Authorization header by default so that the connection is\n      // recognized as admin in Firestore Emulator. (If for some reason we're\n      // not connecting to the emulator, then this will result in denials with\n      // invalid token, rather than behave like clients not logged in. The user\n      // can then provide their own Authorization header, which will take\n      // precedence).\n      this._settings.customHeaders = {\n        Authorization: 'Bearer owner',\n        ...this._settings.customHeaders\n      };\n    }\n\n    if (this._projectId === undefined) {\n      try {\n        this._projectId = await this._clientPool.run(requestTag, gapicClient => gapicClient.getProjectId());\n        logger_1.logger('Firestore.initializeIfNeeded', null, 'Detected project ID: %s', this._projectId);\n      } catch (err) {\n        logger_1.logger('Firestore.initializeIfNeeded', null, 'Failed to detect project ID: %s', err);\n        return Promise.reject(err);\n      }\n    }\n  }\n  /**\r\n   * Returns GAX call options that set the cloud resource header.\r\n   * @private\r\n   */\n\n\n  createCallOptions(methodName, retryCodes) {\n    var _a;\n\n    const callOptions = {\n      otherArgs: {\n        headers: {\n          [CLOUD_RESOURCE_HEADER]: this.formattedName,\n          ...this._settings.customHeaders,\n          ...((_a = this._settings[methodName]) === null || _a === void 0 ? void 0 : _a.customHeaders)\n        }\n      }\n    };\n\n    if (retryCodes) {\n      const retryParams = util_1.getRetryParams(methodName);\n      callOptions.retry = new google_gax_1.RetryOptions(retryCodes, retryParams);\n    }\n\n    return callOptions;\n  }\n  /**\r\n   * A function returning a Promise that can be retried.\r\n   *\r\n   * @private\r\n   * @callback retryFunction\r\n   * @returns {Promise} A Promise indicating the function's success.\r\n   */\n\n  /**\r\n   * Helper method that retries failed Promises.\r\n   *\r\n   * If 'delayMs' is specified, waits 'delayMs' between invocations. Otherwise,\r\n   * schedules the first attempt immediately, and then waits 100 milliseconds\r\n   * for further attempts.\r\n   *\r\n   * @private\r\n   * @param methodName Name of the Veneer API endpoint that takes a request\r\n   * and GAX options.\r\n   * @param requestTag A unique client-assigned identifier for this request.\r\n   * @param func Method returning a Promise than can be retried.\r\n   * @returns A Promise with the function's result if successful within\r\n   * `attemptsRemaining`. Otherwise, returns the last rejected Promise.\r\n   */\n\n\n  async _retry(methodName, requestTag, func) {\n    const backoff = new backoff_1.ExponentialBackoff();\n    let lastError = undefined;\n\n    for (let attempt = 0; attempt < MAX_REQUEST_RETRIES; ++attempt) {\n      if (lastError) {\n        logger_1.logger('Firestore._retry', requestTag, 'Retrying request that failed with error:', lastError);\n      }\n\n      try {\n        await backoff.backoffAndWait();\n        return await func();\n      } catch (err) {\n        lastError = err;\n\n        if (util_1.isPermanentRpcError(err, methodName)) {\n          break;\n        }\n      }\n    }\n\n    logger_1.logger('Firestore._retry', requestTag, 'Request failed with error:', lastError);\n    return Promise.reject(lastError);\n  }\n  /**\r\n   * Waits for the provided stream to become active and returns a paused but\r\n   * healthy stream. If an error occurs before the first byte is read, the\r\n   * method rejects the returned Promise.\r\n   *\r\n   * @private\r\n   * @param backendStream The Node stream to monitor.\r\n   * @param lifetime A Promise that resolves when the stream receives an 'end',\r\n   * 'close' or 'finish' message.\r\n   * @param requestTag A unique client-assigned identifier for this request.\r\n   * @param request If specified, the request that should be written to the\r\n   * stream after opening.\r\n   * @returns A guaranteed healthy stream that should be used instead of\r\n   * `backendStream`.\r\n   */\n\n\n  _initializeStream(backendStream, lifetime, requestTag, request) {\n    const resultStream = new stream_1.PassThrough({\n      objectMode: true\n    });\n    resultStream.pause();\n    /**\r\n     * Whether we have resolved the Promise and returned the stream to the\r\n     * caller.\r\n     */\n\n    let streamInitialized = false;\n    return new Promise((resolve, reject) => {\n      function streamReady() {\n        if (!streamInitialized) {\n          streamInitialized = true;\n          logger_1.logger('Firestore._initializeStream', requestTag, 'Releasing stream');\n          resolve(resultStream);\n        }\n      }\n\n      function streamEnded() {\n        logger_1.logger('Firestore._initializeStream', requestTag, 'Received stream end');\n        resultStream.unpipe(backendStream);\n        resolve(resultStream);\n        lifetime.resolve();\n      }\n\n      function streamFailed(err) {\n        if (!streamInitialized) {\n          // If we receive an error before we were able to receive any data,\n          // reject this stream.\n          logger_1.logger('Firestore._initializeStream', requestTag, 'Received initial error:', err);\n          reject(err);\n        } else {\n          logger_1.logger('Firestore._initializeStream', requestTag, 'Received stream error:', err); // We execute the forwarding of the 'error' event via setImmediate() as\n          // V8 guarantees that the Promise chain returned from this method\n          // is resolved before any code executed via setImmediate(). This\n          // allows the caller to attach an error handler.\n\n          setImmediate(() => {\n            resultStream.emit('error', err);\n          });\n        }\n      }\n\n      backendStream.on('data', () => streamReady());\n      backendStream.on('error', err => streamFailed(err));\n      backendStream.on('end', () => streamEnded());\n      backendStream.on('close', () => streamEnded());\n      backendStream.on('finish', () => streamEnded());\n      backendStream.pipe(resultStream);\n\n      if (request) {\n        logger_1.logger('Firestore._initializeStream', requestTag, 'Sending request: %j', request);\n        backendStream.write(request, 'utf-8', err => {\n          if (err) {\n            streamFailed(err);\n          } else {\n            logger_1.logger('Firestore._initializeStream', requestTag, 'Marking stream as healthy');\n            streamReady();\n          }\n        });\n      }\n    });\n  }\n  /**\r\n   * A funnel for all non-streaming API requests, assigning a project ID where\r\n   * necessary within the request options.\r\n   *\r\n   * @private\r\n   * @param methodName Name of the Veneer API endpoint that takes a request\r\n   * and GAX options.\r\n   * @param request The Protobuf request to send.\r\n   * @param requestTag A unique client-assigned identifier for this request.\r\n   * @param retryCodes If provided, a custom list of retry codes. If not\r\n   * provided, retry is based on the behavior as defined in the ServiceConfig.\r\n   * @returns A Promise with the request result.\r\n   */\n\n\n  request(methodName, request, requestTag, retryCodes) {\n    const callOptions = this.createCallOptions(methodName, retryCodes);\n    return this._clientPool.run(requestTag, async gapicClient => {\n      try {\n        logger_1.logger('Firestore.request', requestTag, 'Sending request: %j', request);\n        const [result] = await gapicClient[methodName](request, callOptions);\n        logger_1.logger('Firestore.request', requestTag, 'Received response: %j', result);\n        return result;\n      } catch (err) {\n        logger_1.logger('Firestore.request', requestTag, 'Received error:', err);\n        return Promise.reject(err);\n      }\n    });\n  }\n  /**\r\n   * A funnel for streaming API requests, assigning a project ID where necessary\r\n   * within the request options.\r\n   *\r\n   * The stream is returned in paused state and needs to be resumed once all\r\n   * listeners are attached.\r\n   *\r\n   * @private\r\n   * @param methodName Name of the streaming Veneer API endpoint that\r\n   * takes a request and GAX options.\r\n   * @param request The Protobuf request to send.\r\n   * @param requestTag A unique client-assigned identifier for this request.\r\n   * @returns A Promise with the resulting read-only stream.\r\n   */\n\n\n  requestStream(methodName, request, requestTag) {\n    const callOptions = this.createCallOptions(methodName);\n    const bidirectional = methodName === 'listen';\n    return this._retry(methodName, requestTag, () => {\n      const result = new util_1.Deferred();\n\n      this._clientPool.run(requestTag, async gapicClient => {\n        logger_1.logger('Firestore.requestStream', requestTag, 'Sending request: %j', request);\n\n        try {\n          const stream = bidirectional ? gapicClient[methodName](callOptions) : gapicClient[methodName](request, callOptions);\n          const logStream = new stream_1.Transform({\n            objectMode: true,\n            transform: (chunk, encoding, callback) => {\n              logger_1.logger('Firestore.requestStream', requestTag, 'Received response: %j', chunk);\n              callback();\n            }\n          });\n          stream.pipe(logStream);\n          const lifetime = new util_1.Deferred();\n          const resultStream = await this._initializeStream(stream, lifetime, requestTag, bidirectional ? request : undefined);\n          resultStream.on('end', () => stream.end());\n          result.resolve(resultStream); // While we return the stream to the callee early, we don't want to\n          // release the GAPIC client until the callee has finished processing the\n          // stream.\n\n          return lifetime.promise;\n        } catch (e) {\n          result.reject(e);\n        }\n      });\n\n      return result.promise;\n    });\n  }\n\n}\n\nexports.Firestore = Firestore;\n/**\r\n * A logging function that takes a single string.\r\n *\r\n * @callback Firestore~logFunction\r\n * @param {string} Log message\r\n */\n// tslint:disable-next-line:no-default-export\n\n/**\r\n * The default export of the `@google-cloud/firestore` package is the\r\n * {@link Firestore} class.\r\n *\r\n * See {@link Firestore} and {@link ClientConfig} for client methods and\r\n * configuration options.\r\n *\r\n * @module {Firestore} @google-cloud/firestore\r\n * @alias nodejs-firestore\r\n *\r\n * @example <caption>Install the client library with <a\r\n * href=\"https://www.npmjs.com/\">npm</a>:</caption> npm install --save\r\n * @google-cloud/firestore\r\n *\r\n * @example <caption>Import the client library</caption>\r\n * var Firestore = require('@google-cloud/firestore');\r\n *\r\n * @example <caption>Create a client that uses <a\r\n * href=\"https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\">Application\r\n * Default Credentials (ADC)</a>:</caption> var firestore = new Firestore();\r\n *\r\n * @example <caption>Create a client with <a\r\n * href=\"https://cloud.google.com/docs/authentication/production#obtaining_and_providing_service_account_credentials_manually\">explicit\r\n * credentials</a>:</caption> var firestore = new Firestore({ projectId:\r\n * 'your-project-id', keyFilename: '/path/to/keyfile.json'\r\n * });\r\n *\r\n * @example <caption>include:samples/quickstart.js</caption>\r\n * region_tag:firestore_quickstart\r\n * Full quickstart example:\r\n */\n// tslint:disable-next-line:no-default-export\n\nexports.default = Firestore; // Horrible hack to ensure backwards compatibility with <= 17.0, which allows\n// users to call the default constructor via\n// `const Fs = require(`@google-cloud/firestore`); new Fs()`;\n\nconst existingExports = module.exports;\nmodule.exports = Firestore;\nmodule.exports = Object.assign(module.exports, existingExports);\n/**\r\n * {@link v1beta1} factory function.\r\n *\r\n * @private\r\n * @name Firestore.v1beta1\r\n * @see v1beta1\r\n * @type {function}\r\n */\n\nObject.defineProperty(module.exports, 'v1beta1', {\n  // The v1beta1 module is very large. To avoid pulling it in from static\n  // scope, we lazy-load and cache the module.\n  get: () => {\n    if (!v1beta1) {\n      v1beta1 = require('./v1beta1');\n    }\n\n    return v1beta1;\n  }\n});\n/**\r\n * {@link v1} factory function.\r\n *\r\n * @private\r\n * @name Firestore.v1\r\n * @see v1\r\n * @type {function}\r\n */\n\nObject.defineProperty(module.exports, 'v1', {\n  // The v1 module is very large. To avoid pulling it in from static\n  // scope, we lazy-load and cache the module.\n  get: () => {\n    if (!v1) {\n      v1 = require('./v1');\n    }\n\n    return v1;\n  }\n});","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Backend/node_modules/@google-cloud/firestore/build/src/index.js"],"names":["Object","defineProperty","exports","value","google_gax_1","require","stream_1","url_1","backoff_1","bulk_writer_1","bundle_1","convert_1","document_1","logger_1","path_1","pool_1","reference_1","reference_2","serializer_1","timestamp_1","transaction_1","util_1","validate_1","write_batch_1","firestore_client_config_json_1","serviceConfig","interfaces","collection_group_1","CollectionGroup","reference_3","CollectionReference","DocumentReference","QuerySnapshot","Query","bulk_writer_2","BulkWriter","document_2","DocumentSnapshot","QueryDocumentSnapshot","field_value_1","FieldValue","write_batch_2","WriteBatch","WriteResult","transaction_2","Transaction","timestamp_2","Timestamp","document_change_1","DocumentChange","path_2","FieldPath","geo_point_1","GeoPoint","query_partition_1","QueryPartition","logger_2","setLogFunction","google_gax_2","GrpcStatus","Status","libVersion","version","setLibVersion","v1","v1beta1","CLOUD_RESOURCE_HEADER","MAX_REQUEST_RETRIES","DEFAULT_MAX_IDLE_CHANNELS","MAX_CONCURRENT_REQUESTS_PER_CLIENT","Firestore","constructor","settings","_settings","_settingsFrozen","_serializer","_projectId","undefined","registeredListenersCount","bulkWritersCount","libraryHeader","libName","firebaseVersion","validateAndApplySettings","retryConfig","retry_params","default","_backoffSettings","initialDelayMs","initial_retry_delay_millis","maxDelayMs","max_retry_delay_millis","backoffFactor","retry_delay_multiplier","maxIdleChannels","_clientPool","ClientPool","_a","client","ssl","grpcModule","grpc","sslCreds","credentials","createInsecure","module","logger","close","validateObject","validateString","projectId","optional","Error","mergedSettings","url","process","env","FIRESTORE_EMULATOR_HOST","validateHost","host","URL","servicePath","hostname","apiEndpoint","console","warn","port","Number","validateBoolean","validateInteger","minValue","Serializer","formattedName","DEFAULT_DATABASE_ID","doc","documentPath","validateResourcePath","path","ResourcePath","EMPTY","append","isDocument","collection","collectionPath","isCollection","collectionGroup","collectionId","indexOf","batch","bulkWriter","options","snapshot_","documentOrName","readTime","encoding","convertTimestamp","convertFields","data","timestampFromJson","fieldsFromJson","ref","document","QualifiedResourcePath","fromSlashSeparatedString","DocumentSnapshotBuilder","name","fieldsProto","fields","createTime","fromProto","updateTime","build","bundle","BundleBuilder","autoId","runTransaction","updateFunction","transactionOptions","validateFunction","defaultAttempts","tag","requestTag","maxAttempts","transaction","initializeIfNeeded","then","listCollections","rootDocument","getAll","documentRefsOrReadOptions","validateMinNumberOfArguments","documents","fieldMask","parseGetAllArguments","stack","getAll_","catch","err","wrapError","docRefs","transactionId","requestedDocuments","Set","retrievedDocuments","Map","docRef","add","request","database","Array","from","fieldPaths","map","fieldPath","mask","requestStream","stream","Promise","resolve","reject","on","response","found","missing","set","size","orderedDocuments","get","finalDoc","_fieldsProto","push","resume","registerListener","unregisterListener","_incrementBulkWritersCount","_decrementBulkWritersCount","terminate","customHeaders","Authorization","run","gapicClient","getProjectId","createCallOptions","methodName","retryCodes","callOptions","otherArgs","headers","retryParams","getRetryParams","retry","RetryOptions","_retry","func","backoff","ExponentialBackoff","lastError","attempt","backoffAndWait","isPermanentRpcError","_initializeStream","backendStream","lifetime","resultStream","PassThrough","objectMode","pause","streamInitialized","streamReady","streamEnded","unpipe","streamFailed","setImmediate","emit","pipe","write","result","bidirectional","Deferred","logStream","Transform","transform","chunk","callback","end","promise","e","existingExports","assign"],"mappings":"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;;AACA,IAAIC,iBAAiB,GAAGjD,OAAO,CAAC,mBAAD,CAA/B;;AACAH,OAAO,CAACqD,cAAR,GAAyBD,iBAAiB,CAACC,cAA3C;;AACA,IAAIC,QAAQ,GAAGnD,OAAO,CAAC,UAAD,CAAtB;;AACAH,OAAO,CAACuD,cAAR,GAAyBD,QAAQ,CAACC,cAAlC;;AACA,IAAIC,YAAY,GAAGrD,OAAO,CAAC,YAAD,CAA1B;;AACAH,OAAO,CAACyD,UAAR,GAAqBD,YAAY,CAACE,MAAlC;;AACA,MAAMC,UAAU,GAAGxD,OAAO,CAAC,oBAAD,CAAP,CAA8ByD,OAAjD;;AACAjD,QAAQ,CAACkD,aAAT,CAAuBF,UAAvB;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA,IAAIG,EAAJ,C,CAAQ;;AACR;AACA;AACA;;AACA,IAAIC,OAAJ,C,CAAa;;AACb;AACA;AACA;AACA;;AACA,MAAMC,qBAAqB,GAAG,8BAA9B;AACA;AACA;AACA;;AACA,MAAMC,mBAAmB,GAAG,CAA5B;AACA;AACA;AACA;;AACA,MAAMC,yBAAyB,GAAG,CAAlC;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,kCAAkgB;AACZ;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,EAAAA,WAAW,CAACC,QAAD,EAAW;AAClB;AACR;AACA;AACA;AACQ,SAAKC,SAAL,GAAiB,EAAjB;AACA;AACR;AACA;AACA;AACA;;AACQ,SAAKC,eAAL,GAAuB,KAAvB;AACA;AACR;AACA;AACA;;AACQ,SAAKC,WAAL,GAAmB,IAAnB;AACA;AACR;AACA;AACA;AACA;AACA;AACA;;AACQ,SAAKC,UAAL,GAAkBC,SAAlB;AACA;AACR;AACA;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","sourcesContent":["\"use strict\";\r\n/*!\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst google_gax_1 = require(\"google-gax\");\r\nconst stream_1 = require(\"stream\");\r\nconst url_1 = require(\"url\");\r\nconst backoff_1 = require(\"./backoff\");\r\nconst bulk_writer_1 = require(\"./bulk-writer\");\r\nconst bundle_1 = require(\"./bundle\");\r\nconst convert_1 = require(\"./convert\");\r\nconst document_1 = require(\"./document\");\r\nconst logger_1 = require(\"./logger\");\r\nconst path_1 = require(\"./path\");\r\nconst pool_1 = require(\"./pool\");\r\nconst reference_1 = require(\"./reference\");\r\nconst reference_2 = require(\"./reference\");\r\nconst serializer_1 = require(\"./serializer\");\r\nconst timestamp_1 = require(\"./timestamp\");\r\nconst transaction_1 = require(\"./transaction\");\r\nconst util_1 = require(\"./util\");\r\nconst validate_1 = require(\"./validate\");\r\nconst write_batch_1 = require(\"./write-batch\");\r\nconst firestore_client_config_json_1 = require(\"./v1/firestore_client_config.json\");\r\nconst serviceConfig = firestore_client_config_json_1.interfaces['google.firestore.v1.Firestore'];\r\nconst collection_group_1 = require(\"./collection-group\");\r\nexports.CollectionGroup = collection_group_1.CollectionGroup;\r\nvar reference_3 = require(\"./reference\");\r\nexports.CollectionReference = reference_3.CollectionReference;\r\nexports.DocumentReference = reference_3.DocumentReference;\r\nexports.QuerySnapshot = reference_3.QuerySnapshot;\r\nexports.Query = reference_3.Query;\r\nvar bulk_writer_2 = require(\"./bulk-writer\");\r\nexports.BulkWriter = bulk_writer_2.BulkWriter;\r\nvar document_2 = require(\"./document\");\r\nexports.DocumentSnapshot = document_2.DocumentSnapshot;\r\nexports.QueryDocumentSnapshot = document_2.QueryDocumentSnapshot;\r\nvar field_value_1 = require(\"./field-value\");\r\nexports.FieldValue = field_value_1.FieldValue;\r\nvar write_batch_2 = require(\"./write-batch\");\r\nexports.WriteBatch = write_batch_2.WriteBatch;\r\nexports.WriteResult = write_batch_2.WriteResult;\r\nvar transaction_2 = require(\"./transaction\");\r\nexports.Transaction = transaction_2.Transaction;\r\nvar timestamp_2 = require(\"./timestamp\");\r\nexports.Timestamp = timestamp_2.Timestamp;\r\nvar document_change_1 = require(\"./document-change\");\r\nexports.DocumentChange = document_change_1.DocumentChange;\r\nvar path_2 = require(\"./path\");\r\nexports.FieldPath = path_2.FieldPath;\r\nvar geo_point_1 = require(\"./geo-point\");\r\nexports.GeoPoint = geo_point_1.GeoPoint;\r\nvar query_partition_1 = require(\"./query-partition\");\r\nexports.QueryPartition = query_partition_1.QueryPartition;\r\nvar logger_2 = require(\"./logger\");\r\nexports.setLogFunction = logger_2.setLogFunction;\r\nvar google_gax_2 = require(\"google-gax\");\r\nexports.GrpcStatus = google_gax_2.Status;\r\nconst libVersion = require('../../package.json').version;\r\nlogger_1.setLibVersion(libVersion);\r\n/*!\r\n * DO NOT REMOVE THE FOLLOWING NAMESPACE DEFINITIONS\r\n */\r\n/**\r\n * @namespace google.protobuf\r\n */\r\n/**\r\n * @namespace google.rpc\r\n */\r\n/**\r\n * @namespace google.longrunning\r\n */\r\n/**\r\n * @namespace google.firestore.v1\r\n */\r\n/**\r\n * @namespace google.firestore.v1beta1\r\n */\r\n/**\r\n * @namespace google.firestore.admin.v1\r\n */\r\n/*!\r\n * @see v1\r\n */\r\nlet v1; // Lazy-loaded in `_runRequest()`\r\n/*!\r\n * @see v1beta1\r\n */\r\nlet v1beta1; // Lazy-loaded upon access.\r\n/*!\r\n * HTTP header for the resource prefix to improve routing and project isolation\r\n * by the backend.\r\n */\r\nconst CLOUD_RESOURCE_HEADER = 'google-cloud-resource-prefix';\r\n/*!\r\n * The maximum number of times to retry idempotent requests.\r\n */\r\nconst MAX_REQUEST_RETRIES = 5;\r\n/*!\r\n * The default number of idle GRPC channel to keep.\r\n */\r\nconst DEFAULT_MAX_IDLE_CHANNELS = 1;\r\n/*!\r\n * The maximum number of concurrent requests supported by a single GRPC channel,\r\n * as enforced by Google's Frontend. If the SDK issues more than 100 concurrent\r\n * operations, we need to use more than one GAPIC client since these clients\r\n * multiplex all requests over a single channel.\r\n */\r\nconst MAX_CONCURRENT_REQUESTS_PER_CLIENT = 100;\r\n/**\r\n * Document data (e.g. for use with\r\n * [set()]{@link DocumentReference#set}) consisting of fields mapped\r\n * to values.\r\n *\r\n * @typedef {Object.<string, *>} DocumentData\r\n */\r\n/**\r\n * Converter used by [withConverter()]{@link Query#withConverter} to transform\r\n * user objects of type T into Firestore data.\r\n *\r\n * Using the converter allows you to specify generic type arguments when storing\r\n * and retrieving objects from Firestore.\r\n *\r\n * @example\r\n * class Post {\r\n *   constructor(readonly title: string, readonly author: string) {}\r\n *\r\n *   toString(): string {\r\n *     return this.title + ', by ' + this.author;\r\n *   }\r\n * }\r\n *\r\n * const postConverter = {\r\n *   toFirestore(post: Post): FirebaseFirestore.DocumentData {\r\n *     return {title: post.title, author: post.author};\r\n *   },\r\n *   fromFirestore(\r\n *     data: FirebaseFirestore.QueryDocumentSnapshot\r\n *   ): Post {\r\n *     const data = snapshot.data();\r\n *     return new Post(data.title, data.author);\r\n *   }\r\n * };\r\n *\r\n * const postSnap = await Firestore()\r\n *   .collection('posts')\r\n *   .withConverter(postConverter)\r\n *   .doc().get();\r\n * const post = postSnap.data();\r\n * if (post !== undefined) {\r\n *   post.title; // string\r\n *   post.toString(); // Should be defined\r\n *   post.someNonExistentProperty; // TS error\r\n * }\r\n *\r\n * @property {Function} toFirestore Called by the Firestore SDK to convert a\r\n * custom model object of type T into a plain Javascript object (suitable for\r\n * writing directly to the Firestore database).\r\n * @property {Function} fromFirestore Called by the Firestore SDK to convert\r\n * Firestore data into an object of type T.\r\n * @typedef {Object} FirestoreDataConverter\r\n */\r\n/**\r\n * Update data (for use with [update]{@link DocumentReference#update})\r\n * that contains paths (e.g. 'foo' or 'foo.baz') mapped to values. Fields that\r\n * contain dots reference nested fields within the document.\r\n *\r\n * @typedef {Object.<string, *>} UpdateData\r\n */\r\n/**\r\n * An options object that configures conditional behavior of\r\n * [update()]{@link DocumentReference#update} and\r\n * [delete()]{@link DocumentReference#delete} calls in\r\n * [DocumentReference]{@link DocumentReference},\r\n * [WriteBatch]{@link WriteBatch}, and\r\n * [Transaction]{@link Transaction}. Using Preconditions, these calls\r\n * can be restricted to only apply to documents that match the specified\r\n * conditions.\r\n *\r\n * @example\r\n * const documentRef = firestore.doc('coll/doc');\r\n *\r\n * documentRef.get().then(snapshot => {\r\n *   const updateTime = snapshot.updateTime;\r\n *\r\n *   console.log(`Deleting document at update time: ${updateTime.toDate()}`);\r\n *   return documentRef.delete({ lastUpdateTime: updateTime });\r\n * });\r\n *\r\n * @property {Timestamp} lastUpdateTime The update time to enforce. If set,\r\n *  enforces that the document was last updated at lastUpdateTime. Fails the\r\n *  operation if the document was last updated at a different time.\r\n * @typedef {Object} Precondition\r\n */\r\n/**\r\n * An options object that configures the behavior of\r\n * [set()]{@link DocumentReference#set} calls in\r\n * [DocumentReference]{@link DocumentReference},\r\n * [WriteBatch]{@link WriteBatch}, and\r\n * [Transaction]{@link Transaction}. These calls can be\r\n * configured to perform granular merges instead of overwriting the target\r\n * documents in their entirety by providing a SetOptions object with\r\n * { merge : true }.\r\n *\r\n * @property {boolean} merge Changes the behavior of a set() call to only\r\n * replace the values specified in its data argument. Fields omitted from the\r\n * set() call remain untouched.\r\n * @property {Array<(string|FieldPath)>} mergeFields Changes the behavior of\r\n * set() calls to only replace the specified field paths. Any field path that is\r\n * not specified is ignored and remains untouched.\r\n * It is an error to pass a SetOptions object to a set() call that is missing a\r\n * value for any of the fields specified here.\r\n * @typedef {Object} SetOptions\r\n */\r\n/**\r\n * An options object that can be used to configure the behavior of\r\n * [getAll()]{@link Firestore#getAll} calls. By providing a `fieldMask`, these\r\n * calls can be configured to only return a subset of fields.\r\n *\r\n * @property {Array<(string|FieldPath)>} fieldMask Specifies the set of fields\r\n * to return and reduces the amount of data transmitted by the backend.\r\n * Adding a field mask does not filter results. Documents do not need to\r\n * contain values for all the fields in the mask to be part of the result set.\r\n * @typedef {Object} ReadOptions\r\n */\r\n/**\r\n * An options object to configure throttling on BulkWriter.\r\n *\r\n * Whether to disable or configure throttling. By default, throttling is\r\n * enabled. `throttling` can be set to either a boolean or a config object.\r\n * Setting it to `true` will use default values. You can override the defaults\r\n * by setting it to `false` to disable throttling, or by setting the config\r\n * values to enable throttling with the provided values.\r\n *\r\n * @property {boolean|Object} throttling Whether to disable or enable\r\n * throttling. Throttling is enabled by default, if the field is set to `true`\r\n * or if any custom throttling options are provided. `{ initialOpsPerSecond:\r\n * number }` sets the initial maximum number of operations per second allowed by\r\n * the throttler. If `initialOpsPerSecond` is not set, the default is 500\r\n * operations per second. `{ maxOpsPerSecond: number }` sets the maximum number\r\n * of operations per second allowed by the throttler. If `maxOpsPerSecond` is\r\n * not set, no maximum is enforced.\r\n * @typedef {Object} BulkWriterOptions\r\n */\r\n/**\r\n * Status codes returned by GRPC operations.\r\n *\r\n * @see https://github.com/grpc/grpc/blob/master/doc/statuscodes.md\r\n *\r\n * @enum {number}\r\n * @typedef {Object} GrpcStatus\r\n */\r\n/**\r\n * The Firestore client represents a Firestore Database and is the entry point\r\n * for all Firestore operations.\r\n *\r\n * @see [Firestore Documentation]{@link https://firebase.google.com/docs/firestore/}\r\n *\r\n * @class\r\n *\r\n * @example <caption>Install the client library with <a\r\n * href=\"https://www.npmjs.com/\">npm</a>:</caption> npm install --save\r\n * @google-cloud/firestore\r\n *\r\n * @example <caption>Import the client library</caption>\r\n * var Firestore = require('@google-cloud/firestore');\r\n *\r\n * @example <caption>Create a client that uses <a\r\n * href=\"https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\">Application\r\n * Default Credentials (ADC)</a>:</caption> var firestore = new Firestore();\r\n *\r\n * @example <caption>Create a client with <a\r\n * href=\"https://cloud.google.com/docs/authentication/production#obtaining_and_providing_service_account_credentials_manually\">explicit\r\n * credentials</a>:</caption> var firestore = new Firestore({ projectId:\r\n * 'your-project-id', keyFilename: '/path/to/keyfile.json'\r\n * });\r\n *\r\n * @example <caption>include:samples/quickstart.js</caption>\r\n * region_tag:firestore_quickstart\r\n * Full quickstart example:\r\n */\r\nclass Firestore {\r\n    /**\r\n     * @param {Object=} settings [Configuration object](#/docs).\r\n     * @param {string=} settings.projectId The project ID from the Google\r\n     * Developer's Console, e.g. 'grape-spaceship-123'. We will also check the\r\n     * environment variable GCLOUD_PROJECT for your project ID.  Can be omitted in\r\n     * environments that support\r\n     * {@link https://cloud.google.com/docs/authentication Application Default\r\n     * Credentials}\r\n     * @param {string=} settings.keyFilename Local file containing the Service\r\n     * Account credentials as downloaded from the Google Developers Console. Can\r\n     * be omitted in environments that support\r\n     * {@link https://cloud.google.com/docs/authentication Application Default\r\n     * Credentials}. To configure Firestore with custom credentials, use\r\n     * `settings.credentials` and provide the `client_email` and `private_key` of\r\n     * your service account.\r\n     * @param {{client_email:string=, private_key:string=}=} settings.credentials\r\n     * The `client_email` and `private_key` properties of the service account\r\n     * to use with your Firestore project. Can be omitted in environments that\r\n     * support {@link https://cloud.google.com/docs/authentication Application\r\n     * Default Credentials}. If your credentials are stored in a JSON file, you\r\n     * can specify a `keyFilename` instead.\r\n     * @param {string=} settings.host The host to connect to.\r\n     * @param {boolean=} settings.ssl Whether to use SSL when connecting.\r\n     * @param {number=} settings.maxIdleChannels The maximum number of idle GRPC\r\n     * channels to keep. A smaller number of idle channels reduces memory usage\r\n     * but increases request latency for clients with fluctuating request rates.\r\n     * If set to 0, shuts down all GRPC channels when the client becomes idle.\r\n     * Defaults to 1.\r\n     * @param {boolean=} settings.ignoreUndefinedProperties Whether to skip nested\r\n     * properties that are set to `undefined` during object serialization. If set\r\n     * to `true`, these properties are skipped and not written to Firestore. If\r\n     * set `false` or omitted, the SDK throws an exception when it encounters\r\n     * properties of type `undefined`.\r\n     */\r\n    constructor(settings) {\r\n        /**\r\n         * The configuration options for the GAPIC client.\r\n         * @private\r\n         */\r\n        this._settings = {};\r\n        /**\r\n         * Whether the initialization settings can still be changed by invoking\r\n         * `settings()`.\r\n         * @private\r\n         */\r\n        this._settingsFrozen = false;\r\n        /**\r\n         * The serializer to use for the Protobuf transformation.\r\n         * @private\r\n         */\r\n        this._serializer = null;\r\n        /**\r\n         * The project ID for this client.\r\n         *\r\n         * The project ID is auto-detected during the first request unless a project\r\n         * ID is passed to the constructor (or provided via `.settings()`).\r\n         * @private\r\n         */\r\n        this._projectId = undefined;\r\n        /**\r\n         * Count of listeners that have been registered on the client.\r\n         *\r\n         * The client can only be terminated when there are no pending writes or\r\n         * registered listeners.\r\n         * @private\r\n         */\r\n        this.registeredListenersCount = 0;\r\n        /**\r\n         * Number of pending operations on the client.\r\n         *\r\n         * The client can only be terminated when there are no pending writes or\r\n         * registered listeners.\r\n         * @private\r\n         */\r\n        this.bulkWritersCount = 0;\r\n        const libraryHeader = {\r\n            libName: 'gccl',\r\n            libVersion,\r\n        };\r\n        if (settings && settings.firebaseVersion) {\r\n            libraryHeader.libVersion += ' fire/' + settings.firebaseVersion;\r\n        }\r\n        this.validateAndApplySettings({ ...settings, ...libraryHeader });\r\n        const retryConfig = serviceConfig.retry_params.default;\r\n        this._backoffSettings = {\r\n            initialDelayMs: retryConfig.initial_retry_delay_millis,\r\n            maxDelayMs: retryConfig.max_retry_delay_millis,\r\n            backoffFactor: retryConfig.retry_delay_multiplier,\r\n        };\r\n        const maxIdleChannels = this._settings.maxIdleChannels === undefined\r\n            ? DEFAULT_MAX_IDLE_CHANNELS\r\n            : this._settings.maxIdleChannels;\r\n        this._clientPool = new pool_1.ClientPool(MAX_CONCURRENT_REQUESTS_PER_CLIENT, maxIdleChannels, \r\n        /* clientFactory= */ () => {\r\n            var _a;\r\n            let client;\r\n            if (this._settings.ssl === false) {\r\n                const grpcModule = (_a = this._settings.grpc) !== null && _a !== void 0 ? _a : google_gax_1.grpc;\r\n                const sslCreds = grpcModule.credentials.createInsecure();\r\n                client = new module.exports.v1({\r\n                    sslCreds,\r\n                    ...this._settings,\r\n                });\r\n            }\r\n            else {\r\n                client = new module.exports.v1(this._settings);\r\n            }\r\n            logger_1.logger('Firestore', null, 'Initialized Firestore GAPIC Client');\r\n            return client;\r\n        }, \r\n        /* clientDestructor= */ client => client.close());\r\n        logger_1.logger('Firestore', null, 'Initialized Firestore');\r\n    }\r\n    /**\r\n     * Specifies custom settings to be used to configure the `Firestore`\r\n     * instance. Can only be invoked once and before any other Firestore method.\r\n     *\r\n     * If settings are provided via both `settings()` and the `Firestore`\r\n     * constructor, both settings objects are merged and any settings provided via\r\n     * `settings()` take precedence.\r\n     *\r\n     * @param {object} settings The settings to use for all Firestore operations.\r\n     */\r\n    settings(settings) {\r\n        validate_1.validateObject('settings', settings);\r\n        validate_1.validateString('settings.projectId', settings.projectId, { optional: true });\r\n        if (this._settingsFrozen) {\r\n            throw new Error('Firestore has already been initialized. You can only call ' +\r\n                'settings() once, and only before calling any other methods on a ' +\r\n                'Firestore object.');\r\n        }\r\n        const mergedSettings = { ...this._settings, ...settings };\r\n        this.validateAndApplySettings(mergedSettings);\r\n        this._settingsFrozen = true;\r\n    }\r\n    validateAndApplySettings(settings) {\r\n        var _a;\r\n        if (settings.projectId !== undefined) {\r\n            validate_1.validateString('settings.projectId', settings.projectId);\r\n            this._projectId = settings.projectId;\r\n        }\r\n        let url = null;\r\n        // If the environment variable is set, it should always take precedence\r\n        // over any user passed in settings.\r\n        if (process.env.FIRESTORE_EMULATOR_HOST) {\r\n            validate_1.validateHost('FIRESTORE_EMULATOR_HOST', process.env.FIRESTORE_EMULATOR_HOST);\r\n            settings = {\r\n                ...settings,\r\n                host: process.env.FIRESTORE_EMULATOR_HOST,\r\n                ssl: false,\r\n            };\r\n            url = new url_1.URL(`http://${settings.host}`);\r\n        }\r\n        else if (settings.host !== undefined) {\r\n            validate_1.validateHost('settings.host', settings.host);\r\n            url = new url_1.URL(`http://${settings.host}`);\r\n        }\r\n        // Only store the host if a valid value was provided in `host`.\r\n        if (url !== null) {\r\n            if ((settings.servicePath !== undefined &&\r\n                settings.servicePath !== url.hostname) ||\r\n                (settings.apiEndpoint !== undefined &&\r\n                    settings.apiEndpoint !== url.hostname)) {\r\n                // eslint-disable-next-line no-console\r\n                console.warn(`The provided host (${url.hostname}) in \"settings\" does not ` +\r\n                    `match the existing host (${(_a = settings.servicePath) !== null && _a !== void 0 ? _a : settings.apiEndpoint}). Using the provided host.`);\r\n            }\r\n            settings.servicePath = url.hostname;\r\n            if (url.port !== '' && settings.port === undefined) {\r\n                settings.port = Number(url.port);\r\n            }\r\n            // We need to remove the `host` and `apiEndpoint` setting, in case a user\r\n            // calls `settings()`, which will compare the the provided `host` to the\r\n            // existing hostname stored on `servicePath`.\r\n            delete settings.host;\r\n            delete settings.apiEndpoint;\r\n        }\r\n        if (settings.ssl !== undefined) {\r\n            validate_1.validateBoolean('settings.ssl', settings.ssl);\r\n        }\r\n        if (settings.maxIdleChannels !== undefined) {\r\n            validate_1.validateInteger('settings.maxIdleChannels', settings.maxIdleChannels, {\r\n                minValue: 0,\r\n            });\r\n        }\r\n        this._settings = settings;\r\n        this._serializer = new serializer_1.Serializer(this);\r\n    }\r\n    /**\r\n     * Returns the Project ID for this Firestore instance. Validates that\r\n     * `initializeIfNeeded()` was called before.\r\n     *\r\n     * @private\r\n     */\r\n    get projectId() {\r\n        if (this._projectId === undefined) {\r\n            throw new Error('INTERNAL ERROR: Client is not yet ready to issue requests.');\r\n        }\r\n        return this._projectId;\r\n    }\r\n    /**\r\n     * Returns the root path of the database. Validates that\r\n     * `initializeIfNeeded()` was called before.\r\n     *\r\n     * @private\r\n     */\r\n    get formattedName() {\r\n        return `projects/${this.projectId}/databases/${path_1.DEFAULT_DATABASE_ID}`;\r\n    }\r\n    /**\r\n     * Gets a [DocumentReference]{@link DocumentReference} instance that\r\n     * refers to the document at the specified path.\r\n     *\r\n     * @param {string} documentPath A slash-separated path to a document.\r\n     * @returns {DocumentReference} The\r\n     * [DocumentReference]{@link DocumentReference} instance.\r\n     *\r\n     * @example\r\n     * let documentRef = firestore.doc('collection/document');\r\n     * console.log(`Path of document is ${documentRef.path}`);\r\n     */\r\n    doc(documentPath) {\r\n        path_1.validateResourcePath('documentPath', documentPath);\r\n        const path = path_1.ResourcePath.EMPTY.append(documentPath);\r\n        if (!path.isDocument) {\r\n            throw new Error(`Value for argument \"documentPath\" must point to a document, but was \"${documentPath}\". Your path does not contain an even number of components.`);\r\n        }\r\n        return new reference_2.DocumentReference(this, path);\r\n    }\r\n    /**\r\n     * Gets a [CollectionReference]{@link CollectionReference} instance\r\n     * that refers to the collection at the specified path.\r\n     *\r\n     * @param {string} collectionPath A slash-separated path to a collection.\r\n     * @returns {CollectionReference} The\r\n     * [CollectionReference]{@link CollectionReference} instance.\r\n     *\r\n     * @example\r\n     * let collectionRef = firestore.collection('collection');\r\n     *\r\n     * // Add a document with an auto-generated ID.\r\n     * collectionRef.add({foo: 'bar'}).then((documentRef) => {\r\n     *   console.log(`Added document at ${documentRef.path})`);\r\n     * });\r\n     */\r\n    collection(collectionPath) {\r\n        path_1.validateResourcePath('collectionPath', collectionPath);\r\n        const path = path_1.ResourcePath.EMPTY.append(collectionPath);\r\n        if (!path.isCollection) {\r\n            throw new Error(`Value for argument \"collectionPath\" must point to a collection, but was \"${collectionPath}\". Your path does not contain an odd number of components.`);\r\n        }\r\n        return new reference_1.CollectionReference(this, path);\r\n    }\r\n    /**\r\n     * Creates and returns a new Query that includes all documents in the\r\n     * database that are contained in a collection or subcollection with the\r\n     * given collectionId.\r\n     *\r\n     * @param {string} collectionId Identifies the collections to query over.\r\n     * Every collection or subcollection with this ID as the last segment of its\r\n     * path will be included. Cannot contain a slash.\r\n     * @returns {CollectionGroup} The created CollectionGroup.\r\n     *\r\n     * @example\r\n     * let docA = firestore.doc('mygroup/docA').set({foo: 'bar'});\r\n     * let docB = firestore.doc('abc/def/mygroup/docB').set({foo: 'bar'});\r\n     *\r\n     * Promise.all([docA, docB]).then(() => {\r\n     *    let query = firestore.collectionGroup('mygroup');\r\n     *    query = query.where('foo', '==', 'bar');\r\n     *    return query.get().then(snapshot => {\r\n     *       console.log(`Found ${snapshot.size} documents.`);\r\n     *    });\r\n     * });\r\n     */\r\n    collectionGroup(collectionId) {\r\n        if (collectionId.indexOf('/') !== -1) {\r\n            throw new Error(`Invalid collectionId '${collectionId}'. Collection IDs must not contain '/'.`);\r\n        }\r\n        return new collection_group_1.CollectionGroup(this, collectionId, /* converter= */ undefined);\r\n    }\r\n    /**\r\n     * Creates a [WriteBatch]{@link WriteBatch}, used for performing\r\n     * multiple writes as a single atomic operation.\r\n     *\r\n     * @returns {WriteBatch} A WriteBatch that operates on this Firestore\r\n     * client.\r\n     *\r\n     * @example\r\n     * let writeBatch = firestore.batch();\r\n     *\r\n     * // Add two documents in an atomic batch.\r\n     * let data = { foo: 'bar' };\r\n     * writeBatch.set(firestore.doc('col/doc1'), data);\r\n     * writeBatch.set(firestore.doc('col/doc2'), data);\r\n     *\r\n     * writeBatch.commit().then(res => {\r\n     *   console.log('Successfully executed batch.');\r\n     * });\r\n     */\r\n    batch() {\r\n        return new write_batch_1.WriteBatch(this);\r\n    }\r\n    /**\r\n     * Creates a [BulkWriter]{@link BulkWriter}, used for performing\r\n     * multiple writes in parallel. Gradually ramps up writes as specified\r\n     * by the 500/50/5 rule.\r\n     *\r\n     * @see [500/50/5 Documentation]{@link https://cloud.google.com/datastore/docs/best-practices#ramping_up_traffic}\r\n     *\r\n     * @param {object=} options BulkWriter options.\r\n     * @param {boolean=} options.disableThrottling Whether to disable throttling\r\n     * as specified by the 500/50/5 rule.\r\n     * @returns {WriteBatch} A BulkWriter that operates on this Firestore\r\n     * client.\r\n     *\r\n     * @example\r\n     * let bulkWriter = firestore.bulkWriter();\r\n     *\r\n     * bulkWriter.create(firestore.doc('col/doc1'), {foo: 'bar'})\r\n     *   .then(res => {\r\n     *     console.log(`Added document at ${res.writeTime}`);\r\n     *   });\r\n     * bulkWriter.update(firestore.doc('col/doc2'), {foo: 'bar'})\r\n     *   .then(res => {\r\n     *     console.log(`Updated document at ${res.writeTime}`);\r\n     *   });\r\n     * bulkWriter.delete(firestore.doc('col/doc3'))\r\n     *   .then(res => {\r\n     *     console.log(`Deleted document at ${res.writeTime}`);\r\n     *   });\r\n     * await bulkWriter.close().then(() => {\r\n     *   console.log('Executed all writes');\r\n     * });\r\n     */\r\n    bulkWriter(options) {\r\n        return new bulk_writer_1.BulkWriter(this, options);\r\n    }\r\n    snapshot_(documentOrName, readTime, encoding) {\r\n        // TODO: Assert that Firestore Project ID is valid.\r\n        let convertTimestamp;\r\n        let convertFields;\r\n        if (encoding === undefined || encoding === 'protobufJS') {\r\n            convertTimestamp = data => data;\r\n            convertFields = data => data;\r\n        }\r\n        else if (encoding === 'json') {\r\n            // Google Cloud Functions calls us with Proto3 JSON format data, which we\r\n            // must convert to Protobuf JS.\r\n            convertTimestamp = convert_1.timestampFromJson;\r\n            convertFields = convert_1.fieldsFromJson;\r\n        }\r\n        else {\r\n            throw new Error('Unsupported encoding format. Expected \"json\" or \"protobufJS\", ' +\r\n                `but was \"${encoding}\".`);\r\n        }\r\n        let ref;\r\n        let document;\r\n        if (typeof documentOrName === 'string') {\r\n            ref = new reference_2.DocumentReference(this, path_1.QualifiedResourcePath.fromSlashSeparatedString(documentOrName));\r\n            document = new document_1.DocumentSnapshotBuilder(ref);\r\n        }\r\n        else {\r\n            ref = new reference_2.DocumentReference(this, path_1.QualifiedResourcePath.fromSlashSeparatedString(documentOrName.name));\r\n            document = new document_1.DocumentSnapshotBuilder(ref);\r\n            document.fieldsProto = documentOrName.fields\r\n                ? convertFields(documentOrName.fields)\r\n                : {};\r\n            document.createTime = timestamp_1.Timestamp.fromProto(convertTimestamp(documentOrName.createTime, 'documentOrName.createTime'));\r\n            document.updateTime = timestamp_1.Timestamp.fromProto(convertTimestamp(documentOrName.updateTime, 'documentOrName.updateTime'));\r\n        }\r\n        if (readTime) {\r\n            document.readTime = timestamp_1.Timestamp.fromProto(convertTimestamp(readTime, 'readTime'));\r\n        }\r\n        return document.build();\r\n    }\r\n    /**\r\n     * Creates a new `BundleBuilder` instance to package selected Firestore data into\r\n     * a bundle.\r\n     *\r\n     * @param bundleId. The id of the bundle. When loaded on clients, client SDKs use this id\r\n     * and the timestamp associated with the built bundle to tell if it has been loaded already.\r\n     * If not specified, a random identifier will be used.\r\n     */\r\n    bundle(name) {\r\n        return new bundle_1.BundleBuilder(name || util_1.autoId());\r\n    }\r\n    /**\r\n     * Executes the given updateFunction and commits the changes applied within\r\n     * the transaction.\r\n     *\r\n     * You can use the transaction object passed to 'updateFunction' to read and\r\n     * modify Firestore documents under lock. Transactions are committed once\r\n     * 'updateFunction' resolves and attempted up to five times on failure.\r\n     *\r\n     * @param {function(Transaction)} updateFunction The function to execute\r\n     * within the transaction context.\r\n     * @param {object=} transactionOptions Transaction options.\r\n     * @param {number=} transactionOptions.maxAttempts - The maximum number of\r\n     * attempts for this transaction.\r\n     * @returns {Promise} If the transaction completed successfully or was\r\n     * explicitly aborted (by the updateFunction returning a failed Promise), the\r\n     * Promise returned by the updateFunction will be returned here. Else if the\r\n     * transaction failed, a rejected Promise with the corresponding failure\r\n     * error will be returned.\r\n     *\r\n     * @example\r\n     * let counterTransaction = firestore.runTransaction(transaction => {\r\n     *   let documentRef = firestore.doc('col/doc');\r\n     *   return transaction.get(documentRef).then(doc => {\r\n     *     if (doc.exists) {\r\n     *       let count =  doc.get('count') || 0;\r\n     *       if (count > 10) {\r\n     *         return Promise.reject('Reached maximum count');\r\n     *       }\r\n     *       transaction.update(documentRef, { count: ++count });\r\n     *       return Promise.resolve(count);\r\n     *     }\r\n     *\r\n     *     transaction.create(documentRef, { count: 1 });\r\n     *     return Promise.resolve(1);\r\n     *   });\r\n     * });\r\n     *\r\n     * counterTransaction.then(res => {\r\n     *   console.log(`Count updated to ${res}`);\r\n     * });\r\n     */\r\n    runTransaction(updateFunction, transactionOptions) {\r\n        validate_1.validateFunction('updateFunction', updateFunction);\r\n        const defaultAttempts = 5;\r\n        const tag = util_1.requestTag();\r\n        let maxAttempts;\r\n        if (transactionOptions) {\r\n            validate_1.validateObject('transactionOptions', transactionOptions);\r\n            validate_1.validateInteger('transactionOptions.maxAttempts', transactionOptions.maxAttempts, { optional: true, minValue: 1 });\r\n            maxAttempts = transactionOptions.maxAttempts || defaultAttempts;\r\n        }\r\n        else {\r\n            maxAttempts = defaultAttempts;\r\n        }\r\n        const transaction = new transaction_1.Transaction(this, tag);\r\n        return this.initializeIfNeeded(tag).then(() => transaction.runTransaction(updateFunction, maxAttempts));\r\n    }\r\n    /**\r\n     * Fetches the root collections that are associated with this Firestore\r\n     * database.\r\n     *\r\n     * @returns {Promise.<Array.<CollectionReference>>} A Promise that resolves\r\n     * with an array of CollectionReferences.\r\n     *\r\n     * @example\r\n     * firestore.listCollections().then(collections => {\r\n     *   for (let collection of collections) {\r\n     *     console.log(`Found collection with id: ${collection.id}`);\r\n     *   }\r\n     * });\r\n     */\r\n    listCollections() {\r\n        const rootDocument = new reference_2.DocumentReference(this, path_1.ResourcePath.EMPTY);\r\n        return rootDocument.listCollections();\r\n    }\r\n    /**\r\n     * Retrieves multiple documents from Firestore.\r\n     *\r\n     * The first argument is required and must be of type `DocumentReference`\r\n     * followed by any additional `DocumentReference` documents. If used, the\r\n     * optional `ReadOptions` must be the last argument.\r\n     *\r\n     * @param {...DocumentReference|ReadOptions} documentRefsOrReadOptions The\r\n     * `DocumentReferences` to receive, followed by an optional field mask.\r\n     * @returns {Promise<Array.<DocumentSnapshot>>} A Promise that\r\n     * contains an array with the resulting document snapshots.\r\n     *\r\n     * @example\r\n     * let docRef1 = firestore.doc('col/doc1');\r\n     * let docRef2 = firestore.doc('col/doc2');\r\n     *\r\n     * firestore.getAll(docRef1, docRef2, { fieldMask: ['user'] }).then(docs => {\r\n     *   console.log(`First document: ${JSON.stringify(docs[0])}`);\r\n     *   console.log(`Second document: ${JSON.stringify(docs[1])}`);\r\n     * });\r\n     */\r\n    getAll(...documentRefsOrReadOptions) {\r\n        validate_1.validateMinNumberOfArguments('Firestore.getAll', documentRefsOrReadOptions, 1);\r\n        const { documents, fieldMask } = transaction_1.parseGetAllArguments(documentRefsOrReadOptions);\r\n        const tag = util_1.requestTag();\r\n        // Capture the error stack to preserve stack tracing across async calls.\r\n        const stack = Error().stack;\r\n        return this.initializeIfNeeded(tag)\r\n            .then(() => this.getAll_(documents, fieldMask, tag))\r\n            .catch(err => {\r\n            throw util_1.wrapError(err, stack);\r\n        });\r\n    }\r\n    /**\r\n     * Internal method to retrieve multiple documents from Firestore, optionally\r\n     * as part of a transaction.\r\n     *\r\n     * @private\r\n     * @param docRefs The documents to receive.\r\n     * @param fieldMask An optional field mask to apply to this read.\r\n     * @param requestTag A unique client-assigned identifier for this request.\r\n     * @param transactionId The transaction ID to use for this read.\r\n     * @returns A Promise that contains an array with the resulting documents.\r\n     */\r\n    getAll_(docRefs, fieldMask, requestTag, transactionId) {\r\n        const requestedDocuments = new Set();\r\n        const retrievedDocuments = new Map();\r\n        for (const docRef of docRefs) {\r\n            requestedDocuments.add(docRef.formattedName);\r\n        }\r\n        const request = {\r\n            database: this.formattedName,\r\n            transaction: transactionId,\r\n            documents: Array.from(requestedDocuments),\r\n        };\r\n        if (fieldMask) {\r\n            const fieldPaths = fieldMask.map(fieldPath => fieldPath.formattedName);\r\n            request.mask = { fieldPaths };\r\n        }\r\n        return this.requestStream('batchGetDocuments', request, requestTag).then(stream => {\r\n            return new Promise((resolve, reject) => {\r\n                stream\r\n                    .on('error', err => {\r\n                    logger_1.logger('Firestore.getAll_', requestTag, 'GetAll failed with error:', err);\r\n                    reject(err);\r\n                })\r\n                    .on('data', (response) => {\r\n                    try {\r\n                        let document;\r\n                        if (response.found) {\r\n                            logger_1.logger('Firestore.getAll_', requestTag, 'Received document: %s', response.found.name);\r\n                            document = this.snapshot_(response.found, response.readTime);\r\n                        }\r\n                        else {\r\n                            logger_1.logger('Firestore.getAll_', requestTag, 'Document missing: %s', response.missing);\r\n                            document = this.snapshot_(response.missing, response.readTime);\r\n                        }\r\n                        const path = document.ref.path;\r\n                        retrievedDocuments.set(path, document);\r\n                    }\r\n                    catch (err) {\r\n                        logger_1.logger('Firestore.getAll_', requestTag, 'GetAll failed with exception:', err);\r\n                        reject(err);\r\n                    }\r\n                })\r\n                    .on('end', () => {\r\n                    logger_1.logger('Firestore.getAll_', requestTag, 'Received %d results', retrievedDocuments.size);\r\n                    // BatchGetDocuments doesn't preserve document order. We use\r\n                    // the request order to sort the resulting documents.\r\n                    const orderedDocuments = [];\r\n                    for (const docRef of docRefs) {\r\n                        const document = retrievedDocuments.get(docRef.path);\r\n                        if (document !== undefined) {\r\n                            // Recreate the DocumentSnapshot with the DocumentReference\r\n                            // containing the original converter.\r\n                            const finalDoc = new document_1.DocumentSnapshotBuilder(docRef);\r\n                            finalDoc.fieldsProto = document._fieldsProto;\r\n                            finalDoc.readTime = document.readTime;\r\n                            finalDoc.createTime = document.createTime;\r\n                            finalDoc.updateTime = document.updateTime;\r\n                            orderedDocuments.push(finalDoc.build());\r\n                        }\r\n                        else {\r\n                            reject(new Error(`Did not receive document for \"${docRef.path}\".`));\r\n                        }\r\n                    }\r\n                    resolve(orderedDocuments);\r\n                });\r\n                stream.resume();\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Registers a listener on this client, incrementing the listener count. This\r\n     * is used to verify that all listeners are unsubscribed when terminate() is\r\n     * called.\r\n     *\r\n     * @private\r\n     */\r\n    registerListener() {\r\n        this.registeredListenersCount += 1;\r\n    }\r\n    /**\r\n     * Unregisters a listener on this client, decrementing the listener count.\r\n     * This is used to verify that all listeners are unsubscribed when terminate()\r\n     * is called.\r\n     *\r\n     * @private\r\n     */\r\n    unregisterListener() {\r\n        this.registeredListenersCount -= 1;\r\n    }\r\n    /**\r\n     * Increments the number of open BulkWriter instances. This is used to verify\r\n     * that all pending operations are complete when terminate() is called.\r\n     *\r\n     * @private\r\n     */\r\n    _incrementBulkWritersCount() {\r\n        this.bulkWritersCount += 1;\r\n    }\r\n    /**\r\n     * Decrements the number of open BulkWriter instances. This is used to verify\r\n     * that all pending operations are complete when terminate() is called.\r\n     *\r\n     * @private\r\n     */\r\n    _decrementBulkWritersCount() {\r\n        this.bulkWritersCount -= 1;\r\n    }\r\n    /**\r\n     * Terminates the Firestore client and closes all open streams.\r\n     *\r\n     * @return A Promise that resolves when the client is terminated.\r\n     */\r\n    terminate() {\r\n        if (this.registeredListenersCount > 0 || this.bulkWritersCount > 0) {\r\n            return Promise.reject('All onSnapshot() listeners must be unsubscribed, and all BulkWriter ' +\r\n                'instances must be closed before terminating the client. ' +\r\n                `There are ${this.registeredListenersCount} active listeners and ` +\r\n                `${this.bulkWritersCount} open BulkWriter instances.`);\r\n        }\r\n        return this._clientPool.terminate();\r\n    }\r\n    /**\r\n     * Initializes the client if it is not already initialized. All methods in the\r\n     * SDK can be used after this method completes.\r\n     *\r\n     * @private\r\n     * @param requestTag A unique client-assigned identifier that caused this\r\n     * initialization.\r\n     * @return A Promise that resolves when the client is initialized.\r\n     */\r\n    async initializeIfNeeded(requestTag) {\r\n        this._settingsFrozen = true;\r\n        if (this._settings.ssl === false) {\r\n            // If SSL is false, we assume that we are talking to the emulator. We\r\n            // provide an Authorization header by default so that the connection is\r\n            // recognized as admin in Firestore Emulator. (If for some reason we're\r\n            // not connecting to the emulator, then this will result in denials with\r\n            // invalid token, rather than behave like clients not logged in. The user\r\n            // can then provide their own Authorization header, which will take\r\n            // precedence).\r\n            this._settings.customHeaders = {\r\n                Authorization: 'Bearer owner',\r\n                ...this._settings.customHeaders,\r\n            };\r\n        }\r\n        if (this._projectId === undefined) {\r\n            try {\r\n                this._projectId = await this._clientPool.run(requestTag, gapicClient => gapicClient.getProjectId());\r\n                logger_1.logger('Firestore.initializeIfNeeded', null, 'Detected project ID: %s', this._projectId);\r\n            }\r\n            catch (err) {\r\n                logger_1.logger('Firestore.initializeIfNeeded', null, 'Failed to detect project ID: %s', err);\r\n                return Promise.reject(err);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Returns GAX call options that set the cloud resource header.\r\n     * @private\r\n     */\r\n    createCallOptions(methodName, retryCodes) {\r\n        var _a;\r\n        const callOptions = {\r\n            otherArgs: {\r\n                headers: {\r\n                    [CLOUD_RESOURCE_HEADER]: this.formattedName,\r\n                    ...this._settings.customHeaders,\r\n                    ...(_a = this._settings[methodName]) === null || _a === void 0 ? void 0 : _a.customHeaders,\r\n                },\r\n            },\r\n        };\r\n        if (retryCodes) {\r\n            const retryParams = util_1.getRetryParams(methodName);\r\n            callOptions.retry = new google_gax_1.RetryOptions(retryCodes, retryParams);\r\n        }\r\n        return callOptions;\r\n    }\r\n    /**\r\n     * A function returning a Promise that can be retried.\r\n     *\r\n     * @private\r\n     * @callback retryFunction\r\n     * @returns {Promise} A Promise indicating the function's success.\r\n     */\r\n    /**\r\n     * Helper method that retries failed Promises.\r\n     *\r\n     * If 'delayMs' is specified, waits 'delayMs' between invocations. Otherwise,\r\n     * schedules the first attempt immediately, and then waits 100 milliseconds\r\n     * for further attempts.\r\n     *\r\n     * @private\r\n     * @param methodName Name of the Veneer API endpoint that takes a request\r\n     * and GAX options.\r\n     * @param requestTag A unique client-assigned identifier for this request.\r\n     * @param func Method returning a Promise than can be retried.\r\n     * @returns A Promise with the function's result if successful within\r\n     * `attemptsRemaining`. Otherwise, returns the last rejected Promise.\r\n     */\r\n    async _retry(methodName, requestTag, func) {\r\n        const backoff = new backoff_1.ExponentialBackoff();\r\n        let lastError = undefined;\r\n        for (let attempt = 0; attempt < MAX_REQUEST_RETRIES; ++attempt) {\r\n            if (lastError) {\r\n                logger_1.logger('Firestore._retry', requestTag, 'Retrying request that failed with error:', lastError);\r\n            }\r\n            try {\r\n                await backoff.backoffAndWait();\r\n                return await func();\r\n            }\r\n            catch (err) {\r\n                lastError = err;\r\n                if (util_1.isPermanentRpcError(err, methodName)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        logger_1.logger('Firestore._retry', requestTag, 'Request failed with error:', lastError);\r\n        return Promise.reject(lastError);\r\n    }\r\n    /**\r\n     * Waits for the provided stream to become active and returns a paused but\r\n     * healthy stream. If an error occurs before the first byte is read, the\r\n     * method rejects the returned Promise.\r\n     *\r\n     * @private\r\n     * @param backendStream The Node stream to monitor.\r\n     * @param lifetime A Promise that resolves when the stream receives an 'end',\r\n     * 'close' or 'finish' message.\r\n     * @param requestTag A unique client-assigned identifier for this request.\r\n     * @param request If specified, the request that should be written to the\r\n     * stream after opening.\r\n     * @returns A guaranteed healthy stream that should be used instead of\r\n     * `backendStream`.\r\n     */\r\n    _initializeStream(backendStream, lifetime, requestTag, request) {\r\n        const resultStream = new stream_1.PassThrough({ objectMode: true });\r\n        resultStream.pause();\r\n        /**\r\n         * Whether we have resolved the Promise and returned the stream to the\r\n         * caller.\r\n         */\r\n        let streamInitialized = false;\r\n        return new Promise((resolve, reject) => {\r\n            function streamReady() {\r\n                if (!streamInitialized) {\r\n                    streamInitialized = true;\r\n                    logger_1.logger('Firestore._initializeStream', requestTag, 'Releasing stream');\r\n                    resolve(resultStream);\r\n                }\r\n            }\r\n            function streamEnded() {\r\n                logger_1.logger('Firestore._initializeStream', requestTag, 'Received stream end');\r\n                resultStream.unpipe(backendStream);\r\n                resolve(resultStream);\r\n                lifetime.resolve();\r\n            }\r\n            function streamFailed(err) {\r\n                if (!streamInitialized) {\r\n                    // If we receive an error before we were able to receive any data,\r\n                    // reject this stream.\r\n                    logger_1.logger('Firestore._initializeStream', requestTag, 'Received initial error:', err);\r\n                    reject(err);\r\n                }\r\n                else {\r\n                    logger_1.logger('Firestore._initializeStream', requestTag, 'Received stream error:', err);\r\n                    // We execute the forwarding of the 'error' event via setImmediate() as\r\n                    // V8 guarantees that the Promise chain returned from this method\r\n                    // is resolved before any code executed via setImmediate(). This\r\n                    // allows the caller to attach an error handler.\r\n                    setImmediate(() => {\r\n                        resultStream.emit('error', err);\r\n                    });\r\n                }\r\n            }\r\n            backendStream.on('data', () => streamReady());\r\n            backendStream.on('error', err => streamFailed(err));\r\n            backendStream.on('end', () => streamEnded());\r\n            backendStream.on('close', () => streamEnded());\r\n            backendStream.on('finish', () => streamEnded());\r\n            backendStream.pipe(resultStream);\r\n            if (request) {\r\n                logger_1.logger('Firestore._initializeStream', requestTag, 'Sending request: %j', request);\r\n                backendStream.write(request, 'utf-8', err => {\r\n                    if (err) {\r\n                        streamFailed(err);\r\n                    }\r\n                    else {\r\n                        logger_1.logger('Firestore._initializeStream', requestTag, 'Marking stream as healthy');\r\n                        streamReady();\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * A funnel for all non-streaming API requests, assigning a project ID where\r\n     * necessary within the request options.\r\n     *\r\n     * @private\r\n     * @param methodName Name of the Veneer API endpoint that takes a request\r\n     * and GAX options.\r\n     * @param request The Protobuf request to send.\r\n     * @param requestTag A unique client-assigned identifier for this request.\r\n     * @param retryCodes If provided, a custom list of retry codes. If not\r\n     * provided, retry is based on the behavior as defined in the ServiceConfig.\r\n     * @returns A Promise with the request result.\r\n     */\r\n    request(methodName, request, requestTag, retryCodes) {\r\n        const callOptions = this.createCallOptions(methodName, retryCodes);\r\n        return this._clientPool.run(requestTag, async (gapicClient) => {\r\n            try {\r\n                logger_1.logger('Firestore.request', requestTag, 'Sending request: %j', request);\r\n                const [result] = await gapicClient[methodName](request, callOptions);\r\n                logger_1.logger('Firestore.request', requestTag, 'Received response: %j', result);\r\n                return result;\r\n            }\r\n            catch (err) {\r\n                logger_1.logger('Firestore.request', requestTag, 'Received error:', err);\r\n                return Promise.reject(err);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * A funnel for streaming API requests, assigning a project ID where necessary\r\n     * within the request options.\r\n     *\r\n     * The stream is returned in paused state and needs to be resumed once all\r\n     * listeners are attached.\r\n     *\r\n     * @private\r\n     * @param methodName Name of the streaming Veneer API endpoint that\r\n     * takes a request and GAX options.\r\n     * @param request The Protobuf request to send.\r\n     * @param requestTag A unique client-assigned identifier for this request.\r\n     * @returns A Promise with the resulting read-only stream.\r\n     */\r\n    requestStream(methodName, request, requestTag) {\r\n        const callOptions = this.createCallOptions(methodName);\r\n        const bidirectional = methodName === 'listen';\r\n        return this._retry(methodName, requestTag, () => {\r\n            const result = new util_1.Deferred();\r\n            this._clientPool.run(requestTag, async (gapicClient) => {\r\n                logger_1.logger('Firestore.requestStream', requestTag, 'Sending request: %j', request);\r\n                try {\r\n                    const stream = bidirectional\r\n                        ? gapicClient[methodName](callOptions)\r\n                        : gapicClient[methodName](request, callOptions);\r\n                    const logStream = new stream_1.Transform({\r\n                        objectMode: true,\r\n                        transform: (chunk, encoding, callback) => {\r\n                            logger_1.logger('Firestore.requestStream', requestTag, 'Received response: %j', chunk);\r\n                            callback();\r\n                        },\r\n                    });\r\n                    stream.pipe(logStream);\r\n                    const lifetime = new util_1.Deferred();\r\n                    const resultStream = await this._initializeStream(stream, lifetime, requestTag, bidirectional ? request : undefined);\r\n                    resultStream.on('end', () => stream.end());\r\n                    result.resolve(resultStream);\r\n                    // While we return the stream to the callee early, we don't want to\r\n                    // release the GAPIC client until the callee has finished processing the\r\n                    // stream.\r\n                    return lifetime.promise;\r\n                }\r\n                catch (e) {\r\n                    result.reject(e);\r\n                }\r\n            });\r\n            return result.promise;\r\n        });\r\n    }\r\n}\r\nexports.Firestore = Firestore;\r\n/**\r\n * A logging function that takes a single string.\r\n *\r\n * @callback Firestore~logFunction\r\n * @param {string} Log message\r\n */\r\n// tslint:disable-next-line:no-default-export\r\n/**\r\n * The default export of the `@google-cloud/firestore` package is the\r\n * {@link Firestore} class.\r\n *\r\n * See {@link Firestore} and {@link ClientConfig} for client methods and\r\n * configuration options.\r\n *\r\n * @module {Firestore} @google-cloud/firestore\r\n * @alias nodejs-firestore\r\n *\r\n * @example <caption>Install the client library with <a\r\n * href=\"https://www.npmjs.com/\">npm</a>:</caption> npm install --save\r\n * @google-cloud/firestore\r\n *\r\n * @example <caption>Import the client library</caption>\r\n * var Firestore = require('@google-cloud/firestore');\r\n *\r\n * @example <caption>Create a client that uses <a\r\n * href=\"https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\">Application\r\n * Default Credentials (ADC)</a>:</caption> var firestore = new Firestore();\r\n *\r\n * @example <caption>Create a client with <a\r\n * href=\"https://cloud.google.com/docs/authentication/production#obtaining_and_providing_service_account_credentials_manually\">explicit\r\n * credentials</a>:</caption> var firestore = new Firestore({ projectId:\r\n * 'your-project-id', keyFilename: '/path/to/keyfile.json'\r\n * });\r\n *\r\n * @example <caption>include:samples/quickstart.js</caption>\r\n * region_tag:firestore_quickstart\r\n * Full quickstart example:\r\n */\r\n// tslint:disable-next-line:no-default-export\r\nexports.default = Firestore;\r\n// Horrible hack to ensure backwards compatibility with <= 17.0, which allows\r\n// users to call the default constructor via\r\n// `const Fs = require(`@google-cloud/firestore`); new Fs()`;\r\nconst existingExports = module.exports;\r\nmodule.exports = Firestore;\r\nmodule.exports = Object.assign(module.exports, existingExports);\r\n/**\r\n * {@link v1beta1} factory function.\r\n *\r\n * @private\r\n * @name Firestore.v1beta1\r\n * @see v1beta1\r\n * @type {function}\r\n */\r\nObject.defineProperty(module.exports, 'v1beta1', {\r\n    // The v1beta1 module is very large. To avoid pulling it in from static\r\n    // scope, we lazy-load and cache the module.\r\n    get: () => {\r\n        if (!v1beta1) {\r\n            v1beta1 = require('./v1beta1');\r\n        }\r\n        return v1beta1;\r\n    },\r\n});\r\n/**\r\n * {@link v1} factory function.\r\n *\r\n * @private\r\n * @name Firestore.v1\r\n * @see v1\r\n * @type {function}\r\n */\r\nObject.defineProperty(module.exports, 'v1', {\r\n    // The v1 module is very large. To avoid pulling it in from static\r\n    // scope, we lazy-load and cache the module.\r\n    get: () => {\r\n        if (!v1) {\r\n            v1 = require('./v1');\r\n        }\r\n        return v1;\r\n    },\r\n});\r\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}