{"ast":null,"code":"'use strict';\n\nvar $ = require('../internals/export');\n\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\nvar isRegExp = require('../internals/is-regexp');\n\nvar getRegExpFlags = require('../internals/regexp-flags');\n\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar IS_PURE = require('../internals/is-pure');\n\nvar REPLACE = wellKnownSymbol('replace');\nvar RegExpPrototype = RegExp.prototype; // `String.prototype.replaceAll` method\n// https://github.com/tc39/proposal-string-replace-all\n\n$({\n  target: 'String',\n  proto: true\n}, {\n  replaceAll: function replaceAll(searchValue, replaceValue) {\n    var O = requireObjectCoercible(this);\n    var IS_REG_EXP, flags, replacer, string, searchString, template, result, position, index;\n\n    if (searchValue != null) {\n      IS_REG_EXP = isRegExp(searchValue);\n\n      if (IS_REG_EXP) {\n        flags = String(requireObjectCoercible('flags' in RegExpPrototype ? searchValue.flags : getRegExpFlags.call(searchValue)));\n        if (!~flags.indexOf('g')) throw TypeError('`.replaceAll` does not allow non-global regexes');\n      }\n\n      replacer = searchValue[REPLACE];\n\n      if (replacer !== undefined) {\n        return replacer.call(searchValue, O, replaceValue);\n      } else if (IS_PURE && IS_REG_EXP) {\n        return String(O).replace(searchValue, replaceValue);\n      }\n    }\n\n    string = String(O);\n    searchString = String(searchValue);\n    if (searchString === '') return replaceAll.call(string, /(?:)/g, replaceValue);\n    template = string.split(searchString);\n\n    if (typeof replaceValue !== 'function') {\n      return template.join(String(replaceValue));\n    }\n\n    result = template[0];\n    position = result.length;\n\n    for (index = 1; index < template.length; index++) {\n      result += String(replaceValue(searchString, position, string));\n      position += searchString.length + template[index].length;\n      result += template[index];\n    }\n\n    return result;\n  }\n});","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Backend/node_modules/core-js/modules/esnext.string.replace-all.js"],"names":["$","require","requireObjectCoercible","isRegExp","getRegExpFlags","wellKnownSymbol","IS_PURE","REPLACE","RegExpPrototype","RegExp","prototype","target","proto","replaceAll","searchValue","replaceValue","O","IS_REG_EXP","flags","replacer","string","searchString","template","result","position","index","String","call","indexOf","TypeError","undefined","replace","split","join","length"],"mappings":"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","sourcesContent":["'use strict';\r\nvar $ = require('../internals/export');\r\nvar requireObjectCoercible = require('../internals/require-object-coercible');\r\nvar isRegExp = require('../internals/is-regexp');\r\nvar getRegExpFlags = require('../internals/regexp-flags');\r\nvar wellKnownSymbol = require('../internals/well-known-symbol');\r\nvar IS_PURE = require('../internals/is-pure');\r\n\r\nvar REPLACE = wellKnownSymbol('replace');\r\nvar RegExpPrototype = RegExp.prototype;\r\n\r\n// `String.prototype.replaceAll` method\r\n// https://github.com/tc39/proposal-string-replace-all\r\n$({ target: 'String', proto: true }, {\r\n  replaceAll: function replaceAll(searchValue, replaceValue) {\r\n    var O = requireObjectCoercible(this);\r\n    var IS_REG_EXP, flags, replacer, string, searchString, template, result, position, index;\r\n    if (searchValue != null) {\r\n      IS_REG_EXP = isRegExp(searchValue);\r\n      if (IS_REG_EXP) {\r\n        flags = String(requireObjectCoercible('flags' in RegExpPrototype\r\n          ? searchValue.flags\r\n          : getRegExpFlags.call(searchValue)\r\n        ));\r\n        if (!~flags.indexOf('g')) throw TypeError('`.replaceAll` does not allow non-global regexes');\r\n      }\r\n      replacer = searchValue[REPLACE];\r\n      if (replacer !== undefined) {\r\n        return replacer.call(searchValue, O, replaceValue);\r\n      } else if (IS_PURE && IS_REG_EXP) {\r\n        return String(O).replace(searchValue, replaceValue);\r\n      }\r\n    }\r\n    string = String(O);\r\n    searchString = String(searchValue);\r\n    if (searchString === '') return replaceAll.call(string, /(?:)/g, replaceValue);\r\n    template = string.split(searchString);\r\n    if (typeof replaceValue !== 'function') {\r\n      return template.join(String(replaceValue));\r\n    }\r\n    result = template[0];\r\n    position = result.length;\r\n    for (index = 1; index < template.length; index++) {\r\n      result += String(replaceValue(searchString, position, string));\r\n      position += searchString.length + template[index].length;\r\n      result += template[index];\r\n    }\r\n    return result;\r\n  }\r\n});\r\n"]},"metadata":{},"sourceType":"script"}