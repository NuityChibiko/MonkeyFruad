{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/* global window */\n\nconst gax = require(\"google-gax\");\n\nconst path = require(\"path\");\n/**\r\n * Client JSON configuration object, loaded from\r\n * `src/v1/firestore_admin_client_config.json`.\r\n * This file defines retry strategy and timeouts for all API methods in this library.\r\n */\n\n\nconst gapicConfig = require(\"./firestore_admin_client_config.json\");\n\nconst google_gax_1 = require(\"google-gax\");\n\nconst version = require('../../../package.json').version;\n/**\r\n *  Operations are created by service `FirestoreAdmin`, but are accessed via\r\n *  service `google.longrunning.Operations`.\r\n * @class\r\n * @memberof v1\r\n */\n\n\nclass FirestoreAdminClient {\n  /**\r\n   * Construct an instance of FirestoreAdminClient.\r\n   *\r\n   * @param {object} [options] - The configuration object.\r\n   * The options accepted by the constructor are described in detail\r\n   * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).\r\n   * The common options are:\r\n   * @param {object} [options.credentials] - Credentials object.\r\n   * @param {string} [options.credentials.client_email]\r\n   * @param {string} [options.credentials.private_key]\r\n   * @param {string} [options.email] - Account email address. Required when\r\n   *     using a .pem or .p12 keyFilename.\r\n   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\r\n   *     .p12 key downloaded from the Google Developers Console. If you provide\r\n   *     a path to a JSON file, the projectId option below is not necessary.\r\n   *     NOTE: .pem and .p12 require you to specify options.email as well.\r\n   * @param {number} [options.port] - The port on which to connect to\r\n   *     the remote host.\r\n   * @param {string} [options.projectId] - The project ID from the Google\r\n   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\r\n   *     the environment variable GCLOUD_PROJECT for your project ID. If your\r\n   *     app is running in an environment which supports\r\n   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\r\n   *     your project ID will be detected automatically.\r\n   * @param {string} [options.apiEndpoint] - The domain name of the\r\n   *     API remote host.\r\n   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.\r\n   *     Follows the structure of {@link gapicConfig}.\r\n   * @param {boolean} [options.fallback] - Use HTTP fallback mode.\r\n   *     In fallback mode, a special browser-compatible transport implementation is used\r\n   *     instead of gRPC transport. In browser context (if the `window` object is defined)\r\n   *     the fallback mode is enabled automatically; set `options.fallback` to `false`\r\n   *     if you need to override this behavior.\r\n   */\n  constructor(opts) {\n    var _a, _b;\n\n    this._terminated = false;\n    this.descriptors = {\n      page: {},\n      stream: {},\n      longrunning: {},\n      batching: {}\n    }; // Ensure that options include all the required fields.\n\n    const staticMembers = this.constructor;\n    const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;\n    const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;\n    const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};\n    const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function';\n    opts = Object.assign({\n      servicePath,\n      port,\n      clientConfig,\n      fallback\n    }, opts); // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.\n\n    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {\n      opts['scopes'] = staticMembers.scopes;\n    } // Choose either gRPC or proto-over-HTTP implementation of google-gax.\n\n\n    this._gaxModule = opts.fallback ? gax.fallback : gax; // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.\n\n    this._gaxGrpc = new this._gaxModule.GrpcClient(opts); // Save options to use in initialize() method.\n\n    this._opts = opts; // Save the auth object to the client, for use by other methods.\n\n    this.auth = this._gaxGrpc.auth; // Set the default scopes in auth client if needed.\n\n    if (servicePath === staticMembers.servicePath) {\n      this.auth.defaultScopes = staticMembers.scopes;\n    } // Determine the client header string.\n\n\n    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];\n\n    if (typeof process !== 'undefined' && 'versions' in process) {\n      clientHeader.push(`gl-node/${process.versions.node}`);\n    } else {\n      clientHeader.push(`gl-web/${this._gaxModule.version}`);\n    }\n\n    if (!opts.fallback) {\n      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);\n    }\n\n    if (opts.libName && opts.libVersion) {\n      clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n    } // Load the applicable protos.\n    // For Node.js, pass the path to JSON proto file.\n    // For browsers, pass the JSON content.\n\n\n    const nodejsProtoPath = path.join(__dirname, '..', '..', 'protos', 'protos.json');\n    this._protos = this._gaxGrpc.loadProto(opts.fallback ? // eslint-disable-next-line @typescript-eslint/no-var-requires\n    require('../../protos/protos.json') : nodejsProtoPath); // This API contains \"path templates\"; forward-slash-separated\n    // identifiers to uniquely identify resources within the API.\n    // Create useful helper objects for these.\n\n    this.pathTemplates = {\n      collectionGroupPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/databases/{database}/collectionGroups/{collection}'),\n      databasePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/databases/{database}'),\n      fieldPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/databases/{database}/collectionGroups/{collection}/fields/{field}'),\n      indexPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/databases/{database}/collectionGroups/{collection}/indexes/{index}')\n    }; // Some of the methods on this service return \"paged\" results,\n    // (e.g. 50 results at a time, with tokens to get subsequent\n    // pages). Denote the keys used for pagination and results.\n\n    this.descriptors.page = {\n      listIndexes: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'indexes'),\n      listFields: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'fields')\n    }; // This API contains \"long-running operations\", which return a\n    // an Operation object that allows for tracking of the operation,\n    // rather than holding a request open.\n\n    const protoFilesRoot = opts.fallback ? this._gaxModule.protobuf.Root.fromJSON( // eslint-disable-next-line @typescript-eslint/no-var-requires\n    require('../../protos/protos.json')) : this._gaxModule.protobuf.loadSync(nodejsProtoPath);\n    this.operationsClient = this._gaxModule.lro({\n      auth: this.auth,\n      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined\n    }).operationsClient(opts);\n    const createIndexResponse = protoFilesRoot.lookup('.google.firestore.admin.v1.Index');\n    const createIndexMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.IndexOperationMetadata');\n    const updateFieldResponse = protoFilesRoot.lookup('.google.firestore.admin.v1.Field');\n    const updateFieldMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.FieldOperationMetadata');\n    const exportDocumentsResponse = protoFilesRoot.lookup('.google.firestore.admin.v1.ExportDocumentsResponse');\n    const exportDocumentsMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.ExportDocumentsMetadata');\n    const importDocumentsResponse = protoFilesRoot.lookup('.google.protobuf.Empty');\n    const importDocumentsMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.ImportDocumentsMetadata');\n    this.descriptors.longrunning = {\n      createIndex: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createIndexResponse.decode.bind(createIndexResponse), createIndexMetadata.decode.bind(createIndexMetadata)),\n      updateField: new this._gaxModule.LongrunningDescriptor(this.operationsClient, updateFieldResponse.decode.bind(updateFieldResponse), updateFieldMetadata.decode.bind(updateFieldMetadata)),\n      exportDocuments: new this._gaxModule.LongrunningDescriptor(this.operationsClient, exportDocumentsResponse.decode.bind(exportDocumentsResponse), exportDocumentsMetadata.decode.bind(exportDocumentsMetadata)),\n      importDocuments: new this._gaxModule.LongrunningDescriptor(this.operationsClient, importDocumentsResponse.decode.bind(importDocumentsResponse), importDocumentsMetadata.decode.bind(importDocumentsMetadata))\n    }; // Put together the default options sent with requests.\n\n    this._defaults = this._gaxGrpc.constructSettings('google.firestore.admin.v1.FirestoreAdmin', gapicConfig, opts.clientConfig || {}, {\n      'x-goog-api-client': clientHeader.join(' ')\n    }); // Set up a dictionary of \"inner API calls\"; the core implementation\n    // of calling the API is handled in `google-gax`, with this code\n    // merely providing the destination and request information.\n\n    this.innerApiCalls = {};\n  }\n  /**\r\n   * Initialize the client.\r\n   * Performs asynchronous operations (such as authentication) and prepares the client.\r\n   * This function will be called automatically when any class method is called for the\r\n   * first time, but if you need to initialize it before calling an actual method,\r\n   * feel free to call initialize() directly.\r\n   *\r\n   * You can await on this method if you want to make sure the client is initialized.\r\n   *\r\n   * @returns {Promise} A promise that resolves to an authenticated service stub.\r\n   */\n\n\n  initialize() {\n    // If the client stub promise is already initialized, return immediately.\n    if (this.firestoreAdminStub) {\n      return this.firestoreAdminStub;\n    } // Put together the \"service stub\" for\n    // google.firestore.admin.v1.FirestoreAdmin.\n\n\n    this.firestoreAdminStub = this._gaxGrpc.createStub(this._opts.fallback ? this._protos.lookupService('google.firestore.admin.v1.FirestoreAdmin') : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this._protos.google.firestore.admin.v1.FirestoreAdmin, this._opts); // Iterate over each of the methods that the service provides\n    // and create an API call method for each.\n\n    const firestoreAdminStubMethods = ['createIndex', 'listIndexes', 'getIndex', 'deleteIndex', 'getField', 'updateField', 'listFields', 'exportDocuments', 'importDocuments'];\n\n    for (const methodName of firestoreAdminStubMethods) {\n      const callPromise = this.firestoreAdminStub.then(stub => (...args) => {\n        if (this._terminated) {\n          return Promise.reject('The client has already been closed.');\n        }\n\n        const func = stub[methodName];\n        return func.apply(stub, args);\n      }, err => () => {\n        throw err;\n      });\n      const descriptor = this.descriptors.page[methodName] || this.descriptors.longrunning[methodName] || undefined;\n\n      const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor);\n\n      this.innerApiCalls[methodName] = apiCall;\n    }\n\n    return this.firestoreAdminStub;\n  }\n  /**\r\n   * The DNS address for this API service.\r\n   * @returns {string} The DNS address for this service.\r\n   */\n\n\n  static get servicePath() {\n    return 'firestore.googleapis.com';\n  }\n  /**\r\n   * The DNS address for this API service - same as servicePath(),\r\n   * exists for compatibility reasons.\r\n   * @returns {string} The DNS address for this service.\r\n   */\n\n\n  static get apiEndpoint() {\n    return 'firestore.googleapis.com';\n  }\n  /**\r\n   * The port for this API service.\r\n   * @returns {number} The default port for this service.\r\n   */\n\n\n  static get port() {\n    return 443;\n  }\n  /**\r\n   * The scopes needed to make gRPC calls for every method defined\r\n   * in this service.\r\n   * @returns {string[]} List of default scopes.\r\n   */\n\n\n  static get scopes() {\n    return ['https://www.googleapis.com/auth/cloud-platform', 'https://www.googleapis.com/auth/datastore'];\n  }\n  /**\r\n   * Return the project ID used by this class.\r\n   * @returns {Promise} A promise that resolves to string containing the project ID.\r\n   */\n\n\n  getProjectId(callback) {\n    if (callback) {\n      this.auth.getProjectId(callback);\n      return;\n    }\n\n    return this.auth.getProjectId();\n  }\n  /**\r\n   * Gets a composite index.\r\n   *\r\n   * @param {Object} request\r\n   *   The request object that will be sent.\r\n   * @param {string} request.name\r\n   *   Required. A name of the form\r\n   *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`\r\n   * @param {object} [options]\r\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\r\n   * @returns {Promise} - The promise which resolves to an array.\r\n   *   The first element of the array is an object representing [Index]{@link google.firestore.admin.v1.Index}.\r\n   *   Please see the\r\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\r\n   *   for more details and examples.\r\n   * @example\r\n   * const [response] = await client.getIndex(request);\r\n   */\n\n\n  getIndex(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      name: request.name || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.getIndex(request, options, callback);\n  }\n  /**\r\n   * Deletes a composite index.\r\n   *\r\n   * @param {Object} request\r\n   *   The request object that will be sent.\r\n   * @param {string} request.name\r\n   *   Required. A name of the form\r\n   *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`\r\n   * @param {object} [options]\r\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\r\n   * @returns {Promise} - The promise which resolves to an array.\r\n   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.\r\n   *   Please see the\r\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\r\n   *   for more details and examples.\r\n   * @example\r\n   * const [response] = await client.deleteIndex(request);\r\n   */\n\n\n  deleteIndex(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      name: request.name || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.deleteIndex(request, options, callback);\n  }\n  /**\r\n   * Gets the metadata and configuration for a Field.\r\n   *\r\n   * @param {Object} request\r\n   *   The request object that will be sent.\r\n   * @param {string} request.name\r\n   *   Required. A name of the form\r\n   *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_id}`\r\n   * @param {object} [options]\r\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\r\n   * @returns {Promise} - The promise which resolves to an array.\r\n   *   The first element of the array is an object representing [Field]{@link google.firestore.admin.v1.Field}.\r\n   *   Please see the\r\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\r\n   *   for more details and examples.\r\n   * @example\r\n   * const [response] = await client.getField(request);\r\n   */\n\n\n  getField(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      name: request.name || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.getField(request, options, callback);\n  }\n  /**\r\n   * Creates a composite index. This returns a {@link google.longrunning.Operation|google.longrunning.Operation}\r\n   * which may be used to track the status of the creation. The metadata for\r\n   * the operation will be the type {@link google.firestore.admin.v1.IndexOperationMetadata|IndexOperationMetadata}.\r\n   *\r\n   * @param {Object} request\r\n   *   The request object that will be sent.\r\n   * @param {string} request.parent\r\n   *   Required. A parent name of the form\r\n   *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\r\n   * @param {google.firestore.admin.v1.Index} request.index\r\n   *   Required. The composite index to create.\r\n   * @param {object} [options]\r\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\r\n   * @returns {Promise} - The promise which resolves to an array.\r\n   *   The first element of the array is an object representing\r\n   *   a long running operation. Its `promise()` method returns a promise\r\n   *   you can `await` for.\r\n   *   Please see the\r\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\r\n   *   for more details and examples.\r\n   * @example\r\n   * const [operation] = await client.createIndex(request);\r\n   * const [response] = await operation.promise();\r\n   */\n\n\n  createIndex(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.createIndex(request, options, callback);\n  }\n  /**\r\n   * Check the status of the long running operation returned by `createIndex()`.\r\n   * @param {String} name\r\n   *   The operation name that will be passed.\r\n   * @returns {Promise} - The promise which resolves to an object.\r\n   *   The decoded operation object has result and metadata field to get information from.\r\n   *   Please see the\r\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\r\n   *   for more details and examples.\r\n   * @example\r\n   * const decodedOperation = await checkCreateIndexProgress(name);\r\n   * console.log(decodedOperation.result);\r\n   * console.log(decodedOperation.done);\r\n   * console.log(decodedOperation.metadata);\r\n   */\n\n\n  async checkCreateIndexProgress(name) {\n    const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({\n      name\n    });\n    const [operation] = await this.operationsClient.getOperation(request);\n    const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.createIndex, gax.createDefaultBackoffSettings());\n    return decodeOperation;\n  }\n  /**\r\n   * Updates a field configuration. Currently, field updates apply only to\r\n   * single field index configuration. However, calls to\r\n   * {@link google.firestore.admin.v1.FirestoreAdmin.UpdateField|FirestoreAdmin.UpdateField} should provide a field mask to avoid\r\n   * changing any configuration that the caller isn't aware of. The field mask\r\n   * should be specified as: `{ paths: \"index_config\" }`.\r\n   *\r\n   * This call returns a {@link google.longrunning.Operation|google.longrunning.Operation} which may be used to\r\n   * track the status of the field update. The metadata for\r\n   * the operation will be the type {@link google.firestore.admin.v1.FieldOperationMetadata|FieldOperationMetadata}.\r\n   *\r\n   * To configure the default field settings for the database, use\r\n   * the special `Field` with resource name:\r\n   * `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/*`.\r\n   *\r\n   * @param {Object} request\r\n   *   The request object that will be sent.\r\n   * @param {google.firestore.admin.v1.Field} request.field\r\n   *   Required. The field to be updated.\r\n   * @param {google.protobuf.FieldMask} request.updateMask\r\n   *   A mask, relative to the field. If specified, only configuration specified\r\n   *   by this field_mask will be updated in the field.\r\n   * @param {object} [options]\r\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\r\n   * @returns {Promise} - The promise which resolves to an array.\r\n   *   The first element of the array is an object representing\r\n   *   a long running operation. Its `promise()` method returns a promise\r\n   *   you can `await` for.\r\n   *   Please see the\r\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\r\n   *   for more details and examples.\r\n   * @example\r\n   * const [operation] = await client.updateField(request);\r\n   * const [response] = await operation.promise();\r\n   */\n\n\n  updateField(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      'field.name': request.field.name || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.updateField(request, options, callback);\n  }\n  /**\r\n   * Check the status of the long running operation returned by `updateField()`.\r\n   * @param {String} name\r\n   *   The operation name that will be passed.\r\n   * @returns {Promise} - The promise which resolves to an object.\r\n   *   The decoded operation object has result and metadata field to get information from.\r\n   *   Please see the\r\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\r\n   *   for more details and examples.\r\n   * @example\r\n   * const decodedOperation = await checkUpdateFieldProgress(name);\r\n   * console.log(decodedOperation.result);\r\n   * console.log(decodedOperation.done);\r\n   * console.log(decodedOperation.metadata);\r\n   */\n\n\n  async checkUpdateFieldProgress(name) {\n    const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({\n      name\n    });\n    const [operation] = await this.operationsClient.getOperation(request);\n    const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.updateField, gax.createDefaultBackoffSettings());\n    return decodeOperation;\n  }\n  /**\r\n   * Exports a copy of all or a subset of documents from Google Cloud Firestore\r\n   * to another storage system, such as Google Cloud Storage. Recent updates to\r\n   * documents may not be reflected in the export. The export occurs in the\r\n   * background and its progress can be monitored and managed via the\r\n   * Operation resource that is created. The output of an export may only be\r\n   * used once the associated operation is done. If an export operation is\r\n   * cancelled before completion it may leave partial data behind in Google\r\n   * Cloud Storage.\r\n   *\r\n   * @param {Object} request\r\n   *   The request object that will be sent.\r\n   * @param {string} request.name\r\n   *   Required. Database to export. Should be of the form:\r\n   *   `projects/{project_id}/databases/{database_id}`.\r\n   * @param {string[]} request.collectionIds\r\n   *   Which collection ids to export. Unspecified means all collections.\r\n   * @param {string} request.outputUriPrefix\r\n   *   The output URI. Currently only supports Google Cloud Storage URIs of the\r\n   *   form: `gs://BUCKET_NAME[/NAMESPACE_PATH]`, where `BUCKET_NAME` is the name\r\n   *   of the Google Cloud Storage bucket and `NAMESPACE_PATH` is an optional\r\n   *   Google Cloud Storage namespace path. When\r\n   *   choosing a name, be sure to consider Google Cloud Storage naming\r\n   *   guidelines: https://cloud.google.com/storage/docs/naming.\r\n   *   If the URI is a bucket (without a namespace path), a prefix will be\r\n   *   generated based on the start time.\r\n   * @param {object} [options]\r\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\r\n   * @returns {Promise} - The promise which resolves to an array.\r\n   *   The first element of the array is an object representing\r\n   *   a long running operation. Its `promise()` method returns a promise\r\n   *   you can `await` for.\r\n   *   Please see the\r\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\r\n   *   for more details and examples.\r\n   * @example\r\n   * const [operation] = await client.exportDocuments(request);\r\n   * const [response] = await operation.promise();\r\n   */\n\n\n  exportDocuments(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      name: request.name || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.exportDocuments(request, options, callback);\n  }\n  /**\r\n   * Check the status of the long running operation returned by `exportDocuments()`.\r\n   * @param {String} name\r\n   *   The operation name that will be passed.\r\n   * @returns {Promise} - The promise which resolves to an object.\r\n   *   The decoded operation object has result and metadata field to get information from.\r\n   *   Please see the\r\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\r\n   *   for more details and examples.\r\n   * @example\r\n   * const decodedOperation = await checkExportDocumentsProgress(name);\r\n   * console.log(decodedOperation.result);\r\n   * console.log(decodedOperation.done);\r\n   * console.log(decodedOperation.metadata);\r\n   */\n\n\n  async checkExportDocumentsProgress(name) {\n    const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({\n      name\n    });\n    const [operation] = await this.operationsClient.getOperation(request);\n    const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.exportDocuments, gax.createDefaultBackoffSettings());\n    return decodeOperation;\n  }\n  /**\r\n   * Imports documents into Google Cloud Firestore. Existing documents with the\r\n   * same name are overwritten. The import occurs in the background and its\r\n   * progress can be monitored and managed via the Operation resource that is\r\n   * created. If an ImportDocuments operation is cancelled, it is possible\r\n   * that a subset of the data has already been imported to Cloud Firestore.\r\n   *\r\n   * @param {Object} request\r\n   *   The request object that will be sent.\r\n   * @param {string} request.name\r\n   *   Required. Database to import into. Should be of the form:\r\n   *   `projects/{project_id}/databases/{database_id}`.\r\n   * @param {string[]} request.collectionIds\r\n   *   Which collection ids to import. Unspecified means all collections included\r\n   *   in the import.\r\n   * @param {string} request.inputUriPrefix\r\n   *   Location of the exported files.\r\n   *   This must match the output_uri_prefix of an ExportDocumentsResponse from\r\n   *   an export that has completed successfully.\r\n   *   See:\r\n   *   {@link google.firestore.admin.v1.ExportDocumentsResponse.output_uri_prefix|google.firestore.admin.v1.ExportDocumentsResponse.output_uri_prefix}.\r\n   * @param {object} [options]\r\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\r\n   * @returns {Promise} - The promise which resolves to an array.\r\n   *   The first element of the array is an object representing\r\n   *   a long running operation. Its `promise()` method returns a promise\r\n   *   you can `await` for.\r\n   *   Please see the\r\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\r\n   *   for more details and examples.\r\n   * @example\r\n   * const [operation] = await client.importDocuments(request);\r\n   * const [response] = await operation.promise();\r\n   */\n\n\n  importDocuments(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      name: request.name || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.importDocuments(request, options, callback);\n  }\n  /**\r\n   * Check the status of the long running operation returned by `importDocuments()`.\r\n   * @param {String} name\r\n   *   The operation name that will be passed.\r\n   * @returns {Promise} - The promise which resolves to an object.\r\n   *   The decoded operation object has result and metadata field to get information from.\r\n   *   Please see the\r\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\r\n   *   for more details and examples.\r\n   * @example\r\n   * const decodedOperation = await checkImportDocumentsProgress(name);\r\n   * console.log(decodedOperation.result);\r\n   * console.log(decodedOperation.done);\r\n   * console.log(decodedOperation.metadata);\r\n   */\n\n\n  async checkImportDocumentsProgress(name) {\n    const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({\n      name\n    });\n    const [operation] = await this.operationsClient.getOperation(request);\n    const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.importDocuments, gax.createDefaultBackoffSettings());\n    return decodeOperation;\n  }\n  /**\r\n   * Lists composite indexes.\r\n   *\r\n   * @param {Object} request\r\n   *   The request object that will be sent.\r\n   * @param {string} request.parent\r\n   *   Required. A parent name of the form\r\n   *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\r\n   * @param {string} request.filter\r\n   *   The filter to apply to list results.\r\n   * @param {number} request.pageSize\r\n   *   The number of results to return.\r\n   * @param {string} request.pageToken\r\n   *   A page token, returned from a previous call to\r\n   *   {@link google.firestore.admin.v1.FirestoreAdmin.ListIndexes|FirestoreAdmin.ListIndexes}, that may be used to get the next\r\n   *   page of results.\r\n   * @param {object} [options]\r\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\r\n   * @returns {Promise} - The promise which resolves to an array.\r\n   *   The first element of the array is Array of [Index]{@link google.firestore.admin.v1.Index}.\r\n   *   The client library will perform auto-pagination by default: it will call the API as many\r\n   *   times as needed and will merge results from all the pages into this array.\r\n   *   Note that it can affect your quota.\r\n   *   We recommend using `listIndexesAsync()`\r\n   *   method described below for async iteration which you can stop as needed.\r\n   *   Please see the\r\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\r\n   *   for more details and examples.\r\n   */\n\n\n  listIndexes(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.listIndexes(request, options, callback);\n  }\n  /**\r\n   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\r\n   * @param {Object} request\r\n   *   The request object that will be sent.\r\n   * @param {string} request.parent\r\n   *   Required. A parent name of the form\r\n   *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\r\n   * @param {string} request.filter\r\n   *   The filter to apply to list results.\r\n   * @param {number} request.pageSize\r\n   *   The number of results to return.\r\n   * @param {string} request.pageToken\r\n   *   A page token, returned from a previous call to\r\n   *   {@link google.firestore.admin.v1.FirestoreAdmin.ListIndexes|FirestoreAdmin.ListIndexes}, that may be used to get the next\r\n   *   page of results.\r\n   * @param {object} [options]\r\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\r\n   * @returns {Stream}\r\n   *   An object stream which emits an object representing [Index]{@link google.firestore.admin.v1.Index} on 'data' event.\r\n   *   The client library will perform auto-pagination by default: it will call the API as many\r\n   *   times as needed. Note that it can affect your quota.\r\n   *   We recommend using `listIndexesAsync()`\r\n   *   method described below for async iteration which you can stop as needed.\r\n   *   Please see the\r\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\r\n   *   for more details and examples.\r\n   */\n\n\n  listIndexesStream(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    const callSettings = new gax.CallSettings(options);\n    this.initialize();\n    return this.descriptors.page.listIndexes.createStream(this.innerApiCalls.listIndexes, request, callSettings);\n  }\n  /**\r\n   * Equivalent to `listIndexes`, but returns an iterable object.\r\n   *\r\n   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\r\n   * @param {Object} request\r\n   *   The request object that will be sent.\r\n   * @param {string} request.parent\r\n   *   Required. A parent name of the form\r\n   *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\r\n   * @param {string} request.filter\r\n   *   The filter to apply to list results.\r\n   * @param {number} request.pageSize\r\n   *   The number of results to return.\r\n   * @param {string} request.pageToken\r\n   *   A page token, returned from a previous call to\r\n   *   {@link google.firestore.admin.v1.FirestoreAdmin.ListIndexes|FirestoreAdmin.ListIndexes}, that may be used to get the next\r\n   *   page of results.\r\n   * @param {object} [options]\r\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\r\n   * @returns {Object}\r\n   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).\r\n   *   When you iterate the returned iterable, each element will be an object representing\r\n   *   [Index]{@link google.firestore.admin.v1.Index}. The API will be called under the hood as needed, once per the page,\r\n   *   so you can stop the iteration when you don't need more results.\r\n   *   Please see the\r\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\r\n   *   for more details and examples.\r\n   * @example\r\n   * const iterable = client.listIndexesAsync(request);\r\n   * for await (const response of iterable) {\r\n   *   // process response\r\n   * }\r\n   */\n\n\n  listIndexesAsync(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    options = options || {};\n    const callSettings = new gax.CallSettings(options);\n    this.initialize();\n    return this.descriptors.page.listIndexes.asyncIterate(this.innerApiCalls['listIndexes'], request, callSettings);\n  }\n  /**\r\n   * Lists the field configuration and metadata for this database.\r\n   *\r\n   * Currently, {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} only supports listing fields\r\n   * that have been explicitly overridden. To issue this query, call\r\n   * {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} with the filter set to\r\n   * `indexConfig.usesAncestorConfig:false`.\r\n   *\r\n   * @param {Object} request\r\n   *   The request object that will be sent.\r\n   * @param {string} request.parent\r\n   *   Required. A parent name of the form\r\n   *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\r\n   * @param {string} request.filter\r\n   *   The filter to apply to list results. Currently,\r\n   *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} only supports listing fields\r\n   *   that have been explicitly overridden. To issue this query, call\r\n   *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} with the filter set to\r\n   *   `indexConfig.usesAncestorConfig:false`.\r\n   * @param {number} request.pageSize\r\n   *   The number of results to return.\r\n   * @param {string} request.pageToken\r\n   *   A page token, returned from a previous call to\r\n   *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields}, that may be used to get the next\r\n   *   page of results.\r\n   * @param {object} [options]\r\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\r\n   * @returns {Promise} - The promise which resolves to an array.\r\n   *   The first element of the array is Array of [Field]{@link google.firestore.admin.v1.Field}.\r\n   *   The client library will perform auto-pagination by default: it will call the API as many\r\n   *   times as needed and will merge results from all the pages into this array.\r\n   *   Note that it can affect your quota.\r\n   *   We recommend using `listFieldsAsync()`\r\n   *   method described below for async iteration which you can stop as needed.\r\n   *   Please see the\r\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\r\n   *   for more details and examples.\r\n   */\n\n\n  listFields(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.listFields(request, options, callback);\n  }\n  /**\r\n   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\r\n   * @param {Object} request\r\n   *   The request object that will be sent.\r\n   * @param {string} request.parent\r\n   *   Required. A parent name of the form\r\n   *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\r\n   * @param {string} request.filter\r\n   *   The filter to apply to list results. Currently,\r\n   *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} only supports listing fields\r\n   *   that have been explicitly overridden. To issue this query, call\r\n   *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} with the filter set to\r\n   *   `indexConfig.usesAncestorConfig:false`.\r\n   * @param {number} request.pageSize\r\n   *   The number of results to return.\r\n   * @param {string} request.pageToken\r\n   *   A page token, returned from a previous call to\r\n   *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields}, that may be used to get the next\r\n   *   page of results.\r\n   * @param {object} [options]\r\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\r\n   * @returns {Stream}\r\n   *   An object stream which emits an object representing [Field]{@link google.firestore.admin.v1.Field} on 'data' event.\r\n   *   The client library will perform auto-pagination by default: it will call the API as many\r\n   *   times as needed. Note that it can affect your quota.\r\n   *   We recommend using `listFieldsAsync()`\r\n   *   method described below for async iteration which you can stop as needed.\r\n   *   Please see the\r\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\r\n   *   for more details and examples.\r\n   */\n\n\n  listFieldsStream(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    const callSettings = new gax.CallSettings(options);\n    this.initialize();\n    return this.descriptors.page.listFields.createStream(this.innerApiCalls.listFields, request, callSettings);\n  }\n  /**\r\n   * Equivalent to `listFields`, but returns an iterable object.\r\n   *\r\n   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\r\n   * @param {Object} request\r\n   *   The request object that will be sent.\r\n   * @param {string} request.parent\r\n   *   Required. A parent name of the form\r\n   *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\r\n   * @param {string} request.filter\r\n   *   The filter to apply to list results. Currently,\r\n   *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} only supports listing fields\r\n   *   that have been explicitly overridden. To issue this query, call\r\n   *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} with the filter set to\r\n   *   `indexConfig.usesAncestorConfig:false`.\r\n   * @param {number} request.pageSize\r\n   *   The number of results to return.\r\n   * @param {string} request.pageToken\r\n   *   A page token, returned from a previous call to\r\n   *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields}, that may be used to get the next\r\n   *   page of results.\r\n   * @param {object} [options]\r\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\r\n   * @returns {Object}\r\n   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).\r\n   *   When you iterate the returned iterable, each element will be an object representing\r\n   *   [Field]{@link google.firestore.admin.v1.Field}. The API will be called under the hood as needed, once per the page,\r\n   *   so you can stop the iteration when you don't need more results.\r\n   *   Please see the\r\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\r\n   *   for more details and examples.\r\n   * @example\r\n   * const iterable = client.listFieldsAsync(request);\r\n   * for await (const response of iterable) {\r\n   *   // process response\r\n   * }\r\n   */\n\n\n  listFieldsAsync(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    options = options || {};\n    const callSettings = new gax.CallSettings(options);\n    this.initialize();\n    return this.descriptors.page.listFields.asyncIterate(this.innerApiCalls['listFields'], request, callSettings);\n  } // --------------------\n  // -- Path templates --\n  // --------------------\n\n  /**\r\n   * Return a fully-qualified collectionGroup resource name string.\r\n   *\r\n   * @param {string} project\r\n   * @param {string} database\r\n   * @param {string} collection\r\n   * @returns {string} Resource name string.\r\n   */\n\n\n  collectionGroupPath(project, database, collection) {\n    return this.pathTemplates.collectionGroupPathTemplate.render({\n      project: project,\n      database: database,\n      collection: collection\n    });\n  }\n  /**\r\n   * Parse the project from CollectionGroup resource.\r\n   *\r\n   * @param {string} collectionGroupName\r\n   *   A fully-qualified path representing CollectionGroup resource.\r\n   * @returns {string} A string representing the project.\r\n   */\n\n\n  matchProjectFromCollectionGroupName(collectionGroupName) {\n    return this.pathTemplates.collectionGroupPathTemplate.match(collectionGroupName).project;\n  }\n  /**\r\n   * Parse the database from CollectionGroup resource.\r\n   *\r\n   * @param {string} collectionGroupName\r\n   *   A fully-qualified path representing CollectionGroup resource.\r\n   * @returns {string} A string representing the database.\r\n   */\n\n\n  matchDatabaseFromCollectionGroupName(collectionGroupName) {\n    return this.pathTemplates.collectionGroupPathTemplate.match(collectionGroupName).database;\n  }\n  /**\r\n   * Parse the collection from CollectionGroup resource.\r\n   *\r\n   * @param {string} collectionGroupName\r\n   *   A fully-qualified path representing CollectionGroup resource.\r\n   * @returns {string} A string representing the collection.\r\n   */\n\n\n  matchCollectionFromCollectionGroupName(collectionGroupName) {\n    return this.pathTemplates.collectionGroupPathTemplate.match(collectionGroupName).collection;\n  }\n  /**\r\n   * Return a fully-qualified database resource name string.\r\n   *\r\n   * @param {string} project\r\n   * @param {string} database\r\n   * @returns {string} Resource name string.\r\n   */\n\n\n  databasePath(project, database) {\n    return this.pathTemplates.databasePathTemplate.render({\n      project: project,\n      database: database\n    });\n  }\n  /**\r\n   * Parse the project from Database resource.\r\n   *\r\n   * @param {string} databaseName\r\n   *   A fully-qualified path representing Database resource.\r\n   * @returns {string} A string representing the project.\r\n   */\n\n\n  matchProjectFromDatabaseName(databaseName) {\n    return this.pathTemplates.databasePathTemplate.match(databaseName).project;\n  }\n  /**\r\n   * Parse the database from Database resource.\r\n   *\r\n   * @param {string} databaseName\r\n   *   A fully-qualified path representing Database resource.\r\n   * @returns {string} A string representing the database.\r\n   */\n\n\n  matchDatabaseFromDatabaseName(databaseName) {\n    return this.pathTemplates.databasePathTemplate.match(databaseName).database;\n  }\n  /**\r\n   * Return a fully-qualified field resource name string.\r\n   *\r\n   * @param {string} project\r\n   * @param {string} database\r\n   * @param {string} collection\r\n   * @param {string} field\r\n   * @returns {string} Resource name string.\r\n   */\n\n\n  fieldPath(project, database, collection, field) {\n    return this.pathTemplates.fieldPathTemplate.render({\n      project: project,\n      database: database,\n      collection: collection,\n      field: field\n    });\n  }\n  /**\r\n   * Parse the project from Field resource.\r\n   *\r\n   * @param {string} fieldName\r\n   *   A fully-qualified path representing Field resource.\r\n   * @returns {string} A string representing the project.\r\n   */\n\n\n  matchProjectFromFieldName(fieldName) {\n    return this.pathTemplates.fieldPathTemplate.match(fieldName).project;\n  }\n  /**\r\n   * Parse the database from Field resource.\r\n   *\r\n   * @param {string} fieldName\r\n   *   A fully-qualified path representing Field resource.\r\n   * @returns {string} A string representing the database.\r\n   */\n\n\n  matchDatabaseFromFieldName(fieldName) {\n    return this.pathTemplates.fieldPathTemplate.match(fieldName).database;\n  }\n  /**\r\n   * Parse the collection from Field resource.\r\n   *\r\n   * @param {string} fieldName\r\n   *   A fully-qualified path representing Field resource.\r\n   * @returns {string} A string representing the collection.\r\n   */\n\n\n  matchCollectionFromFieldName(fieldName) {\n    return this.pathTemplates.fieldPathTemplate.match(fieldName).collection;\n  }\n  /**\r\n   * Parse the field from Field resource.\r\n   *\r\n   * @param {string} fieldName\r\n   *   A fully-qualified path representing Field resource.\r\n   * @returns {string} A string representing the field.\r\n   */\n\n\n  matchFieldFromFieldName(fieldName) {\n    return this.pathTemplates.fieldPathTemplate.match(fieldName).field;\n  }\n  /**\r\n   * Return a fully-qualified index resource name string.\r\n   *\r\n   * @param {string} project\r\n   * @param {string} database\r\n   * @param {string} collection\r\n   * @param {string} index\r\n   * @returns {string} Resource name string.\r\n   */\n\n\n  indexPath(project, database, collection, index) {\n    return this.pathTemplates.indexPathTemplate.render({\n      project: project,\n      database: database,\n      collection: collection,\n      index: index\n    });\n  }\n  /**\r\n   * Parse the project from Index resource.\r\n   *\r\n   * @param {string} indexName\r\n   *   A fully-qualified path representing Index resource.\r\n   * @returns {string} A string representing the project.\r\n   */\n\n\n  matchProjectFromIndexName(indexName) {\n    return this.pathTemplates.indexPathTemplate.match(indexName).project;\n  }\n  /**\r\n   * Parse the database from Index resource.\r\n   *\r\n   * @param {string} indexName\r\n   *   A fully-qualified path representing Index resource.\r\n   * @returns {string} A string representing the database.\r\n   */\n\n\n  matchDatabaseFromIndexName(indexName) {\n    return this.pathTemplates.indexPathTemplate.match(indexName).database;\n  }\n  /**\r\n   * Parse the collection from Index resource.\r\n   *\r\n   * @param {string} indexName\r\n   *   A fully-qualified path representing Index resource.\r\n   * @returns {string} A string representing the collection.\r\n   */\n\n\n  matchCollectionFromIndexName(indexName) {\n    return this.pathTemplates.indexPathTemplate.match(indexName).collection;\n  }\n  /**\r\n   * Parse the index from Index resource.\r\n   *\r\n   * @param {string} indexName\r\n   *   A fully-qualified path representing Index resource.\r\n   * @returns {string} A string representing the index.\r\n   */\n\n\n  matchIndexFromIndexName(indexName) {\n    return this.pathTemplates.indexPathTemplate.match(indexName).index;\n  }\n  /**\r\n   * Terminate the gRPC channel and close the client.\r\n   *\r\n   * The client will no longer be usable and all future behavior is undefined.\r\n   * @returns {Promise} A promise that resolves when the client is closed.\r\n   */\n\n\n  close() {\n    this.initialize();\n\n    if (!this._terminated) {\n      return this.firestoreAdminStub.then(stub => {\n        this._terminated = true;\n        stub.close();\n      });\n    }\n\n    return Promise.resolve();\n  }\n\n}\n\nexports.FirestoreAdminClient = FirestoreAdminClient;","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Backend/node_modules/@google-cloud/firestore/build/src/v1/firestore_admin_client.js"],"names":["Object","defineProperty","exports","value","gax","require","path","gapicConfig","google_gax_1","version","FirestoreAdminClient","constructor","opts","_a","_b","_terminated","descriptors","page","stream","longrunning","batching","staticMembers","servicePath","apiEndpoint","port","clientConfig","fallback","window","fetch","assign","scopes","_gaxModule","_gaxGrpc","GrpcClient","_opts","auth","defaultScopes","clientHeader","process","push","versions","node","grpcVersion","libName","libVersion","nodejsProtoPath","join","__dirname","_protos","loadProto","pathTemplates","collectionGroupPathTemplate","PathTemplate","databasePathTemplate","fieldPathTemplate","indexPathTemplate","listIndexes","PageDescriptor","listFields","protoFilesRoot","protobuf","Root","fromJSON","loadSync","operationsClient","lro","grpc","undefined","createIndexResponse","lookup","createIndexMetadata","updateFieldResponse","updateFieldMetadata","exportDocumentsResponse","exportDocumentsMetadata","importDocumentsResponse","importDocumentsMetadata","createIndex","LongrunningDescriptor","decode","bind","updateField","exportDocuments","importDocuments","_defaults","constructSettings","innerApiCalls","initialize","firestoreAdminStub","createStub","lookupService","google","firestore","admin","v1","FirestoreAdmin","firestoreAdminStubMethods","methodName","callPromise","then","stub","args","Promise","reject","func","apply","err","descriptor","apiCall","createApiCall","getProjectId","callback","getIndex","request","optionsOrCallback","options","otherArgs","headers","routingHeader","fromParams","name","deleteIndex","getField","parent","checkCreateIndexProgress","operationsProtos","GetOperationRequest","operation","getOperation","decodeOperation","Operation","createDefaultBackoffSettings","field","checkUpdateFieldProgress","checkExportDocumentsProgress","checkImportDocumentsProgress","listIndexesStream","callSettings","CallSettings","createStream","listIndexesAsync","asyncIterate","listFieldsStream","listFieldsAsync","collectionGroupPath","project","database","collection","render","matchProjectFromCollectionGroupName","collectionGroupName","match","matchDatabaseFromCollectionGroupName","matchCollectionFromCollectionGroupName","databasePath","matchProjectFromDatabaseName","databaseName","matchDatabaseFromDatabaseName","fieldPath","matchProjectFromFieldName","fieldName","matchDatabaseFromFieldName","matchCollectionFromFieldName","matchFieldFromFieldName","indexPath","index","matchProjectFromIndexName","indexName","matchDatabaseFromIndexName","matchCollectionFromIndexName","matchIndexFromIndexName","close","resolve"],"mappings":"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","sourcesContent":["\"use strict\";\r\n// Copyright 2020 Google LLC\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     https://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n//\r\n// ** This file is automatically generated by gapic-generator-typescript. **\r\n// ** https://github.com/googleapis/gapic-generator-typescript **\r\n// ** All changes to this file may be overwritten. **\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/* global window */\r\nconst gax = require(\"google-gax\");\r\nconst path = require(\"path\");\r\n/**\r\n * Client JSON configuration object, loaded from\r\n * `src/v1/firestore_admin_client_config.json`.\r\n * This file defines retry strategy and timeouts for all API methods in this library.\r\n */\r\nconst gapicConfig = require(\"./firestore_admin_client_config.json\");\r\nconst google_gax_1 = require(\"google-gax\");\r\nconst version = require('../../../package.json').version;\r\n/**\r\n *  Operations are created by service `FirestoreAdmin`, but are accessed via\r\n *  service `google.longrunning.Operations`.\r\n * @class\r\n * @memberof v1\r\n */\r\nclass FirestoreAdminClient {\r\n    /**\r\n     * Construct an instance of FirestoreAdminClient.\r\n     *\r\n     * @param {object} [options] - The configuration object.\r\n     * The options accepted by the constructor are described in detail\r\n     * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).\r\n     * The common options are:\r\n     * @param {object} [options.credentials] - Credentials object.\r\n     * @param {string} [options.credentials.client_email]\r\n     * @param {string} [options.credentials.private_key]\r\n     * @param {string} [options.email] - Account email address. Required when\r\n     *     using a .pem or .p12 keyFilename.\r\n     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\r\n     *     .p12 key downloaded from the Google Developers Console. If you provide\r\n     *     a path to a JSON file, the projectId option below is not necessary.\r\n     *     NOTE: .pem and .p12 require you to specify options.email as well.\r\n     * @param {number} [options.port] - The port on which to connect to\r\n     *     the remote host.\r\n     * @param {string} [options.projectId] - The project ID from the Google\r\n     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\r\n     *     the environment variable GCLOUD_PROJECT for your project ID. If your\r\n     *     app is running in an environment which supports\r\n     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\r\n     *     your project ID will be detected automatically.\r\n     * @param {string} [options.apiEndpoint] - The domain name of the\r\n     *     API remote host.\r\n     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.\r\n     *     Follows the structure of {@link gapicConfig}.\r\n     * @param {boolean} [options.fallback] - Use HTTP fallback mode.\r\n     *     In fallback mode, a special browser-compatible transport implementation is used\r\n     *     instead of gRPC transport. In browser context (if the `window` object is defined)\r\n     *     the fallback mode is enabled automatically; set `options.fallback` to `false`\r\n     *     if you need to override this behavior.\r\n     */\r\n    constructor(opts) {\r\n        var _a, _b;\r\n        this._terminated = false;\r\n        this.descriptors = {\r\n            page: {},\r\n            stream: {},\r\n            longrunning: {},\r\n            batching: {},\r\n        };\r\n        // Ensure that options include all the required fields.\r\n        const staticMembers = this.constructor;\r\n        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;\r\n        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;\r\n        const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};\r\n        const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');\r\n        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);\r\n        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.\r\n        if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {\r\n            opts['scopes'] = staticMembers.scopes;\r\n        }\r\n        // Choose either gRPC or proto-over-HTTP implementation of google-gax.\r\n        this._gaxModule = opts.fallback ? gax.fallback : gax;\r\n        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.\r\n        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);\r\n        // Save options to use in initialize() method.\r\n        this._opts = opts;\r\n        // Save the auth object to the client, for use by other methods.\r\n        this.auth = this._gaxGrpc.auth;\r\n        // Set the default scopes in auth client if needed.\r\n        if (servicePath === staticMembers.servicePath) {\r\n            this.auth.defaultScopes = staticMembers.scopes;\r\n        }\r\n        // Determine the client header string.\r\n        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];\r\n        if (typeof process !== 'undefined' && 'versions' in process) {\r\n            clientHeader.push(`gl-node/${process.versions.node}`);\r\n        }\r\n        else {\r\n            clientHeader.push(`gl-web/${this._gaxModule.version}`);\r\n        }\r\n        if (!opts.fallback) {\r\n            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);\r\n        }\r\n        if (opts.libName && opts.libVersion) {\r\n            clientHeader.push(`${opts.libName}/${opts.libVersion}`);\r\n        }\r\n        // Load the applicable protos.\r\n        // For Node.js, pass the path to JSON proto file.\r\n        // For browsers, pass the JSON content.\r\n        const nodejsProtoPath = path.join(__dirname, '..', '..', 'protos', 'protos.json');\r\n        this._protos = this._gaxGrpc.loadProto(opts.fallback\r\n            ? // eslint-disable-next-line @typescript-eslint/no-var-requires\r\n                require('../../protos/protos.json')\r\n            : nodejsProtoPath);\r\n        // This API contains \"path templates\"; forward-slash-separated\r\n        // identifiers to uniquely identify resources within the API.\r\n        // Create useful helper objects for these.\r\n        this.pathTemplates = {\r\n            collectionGroupPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/databases/{database}/collectionGroups/{collection}'),\r\n            databasePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/databases/{database}'),\r\n            fieldPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/databases/{database}/collectionGroups/{collection}/fields/{field}'),\r\n            indexPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/databases/{database}/collectionGroups/{collection}/indexes/{index}'),\r\n        };\r\n        // Some of the methods on this service return \"paged\" results,\r\n        // (e.g. 50 results at a time, with tokens to get subsequent\r\n        // pages). Denote the keys used for pagination and results.\r\n        this.descriptors.page = {\r\n            listIndexes: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'indexes'),\r\n            listFields: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'fields'),\r\n        };\r\n        // This API contains \"long-running operations\", which return a\r\n        // an Operation object that allows for tracking of the operation,\r\n        // rather than holding a request open.\r\n        const protoFilesRoot = opts.fallback\r\n            ? this._gaxModule.protobuf.Root.fromJSON(\r\n            // eslint-disable-next-line @typescript-eslint/no-var-requires\r\n            require('../../protos/protos.json'))\r\n            : this._gaxModule.protobuf.loadSync(nodejsProtoPath);\r\n        this.operationsClient = this._gaxModule\r\n            .lro({\r\n            auth: this.auth,\r\n            grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,\r\n        })\r\n            .operationsClient(opts);\r\n        const createIndexResponse = protoFilesRoot.lookup('.google.firestore.admin.v1.Index');\r\n        const createIndexMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.IndexOperationMetadata');\r\n        const updateFieldResponse = protoFilesRoot.lookup('.google.firestore.admin.v1.Field');\r\n        const updateFieldMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.FieldOperationMetadata');\r\n        const exportDocumentsResponse = protoFilesRoot.lookup('.google.firestore.admin.v1.ExportDocumentsResponse');\r\n        const exportDocumentsMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.ExportDocumentsMetadata');\r\n        const importDocumentsResponse = protoFilesRoot.lookup('.google.protobuf.Empty');\r\n        const importDocumentsMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.ImportDocumentsMetadata');\r\n        this.descriptors.longrunning = {\r\n            createIndex: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createIndexResponse.decode.bind(createIndexResponse), createIndexMetadata.decode.bind(createIndexMetadata)),\r\n            updateField: new this._gaxModule.LongrunningDescriptor(this.operationsClient, updateFieldResponse.decode.bind(updateFieldResponse), updateFieldMetadata.decode.bind(updateFieldMetadata)),\r\n            exportDocuments: new this._gaxModule.LongrunningDescriptor(this.operationsClient, exportDocumentsResponse.decode.bind(exportDocumentsResponse), exportDocumentsMetadata.decode.bind(exportDocumentsMetadata)),\r\n            importDocuments: new this._gaxModule.LongrunningDescriptor(this.operationsClient, importDocumentsResponse.decode.bind(importDocumentsResponse), importDocumentsMetadata.decode.bind(importDocumentsMetadata)),\r\n        };\r\n        // Put together the default options sent with requests.\r\n        this._defaults = this._gaxGrpc.constructSettings('google.firestore.admin.v1.FirestoreAdmin', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });\r\n        // Set up a dictionary of \"inner API calls\"; the core implementation\r\n        // of calling the API is handled in `google-gax`, with this code\r\n        // merely providing the destination and request information.\r\n        this.innerApiCalls = {};\r\n    }\r\n    /**\r\n     * Initialize the client.\r\n     * Performs asynchronous operations (such as authentication) and prepares the client.\r\n     * This function will be called automatically when any class method is called for the\r\n     * first time, but if you need to initialize it before calling an actual method,\r\n     * feel free to call initialize() directly.\r\n     *\r\n     * You can await on this method if you want to make sure the client is initialized.\r\n     *\r\n     * @returns {Promise} A promise that resolves to an authenticated service stub.\r\n     */\r\n    initialize() {\r\n        // If the client stub promise is already initialized, return immediately.\r\n        if (this.firestoreAdminStub) {\r\n            return this.firestoreAdminStub;\r\n        }\r\n        // Put together the \"service stub\" for\r\n        // google.firestore.admin.v1.FirestoreAdmin.\r\n        this.firestoreAdminStub = this._gaxGrpc.createStub(this._opts.fallback\r\n            ? this._protos.lookupService('google.firestore.admin.v1.FirestoreAdmin')\r\n            : // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                this._protos.google.firestore.admin.v1.FirestoreAdmin, this._opts);\r\n        // Iterate over each of the methods that the service provides\r\n        // and create an API call method for each.\r\n        const firestoreAdminStubMethods = [\r\n            'createIndex',\r\n            'listIndexes',\r\n            'getIndex',\r\n            'deleteIndex',\r\n            'getField',\r\n            'updateField',\r\n            'listFields',\r\n            'exportDocuments',\r\n            'importDocuments',\r\n        ];\r\n        for (const methodName of firestoreAdminStubMethods) {\r\n            const callPromise = this.firestoreAdminStub.then(stub => (...args) => {\r\n                if (this._terminated) {\r\n                    return Promise.reject('The client has already been closed.');\r\n                }\r\n                const func = stub[methodName];\r\n                return func.apply(stub, args);\r\n            }, (err) => () => {\r\n                throw err;\r\n            });\r\n            const descriptor = this.descriptors.page[methodName] ||\r\n                this.descriptors.longrunning[methodName] ||\r\n                undefined;\r\n            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor);\r\n            this.innerApiCalls[methodName] = apiCall;\r\n        }\r\n        return this.firestoreAdminStub;\r\n    }\r\n    /**\r\n     * The DNS address for this API service.\r\n     * @returns {string} The DNS address for this service.\r\n     */\r\n    static get servicePath() {\r\n        return 'firestore.googleapis.com';\r\n    }\r\n    /**\r\n     * The DNS address for this API service - same as servicePath(),\r\n     * exists for compatibility reasons.\r\n     * @returns {string} The DNS address for this service.\r\n     */\r\n    static get apiEndpoint() {\r\n        return 'firestore.googleapis.com';\r\n    }\r\n    /**\r\n     * The port for this API service.\r\n     * @returns {number} The default port for this service.\r\n     */\r\n    static get port() {\r\n        return 443;\r\n    }\r\n    /**\r\n     * The scopes needed to make gRPC calls for every method defined\r\n     * in this service.\r\n     * @returns {string[]} List of default scopes.\r\n     */\r\n    static get scopes() {\r\n        return [\r\n            'https://www.googleapis.com/auth/cloud-platform',\r\n            'https://www.googleapis.com/auth/datastore',\r\n        ];\r\n    }\r\n    /**\r\n     * Return the project ID used by this class.\r\n     * @returns {Promise} A promise that resolves to string containing the project ID.\r\n     */\r\n    getProjectId(callback) {\r\n        if (callback) {\r\n            this.auth.getProjectId(callback);\r\n            return;\r\n        }\r\n        return this.auth.getProjectId();\r\n    }\r\n    /**\r\n     * Gets a composite index.\r\n     *\r\n     * @param {Object} request\r\n     *   The request object that will be sent.\r\n     * @param {string} request.name\r\n     *   Required. A name of the form\r\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`\r\n     * @param {object} [options]\r\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\r\n     * @returns {Promise} - The promise which resolves to an array.\r\n     *   The first element of the array is an object representing [Index]{@link google.firestore.admin.v1.Index}.\r\n     *   Please see the\r\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\r\n     *   for more details and examples.\r\n     * @example\r\n     * const [response] = await client.getIndex(request);\r\n     */\r\n    getIndex(request, optionsOrCallback, callback) {\r\n        request = request || {};\r\n        let options;\r\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\r\n            callback = optionsOrCallback;\r\n            options = {};\r\n        }\r\n        else {\r\n            options = optionsOrCallback;\r\n        }\r\n        options = options || {};\r\n        options.otherArgs = options.otherArgs || {};\r\n        options.otherArgs.headers = options.otherArgs.headers || {};\r\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\r\n            name: request.name || '',\r\n        });\r\n        this.initialize();\r\n        return this.innerApiCalls.getIndex(request, options, callback);\r\n    }\r\n    /**\r\n     * Deletes a composite index.\r\n     *\r\n     * @param {Object} request\r\n     *   The request object that will be sent.\r\n     * @param {string} request.name\r\n     *   Required. A name of the form\r\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`\r\n     * @param {object} [options]\r\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\r\n     * @returns {Promise} - The promise which resolves to an array.\r\n     *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.\r\n     *   Please see the\r\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\r\n     *   for more details and examples.\r\n     * @example\r\n     * const [response] = await client.deleteIndex(request);\r\n     */\r\n    deleteIndex(request, optionsOrCallback, callback) {\r\n        request = request || {};\r\n        let options;\r\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\r\n            callback = optionsOrCallback;\r\n            options = {};\r\n        }\r\n        else {\r\n            options = optionsOrCallback;\r\n        }\r\n        options = options || {};\r\n        options.otherArgs = options.otherArgs || {};\r\n        options.otherArgs.headers = options.otherArgs.headers || {};\r\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\r\n            name: request.name || '',\r\n        });\r\n        this.initialize();\r\n        return this.innerApiCalls.deleteIndex(request, options, callback);\r\n    }\r\n    /**\r\n     * Gets the metadata and configuration for a Field.\r\n     *\r\n     * @param {Object} request\r\n     *   The request object that will be sent.\r\n     * @param {string} request.name\r\n     *   Required. A name of the form\r\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_id}`\r\n     * @param {object} [options]\r\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\r\n     * @returns {Promise} - The promise which resolves to an array.\r\n     *   The first element of the array is an object representing [Field]{@link google.firestore.admin.v1.Field}.\r\n     *   Please see the\r\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\r\n     *   for more details and examples.\r\n     * @example\r\n     * const [response] = await client.getField(request);\r\n     */\r\n    getField(request, optionsOrCallback, callback) {\r\n        request = request || {};\r\n        let options;\r\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\r\n            callback = optionsOrCallback;\r\n            options = {};\r\n        }\r\n        else {\r\n            options = optionsOrCallback;\r\n        }\r\n        options = options || {};\r\n        options.otherArgs = options.otherArgs || {};\r\n        options.otherArgs.headers = options.otherArgs.headers || {};\r\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\r\n            name: request.name || '',\r\n        });\r\n        this.initialize();\r\n        return this.innerApiCalls.getField(request, options, callback);\r\n    }\r\n    /**\r\n     * Creates a composite index. This returns a {@link google.longrunning.Operation|google.longrunning.Operation}\r\n     * which may be used to track the status of the creation. The metadata for\r\n     * the operation will be the type {@link google.firestore.admin.v1.IndexOperationMetadata|IndexOperationMetadata}.\r\n     *\r\n     * @param {Object} request\r\n     *   The request object that will be sent.\r\n     * @param {string} request.parent\r\n     *   Required. A parent name of the form\r\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\r\n     * @param {google.firestore.admin.v1.Index} request.index\r\n     *   Required. The composite index to create.\r\n     * @param {object} [options]\r\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\r\n     * @returns {Promise} - The promise which resolves to an array.\r\n     *   The first element of the array is an object representing\r\n     *   a long running operation. Its `promise()` method returns a promise\r\n     *   you can `await` for.\r\n     *   Please see the\r\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\r\n     *   for more details and examples.\r\n     * @example\r\n     * const [operation] = await client.createIndex(request);\r\n     * const [response] = await operation.promise();\r\n     */\r\n    createIndex(request, optionsOrCallback, callback) {\r\n        request = request || {};\r\n        let options;\r\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\r\n            callback = optionsOrCallback;\r\n            options = {};\r\n        }\r\n        else {\r\n            options = optionsOrCallback;\r\n        }\r\n        options = options || {};\r\n        options.otherArgs = options.otherArgs || {};\r\n        options.otherArgs.headers = options.otherArgs.headers || {};\r\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\r\n            parent: request.parent || '',\r\n        });\r\n        this.initialize();\r\n        return this.innerApiCalls.createIndex(request, options, callback);\r\n    }\r\n    /**\r\n     * Check the status of the long running operation returned by `createIndex()`.\r\n     * @param {String} name\r\n     *   The operation name that will be passed.\r\n     * @returns {Promise} - The promise which resolves to an object.\r\n     *   The decoded operation object has result and metadata field to get information from.\r\n     *   Please see the\r\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\r\n     *   for more details and examples.\r\n     * @example\r\n     * const decodedOperation = await checkCreateIndexProgress(name);\r\n     * console.log(decodedOperation.result);\r\n     * console.log(decodedOperation.done);\r\n     * console.log(decodedOperation.metadata);\r\n     */\r\n    async checkCreateIndexProgress(name) {\r\n        const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({ name });\r\n        const [operation] = await this.operationsClient.getOperation(request);\r\n        const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.createIndex, gax.createDefaultBackoffSettings());\r\n        return decodeOperation;\r\n    }\r\n    /**\r\n     * Updates a field configuration. Currently, field updates apply only to\r\n     * single field index configuration. However, calls to\r\n     * {@link google.firestore.admin.v1.FirestoreAdmin.UpdateField|FirestoreAdmin.UpdateField} should provide a field mask to avoid\r\n     * changing any configuration that the caller isn't aware of. The field mask\r\n     * should be specified as: `{ paths: \"index_config\" }`.\r\n     *\r\n     * This call returns a {@link google.longrunning.Operation|google.longrunning.Operation} which may be used to\r\n     * track the status of the field update. The metadata for\r\n     * the operation will be the type {@link google.firestore.admin.v1.FieldOperationMetadata|FieldOperationMetadata}.\r\n     *\r\n     * To configure the default field settings for the database, use\r\n     * the special `Field` with resource name:\r\n     * `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/*`.\r\n     *\r\n     * @param {Object} request\r\n     *   The request object that will be sent.\r\n     * @param {google.firestore.admin.v1.Field} request.field\r\n     *   Required. The field to be updated.\r\n     * @param {google.protobuf.FieldMask} request.updateMask\r\n     *   A mask, relative to the field. If specified, only configuration specified\r\n     *   by this field_mask will be updated in the field.\r\n     * @param {object} [options]\r\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\r\n     * @returns {Promise} - The promise which resolves to an array.\r\n     *   The first element of the array is an object representing\r\n     *   a long running operation. Its `promise()` method returns a promise\r\n     *   you can `await` for.\r\n     *   Please see the\r\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\r\n     *   for more details and examples.\r\n     * @example\r\n     * const [operation] = await client.updateField(request);\r\n     * const [response] = await operation.promise();\r\n     */\r\n    updateField(request, optionsOrCallback, callback) {\r\n        request = request || {};\r\n        let options;\r\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\r\n            callback = optionsOrCallback;\r\n            options = {};\r\n        }\r\n        else {\r\n            options = optionsOrCallback;\r\n        }\r\n        options = options || {};\r\n        options.otherArgs = options.otherArgs || {};\r\n        options.otherArgs.headers = options.otherArgs.headers || {};\r\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\r\n            'field.name': request.field.name || '',\r\n        });\r\n        this.initialize();\r\n        return this.innerApiCalls.updateField(request, options, callback);\r\n    }\r\n    /**\r\n     * Check the status of the long running operation returned by `updateField()`.\r\n     * @param {String} name\r\n     *   The operation name that will be passed.\r\n     * @returns {Promise} - The promise which resolves to an object.\r\n     *   The decoded operation object has result and metadata field to get information from.\r\n     *   Please see the\r\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\r\n     *   for more details and examples.\r\n     * @example\r\n     * const decodedOperation = await checkUpdateFieldProgress(name);\r\n     * console.log(decodedOperation.result);\r\n     * console.log(decodedOperation.done);\r\n     * console.log(decodedOperation.metadata);\r\n     */\r\n    async checkUpdateFieldProgress(name) {\r\n        const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({ name });\r\n        const [operation] = await this.operationsClient.getOperation(request);\r\n        const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.updateField, gax.createDefaultBackoffSettings());\r\n        return decodeOperation;\r\n    }\r\n    /**\r\n     * Exports a copy of all or a subset of documents from Google Cloud Firestore\r\n     * to another storage system, such as Google Cloud Storage. Recent updates to\r\n     * documents may not be reflected in the export. The export occurs in the\r\n     * background and its progress can be monitored and managed via the\r\n     * Operation resource that is created. The output of an export may only be\r\n     * used once the associated operation is done. If an export operation is\r\n     * cancelled before completion it may leave partial data behind in Google\r\n     * Cloud Storage.\r\n     *\r\n     * @param {Object} request\r\n     *   The request object that will be sent.\r\n     * @param {string} request.name\r\n     *   Required. Database to export. Should be of the form:\r\n     *   `projects/{project_id}/databases/{database_id}`.\r\n     * @param {string[]} request.collectionIds\r\n     *   Which collection ids to export. Unspecified means all collections.\r\n     * @param {string} request.outputUriPrefix\r\n     *   The output URI. Currently only supports Google Cloud Storage URIs of the\r\n     *   form: `gs://BUCKET_NAME[/NAMESPACE_PATH]`, where `BUCKET_NAME` is the name\r\n     *   of the Google Cloud Storage bucket and `NAMESPACE_PATH` is an optional\r\n     *   Google Cloud Storage namespace path. When\r\n     *   choosing a name, be sure to consider Google Cloud Storage naming\r\n     *   guidelines: https://cloud.google.com/storage/docs/naming.\r\n     *   If the URI is a bucket (without a namespace path), a prefix will be\r\n     *   generated based on the start time.\r\n     * @param {object} [options]\r\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\r\n     * @returns {Promise} - The promise which resolves to an array.\r\n     *   The first element of the array is an object representing\r\n     *   a long running operation. Its `promise()` method returns a promise\r\n     *   you can `await` for.\r\n     *   Please see the\r\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\r\n     *   for more details and examples.\r\n     * @example\r\n     * const [operation] = await client.exportDocuments(request);\r\n     * const [response] = await operation.promise();\r\n     */\r\n    exportDocuments(request, optionsOrCallback, callback) {\r\n        request = request || {};\r\n        let options;\r\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\r\n            callback = optionsOrCallback;\r\n            options = {};\r\n        }\r\n        else {\r\n            options = optionsOrCallback;\r\n        }\r\n        options = options || {};\r\n        options.otherArgs = options.otherArgs || {};\r\n        options.otherArgs.headers = options.otherArgs.headers || {};\r\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\r\n            name: request.name || '',\r\n        });\r\n        this.initialize();\r\n        return this.innerApiCalls.exportDocuments(request, options, callback);\r\n    }\r\n    /**\r\n     * Check the status of the long running operation returned by `exportDocuments()`.\r\n     * @param {String} name\r\n     *   The operation name that will be passed.\r\n     * @returns {Promise} - The promise which resolves to an object.\r\n     *   The decoded operation object has result and metadata field to get information from.\r\n     *   Please see the\r\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\r\n     *   for more details and examples.\r\n     * @example\r\n     * const decodedOperation = await checkExportDocumentsProgress(name);\r\n     * console.log(decodedOperation.result);\r\n     * console.log(decodedOperation.done);\r\n     * console.log(decodedOperation.metadata);\r\n     */\r\n    async checkExportDocumentsProgress(name) {\r\n        const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({ name });\r\n        const [operation] = await this.operationsClient.getOperation(request);\r\n        const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.exportDocuments, gax.createDefaultBackoffSettings());\r\n        return decodeOperation;\r\n    }\r\n    /**\r\n     * Imports documents into Google Cloud Firestore. Existing documents with the\r\n     * same name are overwritten. The import occurs in the background and its\r\n     * progress can be monitored and managed via the Operation resource that is\r\n     * created. If an ImportDocuments operation is cancelled, it is possible\r\n     * that a subset of the data has already been imported to Cloud Firestore.\r\n     *\r\n     * @param {Object} request\r\n     *   The request object that will be sent.\r\n     * @param {string} request.name\r\n     *   Required. Database to import into. Should be of the form:\r\n     *   `projects/{project_id}/databases/{database_id}`.\r\n     * @param {string[]} request.collectionIds\r\n     *   Which collection ids to import. Unspecified means all collections included\r\n     *   in the import.\r\n     * @param {string} request.inputUriPrefix\r\n     *   Location of the exported files.\r\n     *   This must match the output_uri_prefix of an ExportDocumentsResponse from\r\n     *   an export that has completed successfully.\r\n     *   See:\r\n     *   {@link google.firestore.admin.v1.ExportDocumentsResponse.output_uri_prefix|google.firestore.admin.v1.ExportDocumentsResponse.output_uri_prefix}.\r\n     * @param {object} [options]\r\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\r\n     * @returns {Promise} - The promise which resolves to an array.\r\n     *   The first element of the array is an object representing\r\n     *   a long running operation. Its `promise()` method returns a promise\r\n     *   you can `await` for.\r\n     *   Please see the\r\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\r\n     *   for more details and examples.\r\n     * @example\r\n     * const [operation] = await client.importDocuments(request);\r\n     * const [response] = await operation.promise();\r\n     */\r\n    importDocuments(request, optionsOrCallback, callback) {\r\n        request = request || {};\r\n        let options;\r\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\r\n            callback = optionsOrCallback;\r\n            options = {};\r\n        }\r\n        else {\r\n            options = optionsOrCallback;\r\n        }\r\n        options = options || {};\r\n        options.otherArgs = options.otherArgs || {};\r\n        options.otherArgs.headers = options.otherArgs.headers || {};\r\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\r\n            name: request.name || '',\r\n        });\r\n        this.initialize();\r\n        return this.innerApiCalls.importDocuments(request, options, callback);\r\n    }\r\n    /**\r\n     * Check the status of the long running operation returned by `importDocuments()`.\r\n     * @param {String} name\r\n     *   The operation name that will be passed.\r\n     * @returns {Promise} - The promise which resolves to an object.\r\n     *   The decoded operation object has result and metadata field to get information from.\r\n     *   Please see the\r\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\r\n     *   for more details and examples.\r\n     * @example\r\n     * const decodedOperation = await checkImportDocumentsProgress(name);\r\n     * console.log(decodedOperation.result);\r\n     * console.log(decodedOperation.done);\r\n     * console.log(decodedOperation.metadata);\r\n     */\r\n    async checkImportDocumentsProgress(name) {\r\n        const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({ name });\r\n        const [operation] = await this.operationsClient.getOperation(request);\r\n        const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.importDocuments, gax.createDefaultBackoffSettings());\r\n        return decodeOperation;\r\n    }\r\n    /**\r\n     * Lists composite indexes.\r\n     *\r\n     * @param {Object} request\r\n     *   The request object that will be sent.\r\n     * @param {string} request.parent\r\n     *   Required. A parent name of the form\r\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\r\n     * @param {string} request.filter\r\n     *   The filter to apply to list results.\r\n     * @param {number} request.pageSize\r\n     *   The number of results to return.\r\n     * @param {string} request.pageToken\r\n     *   A page token, returned from a previous call to\r\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListIndexes|FirestoreAdmin.ListIndexes}, that may be used to get the next\r\n     *   page of results.\r\n     * @param {object} [options]\r\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\r\n     * @returns {Promise} - The promise which resolves to an array.\r\n     *   The first element of the array is Array of [Index]{@link google.firestore.admin.v1.Index}.\r\n     *   The client library will perform auto-pagination by default: it will call the API as many\r\n     *   times as needed and will merge results from all the pages into this array.\r\n     *   Note that it can affect your quota.\r\n     *   We recommend using `listIndexesAsync()`\r\n     *   method described below for async iteration which you can stop as needed.\r\n     *   Please see the\r\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\r\n     *   for more details and examples.\r\n     */\r\n    listIndexes(request, optionsOrCallback, callback) {\r\n        request = request || {};\r\n        let options;\r\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\r\n            callback = optionsOrCallback;\r\n            options = {};\r\n        }\r\n        else {\r\n            options = optionsOrCallback;\r\n        }\r\n        options = options || {};\r\n        options.otherArgs = options.otherArgs || {};\r\n        options.otherArgs.headers = options.otherArgs.headers || {};\r\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\r\n            parent: request.parent || '',\r\n        });\r\n        this.initialize();\r\n        return this.innerApiCalls.listIndexes(request, options, callback);\r\n    }\r\n    /**\r\n     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\r\n     * @param {Object} request\r\n     *   The request object that will be sent.\r\n     * @param {string} request.parent\r\n     *   Required. A parent name of the form\r\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\r\n     * @param {string} request.filter\r\n     *   The filter to apply to list results.\r\n     * @param {number} request.pageSize\r\n     *   The number of results to return.\r\n     * @param {string} request.pageToken\r\n     *   A page token, returned from a previous call to\r\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListIndexes|FirestoreAdmin.ListIndexes}, that may be used to get the next\r\n     *   page of results.\r\n     * @param {object} [options]\r\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\r\n     * @returns {Stream}\r\n     *   An object stream which emits an object representing [Index]{@link google.firestore.admin.v1.Index} on 'data' event.\r\n     *   The client library will perform auto-pagination by default: it will call the API as many\r\n     *   times as needed. Note that it can affect your quota.\r\n     *   We recommend using `listIndexesAsync()`\r\n     *   method described below for async iteration which you can stop as needed.\r\n     *   Please see the\r\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\r\n     *   for more details and examples.\r\n     */\r\n    listIndexesStream(request, options) {\r\n        request = request || {};\r\n        options = options || {};\r\n        options.otherArgs = options.otherArgs || {};\r\n        options.otherArgs.headers = options.otherArgs.headers || {};\r\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\r\n            parent: request.parent || '',\r\n        });\r\n        const callSettings = new gax.CallSettings(options);\r\n        this.initialize();\r\n        return this.descriptors.page.listIndexes.createStream(this.innerApiCalls.listIndexes, request, callSettings);\r\n    }\r\n    /**\r\n     * Equivalent to `listIndexes`, but returns an iterable object.\r\n     *\r\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\r\n     * @param {Object} request\r\n     *   The request object that will be sent.\r\n     * @param {string} request.parent\r\n     *   Required. A parent name of the form\r\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\r\n     * @param {string} request.filter\r\n     *   The filter to apply to list results.\r\n     * @param {number} request.pageSize\r\n     *   The number of results to return.\r\n     * @param {string} request.pageToken\r\n     *   A page token, returned from a previous call to\r\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListIndexes|FirestoreAdmin.ListIndexes}, that may be used to get the next\r\n     *   page of results.\r\n     * @param {object} [options]\r\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\r\n     * @returns {Object}\r\n     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).\r\n     *   When you iterate the returned iterable, each element will be an object representing\r\n     *   [Index]{@link google.firestore.admin.v1.Index}. The API will be called under the hood as needed, once per the page,\r\n     *   so you can stop the iteration when you don't need more results.\r\n     *   Please see the\r\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\r\n     *   for more details and examples.\r\n     * @example\r\n     * const iterable = client.listIndexesAsync(request);\r\n     * for await (const response of iterable) {\r\n     *   // process response\r\n     * }\r\n     */\r\n    listIndexesAsync(request, options) {\r\n        request = request || {};\r\n        options = options || {};\r\n        options.otherArgs = options.otherArgs || {};\r\n        options.otherArgs.headers = options.otherArgs.headers || {};\r\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\r\n            parent: request.parent || '',\r\n        });\r\n        options = options || {};\r\n        const callSettings = new gax.CallSettings(options);\r\n        this.initialize();\r\n        return this.descriptors.page.listIndexes.asyncIterate(this.innerApiCalls['listIndexes'], request, callSettings);\r\n    }\r\n    /**\r\n     * Lists the field configuration and metadata for this database.\r\n     *\r\n     * Currently, {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} only supports listing fields\r\n     * that have been explicitly overridden. To issue this query, call\r\n     * {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} with the filter set to\r\n     * `indexConfig.usesAncestorConfig:false`.\r\n     *\r\n     * @param {Object} request\r\n     *   The request object that will be sent.\r\n     * @param {string} request.parent\r\n     *   Required. A parent name of the form\r\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\r\n     * @param {string} request.filter\r\n     *   The filter to apply to list results. Currently,\r\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} only supports listing fields\r\n     *   that have been explicitly overridden. To issue this query, call\r\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} with the filter set to\r\n     *   `indexConfig.usesAncestorConfig:false`.\r\n     * @param {number} request.pageSize\r\n     *   The number of results to return.\r\n     * @param {string} request.pageToken\r\n     *   A page token, returned from a previous call to\r\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields}, that may be used to get the next\r\n     *   page of results.\r\n     * @param {object} [options]\r\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\r\n     * @returns {Promise} - The promise which resolves to an array.\r\n     *   The first element of the array is Array of [Field]{@link google.firestore.admin.v1.Field}.\r\n     *   The client library will perform auto-pagination by default: it will call the API as many\r\n     *   times as needed and will merge results from all the pages into this array.\r\n     *   Note that it can affect your quota.\r\n     *   We recommend using `listFieldsAsync()`\r\n     *   method described below for async iteration which you can stop as needed.\r\n     *   Please see the\r\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\r\n     *   for more details and examples.\r\n     */\r\n    listFields(request, optionsOrCallback, callback) {\r\n        request = request || {};\r\n        let options;\r\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\r\n            callback = optionsOrCallback;\r\n            options = {};\r\n        }\r\n        else {\r\n            options = optionsOrCallback;\r\n        }\r\n        options = options || {};\r\n        options.otherArgs = options.otherArgs || {};\r\n        options.otherArgs.headers = options.otherArgs.headers || {};\r\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\r\n            parent: request.parent || '',\r\n        });\r\n        this.initialize();\r\n        return this.innerApiCalls.listFields(request, options, callback);\r\n    }\r\n    /**\r\n     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\r\n     * @param {Object} request\r\n     *   The request object that will be sent.\r\n     * @param {string} request.parent\r\n     *   Required. A parent name of the form\r\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\r\n     * @param {string} request.filter\r\n     *   The filter to apply to list results. Currently,\r\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} only supports listing fields\r\n     *   that have been explicitly overridden. To issue this query, call\r\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} with the filter set to\r\n     *   `indexConfig.usesAncestorConfig:false`.\r\n     * @param {number} request.pageSize\r\n     *   The number of results to return.\r\n     * @param {string} request.pageToken\r\n     *   A page token, returned from a previous call to\r\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields}, that may be used to get the next\r\n     *   page of results.\r\n     * @param {object} [options]\r\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\r\n     * @returns {Stream}\r\n     *   An object stream which emits an object representing [Field]{@link google.firestore.admin.v1.Field} on 'data' event.\r\n     *   The client library will perform auto-pagination by default: it will call the API as many\r\n     *   times as needed. Note that it can affect your quota.\r\n     *   We recommend using `listFieldsAsync()`\r\n     *   method described below for async iteration which you can stop as needed.\r\n     *   Please see the\r\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\r\n     *   for more details and examples.\r\n     */\r\n    listFieldsStream(request, options) {\r\n        request = request || {};\r\n        options = options || {};\r\n        options.otherArgs = options.otherArgs || {};\r\n        options.otherArgs.headers = options.otherArgs.headers || {};\r\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\r\n            parent: request.parent || '',\r\n        });\r\n        const callSettings = new gax.CallSettings(options);\r\n        this.initialize();\r\n        return this.descriptors.page.listFields.createStream(this.innerApiCalls.listFields, request, callSettings);\r\n    }\r\n    /**\r\n     * Equivalent to `listFields`, but returns an iterable object.\r\n     *\r\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\r\n     * @param {Object} request\r\n     *   The request object that will be sent.\r\n     * @param {string} request.parent\r\n     *   Required. A parent name of the form\r\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\r\n     * @param {string} request.filter\r\n     *   The filter to apply to list results. Currently,\r\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} only supports listing fields\r\n     *   that have been explicitly overridden. To issue this query, call\r\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} with the filter set to\r\n     *   `indexConfig.usesAncestorConfig:false`.\r\n     * @param {number} request.pageSize\r\n     *   The number of results to return.\r\n     * @param {string} request.pageToken\r\n     *   A page token, returned from a previous call to\r\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields}, that may be used to get the next\r\n     *   page of results.\r\n     * @param {object} [options]\r\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\r\n     * @returns {Object}\r\n     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).\r\n     *   When you iterate the returned iterable, each element will be an object representing\r\n     *   [Field]{@link google.firestore.admin.v1.Field}. The API will be called under the hood as needed, once per the page,\r\n     *   so you can stop the iteration when you don't need more results.\r\n     *   Please see the\r\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\r\n     *   for more details and examples.\r\n     * @example\r\n     * const iterable = client.listFieldsAsync(request);\r\n     * for await (const response of iterable) {\r\n     *   // process response\r\n     * }\r\n     */\r\n    listFieldsAsync(request, options) {\r\n        request = request || {};\r\n        options = options || {};\r\n        options.otherArgs = options.otherArgs || {};\r\n        options.otherArgs.headers = options.otherArgs.headers || {};\r\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\r\n            parent: request.parent || '',\r\n        });\r\n        options = options || {};\r\n        const callSettings = new gax.CallSettings(options);\r\n        this.initialize();\r\n        return this.descriptors.page.listFields.asyncIterate(this.innerApiCalls['listFields'], request, callSettings);\r\n    }\r\n    // --------------------\r\n    // -- Path templates --\r\n    // --------------------\r\n    /**\r\n     * Return a fully-qualified collectionGroup resource name string.\r\n     *\r\n     * @param {string} project\r\n     * @param {string} database\r\n     * @param {string} collection\r\n     * @returns {string} Resource name string.\r\n     */\r\n    collectionGroupPath(project, database, collection) {\r\n        return this.pathTemplates.collectionGroupPathTemplate.render({\r\n            project: project,\r\n            database: database,\r\n            collection: collection,\r\n        });\r\n    }\r\n    /**\r\n     * Parse the project from CollectionGroup resource.\r\n     *\r\n     * @param {string} collectionGroupName\r\n     *   A fully-qualified path representing CollectionGroup resource.\r\n     * @returns {string} A string representing the project.\r\n     */\r\n    matchProjectFromCollectionGroupName(collectionGroupName) {\r\n        return this.pathTemplates.collectionGroupPathTemplate.match(collectionGroupName).project;\r\n    }\r\n    /**\r\n     * Parse the database from CollectionGroup resource.\r\n     *\r\n     * @param {string} collectionGroupName\r\n     *   A fully-qualified path representing CollectionGroup resource.\r\n     * @returns {string} A string representing the database.\r\n     */\r\n    matchDatabaseFromCollectionGroupName(collectionGroupName) {\r\n        return this.pathTemplates.collectionGroupPathTemplate.match(collectionGroupName).database;\r\n    }\r\n    /**\r\n     * Parse the collection from CollectionGroup resource.\r\n     *\r\n     * @param {string} collectionGroupName\r\n     *   A fully-qualified path representing CollectionGroup resource.\r\n     * @returns {string} A string representing the collection.\r\n     */\r\n    matchCollectionFromCollectionGroupName(collectionGroupName) {\r\n        return this.pathTemplates.collectionGroupPathTemplate.match(collectionGroupName).collection;\r\n    }\r\n    /**\r\n     * Return a fully-qualified database resource name string.\r\n     *\r\n     * @param {string} project\r\n     * @param {string} database\r\n     * @returns {string} Resource name string.\r\n     */\r\n    databasePath(project, database) {\r\n        return this.pathTemplates.databasePathTemplate.render({\r\n            project: project,\r\n            database: database,\r\n        });\r\n    }\r\n    /**\r\n     * Parse the project from Database resource.\r\n     *\r\n     * @param {string} databaseName\r\n     *   A fully-qualified path representing Database resource.\r\n     * @returns {string} A string representing the project.\r\n     */\r\n    matchProjectFromDatabaseName(databaseName) {\r\n        return this.pathTemplates.databasePathTemplate.match(databaseName).project;\r\n    }\r\n    /**\r\n     * Parse the database from Database resource.\r\n     *\r\n     * @param {string} databaseName\r\n     *   A fully-qualified path representing Database resource.\r\n     * @returns {string} A string representing the database.\r\n     */\r\n    matchDatabaseFromDatabaseName(databaseName) {\r\n        return this.pathTemplates.databasePathTemplate.match(databaseName).database;\r\n    }\r\n    /**\r\n     * Return a fully-qualified field resource name string.\r\n     *\r\n     * @param {string} project\r\n     * @param {string} database\r\n     * @param {string} collection\r\n     * @param {string} field\r\n     * @returns {string} Resource name string.\r\n     */\r\n    fieldPath(project, database, collection, field) {\r\n        return this.pathTemplates.fieldPathTemplate.render({\r\n            project: project,\r\n            database: database,\r\n            collection: collection,\r\n            field: field,\r\n        });\r\n    }\r\n    /**\r\n     * Parse the project from Field resource.\r\n     *\r\n     * @param {string} fieldName\r\n     *   A fully-qualified path representing Field resource.\r\n     * @returns {string} A string representing the project.\r\n     */\r\n    matchProjectFromFieldName(fieldName) {\r\n        return this.pathTemplates.fieldPathTemplate.match(fieldName).project;\r\n    }\r\n    /**\r\n     * Parse the database from Field resource.\r\n     *\r\n     * @param {string} fieldName\r\n     *   A fully-qualified path representing Field resource.\r\n     * @returns {string} A string representing the database.\r\n     */\r\n    matchDatabaseFromFieldName(fieldName) {\r\n        return this.pathTemplates.fieldPathTemplate.match(fieldName).database;\r\n    }\r\n    /**\r\n     * Parse the collection from Field resource.\r\n     *\r\n     * @param {string} fieldName\r\n     *   A fully-qualified path representing Field resource.\r\n     * @returns {string} A string representing the collection.\r\n     */\r\n    matchCollectionFromFieldName(fieldName) {\r\n        return this.pathTemplates.fieldPathTemplate.match(fieldName).collection;\r\n    }\r\n    /**\r\n     * Parse the field from Field resource.\r\n     *\r\n     * @param {string} fieldName\r\n     *   A fully-qualified path representing Field resource.\r\n     * @returns {string} A string representing the field.\r\n     */\r\n    matchFieldFromFieldName(fieldName) {\r\n        return this.pathTemplates.fieldPathTemplate.match(fieldName).field;\r\n    }\r\n    /**\r\n     * Return a fully-qualified index resource name string.\r\n     *\r\n     * @param {string} project\r\n     * @param {string} database\r\n     * @param {string} collection\r\n     * @param {string} index\r\n     * @returns {string} Resource name string.\r\n     */\r\n    indexPath(project, database, collection, index) {\r\n        return this.pathTemplates.indexPathTemplate.render({\r\n            project: project,\r\n            database: database,\r\n            collection: collection,\r\n            index: index,\r\n        });\r\n    }\r\n    /**\r\n     * Parse the project from Index resource.\r\n     *\r\n     * @param {string} indexName\r\n     *   A fully-qualified path representing Index resource.\r\n     * @returns {string} A string representing the project.\r\n     */\r\n    matchProjectFromIndexName(indexName) {\r\n        return this.pathTemplates.indexPathTemplate.match(indexName).project;\r\n    }\r\n    /**\r\n     * Parse the database from Index resource.\r\n     *\r\n     * @param {string} indexName\r\n     *   A fully-qualified path representing Index resource.\r\n     * @returns {string} A string representing the database.\r\n     */\r\n    matchDatabaseFromIndexName(indexName) {\r\n        return this.pathTemplates.indexPathTemplate.match(indexName).database;\r\n    }\r\n    /**\r\n     * Parse the collection from Index resource.\r\n     *\r\n     * @param {string} indexName\r\n     *   A fully-qualified path representing Index resource.\r\n     * @returns {string} A string representing the collection.\r\n     */\r\n    matchCollectionFromIndexName(indexName) {\r\n        return this.pathTemplates.indexPathTemplate.match(indexName).collection;\r\n    }\r\n    /**\r\n     * Parse the index from Index resource.\r\n     *\r\n     * @param {string} indexName\r\n     *   A fully-qualified path representing Index resource.\r\n     * @returns {string} A string representing the index.\r\n     */\r\n    matchIndexFromIndexName(indexName) {\r\n        return this.pathTemplates.indexPathTemplate.match(indexName).index;\r\n    }\r\n    /**\r\n     * Terminate the gRPC channel and close the client.\r\n     *\r\n     * The client will no longer be usable and all future behavior is undefined.\r\n     * @returns {Promise} A promise that resolves when the client is closed.\r\n     */\r\n    close() {\r\n        this.initialize();\r\n        if (!this._terminated) {\r\n            return this.firestoreAdminStub.then(stub => {\r\n                this._terminated = true;\r\n                stub.close();\r\n            });\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n}\r\nexports.FirestoreAdminClient = FirestoreAdminClient;\r\n//# sourceMappingURL=firestore_admin_client.js.map"]},"metadata":{},"sourceType":"script"}