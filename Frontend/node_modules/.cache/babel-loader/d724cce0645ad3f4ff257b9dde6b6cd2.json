{"ast":null,"code":"\"use strict\";\n\nmodule.exports = ReflectionObject;\nReflectionObject.className = \"ReflectionObject\";\n\nvar util = require(\"./util\");\n\nvar Root; // cyclic\n\n/**\r\n * Constructs a new reflection object instance.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @abstract\r\n */\n\nfunction ReflectionObject(name, options) {\n  if (!util.isString(name)) throw TypeError(\"name must be a string\");\n  if (options && !util.isObject(options)) throw TypeError(\"options must be an object\");\n  /**\r\n   * Options.\r\n   * @type {Object.<string,*>|undefined}\r\n   */\n\n  this.options = options; // toJSON\n\n  /**\r\n   * Parsed Options.\r\n   * @type {Array.<Object.<string,*>>|undefined}\r\n   */\n\n  this.parsedOptions = null;\n  /**\r\n   * Unique name within its namespace.\r\n   * @type {string}\r\n   */\n\n  this.name = name;\n  /**\r\n   * Parent namespace.\r\n   * @type {Namespace|null}\r\n   */\n\n  this.parent = null;\n  /**\r\n   * Whether already resolved or not.\r\n   * @type {boolean}\r\n   */\n\n  this.resolved = false;\n  /**\r\n   * Comment text, if any.\r\n   * @type {string|null}\r\n   */\n\n  this.comment = null;\n  /**\r\n   * Defining file name.\r\n   * @type {string|null}\r\n   */\n\n  this.filename = null;\n}\n\nObject.defineProperties(ReflectionObject.prototype, {\n  /**\r\n   * Reference to the root namespace.\r\n   * @name ReflectionObject#root\r\n   * @type {Root}\r\n   * @readonly\r\n   */\n  root: {\n    get: function () {\n      var ptr = this;\n\n      while (ptr.parent !== null) ptr = ptr.parent;\n\n      return ptr;\n    }\n  },\n\n  /**\r\n   * Full name including leading dot.\r\n   * @name ReflectionObject#fullName\r\n   * @type {string}\r\n   * @readonly\r\n   */\n  fullName: {\n    get: function () {\n      var path = [this.name],\n          ptr = this.parent;\n\n      while (ptr) {\n        path.unshift(ptr.name);\n        ptr = ptr.parent;\n      }\n\n      return path.join(\".\");\n    }\n  }\n});\n/**\r\n * Converts this reflection object to its descriptor representation.\r\n * @returns {Object.<string,*>} Descriptor\r\n * @abstract\r\n */\n\nReflectionObject.prototype.toJSON =\n/* istanbul ignore next */\nfunction toJSON() {\n  throw Error(); // not implemented, shouldn't happen\n};\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\n\n\nReflectionObject.prototype.onAdd = function onAdd(parent) {\n  if (this.parent && this.parent !== parent) this.parent.remove(this);\n  this.parent = parent;\n  this.resolved = false;\n  var root = parent.root;\n  if (root instanceof Root) root._handleAdd(this);\n};\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\n\n\nReflectionObject.prototype.onRemove = function onRemove(parent) {\n  var root = parent.root;\n  if (root instanceof Root) root._handleRemove(this);\n  this.parent = null;\n  this.resolved = false;\n};\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\n\n\nReflectionObject.prototype.resolve = function resolve() {\n  if (this.resolved) return this;\n  if (this.root instanceof Root) this.resolved = true; // only if part of a root\n\n  return this;\n};\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\n\n\nReflectionObject.prototype.getOption = function getOption(name) {\n  if (this.options) return this.options[name];\n  return undefined;\n};\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\n\n\nReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {\n  if (!ifNotSet || !this.options || this.options[name] === undefined) (this.options || (this.options = {}))[name] = value;\n  return this;\n};\n/**\r\n * Sets a parsed option.\r\n * @param {string} name parsed Option name\r\n * @param {*} value Option value\r\n * @param {string} propName dot '.' delimited full path of property within the option to set. if undefined\\empty, will add a new option with that value\r\n * @returns {ReflectionObject} `this`\r\n */\n\n\nReflectionObject.prototype.setParsedOption = function setParsedOption(name, value, propName) {\n  if (!this.parsedOptions) {\n    this.parsedOptions = [];\n  }\n\n  var parsedOptions = this.parsedOptions;\n\n  if (propName) {\n    // If setting a sub property of an option then try to merge it\n    // with an existing option\n    var opt = parsedOptions.find(function (opt) {\n      return Object.prototype.hasOwnProperty.call(opt, name);\n    });\n\n    if (opt) {\n      // If we found an existing option - just merge the property value\n      var newValue = opt[name];\n      util.setProperty(newValue, propName, value);\n    } else {\n      // otherwise, create a new option, set it's property and add it to the list\n      opt = {};\n      opt[name] = util.setProperty({}, propName, value);\n      parsedOptions.push(opt);\n    }\n  } else {\n    // Always create a new option when setting the value of the option itself\n    var newOpt = {};\n    newOpt[name] = value;\n    parsedOptions.push(newOpt);\n  }\n\n  return this;\n};\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\n\n\nReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {\n  if (options) for (var keys = Object.keys(options), i = 0; i < keys.length; ++i) this.setOption(keys[i], options[keys[i]], ifNotSet);\n  return this;\n};\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Class name[, space, full name]\r\n */\n\n\nReflectionObject.prototype.toString = function toString() {\n  var className = this.constructor.className,\n      fullName = this.fullName;\n  if (fullName.length) return className + \" \" + fullName;\n  return className;\n}; // Sets up cyclic dependencies (called in index-light)\n\n\nReflectionObject._configure = function (Root_) {\n  Root = Root_;\n};","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Backend/node_modules/protobufjs/src/object.js"],"names":["module","exports","ReflectionObject","className","util","require","Root","name","options","isString","TypeError","isObject","parsedOptions","parent","resolved","comment","filename","Object","defineProperties","prototype","root","get","ptr","fullName","path","unshift","join","toJSON","Error","onAdd","remove","_handleAdd","onRemove","_handleRemove","resolve","getOption","undefined","setOption","value","ifNotSet","setParsedOption","propName","opt","find","hasOwnProperty","call","newValue","setProperty","push","newOpt","setOptions","keys","i","length","toString","constructor","_configure","Root_"],"mappings":"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","sourcesContent":["\"use strict\";\r\nmodule.exports = ReflectionObject;\r\n\r\nReflectionObject.className = \"ReflectionObject\";\r\n\r\nvar util = require(\"./util\");\r\n\r\nvar Root; // cyclic\r\n\r\n/**\r\n * Constructs a new reflection object instance.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @abstract\r\n */\r\nfunction ReflectionObject(name, options) {\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    if (options && !util.isObject(options))\r\n        throw TypeError(\"options must be an object\");\r\n\r\n    /**\r\n     * Options.\r\n     * @type {Object.<string,*>|undefined}\r\n     */\r\n    this.options = options; // toJSON\r\n\r\n    /**\r\n     * Parsed Options.\r\n     * @type {Array.<Object.<string,*>>|undefined}\r\n     */\r\n    this.parsedOptions = null;\r\n\r\n    /**\r\n     * Unique name within its namespace.\r\n     * @type {string}\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * Parent namespace.\r\n     * @type {Namespace|null}\r\n     */\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Whether already resolved or not.\r\n     * @type {boolean}\r\n     */\r\n    this.resolved = false;\r\n\r\n    /**\r\n     * Comment text, if any.\r\n     * @type {string|null}\r\n     */\r\n    this.comment = null;\r\n\r\n    /**\r\n     * Defining file name.\r\n     * @type {string|null}\r\n     */\r\n    this.filename = null;\r\n}\r\n\r\nObject.defineProperties(ReflectionObject.prototype, {\r\n\r\n    /**\r\n     * Reference to the root namespace.\r\n     * @name ReflectionObject#root\r\n     * @type {Root}\r\n     * @readonly\r\n     */\r\n    root: {\r\n        get: function() {\r\n            var ptr = this;\r\n            while (ptr.parent !== null)\r\n                ptr = ptr.parent;\r\n            return ptr;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Full name including leading dot.\r\n     * @name ReflectionObject#fullName\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    fullName: {\r\n        get: function() {\r\n            var path = [ this.name ],\r\n                ptr = this.parent;\r\n            while (ptr) {\r\n                path.unshift(ptr.name);\r\n                ptr = ptr.parent;\r\n            }\r\n            return path.join(\".\");\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Converts this reflection object to its descriptor representation.\r\n * @returns {Object.<string,*>} Descriptor\r\n * @abstract\r\n */\r\nReflectionObject.prototype.toJSON = /* istanbul ignore next */ function toJSON() {\r\n    throw Error(); // not implemented, shouldn't happen\r\n};\r\n\r\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\r\nReflectionObject.prototype.onAdd = function onAdd(parent) {\r\n    if (this.parent && this.parent !== parent)\r\n        this.parent.remove(this);\r\n    this.parent = parent;\r\n    this.resolved = false;\r\n    var root = parent.root;\r\n    if (root instanceof Root)\r\n        root._handleAdd(this);\r\n};\r\n\r\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\r\nReflectionObject.prototype.onRemove = function onRemove(parent) {\r\n    var root = parent.root;\r\n    if (root instanceof Root)\r\n        root._handleRemove(this);\r\n    this.parent = null;\r\n    this.resolved = false;\r\n};\r\n\r\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    if (this.root instanceof Root)\r\n        this.resolved = true; // only if part of a root\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\r\nReflectionObject.prototype.getOption = function getOption(name) {\r\n    if (this.options)\r\n        return this.options[name];\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\r\n        (this.options || (this.options = {}))[name] = value;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets a parsed option.\r\n * @param {string} name parsed Option name\r\n * @param {*} value Option value\r\n * @param {string} propName dot '.' delimited full path of property within the option to set. if undefined\\empty, will add a new option with that value\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.setParsedOption = function setParsedOption(name, value, propName) {\r\n    if (!this.parsedOptions) {\r\n        this.parsedOptions = [];\r\n    }\r\n    var parsedOptions = this.parsedOptions;\r\n    if (propName) {\r\n        // If setting a sub property of an option then try to merge it\r\n        // with an existing option\r\n        var opt = parsedOptions.find(function (opt) {\r\n            return Object.prototype.hasOwnProperty.call(opt, name);\r\n        });\r\n        if (opt) {\r\n            // If we found an existing option - just merge the property value\r\n            var newValue = opt[name];\r\n            util.setProperty(newValue, propName, value);\r\n        } else {\r\n            // otherwise, create a new option, set it's property and add it to the list\r\n            opt = {};\r\n            opt[name] = util.setProperty({}, propName, value);\r\n            parsedOptions.push(opt);\r\n        }\r\n    } else {\r\n        // Always create a new option when setting the value of the option itself\r\n        var newOpt = {};\r\n        newOpt[name] = value;\r\n        parsedOptions.push(newOpt);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {\r\n    if (options)\r\n        for (var keys = Object.keys(options), i = 0; i < keys.length; ++i)\r\n            this.setOption(keys[i], options[keys[i]], ifNotSet);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Class name[, space, full name]\r\n */\r\nReflectionObject.prototype.toString = function toString() {\r\n    var className = this.constructor.className,\r\n        fullName  = this.fullName;\r\n    if (fullName.length)\r\n        return className + \" \" + fullName;\r\n    return className;\r\n};\r\n\r\n// Sets up cyclic dependencies (called in index-light)\r\nReflectionObject._configure = function(Root_) {\r\n    Root = Root_;\r\n};\r\n"]},"metadata":{},"sourceType":"script"}