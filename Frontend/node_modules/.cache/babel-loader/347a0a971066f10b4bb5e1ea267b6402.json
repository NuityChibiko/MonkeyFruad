{"ast":null,"code":"const utils = require('./utils');\n\nconst merge = utils.merge;\nconst bus = utils.bus;\n\nconst spawn = require('child_process').spawn;\n\nmodule.exports = function spawnCommand(command, config, eventArgs) {\n  var stdio = ['pipe', 'pipe', 'pipe'];\n\n  if (config.options.stdout) {\n    stdio = ['pipe', process.stdout, process.stderr];\n  }\n\n  var sh = 'sh';\n  var shFlag = '-c';\n\n  if (utils.isWindows) {\n    sh = 'cmd';\n    shFlag = '/c';\n  }\n\n  if (!Array.isArray(command)) {\n    command = [command];\n  }\n\n  const args = command.join(' ');\n  const env = merge(process.env, {\n    FILENAME: eventArgs[0]\n  });\n  const child = spawn(sh, [shFlag, args], {\n    env: merge(config.options.execOptions.env, env),\n    stdio: stdio\n  });\n\n  if (config.required) {\n    var emit = {\n      stdout: function (data) {\n        bus.emit('stdout', data);\n      },\n      stderr: function (data) {\n        bus.emit('stderr', data);\n      }\n    }; // now work out what to bind to...\n\n    if (config.options.stdout) {\n      child.on('stdout', emit.stdout).on('stderr', emit.stderr);\n    } else {\n      child.stdout.on('data', emit.stdout);\n      child.stderr.on('data', emit.stderr);\n      bus.stdout = child.stdout;\n      bus.stderr = child.stderr;\n    }\n  }\n};","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Frontend/node_modules/nodemon/lib/spawn.js"],"names":["utils","require","merge","bus","spawn","module","exports","spawnCommand","command","config","eventArgs","stdio","options","stdout","process","stderr","sh","shFlag","isWindows","Array","isArray","args","join","env","FILENAME","child","execOptions","required","emit","data","on"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,SAAD,CAArB;;AACA,MAAMC,KAAK,GAAGF,KAAK,CAACE,KAApB;AACA,MAAMC,GAAG,GAAGH,KAAK,CAACG,GAAlB;;AACA,MAAMC,KAAK,GAAGH,OAAO,CAAC,eAAD,CAAP,CAAyBG,KAAvC;;AAEAC,MAAM,CAACC,OAAP,GAAiB,SAASC,YAAT,CAAsBC,OAAtB,EAA+BC,MAA/B,EAAuCC,SAAvC,EAAkD;AACjE,MAAIC,KAAK,GAAG,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,CAAZ;;AAEA,MAAIF,MAAM,CAACG,OAAP,CAAeC,MAAnB,EAA2B;AACzBF,IAAAA,KAAK,GAAG,CAAC,MAAD,EAASG,OAAO,CAACD,MAAjB,EAAyBC,OAAO,CAACC,MAAjC,CAAR;AACD;;AAED,MAAIC,EAAE,GAAG,IAAT;AACA,MAAIC,MAAM,GAAG,IAAb;;AAEA,MAAIjB,KAAK,CAACkB,SAAV,EAAqB;AACnBF,IAAAA,EAAE,GAAG,KAAL;AACAC,IAAAA,MAAM,GAAG,IAAT;AACD;;AAGD,MAAI,CAACE,KAAK,CAACC,OAAN,CAAcZ,OAAd,CAAL,EAA6B;AAC3BA,IAAAA,OAAO,GAAG,CAACA,OAAD,CAAV;AACD;;AAED,QAAMa,IAAI,GAAGb,OAAO,CAACc,IAAR,CAAa,GAAb,CAAb;AAEA,QAAMC,GAAG,GAAGrB,KAAK,CAACY,OAAO,CAACS,GAAT,EAAc;AAAEC,IAAAA,QAAQ,EAAEd,SAAS,CAAC,CAAD;AAArB,GAAd,CAAjB;AACA,QAAMe,KAAK,GAAGrB,KAAK,CAACY,EAAD,EAAK,CAACC,MAAD,EAASI,IAAT,CAAL,EAAqB;AACtCE,IAAAA,GAAG,EAAErB,KAAK,CAACO,MAAM,CAACG,OAAP,CAAec,WAAf,CAA2BH,GAA5B,EAAiCA,GAAjC,CAD4B;AAEtCZ,IAAAA,KAAK,EAAEA;AAF+B,GAArB,CAAnB;;AAKA,MAAIF,MAAM,CAACkB,QAAX,EAAqB;AACnB,QAAIC,IAAI,GAAG;AACTf,MAAAA,MAAM,EAAE,UAAUgB,IAAV,EAAgB;AACtB1B,QAAAA,GAAG,CAACyB,IAAJ,CAAS,QAAT,EAAmBC,IAAnB;AACD,OAHQ;AAITd,MAAAA,MAAM,EAAE,UAAUc,IAAV,EAAgB;AACtB1B,QAAAA,GAAG,CAACyB,IAAJ,CAAS,QAAT,EAAmBC,IAAnB;AACD;AANQ,KAAX,CADmB,CAUnB;;AACA,QAAIpB,MAAM,CAACG,OAAP,CAAeC,MAAnB,EAA2B;AACzBY,MAAAA,KAAK,CAACK,EAAN,CAAS,QAAT,EAAmBF,IAAI,CAACf,MAAxB,EAAgCiB,EAAhC,CAAmC,QAAnC,EAA6CF,IAAI,CAACb,MAAlD;AACD,KAFD,MAEO;AACLU,MAAAA,KAAK,CAACZ,MAAN,CAAaiB,EAAb,CAAgB,MAAhB,EAAwBF,IAAI,CAACf,MAA7B;AACAY,MAAAA,KAAK,CAACV,MAAN,CAAae,EAAb,CAAgB,MAAhB,EAAwBF,IAAI,CAACb,MAA7B;AAEAZ,MAAAA,GAAG,CAACU,MAAJ,GAAaY,KAAK,CAACZ,MAAnB;AACAV,MAAAA,GAAG,CAACY,MAAJ,GAAaU,KAAK,CAACV,MAAnB;AACD;AACF;AACF,CAjDD","sourcesContent":["const utils = require('./utils');\r\nconst merge = utils.merge;\r\nconst bus = utils.bus;\r\nconst spawn = require('child_process').spawn;\r\n\r\nmodule.exports = function spawnCommand(command, config, eventArgs) {\r\n  var stdio = ['pipe', 'pipe', 'pipe'];\r\n\r\n  if (config.options.stdout) {\r\n    stdio = ['pipe', process.stdout, process.stderr];\r\n  }\r\n\r\n  var sh = 'sh';\r\n  var shFlag = '-c';\r\n\r\n  if (utils.isWindows) {\r\n    sh = 'cmd';\r\n    shFlag = '/c';\r\n  }\r\n\r\n\r\n  if (!Array.isArray(command)) {\r\n    command = [command];\r\n  }\r\n\r\n  const args = command.join(' ');\r\n\r\n  const env = merge(process.env, { FILENAME: eventArgs[0] });\r\n  const child = spawn(sh, [shFlag, args], {\r\n    env: merge(config.options.execOptions.env, env),\r\n    stdio: stdio,\r\n  });\r\n\r\n  if (config.required) {\r\n    var emit = {\r\n      stdout: function (data) {\r\n        bus.emit('stdout', data);\r\n      },\r\n      stderr: function (data) {\r\n        bus.emit('stderr', data);\r\n      },\r\n    };\r\n\r\n    // now work out what to bind to...\r\n    if (config.options.stdout) {\r\n      child.on('stdout', emit.stdout).on('stderr', emit.stderr);\r\n    } else {\r\n      child.stdout.on('data', emit.stdout);\r\n      child.stderr.on('data', emit.stderr);\r\n\r\n      bus.stdout = child.stdout;\r\n      bus.stderr = child.stderr;\r\n    }\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}