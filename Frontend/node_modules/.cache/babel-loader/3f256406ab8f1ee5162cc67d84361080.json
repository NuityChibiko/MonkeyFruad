{"ast":null,"code":"\"use strict\";\n/*!\r\n * Copyright 2019 Google Inc. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst convert_1 = require(\"./convert\");\n\nconst field_value_1 = require(\"./field-value\");\n\nconst geo_point_1 = require(\"./geo-point\");\n\nconst index_1 = require(\"./index\");\n\nconst path_1 = require(\"./path\");\n\nconst timestamp_1 = require(\"./timestamp\");\n\nconst util_1 = require(\"./util\");\n\nconst validate_1 = require(\"./validate\");\n/**\r\n * The maximum depth of a Firestore object.\r\n *\r\n * @private\r\n */\n\n\nconst MAX_DEPTH = 20;\n/**\r\n * Serializer that is used to convert between JavaScript types and their\r\n * Firestore Protobuf representation.\r\n *\r\n * @private\r\n */\n\nclass Serializer {\n  constructor(firestore) {\n    // Instead of storing the `firestore` object, we store just a reference to\n    // its `.doc()` method. This avoid a circular reference, which breaks\n    // JSON.stringify().\n    this.createReference = path => firestore.doc(path);\n\n    this.createInteger = n => firestore._settings.useBigInt ? BigInt(n) : Number(n);\n\n    this.allowUndefined = !!firestore._settings.ignoreUndefinedProperties;\n  }\n  /**\r\n   * Encodes a JavaScript object into the Firestore 'Fields' representation.\r\n   *\r\n   * @private\r\n   * @param obj The object to encode.\r\n   * @returns The Firestore 'Fields' representation\r\n   */\n\n\n  encodeFields(obj) {\n    const fields = {};\n\n    for (const prop of Object.keys(obj)) {\n      const val = this.encodeValue(obj[prop]);\n\n      if (val) {\n        fields[prop] = val;\n      }\n    }\n\n    return fields;\n  }\n  /**\r\n   * Encodes a JavaScript value into the Firestore 'Value' representation.\r\n   *\r\n   * @private\r\n   * @param val The object to encode\r\n   * @returns The Firestore Proto or null if we are deleting a field.\r\n   */\n\n\n  encodeValue(val) {\n    if (val instanceof field_value_1.FieldTransform) {\n      return null;\n    }\n\n    if (typeof val === 'string') {\n      return {\n        stringValue: val\n      };\n    }\n\n    if (typeof val === 'boolean') {\n      return {\n        booleanValue: val\n      };\n    }\n\n    if (typeof val === 'number') {\n      if (Number.isSafeInteger(val)) {\n        return {\n          integerValue: val\n        };\n      } else {\n        return {\n          doubleValue: val\n        };\n      }\n    }\n\n    if (typeof val === 'bigint') {\n      return {\n        integerValue: val.toString()\n      };\n    }\n\n    if (val instanceof Date) {\n      const timestamp = timestamp_1.Timestamp.fromDate(val);\n      return {\n        timestampValue: {\n          seconds: timestamp.seconds,\n          nanos: timestamp.nanoseconds\n        }\n      };\n    }\n\n    if (isMomentJsType(val)) {\n      const timestamp = timestamp_1.Timestamp.fromDate(val.toDate());\n      return {\n        timestampValue: {\n          seconds: timestamp.seconds,\n          nanos: timestamp.nanoseconds\n        }\n      };\n    }\n\n    if (val === null) {\n      return {\n        nullValue: 'NULL_VALUE'\n      };\n    }\n\n    if (val instanceof Buffer || val instanceof Uint8Array) {\n      return {\n        bytesValue: val\n      };\n    }\n\n    if (util_1.isObject(val)) {\n      const toProto = val['toProto'];\n\n      if (typeof toProto === 'function') {\n        return toProto.bind(val)();\n      }\n    }\n\n    if (val instanceof Array) {\n      const array = {\n        arrayValue: {}\n      };\n\n      if (val.length > 0) {\n        array.arrayValue.values = [];\n\n        for (let i = 0; i < val.length; ++i) {\n          const enc = this.encodeValue(val[i]);\n\n          if (enc) {\n            array.arrayValue.values.push(enc);\n          }\n        }\n      }\n\n      return array;\n    }\n\n    if (typeof val === 'object' && util_1.isPlainObject(val)) {\n      const map = {\n        mapValue: {}\n      }; // If we encounter an empty object, we always need to send it to make sure\n      // the server creates a map entry.\n\n      if (!util_1.isEmpty(val)) {\n        map.mapValue.fields = this.encodeFields(val);\n\n        if (util_1.isEmpty(map.mapValue.fields)) {\n          return null;\n        }\n      }\n\n      return map;\n    }\n\n    if (val === undefined && this.allowUndefined) {\n      return null;\n    }\n\n    throw new Error(`Cannot encode value: ${val}`);\n  }\n  /**\r\n   * Decodes a single Firestore 'Value' Protobuf.\r\n   *\r\n   * @private\r\n   * @param proto A Firestore 'Value' Protobuf.\r\n   * @returns The converted JS type.\r\n   */\n\n\n  decodeValue(proto) {\n    const valueType = convert_1.detectValueType(proto);\n\n    switch (valueType) {\n      case 'stringValue':\n        {\n          return proto.stringValue;\n        }\n\n      case 'booleanValue':\n        {\n          return proto.booleanValue;\n        }\n\n      case 'integerValue':\n        {\n          return this.createInteger(proto.integerValue);\n        }\n\n      case 'doubleValue':\n        {\n          return proto.doubleValue;\n        }\n\n      case 'timestampValue':\n        {\n          return timestamp_1.Timestamp.fromProto(proto.timestampValue);\n        }\n\n      case 'referenceValue':\n        {\n          const resourcePath = path_1.QualifiedResourcePath.fromSlashSeparatedString(proto.referenceValue);\n          return this.createReference(resourcePath.relativeName);\n        }\n\n      case 'arrayValue':\n        {\n          const array = [];\n\n          if (Array.isArray(proto.arrayValue.values)) {\n            for (const value of proto.arrayValue.values) {\n              array.push(this.decodeValue(value));\n            }\n          }\n\n          return array;\n        }\n\n      case 'nullValue':\n        {\n          return null;\n        }\n\n      case 'mapValue':\n        {\n          const obj = {};\n          const fields = proto.mapValue.fields;\n\n          if (fields) {\n            for (const prop of Object.keys(fields)) {\n              obj[prop] = this.decodeValue(fields[prop]);\n            }\n          }\n\n          return obj;\n        }\n\n      case 'geoPointValue':\n        {\n          return geo_point_1.GeoPoint.fromProto(proto.geoPointValue);\n        }\n\n      case 'bytesValue':\n        {\n          return proto.bytesValue;\n        }\n\n      default:\n        {\n          throw new Error('Cannot decode type from Firestore Value: ' + JSON.stringify(proto));\n        }\n    }\n  }\n\n}\n\nexports.Serializer = Serializer;\n/**\r\n * Validates a JavaScript value for usage as a Firestore value.\r\n *\r\n * @private\r\n * @param arg The argument name or argument index (for varargs methods).\r\n * @param value JavaScript value to validate.\r\n * @param desc A description of the expected type.\r\n * @param path The field path to validate.\r\n * @param options Validation options\r\n * @param level The current depth of the traversal. This is used to decide\r\n * whether undefined values or deletes are allowed.\r\n * @param inArray Whether we are inside an array.\r\n * @throws when the object is invalid.\r\n */\n\nfunction validateUserInput(arg, value, desc, options, path, level, inArray) {\n  if (path && path.size > MAX_DEPTH) {\n    throw new Error(`${validate_1.invalidArgumentMessage(arg, desc)} Input object is deeper than ${MAX_DEPTH} levels or contains a cycle.`);\n  }\n\n  level = level || 0;\n  inArray = inArray || false;\n  const fieldPathMessage = path ? ` (found in field \"${path}\")` : '';\n\n  if (Array.isArray(value)) {\n    for (let i = 0; i < value.length; ++i) {\n      validateUserInput(arg, value[i], desc, options, path ? path.append(String(i)) : new path_1.FieldPath(String(i)), level + 1,\n      /* inArray= */\n      true);\n    }\n  } else if (util_1.isPlainObject(value)) {\n    for (const prop of Object.keys(value)) {\n      validateUserInput(arg, value[prop], desc, options, path ? path.append(new path_1.FieldPath(prop)) : new path_1.FieldPath(prop), level + 1, inArray);\n    }\n  } else if (value === undefined) {\n    if (options.allowUndefined && level === 0) {\n      throw new Error(`${validate_1.invalidArgumentMessage(arg, desc)} \"undefined\" values are only ignored inside of objects.`);\n    } else if (!options.allowUndefined) {\n      throw new Error(`${validate_1.invalidArgumentMessage(arg, desc)} Cannot use \"undefined\" as a Firestore value${fieldPathMessage}. ` + 'If you want to ignore undefined values, enable `ignoreUndefinedProperties`.');\n    }\n  } else if (value instanceof field_value_1.DeleteTransform) {\n    if (inArray) {\n      throw new Error(`${validate_1.invalidArgumentMessage(arg, desc)} ${value.methodName}() cannot be used inside of an array${fieldPathMessage}.`);\n    } else if (options.allowDeletes === 'none') {\n      throw new Error(`${validate_1.invalidArgumentMessage(arg, desc)} ${value.methodName}() must appear at the top-level and can only be used in update() ` + `or set() with {merge:true}${fieldPathMessage}.`);\n    } else if (options.allowDeletes === 'root') {\n      if (level === 0) {// Ok (update() with UpdateData).\n      } else if (level === 1 && (path === null || path === void 0 ? void 0 : path.size) === 1) {// Ok (update with varargs).\n      } else {\n        throw new Error(`${validate_1.invalidArgumentMessage(arg, desc)} ${value.methodName}() must appear at the top-level and can only be used in update() ` + `or set() with {merge:true}${fieldPathMessage}.`);\n      }\n    }\n  } else if (value instanceof field_value_1.FieldTransform) {\n    if (inArray) {\n      throw new Error(`${validate_1.invalidArgumentMessage(arg, desc)} ${value.methodName}() cannot be used inside of an array${fieldPathMessage}.`);\n    } else if (!options.allowTransforms) {\n      throw new Error(`${validate_1.invalidArgumentMessage(arg, desc)} ${value.methodName}() can only be used in set(), create() or update()${fieldPathMessage}.`);\n    }\n  } else if (value instanceof path_1.FieldPath) {\n    throw new Error(`${validate_1.invalidArgumentMessage(arg, desc)} Cannot use object of type \"FieldPath\" as a Firestore value${fieldPathMessage}.`);\n  } else if (value instanceof index_1.DocumentReference) {// Ok.\n  } else if (value instanceof geo_point_1.GeoPoint) {// Ok.\n  } else if (value instanceof timestamp_1.Timestamp || value instanceof Date) {// Ok.\n  } else if (isMomentJsType(value)) {// Ok.\n  } else if (value instanceof Buffer || value instanceof Uint8Array) {// Ok.\n  } else if (value === null) {// Ok.\n  } else if (typeof value === 'object') {\n    throw new Error(validate_1.customObjectMessage(arg, value, path));\n  }\n}\n\nexports.validateUserInput = validateUserInput;\n/**\r\n * Returns true if value is a MomentJs date object.\r\n * @private\r\n */\n\nfunction isMomentJsType(value) {\n  return typeof value === 'object' && value !== null && value.constructor && value.constructor.name === 'Moment' && typeof value.toDate === 'function';\n}","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Backend/node_modules/@google-cloud/firestore/build/src/serializer.js"],"names":["Object","defineProperty","exports","value","convert_1","require","field_value_1","geo_point_1","index_1","path_1","timestamp_1","util_1","validate_1","MAX_DEPTH","Serializer","constructor","firestore","createReference","path","doc","createInteger","n","_settings","useBigInt","BigInt","Number","allowUndefined","ignoreUndefinedProperties","encodeFields","obj","fields","prop","keys","val","encodeValue","FieldTransform","stringValue","booleanValue","isSafeInteger","integerValue","doubleValue","toString","Date","timestamp","Timestamp","fromDate","timestampValue","seconds","nanos","nanoseconds","isMomentJsType","toDate","nullValue","Buffer","Uint8Array","bytesValue","isObject","toProto","bind","Array","array","arrayValue","length","values","i","enc","push","isPlainObject","map","mapValue","isEmpty","undefined","Error","decodeValue","proto","valueType","detectValueType","fromProto","resourcePath","QualifiedResourcePath","fromSlashSeparatedString","referenceValue","relativeName","isArray","GeoPoint","geoPointValue","JSON","stringify","validateUserInput","arg","desc","options","level","inArray","size","invalidArgumentMessage","fieldPathMessage","append","String","FieldPath","DeleteTransform","methodName","allowDeletes","allowTransforms","DocumentReference","customObjectMessage","name"],"mappings":"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","sourcesContent":["\"use strict\";\r\n/*!\r\n * Copyright 2019 Google Inc. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst convert_1 = require(\"./convert\");\r\nconst field_value_1 = require(\"./field-value\");\r\nconst geo_point_1 = require(\"./geo-point\");\r\nconst index_1 = require(\"./index\");\r\nconst path_1 = require(\"./path\");\r\nconst timestamp_1 = require(\"./timestamp\");\r\nconst util_1 = require(\"./util\");\r\nconst validate_1 = require(\"./validate\");\r\n/**\r\n * The maximum depth of a Firestore object.\r\n *\r\n * @private\r\n */\r\nconst MAX_DEPTH = 20;\r\n/**\r\n * Serializer that is used to convert between JavaScript types and their\r\n * Firestore Protobuf representation.\r\n *\r\n * @private\r\n */\r\nclass Serializer {\r\n    constructor(firestore) {\r\n        // Instead of storing the `firestore` object, we store just a reference to\r\n        // its `.doc()` method. This avoid a circular reference, which breaks\r\n        // JSON.stringify().\r\n        this.createReference = path => firestore.doc(path);\r\n        this.createInteger = n => firestore._settings.useBigInt ? BigInt(n) : Number(n);\r\n        this.allowUndefined = !!firestore._settings.ignoreUndefinedProperties;\r\n    }\r\n    /**\r\n     * Encodes a JavaScript object into the Firestore 'Fields' representation.\r\n     *\r\n     * @private\r\n     * @param obj The object to encode.\r\n     * @returns The Firestore 'Fields' representation\r\n     */\r\n    encodeFields(obj) {\r\n        const fields = {};\r\n        for (const prop of Object.keys(obj)) {\r\n            const val = this.encodeValue(obj[prop]);\r\n            if (val) {\r\n                fields[prop] = val;\r\n            }\r\n        }\r\n        return fields;\r\n    }\r\n    /**\r\n     * Encodes a JavaScript value into the Firestore 'Value' representation.\r\n     *\r\n     * @private\r\n     * @param val The object to encode\r\n     * @returns The Firestore Proto or null if we are deleting a field.\r\n     */\r\n    encodeValue(val) {\r\n        if (val instanceof field_value_1.FieldTransform) {\r\n            return null;\r\n        }\r\n        if (typeof val === 'string') {\r\n            return {\r\n                stringValue: val,\r\n            };\r\n        }\r\n        if (typeof val === 'boolean') {\r\n            return {\r\n                booleanValue: val,\r\n            };\r\n        }\r\n        if (typeof val === 'number') {\r\n            if (Number.isSafeInteger(val)) {\r\n                return {\r\n                    integerValue: val,\r\n                };\r\n            }\r\n            else {\r\n                return {\r\n                    doubleValue: val,\r\n                };\r\n            }\r\n        }\r\n        if (typeof val === 'bigint') {\r\n            return {\r\n                integerValue: val.toString(),\r\n            };\r\n        }\r\n        if (val instanceof Date) {\r\n            const timestamp = timestamp_1.Timestamp.fromDate(val);\r\n            return {\r\n                timestampValue: {\r\n                    seconds: timestamp.seconds,\r\n                    nanos: timestamp.nanoseconds,\r\n                },\r\n            };\r\n        }\r\n        if (isMomentJsType(val)) {\r\n            const timestamp = timestamp_1.Timestamp.fromDate(val.toDate());\r\n            return {\r\n                timestampValue: {\r\n                    seconds: timestamp.seconds,\r\n                    nanos: timestamp.nanoseconds,\r\n                },\r\n            };\r\n        }\r\n        if (val === null) {\r\n            return {\r\n                nullValue: 'NULL_VALUE',\r\n            };\r\n        }\r\n        if (val instanceof Buffer || val instanceof Uint8Array) {\r\n            return {\r\n                bytesValue: val,\r\n            };\r\n        }\r\n        if (util_1.isObject(val)) {\r\n            const toProto = val['toProto'];\r\n            if (typeof toProto === 'function') {\r\n                return toProto.bind(val)();\r\n            }\r\n        }\r\n        if (val instanceof Array) {\r\n            const array = {\r\n                arrayValue: {},\r\n            };\r\n            if (val.length > 0) {\r\n                array.arrayValue.values = [];\r\n                for (let i = 0; i < val.length; ++i) {\r\n                    const enc = this.encodeValue(val[i]);\r\n                    if (enc) {\r\n                        array.arrayValue.values.push(enc);\r\n                    }\r\n                }\r\n            }\r\n            return array;\r\n        }\r\n        if (typeof val === 'object' && util_1.isPlainObject(val)) {\r\n            const map = {\r\n                mapValue: {},\r\n            };\r\n            // If we encounter an empty object, we always need to send it to make sure\r\n            // the server creates a map entry.\r\n            if (!util_1.isEmpty(val)) {\r\n                map.mapValue.fields = this.encodeFields(val);\r\n                if (util_1.isEmpty(map.mapValue.fields)) {\r\n                    return null;\r\n                }\r\n            }\r\n            return map;\r\n        }\r\n        if (val === undefined && this.allowUndefined) {\r\n            return null;\r\n        }\r\n        throw new Error(`Cannot encode value: ${val}`);\r\n    }\r\n    /**\r\n     * Decodes a single Firestore 'Value' Protobuf.\r\n     *\r\n     * @private\r\n     * @param proto A Firestore 'Value' Protobuf.\r\n     * @returns The converted JS type.\r\n     */\r\n    decodeValue(proto) {\r\n        const valueType = convert_1.detectValueType(proto);\r\n        switch (valueType) {\r\n            case 'stringValue': {\r\n                return proto.stringValue;\r\n            }\r\n            case 'booleanValue': {\r\n                return proto.booleanValue;\r\n            }\r\n            case 'integerValue': {\r\n                return this.createInteger(proto.integerValue);\r\n            }\r\n            case 'doubleValue': {\r\n                return proto.doubleValue;\r\n            }\r\n            case 'timestampValue': {\r\n                return timestamp_1.Timestamp.fromProto(proto.timestampValue);\r\n            }\r\n            case 'referenceValue': {\r\n                const resourcePath = path_1.QualifiedResourcePath.fromSlashSeparatedString(proto.referenceValue);\r\n                return this.createReference(resourcePath.relativeName);\r\n            }\r\n            case 'arrayValue': {\r\n                const array = [];\r\n                if (Array.isArray(proto.arrayValue.values)) {\r\n                    for (const value of proto.arrayValue.values) {\r\n                        array.push(this.decodeValue(value));\r\n                    }\r\n                }\r\n                return array;\r\n            }\r\n            case 'nullValue': {\r\n                return null;\r\n            }\r\n            case 'mapValue': {\r\n                const obj = {};\r\n                const fields = proto.mapValue.fields;\r\n                if (fields) {\r\n                    for (const prop of Object.keys(fields)) {\r\n                        obj[prop] = this.decodeValue(fields[prop]);\r\n                    }\r\n                }\r\n                return obj;\r\n            }\r\n            case 'geoPointValue': {\r\n                return geo_point_1.GeoPoint.fromProto(proto.geoPointValue);\r\n            }\r\n            case 'bytesValue': {\r\n                return proto.bytesValue;\r\n            }\r\n            default: {\r\n                throw new Error('Cannot decode type from Firestore Value: ' + JSON.stringify(proto));\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.Serializer = Serializer;\r\n/**\r\n * Validates a JavaScript value for usage as a Firestore value.\r\n *\r\n * @private\r\n * @param arg The argument name or argument index (for varargs methods).\r\n * @param value JavaScript value to validate.\r\n * @param desc A description of the expected type.\r\n * @param path The field path to validate.\r\n * @param options Validation options\r\n * @param level The current depth of the traversal. This is used to decide\r\n * whether undefined values or deletes are allowed.\r\n * @param inArray Whether we are inside an array.\r\n * @throws when the object is invalid.\r\n */\r\nfunction validateUserInput(arg, value, desc, options, path, level, inArray) {\r\n    if (path && path.size > MAX_DEPTH) {\r\n        throw new Error(`${validate_1.invalidArgumentMessage(arg, desc)} Input object is deeper than ${MAX_DEPTH} levels or contains a cycle.`);\r\n    }\r\n    level = level || 0;\r\n    inArray = inArray || false;\r\n    const fieldPathMessage = path ? ` (found in field \"${path}\")` : '';\r\n    if (Array.isArray(value)) {\r\n        for (let i = 0; i < value.length; ++i) {\r\n            validateUserInput(arg, value[i], desc, options, path ? path.append(String(i)) : new path_1.FieldPath(String(i)), level + 1, \r\n            /* inArray= */ true);\r\n        }\r\n    }\r\n    else if (util_1.isPlainObject(value)) {\r\n        for (const prop of Object.keys(value)) {\r\n            validateUserInput(arg, value[prop], desc, options, path ? path.append(new path_1.FieldPath(prop)) : new path_1.FieldPath(prop), level + 1, inArray);\r\n        }\r\n    }\r\n    else if (value === undefined) {\r\n        if (options.allowUndefined && level === 0) {\r\n            throw new Error(`${validate_1.invalidArgumentMessage(arg, desc)} \"undefined\" values are only ignored inside of objects.`);\r\n        }\r\n        else if (!options.allowUndefined) {\r\n            throw new Error(`${validate_1.invalidArgumentMessage(arg, desc)} Cannot use \"undefined\" as a Firestore value${fieldPathMessage}. ` +\r\n                'If you want to ignore undefined values, enable `ignoreUndefinedProperties`.');\r\n        }\r\n    }\r\n    else if (value instanceof field_value_1.DeleteTransform) {\r\n        if (inArray) {\r\n            throw new Error(`${validate_1.invalidArgumentMessage(arg, desc)} ${value.methodName}() cannot be used inside of an array${fieldPathMessage}.`);\r\n        }\r\n        else if (options.allowDeletes === 'none') {\r\n            throw new Error(`${validate_1.invalidArgumentMessage(arg, desc)} ${value.methodName}() must appear at the top-level and can only be used in update() ` +\r\n                `or set() with {merge:true}${fieldPathMessage}.`);\r\n        }\r\n        else if (options.allowDeletes === 'root') {\r\n            if (level === 0) {\r\n                // Ok (update() with UpdateData).\r\n            }\r\n            else if (level === 1 && (path === null || path === void 0 ? void 0 : path.size) === 1) {\r\n                // Ok (update with varargs).\r\n            }\r\n            else {\r\n                throw new Error(`${validate_1.invalidArgumentMessage(arg, desc)} ${value.methodName}() must appear at the top-level and can only be used in update() ` +\r\n                    `or set() with {merge:true}${fieldPathMessage}.`);\r\n            }\r\n        }\r\n    }\r\n    else if (value instanceof field_value_1.FieldTransform) {\r\n        if (inArray) {\r\n            throw new Error(`${validate_1.invalidArgumentMessage(arg, desc)} ${value.methodName}() cannot be used inside of an array${fieldPathMessage}.`);\r\n        }\r\n        else if (!options.allowTransforms) {\r\n            throw new Error(`${validate_1.invalidArgumentMessage(arg, desc)} ${value.methodName}() can only be used in set(), create() or update()${fieldPathMessage}.`);\r\n        }\r\n    }\r\n    else if (value instanceof path_1.FieldPath) {\r\n        throw new Error(`${validate_1.invalidArgumentMessage(arg, desc)} Cannot use object of type \"FieldPath\" as a Firestore value${fieldPathMessage}.`);\r\n    }\r\n    else if (value instanceof index_1.DocumentReference) {\r\n        // Ok.\r\n    }\r\n    else if (value instanceof geo_point_1.GeoPoint) {\r\n        // Ok.\r\n    }\r\n    else if (value instanceof timestamp_1.Timestamp || value instanceof Date) {\r\n        // Ok.\r\n    }\r\n    else if (isMomentJsType(value)) {\r\n        // Ok.\r\n    }\r\n    else if (value instanceof Buffer || value instanceof Uint8Array) {\r\n        // Ok.\r\n    }\r\n    else if (value === null) {\r\n        // Ok.\r\n    }\r\n    else if (typeof value === 'object') {\r\n        throw new Error(validate_1.customObjectMessage(arg, value, path));\r\n    }\r\n}\r\nexports.validateUserInput = validateUserInput;\r\n/**\r\n * Returns true if value is a MomentJs date object.\r\n * @private\r\n */\r\nfunction isMomentJsType(value) {\r\n    return (typeof value === 'object' &&\r\n        value !== null &&\r\n        value.constructor &&\r\n        value.constructor.name === 'Moment' &&\r\n        typeof value.toDate === 'function');\r\n}\r\n//# sourceMappingURL=serializer.js.map"]},"metadata":{},"sourceType":"script"}