{"ast":null,"code":"\"use strict\";\n/*!\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst logger_1 = require(\"./logger\");\n/*\r\n * @module firestore/backoff\r\n * @private\r\n *\r\n * Contains backoff logic to facilitate RPC error handling. This class derives\r\n * its implementation from the Firestore Mobile Web Client.\r\n *\r\n * @see https://github.com/firebase/firebase-js-sdk/blob/master/packages/firestore/src/remote/backoff.ts\r\n */\n\n/*!\r\n * The default initial backoff time in milliseconds after an error.\r\n * Set to 1s according to https://cloud.google.com/apis/design/errors.\r\n */\n\n\nconst DEFAULT_BACKOFF_INITIAL_DELAY_MS = 1000;\n/*!\r\n * The default maximum backoff time in milliseconds.\r\n */\n\nconst DEFAULT_BACKOFF_MAX_DELAY_MS = 60 * 1000;\n/*!\r\n * The default factor to increase the backup by after each failed attempt.\r\n */\n\nconst DEFAULT_BACKOFF_FACTOR = 1.5;\n/*!\r\n * The default jitter to distribute the backoff attempts by (0 means no\r\n * randomization, 1.0 means +/-50% randomization).\r\n */\n\nconst DEFAULT_JITTER_FACTOR = 1.0;\n/*!\r\n * The maximum number of retries that will be attempted by backoff\r\n * before stopping all retry attempts.\r\n */\n\nexports.MAX_RETRY_ATTEMPTS = 10;\n/*!\r\n * The timeout handler used by `ExponentialBackoff` and `BulkWriter`.\r\n */\n\nexports.delayExecution = setTimeout;\n/**\r\n * Allows overriding of the timeout handler used by the exponential backoff\r\n * implementation. If not invoked, we default to `setTimeout()`.\r\n *\r\n * Used only in testing.\r\n *\r\n * @private\r\n * @param {function} handler A handler than matches the API of `setTimeout()`.\r\n */\n\nfunction setTimeoutHandler(handler) {\n  exports.delayExecution = (f, ms) => {\n    handler(f, ms);\n    const timeout = {\n      hasRef: () => {\n        throw new Error('For tests only. Not Implemented');\n      },\n      ref: () => {\n        throw new Error('For tests only. Not Implemented');\n      },\n      refresh: () => {\n        throw new Error('For tests only. Not Implemented');\n      },\n      unref: () => {\n        throw new Error('For tests only. Not Implemented');\n      },\n      [Symbol.toPrimitive]: () => {\n        throw new Error('For tests only. Not Implemented');\n      }\n    };\n    return timeout;\n  };\n}\n\nexports.setTimeoutHandler = setTimeoutHandler;\n/**\r\n * A helper for running delayed tasks following an exponential backoff curve\r\n * between attempts.\r\n *\r\n * Each delay is made up of a \"base\" delay which follows the exponential\r\n * backoff curve, and a \"jitter\" (+/- 50% by default)  that is calculated and\r\n * added to the base delay. This prevents clients from accidentally\r\n * synchronizing their delays causing spikes of load to the backend.\r\n *\r\n * @private\r\n */\n\nclass ExponentialBackoff {\n  constructor(options = {}) {\n    /**\r\n     * The number of retries that has been attempted.\r\n     *\r\n     * @private\r\n     */\n    this._retryCount = 0;\n    /**\r\n     * The backoff delay of the current attempt.\r\n     *\r\n     * @private\r\n     */\n\n    this.currentBaseMs = 0;\n    /**\r\n     * Whether we are currently waiting for backoff to complete.\r\n     *\r\n     * @private\r\n     */\n\n    this.awaitingBackoffCompletion = false;\n    this.initialDelayMs = options.initialDelayMs !== undefined ? options.initialDelayMs : DEFAULT_BACKOFF_INITIAL_DELAY_MS;\n    this.backoffFactor = options.backoffFactor !== undefined ? options.backoffFactor : DEFAULT_BACKOFF_FACTOR;\n    this.maxDelayMs = options.maxDelayMs !== undefined ? options.maxDelayMs : DEFAULT_BACKOFF_MAX_DELAY_MS;\n    this.jitterFactor = options.jitterFactor !== undefined ? options.jitterFactor : DEFAULT_JITTER_FACTOR;\n  }\n  /**\r\n   * Resets the backoff delay and retry count.\r\n   *\r\n   * The very next backoffAndWait() will have no delay. If it is called again\r\n   * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and\r\n   * subsequent ones will increase according to the backoffFactor.\r\n   *\r\n   * @private\r\n   */\n\n\n  reset() {\n    this._retryCount = 0;\n    this.currentBaseMs = 0;\n  }\n  /**\r\n   * Resets the backoff delay to the maximum delay (e.g. for use after a\r\n   * RESOURCE_EXHAUSTED error).\r\n   *\r\n   * @private\r\n   */\n\n\n  resetToMax() {\n    this.currentBaseMs = this.maxDelayMs;\n  }\n  /**\r\n   * Returns a promise that resolves after currentDelayMs, and increases the\r\n   * delay for any subsequent attempts.\r\n   *\r\n   * @return A Promise that resolves when the current delay elapsed.\r\n   * @private\r\n   */\n\n\n  backoffAndWait() {\n    if (this.awaitingBackoffCompletion) {\n      return Promise.reject(new Error('A backoff operation is already in progress.'));\n    }\n\n    if (this.retryCount > exports.MAX_RETRY_ATTEMPTS) {\n      return Promise.reject(new Error('Exceeded maximum number of retries allowed.'));\n    } // First schedule using the current base (which may be 0 and should be\n    // honored as such).\n\n\n    const delayWithJitterMs = this.currentBaseMs + this.jitterDelayMs();\n\n    if (this.currentBaseMs > 0) {\n      logger_1.logger('ExponentialBackoff.backoffAndWait', null, `Backing off for ${delayWithJitterMs} ms ` + `(base delay: ${this.currentBaseMs} ms)`);\n    } // Apply backoff factor to determine next delay and ensure it is within\n    // bounds.\n\n\n    this.currentBaseMs *= this.backoffFactor;\n    this.currentBaseMs = Math.max(this.currentBaseMs, this.initialDelayMs);\n    this.currentBaseMs = Math.min(this.currentBaseMs, this.maxDelayMs);\n    this._retryCount += 1;\n    return new Promise(resolve => {\n      this.awaitingBackoffCompletion = true;\n      exports.delayExecution(() => {\n        this.awaitingBackoffCompletion = false;\n        resolve();\n      }, delayWithJitterMs);\n    });\n  } // Visible for testing.\n\n\n  get retryCount() {\n    return this._retryCount;\n  }\n  /**\r\n   * Returns a randomized \"jitter\" delay based on the current base and jitter\r\n   * factor.\r\n   *\r\n   * @returns {number} The jitter to apply based on the current delay.\r\n   * @private\r\n   */\n\n\n  jitterDelayMs() {\n    return (Math.random() - 0.5) * this.jitterFactor * this.currentBaseMs;\n  }\n\n}\n\nexports.ExponentialBackoff = ExponentialBackoff;","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Backend/node_modules/@google-cloud/firestore/build/src/backoff.js"],"names":["Object","defineProperty","exports","value","logger_1","require","DEFAULT_BACKOFF_INITIAL_DELAY_MS","DEFAULT_BACKOFF_MAX_DELAY_MS","DEFAULT_BACKOFF_FACTOR","DEFAULT_JITTER_FACTOR","MAX_RETRY_ATTEMPTS","delayExecution","setTimeout","setTimeoutHandler","handler","f","ms","timeout","hasRef","Error","ref","refresh","unref","Symbol","toPrimitive","ExponentialBackoff","constructor","options","_retryCount","currentBaseMs","awaitingBackoffCompletion","initialDelayMs","undefined","backoffFactor","maxDelayMs","jitterFactor","reset","resetToMax","backoffAndWait","Promise","reject","retryCount","delayWithJitterMs","jitterDelayMs","logger","Math","max","min","resolve","random"],"mappings":"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","sourcesContent":["\"use strict\";\r\n/*!\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst logger_1 = require(\"./logger\");\r\n/*\r\n * @module firestore/backoff\r\n * @private\r\n *\r\n * Contains backoff logic to facilitate RPC error handling. This class derives\r\n * its implementation from the Firestore Mobile Web Client.\r\n *\r\n * @see https://github.com/firebase/firebase-js-sdk/blob/master/packages/firestore/src/remote/backoff.ts\r\n */\r\n/*!\r\n * The default initial backoff time in milliseconds after an error.\r\n * Set to 1s according to https://cloud.google.com/apis/design/errors.\r\n */\r\nconst DEFAULT_BACKOFF_INITIAL_DELAY_MS = 1000;\r\n/*!\r\n * The default maximum backoff time in milliseconds.\r\n */\r\nconst DEFAULT_BACKOFF_MAX_DELAY_MS = 60 * 1000;\r\n/*!\r\n * The default factor to increase the backup by after each failed attempt.\r\n */\r\nconst DEFAULT_BACKOFF_FACTOR = 1.5;\r\n/*!\r\n * The default jitter to distribute the backoff attempts by (0 means no\r\n * randomization, 1.0 means +/-50% randomization).\r\n */\r\nconst DEFAULT_JITTER_FACTOR = 1.0;\r\n/*!\r\n * The maximum number of retries that will be attempted by backoff\r\n * before stopping all retry attempts.\r\n */\r\nexports.MAX_RETRY_ATTEMPTS = 10;\r\n/*!\r\n * The timeout handler used by `ExponentialBackoff` and `BulkWriter`.\r\n */\r\nexports.delayExecution = setTimeout;\r\n/**\r\n * Allows overriding of the timeout handler used by the exponential backoff\r\n * implementation. If not invoked, we default to `setTimeout()`.\r\n *\r\n * Used only in testing.\r\n *\r\n * @private\r\n * @param {function} handler A handler than matches the API of `setTimeout()`.\r\n */\r\nfunction setTimeoutHandler(handler) {\r\n    exports.delayExecution = (f, ms) => {\r\n        handler(f, ms);\r\n        const timeout = {\r\n            hasRef: () => {\r\n                throw new Error('For tests only. Not Implemented');\r\n            },\r\n            ref: () => {\r\n                throw new Error('For tests only. Not Implemented');\r\n            },\r\n            refresh: () => {\r\n                throw new Error('For tests only. Not Implemented');\r\n            },\r\n            unref: () => {\r\n                throw new Error('For tests only. Not Implemented');\r\n            },\r\n            [Symbol.toPrimitive]: () => {\r\n                throw new Error('For tests only. Not Implemented');\r\n            },\r\n        };\r\n        return timeout;\r\n    };\r\n}\r\nexports.setTimeoutHandler = setTimeoutHandler;\r\n/**\r\n * A helper for running delayed tasks following an exponential backoff curve\r\n * between attempts.\r\n *\r\n * Each delay is made up of a \"base\" delay which follows the exponential\r\n * backoff curve, and a \"jitter\" (+/- 50% by default)  that is calculated and\r\n * added to the base delay. This prevents clients from accidentally\r\n * synchronizing their delays causing spikes of load to the backend.\r\n *\r\n * @private\r\n */\r\nclass ExponentialBackoff {\r\n    constructor(options = {}) {\r\n        /**\r\n         * The number of retries that has been attempted.\r\n         *\r\n         * @private\r\n         */\r\n        this._retryCount = 0;\r\n        /**\r\n         * The backoff delay of the current attempt.\r\n         *\r\n         * @private\r\n         */\r\n        this.currentBaseMs = 0;\r\n        /**\r\n         * Whether we are currently waiting for backoff to complete.\r\n         *\r\n         * @private\r\n         */\r\n        this.awaitingBackoffCompletion = false;\r\n        this.initialDelayMs =\r\n            options.initialDelayMs !== undefined\r\n                ? options.initialDelayMs\r\n                : DEFAULT_BACKOFF_INITIAL_DELAY_MS;\r\n        this.backoffFactor =\r\n            options.backoffFactor !== undefined\r\n                ? options.backoffFactor\r\n                : DEFAULT_BACKOFF_FACTOR;\r\n        this.maxDelayMs =\r\n            options.maxDelayMs !== undefined\r\n                ? options.maxDelayMs\r\n                : DEFAULT_BACKOFF_MAX_DELAY_MS;\r\n        this.jitterFactor =\r\n            options.jitterFactor !== undefined\r\n                ? options.jitterFactor\r\n                : DEFAULT_JITTER_FACTOR;\r\n    }\r\n    /**\r\n     * Resets the backoff delay and retry count.\r\n     *\r\n     * The very next backoffAndWait() will have no delay. If it is called again\r\n     * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and\r\n     * subsequent ones will increase according to the backoffFactor.\r\n     *\r\n     * @private\r\n     */\r\n    reset() {\r\n        this._retryCount = 0;\r\n        this.currentBaseMs = 0;\r\n    }\r\n    /**\r\n     * Resets the backoff delay to the maximum delay (e.g. for use after a\r\n     * RESOURCE_EXHAUSTED error).\r\n     *\r\n     * @private\r\n     */\r\n    resetToMax() {\r\n        this.currentBaseMs = this.maxDelayMs;\r\n    }\r\n    /**\r\n     * Returns a promise that resolves after currentDelayMs, and increases the\r\n     * delay for any subsequent attempts.\r\n     *\r\n     * @return A Promise that resolves when the current delay elapsed.\r\n     * @private\r\n     */\r\n    backoffAndWait() {\r\n        if (this.awaitingBackoffCompletion) {\r\n            return Promise.reject(new Error('A backoff operation is already in progress.'));\r\n        }\r\n        if (this.retryCount > exports.MAX_RETRY_ATTEMPTS) {\r\n            return Promise.reject(new Error('Exceeded maximum number of retries allowed.'));\r\n        }\r\n        // First schedule using the current base (which may be 0 and should be\r\n        // honored as such).\r\n        const delayWithJitterMs = this.currentBaseMs + this.jitterDelayMs();\r\n        if (this.currentBaseMs > 0) {\r\n            logger_1.logger('ExponentialBackoff.backoffAndWait', null, `Backing off for ${delayWithJitterMs} ms ` +\r\n                `(base delay: ${this.currentBaseMs} ms)`);\r\n        }\r\n        // Apply backoff factor to determine next delay and ensure it is within\r\n        // bounds.\r\n        this.currentBaseMs *= this.backoffFactor;\r\n        this.currentBaseMs = Math.max(this.currentBaseMs, this.initialDelayMs);\r\n        this.currentBaseMs = Math.min(this.currentBaseMs, this.maxDelayMs);\r\n        this._retryCount += 1;\r\n        return new Promise(resolve => {\r\n            this.awaitingBackoffCompletion = true;\r\n            exports.delayExecution(() => {\r\n                this.awaitingBackoffCompletion = false;\r\n                resolve();\r\n            }, delayWithJitterMs);\r\n        });\r\n    }\r\n    // Visible for testing.\r\n    get retryCount() {\r\n        return this._retryCount;\r\n    }\r\n    /**\r\n     * Returns a randomized \"jitter\" delay based on the current base and jitter\r\n     * factor.\r\n     *\r\n     * @returns {number} The jitter to apply based on the current delay.\r\n     * @private\r\n     */\r\n    jitterDelayMs() {\r\n        return (Math.random() - 0.5) * this.jitterFactor * this.currentBaseMs;\r\n    }\r\n}\r\nexports.ExponentialBackoff = ExponentialBackoff;\r\n//# sourceMappingURL=backoff.js.map"]},"metadata":{},"sourceType":"script"}