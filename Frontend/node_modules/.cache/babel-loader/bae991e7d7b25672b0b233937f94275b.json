{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ValidatorsImpl = void 0;\n\nconst validator = require(\"validator\");\n\nconst context_items_1 = require(\"../context-items\");\n\nclass ValidatorsImpl {\n  constructor(builder, chain) {\n    this.builder = builder;\n    this.chain = chain;\n    this.negateNext = false;\n  }\n\n  addItem(item) {\n    this.builder.addItem(item);\n    this.lastValidator = item; // Reset this.negateNext so that next validation isn't negated too\n\n    this.negateNext = false;\n    return this.chain;\n  } // validation manipulation\n\n\n  not() {\n    this.negateNext = true;\n    return this.chain;\n  }\n\n  withMessage(message) {\n    this.lastValidator.message = message;\n    return this.chain;\n  } // custom validators\n\n\n  custom(validator) {\n    return this.addItem(new context_items_1.CustomValidation(validator, this.negateNext));\n  }\n\n  exists(options = {}) {\n    let validator;\n\n    if (options.checkFalsy) {\n      validator = value => !!value;\n    } else if (options.checkNull) {\n      validator = value => value != null;\n    } else {\n      validator = value => value !== undefined;\n    }\n\n    return this.custom(validator);\n  }\n\n  isArray(options = {}) {\n    return this.custom(value => Array.isArray(value) && (typeof options.min === 'undefined' || value.length >= options.min) && (typeof options.max === 'undefined' || value.length <= options.max));\n  }\n\n  isString() {\n    return this.custom(value => typeof value === 'string');\n  }\n\n  notEmpty(options) {\n    this.not();\n    return this.isEmpty(options);\n  } // Standard validators\n\n\n  addStandardValidation(validator, ...options) {\n    return this.addItem(new context_items_1.StandardValidation(validator, this.negateNext, options));\n  }\n\n  contains(elem, options) {\n    return this.addStandardValidation(validator.contains, elem, options);\n  }\n\n  equals(comparison) {\n    return this.addStandardValidation(validator.equals, comparison);\n  }\n\n  isAfter(date) {\n    return this.addStandardValidation(validator.isAfter, date);\n  }\n\n  isAlpha(locale, options) {\n    return this.addStandardValidation(validator.isAlpha, locale, options);\n  }\n\n  isAlphanumeric(locale) {\n    return this.addStandardValidation(validator.isAlphanumeric, locale);\n  }\n\n  isAscii() {\n    return this.addStandardValidation(validator.isAscii);\n  }\n\n  isBase32() {\n    return this.addStandardValidation(validator.isBase32);\n  }\n\n  isBase58() {\n    return this.addStandardValidation(validator.isBase58);\n  }\n\n  isBase64(options) {\n    return this.addStandardValidation(validator.isBase64, options);\n  }\n\n  isBefore(date) {\n    return this.addStandardValidation(validator.isBefore, date);\n  }\n\n  isBIC() {\n    return this.addStandardValidation(validator.isBIC);\n  }\n\n  isBoolean() {\n    return this.addStandardValidation(validator.isBoolean);\n  }\n\n  isBtcAddress() {\n    return this.addStandardValidation(validator.isBtcAddress);\n  }\n\n  isByteLength(options) {\n    return this.addStandardValidation(validator.isByteLength, options);\n  }\n\n  isCreditCard() {\n    return this.addStandardValidation(validator.isCreditCard);\n  }\n\n  isCurrency(options) {\n    return this.addStandardValidation(validator.isCurrency, options);\n  }\n\n  isDataURI() {\n    return this.addStandardValidation(validator.isDataURI);\n  }\n\n  isDate(options) {\n    return this.addStandardValidation(validator.isDate, options);\n  }\n\n  isDecimal(options) {\n    return this.addStandardValidation(validator.isDecimal, options);\n  }\n\n  isDivisibleBy(number) {\n    return this.addStandardValidation(validator.isDivisibleBy, number);\n  }\n\n  isEAN() {\n    return this.addStandardValidation(validator.isEAN);\n  }\n\n  isEmail(options) {\n    return this.addStandardValidation(validator.isEmail, options);\n  }\n\n  isEmpty(options) {\n    return this.addStandardValidation(validator.isEmpty, options);\n  }\n\n  isEthereumAddress() {\n    return this.addStandardValidation(validator.isEthereumAddress);\n  }\n\n  isFQDN(options) {\n    return this.addStandardValidation(validator.isFQDN, options);\n  }\n\n  isFloat(options) {\n    return this.addStandardValidation(validator.isFloat, options);\n  }\n\n  isFullWidth() {\n    return this.addStandardValidation(validator.isFullWidth);\n  }\n\n  isHalfWidth() {\n    return this.addStandardValidation(validator.isHalfWidth);\n  }\n\n  isHash(algorithm) {\n    return this.addStandardValidation(validator.isHash, algorithm);\n  }\n\n  isHexColor() {\n    return this.addStandardValidation(validator.isHexColor);\n  }\n\n  isHexadecimal() {\n    return this.addStandardValidation(validator.isHexadecimal);\n  }\n\n  isHSL() {\n    return this.addStandardValidation(validator.isHSL);\n  }\n\n  isIBAN() {\n    return this.addStandardValidation(validator.isIBAN);\n  }\n\n  isIdentityCard(locale) {\n    return this.addStandardValidation(validator.isIdentityCard, locale);\n  }\n\n  isIMEI(options) {\n    return this.addStandardValidation(validator.isIMEI, options);\n  }\n\n  isIP(version) {\n    return this.addStandardValidation(validator.isIP, version);\n  }\n\n  isIPRange() {\n    return this.addStandardValidation(validator.isIPRange);\n  }\n\n  isISBN(version) {\n    return this.addStandardValidation(validator.isISBN, version);\n  }\n\n  isISSN(options) {\n    return this.addStandardValidation(validator.isISSN, options);\n  }\n\n  isISIN() {\n    return this.addStandardValidation(validator.isISIN);\n  }\n\n  isISO8601(options) {\n    return this.addStandardValidation(validator.isISO8601, options);\n  }\n\n  isISO31661Alpha2() {\n    return this.addStandardValidation(validator.isISO31661Alpha2);\n  }\n\n  isISO31661Alpha3() {\n    return this.addStandardValidation(validator.isISO31661Alpha3);\n  }\n\n  isISRC() {\n    return this.addStandardValidation(validator.isISRC);\n  }\n\n  isIn(values) {\n    return this.addStandardValidation(validator.isIn, values);\n  }\n\n  isInt(options) {\n    return this.addStandardValidation(validator.isInt, options);\n  }\n\n  isJSON(options) {\n    return this.addStandardValidation(validator.isJSON, options);\n  }\n\n  isJWT() {\n    return this.addStandardValidation(validator.isJWT);\n  }\n\n  isLatLong(options) {\n    return this.addStandardValidation(validator.isLatLong, options);\n  }\n\n  isLength(options) {\n    return this.addStandardValidation(validator.isLength, options);\n  }\n\n  isLocale() {\n    return this.addStandardValidation(validator.isLocale);\n  }\n\n  isLowercase() {\n    return this.addStandardValidation(validator.isLowercase);\n  }\n\n  isMagnetURI() {\n    return this.addStandardValidation(validator.isMagnetURI);\n  }\n\n  isMACAddress(options) {\n    return this.addStandardValidation(validator.isMACAddress, options);\n  }\n\n  isMD5() {\n    return this.addStandardValidation(validator.isMD5);\n  }\n\n  isMimeType() {\n    return this.addStandardValidation(validator.isMimeType);\n  }\n\n  isMobilePhone(locale, options) {\n    return this.addStandardValidation(validator.isMobilePhone, locale, options);\n  }\n\n  isMongoId() {\n    return this.addStandardValidation(validator.isMongoId);\n  }\n\n  isMultibyte() {\n    return this.addStandardValidation(validator.isMultibyte);\n  }\n\n  isNumeric(options) {\n    return this.addStandardValidation(validator.isNumeric, options);\n  }\n\n  isOctal() {\n    return this.addStandardValidation(validator.isOctal);\n  }\n\n  isPassportNumber(countryCode) {\n    return this.addStandardValidation(validator.isPassportNumber, countryCode);\n  }\n\n  isPort() {\n    return this.addStandardValidation(validator.isPort);\n  }\n\n  isPostalCode(locale) {\n    return this.addStandardValidation(validator.isPostalCode, locale);\n  }\n\n  isRFC3339() {\n    return this.addStandardValidation(validator.isRFC3339);\n  }\n\n  isRgbColor(includePercentValues) {\n    return this.addStandardValidation(validator.isRgbColor, includePercentValues);\n  }\n\n  isSemVer() {\n    return this.addStandardValidation(validator.isSemVer);\n  }\n\n  isSlug() {\n    return this.addStandardValidation(validator.isSlug);\n  }\n\n  isStrongPassword(options) {\n    return this.addStandardValidation(validator.isStrongPassword, options);\n  }\n\n  isSurrogatePair() {\n    return this.addStandardValidation(validator.isSurrogatePair);\n  }\n\n  isTaxID(locale) {\n    return this.addStandardValidation(validator.isTaxID, locale);\n  }\n\n  isURL(options) {\n    return this.addStandardValidation(validator.isURL, options);\n  }\n\n  isUUID(version) {\n    return this.addStandardValidation(validator.isUUID, version);\n  }\n\n  isUppercase() {\n    return this.addStandardValidation(validator.isUppercase);\n  }\n\n  isVariableWidth() {\n    return this.addStandardValidation(validator.isVariableWidth);\n  }\n\n  isVAT(countryCode) {\n    return this.addStandardValidation(validator.isVAT, countryCode);\n  }\n\n  isWhitelisted(chars) {\n    return this.addStandardValidation(validator.isWhitelisted, chars);\n  }\n\n  matches(pattern, modifiers) {\n    return this.addStandardValidation(validator.matches, pattern, modifiers);\n  }\n\n}\n\nexports.ValidatorsImpl = ValidatorsImpl;","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Backend/node_modules/express-validator/src/chain/validators-impl.js"],"names":["Object","defineProperty","exports","value","ValidatorsImpl","validator","require","context_items_1","constructor","builder","chain","negateNext","addItem","item","lastValidator","not","withMessage","message","custom","CustomValidation","exists","options","checkFalsy","checkNull","undefined","isArray","Array","min","length","max","isString","notEmpty","isEmpty","addStandardValidation","StandardValidation","contains","elem","equals","comparison","isAfter","date","isAlpha","locale","isAlphanumeric","isAscii","isBase32","isBase58","isBase64","isBefore","isBIC","isBoolean","isBtcAddress","isByteLength","isCreditCard","isCurrency","isDataURI","isDate","isDecimal","isDivisibleBy","number","isEAN","isEmail","isEthereumAddress","isFQDN","isFloat","isFullWidth","isHalfWidth","isHash","algorithm","isHexColor","isHexadecimal","isHSL","isIBAN","isIdentityCard","isIMEI","isIP","version","isIPRange","isISBN","isISSN","isISIN","isISO8601","isISO31661Alpha2","isISO31661Alpha3","isISRC","isIn","values","isInt","isJSON","isJWT","isLatLong","isLength","isLocale","isLowercase","isMagnetURI","isMACAddress","isMD5","isMimeType","isMobilePhone","isMongoId","isMultibyte","isNumeric","isOctal","isPassportNumber","countryCode","isPort","isPostalCode","isRFC3339","isRgbColor","includePercentValues","isSemVer","isSlug","isStrongPassword","isSurrogatePair","isTaxID","isURL","isUUID","isUppercase","isVariableWidth","isVAT","isWhitelisted","chars","matches","pattern","modifiers"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ValidatorsImpl = void 0;\r\nconst validator = require(\"validator\");\r\nconst context_items_1 = require(\"../context-items\");\r\nclass ValidatorsImpl {\r\n    constructor(builder, chain) {\r\n        this.builder = builder;\r\n        this.chain = chain;\r\n        this.negateNext = false;\r\n    }\r\n    addItem(item) {\r\n        this.builder.addItem(item);\r\n        this.lastValidator = item;\r\n        // Reset this.negateNext so that next validation isn't negated too\r\n        this.negateNext = false;\r\n        return this.chain;\r\n    }\r\n    // validation manipulation\r\n    not() {\r\n        this.negateNext = true;\r\n        return this.chain;\r\n    }\r\n    withMessage(message) {\r\n        this.lastValidator.message = message;\r\n        return this.chain;\r\n    }\r\n    // custom validators\r\n    custom(validator) {\r\n        return this.addItem(new context_items_1.CustomValidation(validator, this.negateNext));\r\n    }\r\n    exists(options = {}) {\r\n        let validator;\r\n        if (options.checkFalsy) {\r\n            validator = value => !!value;\r\n        }\r\n        else if (options.checkNull) {\r\n            validator = value => value != null;\r\n        }\r\n        else {\r\n            validator = value => value !== undefined;\r\n        }\r\n        return this.custom(validator);\r\n    }\r\n    isArray(options = {}) {\r\n        return this.custom(value => Array.isArray(value) &&\r\n            (typeof options.min === 'undefined' || value.length >= options.min) &&\r\n            (typeof options.max === 'undefined' || value.length <= options.max));\r\n    }\r\n    isString() {\r\n        return this.custom(value => typeof value === 'string');\r\n    }\r\n    notEmpty(options) {\r\n        this.not();\r\n        return this.isEmpty(options);\r\n    }\r\n    // Standard validators\r\n    addStandardValidation(validator, ...options) {\r\n        return this.addItem(new context_items_1.StandardValidation(validator, this.negateNext, options));\r\n    }\r\n    contains(elem, options) {\r\n        return this.addStandardValidation(validator.contains, elem, options);\r\n    }\r\n    equals(comparison) {\r\n        return this.addStandardValidation(validator.equals, comparison);\r\n    }\r\n    isAfter(date) {\r\n        return this.addStandardValidation(validator.isAfter, date);\r\n    }\r\n    isAlpha(locale, options) {\r\n        return this.addStandardValidation(validator.isAlpha, locale, options);\r\n    }\r\n    isAlphanumeric(locale) {\r\n        return this.addStandardValidation(validator.isAlphanumeric, locale);\r\n    }\r\n    isAscii() {\r\n        return this.addStandardValidation(validator.isAscii);\r\n    }\r\n    isBase32() {\r\n        return this.addStandardValidation(validator.isBase32);\r\n    }\r\n    isBase58() {\r\n        return this.addStandardValidation(validator.isBase58);\r\n    }\r\n    isBase64(options) {\r\n        return this.addStandardValidation(validator.isBase64, options);\r\n    }\r\n    isBefore(date) {\r\n        return this.addStandardValidation(validator.isBefore, date);\r\n    }\r\n    isBIC() {\r\n        return this.addStandardValidation(validator.isBIC);\r\n    }\r\n    isBoolean() {\r\n        return this.addStandardValidation(validator.isBoolean);\r\n    }\r\n    isBtcAddress() {\r\n        return this.addStandardValidation(validator.isBtcAddress);\r\n    }\r\n    isByteLength(options) {\r\n        return this.addStandardValidation(validator.isByteLength, options);\r\n    }\r\n    isCreditCard() {\r\n        return this.addStandardValidation(validator.isCreditCard);\r\n    }\r\n    isCurrency(options) {\r\n        return this.addStandardValidation(validator.isCurrency, options);\r\n    }\r\n    isDataURI() {\r\n        return this.addStandardValidation(validator.isDataURI);\r\n    }\r\n    isDate(options) {\r\n        return this.addStandardValidation(validator.isDate, options);\r\n    }\r\n    isDecimal(options) {\r\n        return this.addStandardValidation(validator.isDecimal, options);\r\n    }\r\n    isDivisibleBy(number) {\r\n        return this.addStandardValidation(validator.isDivisibleBy, number);\r\n    }\r\n    isEAN() {\r\n        return this.addStandardValidation(validator.isEAN);\r\n    }\r\n    isEmail(options) {\r\n        return this.addStandardValidation(validator.isEmail, options);\r\n    }\r\n    isEmpty(options) {\r\n        return this.addStandardValidation(validator.isEmpty, options);\r\n    }\r\n    isEthereumAddress() {\r\n        return this.addStandardValidation(validator.isEthereumAddress);\r\n    }\r\n    isFQDN(options) {\r\n        return this.addStandardValidation(validator.isFQDN, options);\r\n    }\r\n    isFloat(options) {\r\n        return this.addStandardValidation(validator.isFloat, options);\r\n    }\r\n    isFullWidth() {\r\n        return this.addStandardValidation(validator.isFullWidth);\r\n    }\r\n    isHalfWidth() {\r\n        return this.addStandardValidation(validator.isHalfWidth);\r\n    }\r\n    isHash(algorithm) {\r\n        return this.addStandardValidation(validator.isHash, algorithm);\r\n    }\r\n    isHexColor() {\r\n        return this.addStandardValidation(validator.isHexColor);\r\n    }\r\n    isHexadecimal() {\r\n        return this.addStandardValidation(validator.isHexadecimal);\r\n    }\r\n    isHSL() {\r\n        return this.addStandardValidation(validator.isHSL);\r\n    }\r\n    isIBAN() {\r\n        return this.addStandardValidation(validator.isIBAN);\r\n    }\r\n    isIdentityCard(locale) {\r\n        return this.addStandardValidation(validator.isIdentityCard, locale);\r\n    }\r\n    isIMEI(options) {\r\n        return this.addStandardValidation(validator.isIMEI, options);\r\n    }\r\n    isIP(version) {\r\n        return this.addStandardValidation(validator.isIP, version);\r\n    }\r\n    isIPRange() {\r\n        return this.addStandardValidation(validator.isIPRange);\r\n    }\r\n    isISBN(version) {\r\n        return this.addStandardValidation(validator.isISBN, version);\r\n    }\r\n    isISSN(options) {\r\n        return this.addStandardValidation(validator.isISSN, options);\r\n    }\r\n    isISIN() {\r\n        return this.addStandardValidation(validator.isISIN);\r\n    }\r\n    isISO8601(options) {\r\n        return this.addStandardValidation(validator.isISO8601, options);\r\n    }\r\n    isISO31661Alpha2() {\r\n        return this.addStandardValidation(validator.isISO31661Alpha2);\r\n    }\r\n    isISO31661Alpha3() {\r\n        return this.addStandardValidation(validator.isISO31661Alpha3);\r\n    }\r\n    isISRC() {\r\n        return this.addStandardValidation(validator.isISRC);\r\n    }\r\n    isIn(values) {\r\n        return this.addStandardValidation(validator.isIn, values);\r\n    }\r\n    isInt(options) {\r\n        return this.addStandardValidation(validator.isInt, options);\r\n    }\r\n    isJSON(options) {\r\n        return this.addStandardValidation(validator.isJSON, options);\r\n    }\r\n    isJWT() {\r\n        return this.addStandardValidation(validator.isJWT);\r\n    }\r\n    isLatLong(options) {\r\n        return this.addStandardValidation(validator.isLatLong, options);\r\n    }\r\n    isLength(options) {\r\n        return this.addStandardValidation(validator.isLength, options);\r\n    }\r\n    isLocale() {\r\n        return this.addStandardValidation(validator.isLocale);\r\n    }\r\n    isLowercase() {\r\n        return this.addStandardValidation(validator.isLowercase);\r\n    }\r\n    isMagnetURI() {\r\n        return this.addStandardValidation(validator.isMagnetURI);\r\n    }\r\n    isMACAddress(options) {\r\n        return this.addStandardValidation(validator.isMACAddress, options);\r\n    }\r\n    isMD5() {\r\n        return this.addStandardValidation(validator.isMD5);\r\n    }\r\n    isMimeType() {\r\n        return this.addStandardValidation(validator.isMimeType);\r\n    }\r\n    isMobilePhone(locale, options) {\r\n        return this.addStandardValidation(validator.isMobilePhone, locale, options);\r\n    }\r\n    isMongoId() {\r\n        return this.addStandardValidation(validator.isMongoId);\r\n    }\r\n    isMultibyte() {\r\n        return this.addStandardValidation(validator.isMultibyte);\r\n    }\r\n    isNumeric(options) {\r\n        return this.addStandardValidation(validator.isNumeric, options);\r\n    }\r\n    isOctal() {\r\n        return this.addStandardValidation(validator.isOctal);\r\n    }\r\n    isPassportNumber(countryCode) {\r\n        return this.addStandardValidation(validator.isPassportNumber, countryCode);\r\n    }\r\n    isPort() {\r\n        return this.addStandardValidation(validator.isPort);\r\n    }\r\n    isPostalCode(locale) {\r\n        return this.addStandardValidation(validator.isPostalCode, locale);\r\n    }\r\n    isRFC3339() {\r\n        return this.addStandardValidation(validator.isRFC3339);\r\n    }\r\n    isRgbColor(includePercentValues) {\r\n        return this.addStandardValidation(validator.isRgbColor, includePercentValues);\r\n    }\r\n    isSemVer() {\r\n        return this.addStandardValidation(validator.isSemVer);\r\n    }\r\n    isSlug() {\r\n        return this.addStandardValidation(validator.isSlug);\r\n    }\r\n    isStrongPassword(options) {\r\n        return this.addStandardValidation(validator.isStrongPassword, options);\r\n    }\r\n    isSurrogatePair() {\r\n        return this.addStandardValidation(validator.isSurrogatePair);\r\n    }\r\n    isTaxID(locale) {\r\n        return this.addStandardValidation(validator.isTaxID, locale);\r\n    }\r\n    isURL(options) {\r\n        return this.addStandardValidation(validator.isURL, options);\r\n    }\r\n    isUUID(version) {\r\n        return this.addStandardValidation(validator.isUUID, version);\r\n    }\r\n    isUppercase() {\r\n        return this.addStandardValidation(validator.isUppercase);\r\n    }\r\n    isVariableWidth() {\r\n        return this.addStandardValidation(validator.isVariableWidth);\r\n    }\r\n    isVAT(countryCode) {\r\n        return this.addStandardValidation(validator.isVAT, countryCode);\r\n    }\r\n    isWhitelisted(chars) {\r\n        return this.addStandardValidation(validator.isWhitelisted, chars);\r\n    }\r\n    matches(pattern, modifiers) {\r\n        return this.addStandardValidation(validator.matches, pattern, modifiers);\r\n    }\r\n}\r\nexports.ValidatorsImpl = ValidatorsImpl;\r\n"]},"metadata":{},"sourceType":"script"}