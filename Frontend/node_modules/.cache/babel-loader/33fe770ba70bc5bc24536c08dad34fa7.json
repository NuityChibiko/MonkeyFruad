{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CustomValidation = void 0;\n\nclass CustomValidation {\n  constructor(validator, negated) {\n    this.validator = validator;\n    this.negated = negated;\n  }\n\n  async run(context, value, meta) {\n    try {\n      const result = this.validator(value, meta);\n      const actualResult = await result;\n      const isPromise = result && result.then;\n      const failed = this.negated ? actualResult : !actualResult; // A promise that was resolved only adds an error if negated.\n      // Otherwise it always suceeds\n\n      if (!isPromise && failed || isPromise && this.negated) {\n        context.addError(this.message, value, meta);\n      }\n    } catch (err) {\n      if (this.negated) {\n        return;\n      }\n\n      context.addError((err instanceof Error ? err.message : err) || this.message, value, meta);\n    }\n  }\n\n}\n\nexports.CustomValidation = CustomValidation;","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Backend/node_modules/express-validator/src/context-items/custom-validation.js"],"names":["Object","defineProperty","exports","value","CustomValidation","constructor","validator","negated","run","context","meta","result","actualResult","isPromise","then","failed","addError","message","err","Error"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,gBAAR,GAA2B,KAAK,CAAhC;;AACA,MAAMA,gBAAN,CAAuB;AACnBC,EAAAA,WAAW,CAACC,SAAD,EAAYC,OAAZ,EAAqB;AAC5B,SAAKD,SAAL,GAAiBA,SAAjB;AACA,SAAKC,OAAL,GAAeA,OAAf;AACH;;AACD,QAAMC,GAAN,CAAUC,OAAV,EAAmBN,KAAnB,EAA0BO,IAA1B,EAAgC;AAC5B,QAAI;AACA,YAAMC,MAAM,GAAG,KAAKL,SAAL,CAAeH,KAAf,EAAsBO,IAAtB,CAAf;AACA,YAAME,YAAY,GAAG,MAAMD,MAA3B;AACA,YAAME,SAAS,GAAGF,MAAM,IAAIA,MAAM,CAACG,IAAnC;AACA,YAAMC,MAAM,GAAG,KAAKR,OAAL,GAAeK,YAAf,GAA8B,CAACA,YAA9C,CAJA,CAKA;AACA;;AACA,UAAK,CAACC,SAAD,IAAcE,MAAf,IAA2BF,SAAS,IAAI,KAAKN,OAAjD,EAA2D;AACvDE,QAAAA,OAAO,CAACO,QAAR,CAAiB,KAAKC,OAAtB,EAA+Bd,KAA/B,EAAsCO,IAAtC;AACH;AACJ,KAVD,CAWA,OAAOQ,GAAP,EAAY;AACR,UAAI,KAAKX,OAAT,EAAkB;AACd;AACH;;AACDE,MAAAA,OAAO,CAACO,QAAR,CAAiB,CAACE,GAAG,YAAYC,KAAf,GAAuBD,GAAG,CAACD,OAA3B,GAAqCC,GAAtC,KAA8C,KAAKD,OAApE,EAA6Ed,KAA7E,EAAoFO,IAApF;AACH;AACJ;;AAvBkB;;AAyBvBR,OAAO,CAACE,gBAAR,GAA2BA,gBAA3B","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.CustomValidation = void 0;\r\nclass CustomValidation {\r\n    constructor(validator, negated) {\r\n        this.validator = validator;\r\n        this.negated = negated;\r\n    }\r\n    async run(context, value, meta) {\r\n        try {\r\n            const result = this.validator(value, meta);\r\n            const actualResult = await result;\r\n            const isPromise = result && result.then;\r\n            const failed = this.negated ? actualResult : !actualResult;\r\n            // A promise that was resolved only adds an error if negated.\r\n            // Otherwise it always suceeds\r\n            if ((!isPromise && failed) || (isPromise && this.negated)) {\r\n                context.addError(this.message, value, meta);\r\n            }\r\n        }\r\n        catch (err) {\r\n            if (this.negated) {\r\n                return;\r\n            }\r\n            context.addError((err instanceof Error ? err.message : err) || this.message, value, meta);\r\n        }\r\n    }\r\n}\r\nexports.CustomValidation = CustomValidation;\r\n"]},"metadata":{},"sourceType":"script"}