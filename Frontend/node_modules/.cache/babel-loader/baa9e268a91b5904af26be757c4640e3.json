{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst assert = require(\"assert\");\n\nconst backoff_1 = require(\"./backoff\");\n\nconst rate_limiter_1 = require(\"./rate-limiter\");\n\nconst timestamp_1 = require(\"./timestamp\");\n\nconst util_1 = require(\"./util\");\n\nconst write_batch_1 = require(\"./write-batch\");\n\nconst validate_1 = require(\"./validate\");\n\nconst logger_1 = require(\"./logger\");\n\nconst google_gax_1 = require(\"google-gax\");\n/*!\r\n * The maximum number of writes that can be in a single batch.\r\n */\n\n\nconst MAX_BATCH_SIZE = 20;\n/*!\r\n * The starting maximum number of operations per second as allowed by the\r\n * 500/50/5 rule.\r\n *\r\n * https://cloud.google.com/datastore/docs/best-practices#ramping_up_traffic.\r\n */\n\nexports.DEFAULT_STARTING_MAXIMUM_OPS_PER_SECOND = 500;\n/*!\r\n * The rate by which to increase the capacity as specified by the 500/50/5 rule.\r\n *\r\n * https://cloud.google.com/datastore/docs/best-practices#ramping_up_traffic.\r\n */\n\nconst RATE_LIMITER_MULTIPLIER = 1.5;\n/*!\r\n * How often the operations per second capacity should increase in milliseconds\r\n * as specified by the 500/50/5 rule.\r\n *\r\n * https://cloud.google.com/datastore/docs/best-practices#ramping_up_traffic.\r\n */\n\nconst RATE_LIMITER_MULTIPLIER_MILLIS = 5 * 60 * 1000;\n/*!\r\n * Used to represent the state of batch.\r\n *\r\n * Writes can only be added while the batch is OPEN. For a batch to be sent,\r\n * the batch must be READY_TO_SEND. After a batch is sent, it is marked as SENT.\r\n */\n\nvar BatchState;\n\n(function (BatchState) {\n  BatchState[BatchState[\"OPEN\"] = 0] = \"OPEN\";\n  BatchState[BatchState[\"READY_TO_SEND\"] = 1] = \"READY_TO_SEND\";\n  BatchState[BatchState[\"SENT\"] = 2] = \"SENT\";\n})(BatchState || (BatchState = {}));\n/**\r\n * Used to represent a batch on the BatchQueue.\r\n *\r\n * @private\r\n */\n\n\nclass BulkCommitBatch extends write_batch_1.WriteBatch {\n  constructor(firestore, maxBatchSize) {\n    super(firestore);\n    this.maxBatchSize = maxBatchSize;\n    /**\r\n     * The state of the batch.\r\n     */\n\n    this.state = BatchState.OPEN; // The set of document reference paths present in the WriteBatch.\n\n    this.docPaths = new Set(); // An array of pending write operations. Only contains writes that have not\n    // been resolved.\n\n    this.pendingOps = [];\n  }\n\n  has(documentRef) {\n    return this.docPaths.has(documentRef.path);\n  }\n\n  markReadyToSend() {\n    if (this.state === BatchState.OPEN) {\n      this.state = BatchState.READY_TO_SEND;\n    }\n  }\n\n  isOpen() {\n    return this.state === BatchState.OPEN;\n  }\n\n  isReadyToSend() {\n    return this.state === BatchState.READY_TO_SEND;\n  }\n\n  async bulkCommit() {\n    assert(this.state === BatchState.READY_TO_SEND, 'The batch should be marked as READY_TO_SEND before committing');\n    this.state = BatchState.SENT; // Capture the error stack to preserve stack tracing across async calls.\n\n    const stack = Error().stack;\n    let results = [];\n\n    try {\n      const retryCodes = util_1.getRetryCodes('batchWrite');\n      const response = await this._commit({\n        retryCodes,\n        methodName: 'batchWrite'\n      });\n      results = response.writeResults.map((result, i) => {\n        const status = response.status[i];\n        const error = new google_gax_1.GoogleError(status.message || undefined);\n        error.code = status.code; // Since delete operations currently do not have write times, use a\n        // sentinel Timestamp value.\n        // TODO(b/158502664): Use actual delete timestamp.\n\n        const DELETE_TIMESTAMP_SENTINEL = timestamp_1.Timestamp.fromMillis(0);\n        const updateTime = error.code === google_gax_1.Status.OK ? timestamp_1.Timestamp.fromProto(result.updateTime || DELETE_TIMESTAMP_SENTINEL) : null;\n        return new write_batch_1.BatchWriteResult(updateTime, error);\n      });\n    } catch (err) {\n      // Map the failure to each individual write's result.\n      results = this.pendingOps.map(() => {\n        return {\n          writeTime: null,\n          status: util_1.wrapError(err, stack)\n        };\n      });\n    }\n\n    return this.processResults(results);\n  }\n  /**\r\n   * Helper to update data structures associated with the operation and returns\r\n   * the result.\r\n   */\n\n\n  processLastOperation(documentRef) {\n    assert(!this.docPaths.has(documentRef.path), 'Batch should not contain writes to the same document');\n    this.docPaths.add(documentRef.path);\n    assert(this.state === BatchState.OPEN, 'Batch should be OPEN when adding writes');\n    const deferred = new util_1.Deferred();\n    this.pendingOps.push(deferred);\n\n    if (this._opCount === this.maxBatchSize) {\n      this.state = BatchState.READY_TO_SEND;\n    }\n\n    return deferred.promise.then(result => {\n      if (result.writeTime) {\n        return new write_batch_1.WriteResult(result.writeTime);\n      } else {\n        throw result.status;\n      }\n    });\n  }\n  /**\r\n   * Resolves the individual operations in the batch with the results.\r\n   */\n\n\n  async processResults(results) {\n    await Promise.all(results.map((result, i) => {\n      const op = this.pendingOps[i];\n\n      if (result.status.code === google_gax_1.Status.OK) {\n        op.resolve(result);\n      } else {\n        op.reject(result.status);\n      }\n\n      return util_1.silencePromise(op.promise);\n    }));\n  }\n\n}\n/**\r\n * The error thrown when a BulkWriter operation fails.\r\n *\r\n * @class BulkWriterError\r\n */\n\n\nclass BulkWriterError extends Error {\n  /** @hideconstructor */\n  constructor(\n  /** The status code of the error. */\n  code,\n  /** The error message of the error. */\n  message,\n  /** The document reference the operation was performed on. */\n  documentRef,\n  /** The type of operation performed. */\n  operationType,\n  /** How many times this operation has been attempted unsuccessfully. */\n  failedAttempts) {\n    super(message);\n    this.code = code;\n    this.message = message;\n    this.documentRef = documentRef;\n    this.operationType = operationType;\n    this.failedAttempts = failedAttempts;\n  }\n\n}\n\nexports.BulkWriterError = BulkWriterError;\n/**\r\n * A Firestore BulkWriter than can be used to perform a large number of writes\r\n * in parallel. Writes to the same document will be executed sequentially.\r\n *\r\n * @class BulkWriter\r\n */\n\nclass BulkWriter {\n  /** @hideconstructor */\n  constructor(firestore, options) {\n    var _a, _b;\n\n    this.firestore = firestore;\n    /**\r\n     * The maximum number of writes that can be in a single batch.\r\n     */\n\n    this._maxBatchSize = MAX_BATCH_SIZE;\n    /**\r\n     * A queue of batches to be written.\r\n     */\n\n    this._batchQueue = [];\n    /**\r\n     * A queue of batches containing operations that need to be retried.\r\n     */\n\n    this._retryBatchQueue = [];\n    /**\r\n     * A list of promises that represent sent batches. Each promise is resolved\r\n     * when the batch's response is received. This includes batches from both the\r\n     * batchQueue and retryBatchQueue.\r\n     */\n\n    this._pendingBatches = new Set();\n    /**\r\n     * A list of promises that represent pending BulkWriter operations. Each\r\n     * promise is resolved when the BulkWriter operation resolves. This set\r\n     * includes retries. Each retry's promise is added, attempted, and removed\r\n     * from this set before scheduling the next retry.\r\n     */\n\n    this._pendingOps = new Set();\n    /**\r\n     * Whether this BulkWriter instance has started to close. Afterwards, no\r\n     * new operations can be enqueued, except for retry operations scheduled by\r\n     * the error handler.\r\n     */\n\n    this._closing = false;\n    /**\r\n     * The user-provided callback to be run every time a BulkWriter operation\r\n     * successfully completes.\r\n     * @private\r\n     */\n\n    this._successFn = () => {};\n    /**\r\n     * The user-provided callback to be run every time a BulkWriter operation\r\n     * fails.\r\n     * @private\r\n     */\n\n\n    this._errorFn = error => {\n      const retryCodes = util_1.getRetryCodes('batchWrite');\n      return error.code !== undefined && retryCodes.includes(error.code) && error.failedAttempts < backoff_1.MAX_RETRY_ATTEMPTS;\n    };\n\n    this.firestore._incrementBulkWritersCount();\n\n    validateBulkWriterOptions(options);\n\n    if ((options === null || options === void 0 ? void 0 : options.throttling) === false) {\n      this._rateLimiter = new rate_limiter_1.RateLimiter(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n    } else {\n      let startingRate = exports.DEFAULT_STARTING_MAXIMUM_OPS_PER_SECOND;\n      let maxRate = Number.POSITIVE_INFINITY;\n\n      if (typeof (options === null || options === void 0 ? void 0 : options.throttling) !== 'boolean') {\n        if (((_a = options === null || options === void 0 ? void 0 : options.throttling) === null || _a === void 0 ? void 0 : _a.maxOpsPerSecond) !== undefined) {\n          maxRate = options.throttling.maxOpsPerSecond;\n        }\n\n        if (((_b = options === null || options === void 0 ? void 0 : options.throttling) === null || _b === void 0 ? void 0 : _b.initialOpsPerSecond) !== undefined) {\n          startingRate = options.throttling.initialOpsPerSecond;\n        } // The initial validation step ensures that the maxOpsPerSecond is\n        // greater than initialOpsPerSecond. If this inequality is true, that\n        // means initialOpsPerSecond was not set and maxOpsPerSecond is less\n        // than the default starting rate.\n\n\n        if (maxRate < startingRate) {\n          startingRate = maxRate;\n        } // Ensure that the batch size is not larger than the number of allowed\n        // operations per second.\n\n\n        if (startingRate < this._maxBatchSize) {\n          this._maxBatchSize = startingRate;\n        }\n      }\n\n      this._rateLimiter = new rate_limiter_1.RateLimiter(startingRate, RATE_LIMITER_MULTIPLIER, RATE_LIMITER_MULTIPLIER_MILLIS, maxRate);\n    }\n  }\n  /**\r\n   * Create a document with the provided data. This single operation will fail\r\n   * if a document exists at its location.\r\n   *\r\n   * @param {DocumentReference} documentRef A reference to the document to be\r\n   * created.\r\n   * @param {T} data The object to serialize as the document.\r\n   * @returns {Promise<WriteResult>} A promise that resolves with the result of\r\n   * the write. If the write fails, the promise is rejected with a\r\n   * [BulkWriterError]{@link BulkWriterError}.\r\n   *\r\n   * @example\r\n   * let bulkWriter = firestore.bulkWriter();\r\n   * let documentRef = firestore.collection('col').doc();\r\n   *\r\n   * bulkWriter\r\n   *  .create(documentRef, {foo: 'bar'})\r\n   *  .then(result => {\r\n   *    console.log('Successfully executed write at: ', result);\r\n   *  })\r\n   *  .catch(err => {\r\n   *    console.log('Write failed with: ', err);\r\n   *  });\r\n   * });\r\n   */\n\n\n  create(documentRef, data) {\n    this.verifyNotClosed();\n\n    const op = this._executeWrite(documentRef, 'create', bulkCommitBatch => bulkCommitBatch.create(documentRef, data));\n\n    util_1.silencePromise(op);\n    return op;\n  }\n  /**\r\n   * Delete a document from the database.\r\n   *\r\n   * @param {DocumentReference} documentRef A reference to the document to be\r\n   * deleted.\r\n   * @param {Precondition=} precondition A precondition to enforce for this\r\n   * delete.\r\n   * @param {Timestamp=} precondition.lastUpdateTime If set, enforces that the\r\n   * document was last updated at lastUpdateTime. Fails the batch if the\r\n   * document doesn't exist or was last updated at a different time.\r\n   * @returns {Promise<WriteResult>} A promise that resolves with the result of\r\n   * the delete. If the delete fails, the promise is rejected with a\r\n   * [BulkWriterError]{@link BulkWriterError}.\r\n   *\r\n   * @example\r\n   * let bulkWriter = firestore.bulkWriter();\r\n   * let documentRef = firestore.doc('col/doc');\r\n   *\r\n   * bulkWriter\r\n   *  .delete(documentRef)\r\n   *  .then(result => {\r\n   *    console.log('Successfully deleted document');\r\n   *  })\r\n   *  .catch(err => {\r\n   *    console.log('Delete failed with: ', err);\r\n   *  });\r\n   * });\r\n   */\n\n\n  delete(documentRef, precondition) {\n    this.verifyNotClosed();\n\n    const op = this._executeWrite(documentRef, 'delete', bulkCommitBatch => bulkCommitBatch.delete(documentRef, precondition));\n\n    util_1.silencePromise(op);\n    return op;\n  }\n  /**\r\n   * Write to the document referred to by the provided\r\n   * [DocumentReference]{@link DocumentReference}. If the document does not\r\n   * exist yet, it will be created. If you pass [SetOptions]{@link SetOptions}.,\r\n   * the provided data can be merged into the existing document.\r\n   *\r\n   * @param {DocumentReference} documentRef A reference to the document to be\r\n   * set.\r\n   * @param {T} data The object to serialize as the document.\r\n   * @param {SetOptions=} options An object to configure the set behavior.\r\n   * @param {boolean=} options.merge - If true, set() merges the values\r\n   * specified in its data argument. Fields omitted from this set() call remain\r\n   * untouched.\r\n   * @param {Array.<string|FieldPath>=} options.mergeFields - If provided, set()\r\n   * only replaces the specified field paths. Any field path that is not\r\n   * specified is ignored and remains untouched.\r\n   * @returns {Promise<WriteResult>} A promise that resolves with the result of\r\n   * the write. If the write fails, the promise is rejected with a\r\n   * [BulkWriterError]{@link BulkWriterError}.\r\n   *\r\n   *\r\n   * @example\r\n   * let bulkWriter = firestore.bulkWriter();\r\n   * let documentRef = firestore.collection('col').doc();\r\n   *\r\n   * bulkWriter\r\n   *  .set(documentRef, {foo: 'bar'})\r\n   *  .then(result => {\r\n   *    console.log('Successfully executed write at: ', result);\r\n   *  })\r\n   *  .catch(err => {\r\n   *    console.log('Write failed with: ', err);\r\n   *  });\r\n   * });\r\n   */\n\n\n  set(documentRef, data, options) {\n    this.verifyNotClosed();\n\n    const op = this._executeWrite(documentRef, 'set', bulkCommitBatch => bulkCommitBatch.set(documentRef, data, options));\n\n    util_1.silencePromise(op);\n    return op;\n  }\n  /**\r\n   * Update fields of the document referred to by the provided\r\n   * [DocumentReference]{@link DocumentReference}. If the document doesn't yet\r\n   * exist, the update fails and the entire batch will be rejected.\r\n   *\r\n   * The update() method accepts either an object with field paths encoded as\r\n   * keys and field values encoded as values, or a variable number of arguments\r\n   * that alternate between field paths and field values. Nested fields can be\r\n   * updated by providing dot-separated field path strings or by providing\r\n   * FieldPath objects.\r\n   *\r\n   *\r\n   * A Precondition restricting this update can be specified as the last\r\n   * argument.\r\n   *\r\n   * @param {DocumentReference} documentRef A reference to the document to be\r\n   * updated.\r\n   * @param {UpdateData|string|FieldPath} dataOrField An object containing the\r\n   * fields and values with which to update the document or the path of the\r\n   * first field to update.\r\n   * @param {...(Precondition|*|string|FieldPath)} preconditionOrValues - An\r\n   * alternating list of field paths and values to update or a Precondition to\r\n   * restrict this update\r\n   * @returns {Promise<WriteResult>} A promise that resolves with the result of\r\n   * the write. If the write fails, the promise is rejected with a\r\n   * [BulkWriterError]{@link BulkWriterError}.\r\n   *\r\n   * @example\r\n   * let bulkWriter = firestore.bulkWriter();\r\n   * let documentRef = firestore.doc('col/doc');\r\n   *\r\n   * bulkWriter\r\n   *  .update(documentRef, {foo: 'bar'})\r\n   *  .then(result => {\r\n   *    console.log('Successfully executed write at: ', result);\r\n   *  })\r\n   *  .catch(err => {\r\n   *    console.log('Write failed with: ', err);\r\n   *  });\r\n   * });\r\n   */\n\n\n  update(documentRef, dataOrField, ...preconditionOrValues) {\n    this.verifyNotClosed();\n\n    const op = this._executeWrite(documentRef, 'update', bulkCommitBatch => bulkCommitBatch.update(documentRef, dataOrField, ...preconditionOrValues));\n\n    util_1.silencePromise(op);\n    return op;\n  }\n  /**\r\n   * Attaches a listener that is run every time a BulkWriter operation\r\n   * successfully completes.\r\n   *\r\n   * @param callback A callback to be called every time a BulkWriter operation\r\n   * successfully completes.\r\n   * @example\r\n   * let bulkWriter = firestore.bulkWriter();\r\n   *\r\n   * bulkWriter\r\n   *   .onWriteResult((documentRef, result) => {\r\n   *     console.log(\r\n   *       'Successfully executed write on document: ',\r\n   *       documentRef,\r\n   *       ' at: ',\r\n   *       result\r\n   *     );\r\n   *   });\r\n   */\n\n\n  onWriteResult(callback) {\n    this._successFn = callback;\n  }\n  /**\r\n   * Attaches an error handler listener that is run every time a BulkWriter\r\n   * operation fails.\r\n   *\r\n   * BulkWriter has a default error handler that retries UNAVAILABLE and\r\n   * ABORTED errors up to a maximum of 10 failed attempts. When an error\r\n   * handler is specified, the default error handler will be overwritten.\r\n   *\r\n   * @param shouldRetryCallback A callback to be called every time a BulkWriter\r\n   * operation fails. Returning `true` will retry the operation. Returning\r\n   * `false` will stop the retry loop.\r\n   * @example\r\n   * let bulkWriter = firestore.bulkWriter();\r\n   *\r\n   * bulkWriter\r\n   *   .onWriteError((error) => {\r\n   *     if (\r\n   *       error.code === GrpcStatus.UNAVAILABLE &&\r\n   *       error.failedAttempts < MAX_RETRY_ATTEMPTS\r\n   *     ) {\r\n   *       return true;\r\n   *     } else {\r\n   *       console.log('Failed write at document: ', error.documentRef);\r\n   *       return false;\r\n   *     }\r\n   *   });\r\n   */\n\n\n  onWriteError(shouldRetryCallback) {\n    this._errorFn = shouldRetryCallback;\n  }\n  /**\r\n   * Commits all writes that have been enqueued up to this point in parallel.\r\n   *\r\n   * Returns a Promise that resolves when all currently queued operations have\r\n   * been committed. The Promise will never be rejected since the results for\r\n   * each individual operation are conveyed via their individual Promises.\r\n   *\r\n   * The Promise resolves immediately if there are no pending writes. Otherwise,\r\n   * the Promise waits for all previously issued writes, but it does not wait\r\n   * for writes that were added after the method is called. If you want to wait\r\n   * for additional writes, call `flush()` again.\r\n   *\r\n   * @return {Promise<void>} A promise that resolves when all enqueued writes\r\n   * up to this point have been committed.\r\n   *\r\n   * @example\r\n   * let bulkWriter = firestore.bulkWriter();\r\n   *\r\n   * bulkWriter.create(documentRef, {foo: 'bar'});\r\n   * bulkWriter.update(documentRef2, {foo: 'bar'});\r\n   * bulkWriter.delete(documentRef3);\r\n   * await flush().then(() => {\r\n   *   console.log('Executed all writes');\r\n   * });\r\n   */\n\n\n  flush() {\n    this.verifyNotClosed(); // Copy the pending ops at the time flush() was called.\n\n    return this._flush(Array.from(this._pendingOps));\n  }\n\n  async _flush(pendingOps) {\n    let batchQueue = this._batchQueue;\n    batchQueue.forEach(batch => batch.markReadyToSend()); // Send all scheduled operations on the BatchQueue first.\n\n    this.sendReadyBatches(batchQueue);\n    await Promise.all(this._pendingBatches); // Afterwards, send all accumulated retry operations. Wait until the\n    // retryBatchQueue is cleared. This way, operations scheduled after\n    // flush() will not be sent until the retries are completed.\n\n    batchQueue = this._retryBatchQueue;\n\n    if (batchQueue.length > 0) {\n      batchQueue.forEach(batch => batch.markReadyToSend());\n      this.sendReadyBatches(batchQueue);\n    } // Make sure user promises resolve before flush() resolves.\n\n\n    return util_1.silencePromise(Promise.all(pendingOps));\n  }\n  /**\r\n   * Commits all enqueued writes and marks the BulkWriter instance as closed.\r\n   *\r\n   * After calling `close()`, calling any method wil throw an error. Any\r\n   * retries scheduled as part of an `onWriteError()` handler will be run\r\n   * before the `close()` promise resolves.\r\n   *\r\n   * Returns a Promise that resolves when there are no more pending writes. The\r\n   * Promise will never be rejected. Calling this method will send all requests.\r\n   * The promise resolves immediately if there are no pending writes.\r\n   *\r\n   * @return {Promise<void>} A promise that resolves when all enqueued writes\r\n   * up to this point have been committed.\r\n   *\r\n   * @example\r\n   * let bulkWriter = firestore.bulkWriter();\r\n   *\r\n   * bulkWriter.create(documentRef, {foo: 'bar'});\r\n   * bulkWriter.update(documentRef2, {foo: 'bar'});\r\n   * bulkWriter.delete(documentRef3);\r\n   * await close().then(() => {\r\n   *   console.log('Executed all writes');\r\n   * });\r\n   */\n\n\n  close() {\n    this.verifyNotClosed();\n\n    this.firestore._decrementBulkWritersCount();\n\n    const flushPromise = this.flush();\n    this._closing = true;\n    return flushPromise;\n  }\n  /**\r\n   * Throws an error if the BulkWriter instance has been closed.\r\n   * @private\r\n   */\n\n\n  verifyNotClosed() {\n    if (this._closing) {\n      throw new Error('BulkWriter has already been closed.');\n    }\n  }\n  /**\r\n   * Return the first eligible batch that can hold a write to the provided\r\n   * reference, or creates one if no eligible batches are found.\r\n   *\r\n   * @private\r\n   */\n\n\n  getEligibleBatch(documentRef, batchQueue) {\n    if (batchQueue.length > 0) {\n      const lastBatch = batchQueue[batchQueue.length - 1];\n\n      if (lastBatch.isOpen() && !lastBatch.has(documentRef)) {\n        return lastBatch;\n      }\n    }\n\n    return this.createNewBatch(batchQueue);\n  }\n  /**\r\n   * Creates a new batch and adds it to the appropriate batch queue. If there\r\n   * is already a batch enqueued, sends the batch after a new one is created.\r\n   *\r\n   * @private\r\n   */\n\n\n  createNewBatch(batchQueue) {\n    const newBatch = new BulkCommitBatch(this.firestore, this._maxBatchSize);\n\n    if (batchQueue.length > 0) {\n      batchQueue[batchQueue.length - 1].markReadyToSend();\n      this.sendReadyBatches(batchQueue);\n    }\n\n    batchQueue.push(newBatch);\n    return newBatch;\n  }\n  /**\r\n   * Attempts to send batches starting from the front of the provided batch\r\n   * queue until a batch cannot be sent.\r\n   *\r\n   * After a batch is complete, try sending batches again.\r\n   *\r\n   * @private\r\n   */\n\n\n  sendReadyBatches(batchQueue) {\n    let index = 0;\n\n    while (index < batchQueue.length && batchQueue[index].isReadyToSend()) {\n      const batch = batchQueue[index]; // Deferred promise that resolves when the current batch or its\n      // scheduling attempt completes.\n\n      const batchCompletedDeferred = new util_1.Deferred();\n\n      this._pendingBatches.add(batchCompletedDeferred.promise); // Send the batch if it is under the rate limit, or schedule another\n      // attempt after the appropriate timeout.\n\n\n      const delayMs = this._rateLimiter.getNextRequestDelayMs(batch._opCount);\n\n      assert(delayMs !== -1, 'Batch size should be under capacity');\n\n      if (delayMs === 0) {\n        this.sendBatch(batch, batchQueue, batchCompletedDeferred);\n      } else {\n        backoff_1.delayExecution(() => {\n          this.sendReadyBatches(batchQueue);\n          batchCompletedDeferred.resolve();\n\n          this._pendingBatches.delete(batchCompletedDeferred.promise);\n        }, delayMs);\n        break;\n      }\n\n      index++;\n    }\n  }\n  /**\r\n   * Sends the provided batch and processes the results. After the batch is\r\n   * committed, sends the next group of ready batches.\r\n   *\r\n   * @param batchCompletedDeferred A deferred promise that resolves when the\r\n   * batch has been sent and received.\r\n   * @private\r\n   */\n\n\n  sendBatch(batch, batchQueue, batchCompletedDeferred) {\n    const success = this._rateLimiter.tryMakeRequest(batch._opCount);\n\n    assert(success, 'Batch should be under rate limit to be sent.');\n    batch.bulkCommit().then(() => {\n      // Remove the batch from the BatchQueue after it has been processed.\n      const batchIndex = batchQueue.indexOf(batch);\n      assert(batchIndex !== -1, 'The batch should be in the BatchQueue');\n      batchQueue.splice(batchIndex, 1);\n\n      if (batchQueue === this._retryBatchQueue) {\n        batchQueue.forEach(batch => batch.markReadyToSend());\n      }\n\n      batchCompletedDeferred.resolve();\n\n      this._pendingBatches.delete(batchCompletedDeferred.promise);\n\n      this.sendReadyBatches(batchQueue);\n    });\n  }\n  /**\r\n   * Schedules and runs the provided operation.\r\n   * @private\r\n   */\n\n\n  async _executeWrite(documentRef, operationType, operationFn) {\n    // A deferred promise that resolves when operationFn completes.\n    const operationCompletedDeferred = new util_1.Deferred();\n\n    this._pendingOps.add(operationCompletedDeferred.promise);\n\n    try {\n      for (let failedAttempts = 0;; ++failedAttempts) {\n        const batchQueue = failedAttempts > 0 ? this._retryBatchQueue : this._batchQueue;\n        const bulkCommitBatch = this.getEligibleBatch(documentRef, batchQueue); // Send ready batches if this is the first attempt. Subsequent retry\n        // batches are scheduled after the initial batch returns.\n\n        if (failedAttempts === 0) {\n          this.sendReadyBatches(batchQueue);\n        }\n\n        try {\n          operationFn(bulkCommitBatch);\n          const operationResult = await bulkCommitBatch.processLastOperation(documentRef);\n\n          this._successFn(documentRef, operationResult);\n\n          return operationResult;\n        } catch (error) {\n          const bulkWriterError = new BulkWriterError(error.code, error.message, documentRef, operationType, failedAttempts);\n\n          const shouldRetry = this._errorFn(bulkWriterError);\n\n          logger_1.logger('BulkWriter.errorFn', null, 'Running error callback on error code:', error.code, ', shouldRetry:', shouldRetry);\n\n          if (!shouldRetry) {\n            throw bulkWriterError;\n          }\n        }\n      }\n    } finally {\n      operationCompletedDeferred.resolve();\n\n      this._pendingOps.delete(operationCompletedDeferred.promise);\n    }\n  }\n  /**\r\n   * Sets the maximum number of allowed operations in a batch.\r\n   *\r\n   * @private\r\n   */\n  // Visible for testing.\n\n\n  _setMaxBatchSize(size) {\n    this._maxBatchSize = size;\n  }\n  /**\r\n   * Returns the rate limiter for testing.\r\n   *\r\n   * @private\r\n   */\n  // Visible for testing.\n\n\n  _getRateLimiter() {\n    return this._rateLimiter;\n  }\n\n}\n\nexports.BulkWriter = BulkWriter;\n/**\r\n * Validates the use of 'value' as BulkWriterOptions.\r\n *\r\n * @private\r\n * @param value The BulkWriterOptions object to validate.\r\n * @throws if the input is not a valid BulkWriterOptions object.\r\n */\n\nfunction validateBulkWriterOptions(value) {\n  if (validate_1.validateOptional(value, {\n    optional: true\n  })) {\n    return;\n  }\n\n  const argName = 'options';\n\n  if (!util_1.isObject(value)) {\n    throw new Error(`${validate_1.invalidArgumentMessage(argName, 'bulkWriter() options argument')} Input is not an object.`);\n  }\n\n  const options = value;\n\n  if (options.throttling === undefined || typeof options.throttling === 'boolean') {\n    return;\n  }\n\n  if (options.throttling.initialOpsPerSecond !== undefined) {\n    validate_1.validateInteger('initialOpsPerSecond', options.throttling.initialOpsPerSecond, {\n      minValue: 1\n    });\n  }\n\n  if (options.throttling.maxOpsPerSecond !== undefined) {\n    validate_1.validateInteger('maxOpsPerSecond', options.throttling.maxOpsPerSecond, {\n      minValue: 1\n    });\n\n    if (options.throttling.initialOpsPerSecond !== undefined && options.throttling.initialOpsPerSecond > options.throttling.maxOpsPerSecond) {\n      throw new Error(`${validate_1.invalidArgumentMessage(argName, 'bulkWriter() options argument')} \"maxOpsPerSecond\" cannot be less than \"initialOpsPerSecond\".`);\n    }\n  }\n}","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Backend/node_modules/@google-cloud/firestore/build/src/bulk-writer.js"],"names":["Object","defineProperty","exports","value","assert","require","backoff_1","rate_limiter_1","timestamp_1","util_1","write_batch_1","validate_1","logger_1","google_gax_1","MAX_BATCH_SIZE","DEFAULT_STARTING_MAXIMUM_OPS_PER_SECOND","RATE_LIMITER_MULTIPLIER","RATE_LIMITER_MULTIPLIER_MILLIS","BatchState","BulkCommitBatch","WriteBatch","constructor","firestore","maxBatchSize","state","OPEN","docPaths","Set","pendingOps","has","documentRef","path","markReadyToSend","READY_TO_SEND","isOpen","isReadyToSend","bulkCommit","SENT","stack","Error","results","retryCodes","getRetryCodes","response","_commit","methodName","writeResults","map","result","i","status","error","GoogleError","message","undefined","code","DELETE_TIMESTAMP_SENTINEL","Timestamp","fromMillis","updateTime","Status","OK","fromProto","BatchWriteResult","err","writeTime","wrapError","processResults","processLastOperation","add","deferred","Deferred","push","_opCount","promise","then","WriteResult","Promise","all","op","resolve","reject","silencePromise","BulkWriterError","operationType","failedAttempts","BulkWriter","options","_a","_b","_maxBatchSize","_batchQueue","_retryBatchQueue","_pendingBatches","_pendingOps","_closing","_successFn","_errorFn","includes","MAX_RETRY_ATTEMPTS","_incrementBulkWritersCount","validateBulkWriterOptions","throttling","_rateLimiter","RateLimiter","Number","POSITIVE_INFINITY","startingRate","maxRate","maxOpsPerSecond","initialOpsPerSecond","create","data","verifyNotClosed","_executeWrite","bulkCommitBatch","delete","precondition","set","update","dataOrField","preconditionOrValues","onWriteResult","callback","onWriteError","shouldRetryCallback","flush","_flush","Array","from","batchQueue","forEach","batch","sendReadyBatches","length","close","_decrementBulkWritersCount","flushPromise","getEligibleBatch","lastBatch","createNewBatch","newBatch","index","batchCompletedDeferred","delayMs","getNextRequestDelayMs","sendBatch","delayExecution","success","tryMakeRequest","batchIndex","indexOf","splice","operationFn","operationCompletedDeferred","operationResult","bulkWriterError","shouldRetry","logger","_setMaxBatchSize","size","_getRateLimiter","validateOptional","optional","argName","isObject","invalidArgumentMessage","validateInteger","minValue"],"mappings":"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AhB,CAAuBjF,WAAvB,EAAoCkF,IAApC,CAA7D,CAAX;;AACAvG,IAAAA,MAAM,CAACyE,cAAP,CAAsBH,EAAtB;AACA,WAAOA,EAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIqC,EAAAA,MAAM,CAACtF,WAAD,EAAcuF,YAAd,EAA4B;AAC9B,SAAKJ,eAAL;;AACA,UAAMlC,EAAE,GAAG,KAAKmC,aAAL,CAAmBpF,WAAnB,EAAgC,QAAhC,EAA0CqF,eAAe,IAAIA,eAAe,CAACC,MAAhB,CAAuBtF,WAAvB,EAAoCuF,YAApC,CAA7D,CAAX;;AACA5G,IAAAA,MAAM,CAACyE,cAAP,CAAsBH,EAAtB;AACA,WAAOA,EAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIuC,EAAAA,GAAG,CAACxF,WAAD,EAAckF,IAAd,EAAoBzB,OAApB,EAA6B;AAC5B,SAAK0B,eAAL;;AACA,UAAMlC,EAAE,GAAG,KAAKmC,aAAL,CAAmBpF,WAAnB,EAAgC,KAAhC,EAAuCqF,eAAe,IAAIA,eAAe,CAACG,GAAhB,CAAoBxF,WAApB,EAAiCkF,IAAjC,EAAuCzB,OAAvC,CAA1D,CAAX;;AACA9E,IAAAA,MAAM,CAACyE,cAAP,CAAsBH,EAAtB;AACA,WAAOA,EAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIw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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst assert = require(\"assert\");\r\nconst backoff_1 = require(\"./backoff\");\r\nconst rate_limiter_1 = require(\"./rate-limiter\");\r\nconst timestamp_1 = require(\"./timestamp\");\r\nconst util_1 = require(\"./util\");\r\nconst write_batch_1 = require(\"./write-batch\");\r\nconst validate_1 = require(\"./validate\");\r\nconst logger_1 = require(\"./logger\");\r\nconst google_gax_1 = require(\"google-gax\");\r\n/*!\r\n * The maximum number of writes that can be in a single batch.\r\n */\r\nconst MAX_BATCH_SIZE = 20;\r\n/*!\r\n * The starting maximum number of operations per second as allowed by the\r\n * 500/50/5 rule.\r\n *\r\n * https://cloud.google.com/datastore/docs/best-practices#ramping_up_traffic.\r\n */\r\nexports.DEFAULT_STARTING_MAXIMUM_OPS_PER_SECOND = 500;\r\n/*!\r\n * The rate by which to increase the capacity as specified by the 500/50/5 rule.\r\n *\r\n * https://cloud.google.com/datastore/docs/best-practices#ramping_up_traffic.\r\n */\r\nconst RATE_LIMITER_MULTIPLIER = 1.5;\r\n/*!\r\n * How often the operations per second capacity should increase in milliseconds\r\n * as specified by the 500/50/5 rule.\r\n *\r\n * https://cloud.google.com/datastore/docs/best-practices#ramping_up_traffic.\r\n */\r\nconst RATE_LIMITER_MULTIPLIER_MILLIS = 5 * 60 * 1000;\r\n/*!\r\n * Used to represent the state of batch.\r\n *\r\n * Writes can only be added while the batch is OPEN. For a batch to be sent,\r\n * the batch must be READY_TO_SEND. After a batch is sent, it is marked as SENT.\r\n */\r\nvar BatchState;\r\n(function (BatchState) {\r\n    BatchState[BatchState[\"OPEN\"] = 0] = \"OPEN\";\r\n    BatchState[BatchState[\"READY_TO_SEND\"] = 1] = \"READY_TO_SEND\";\r\n    BatchState[BatchState[\"SENT\"] = 2] = \"SENT\";\r\n})(BatchState || (BatchState = {}));\r\n/**\r\n * Used to represent a batch on the BatchQueue.\r\n *\r\n * @private\r\n */\r\nclass BulkCommitBatch extends write_batch_1.WriteBatch {\r\n    constructor(firestore, maxBatchSize) {\r\n        super(firestore);\r\n        this.maxBatchSize = maxBatchSize;\r\n        /**\r\n         * The state of the batch.\r\n         */\r\n        this.state = BatchState.OPEN;\r\n        // The set of document reference paths present in the WriteBatch.\r\n        this.docPaths = new Set();\r\n        // An array of pending write operations. Only contains writes that have not\r\n        // been resolved.\r\n        this.pendingOps = [];\r\n    }\r\n    has(documentRef) {\r\n        return this.docPaths.has(documentRef.path);\r\n    }\r\n    markReadyToSend() {\r\n        if (this.state === BatchState.OPEN) {\r\n            this.state = BatchState.READY_TO_SEND;\r\n        }\r\n    }\r\n    isOpen() {\r\n        return this.state === BatchState.OPEN;\r\n    }\r\n    isReadyToSend() {\r\n        return this.state === BatchState.READY_TO_SEND;\r\n    }\r\n    async bulkCommit() {\r\n        assert(this.state === BatchState.READY_TO_SEND, 'The batch should be marked as READY_TO_SEND before committing');\r\n        this.state = BatchState.SENT;\r\n        // Capture the error stack to preserve stack tracing across async calls.\r\n        const stack = Error().stack;\r\n        let results = [];\r\n        try {\r\n            const retryCodes = util_1.getRetryCodes('batchWrite');\r\n            const response = await this._commit({ retryCodes, methodName: 'batchWrite' });\r\n            results = response.writeResults.map((result, i) => {\r\n                const status = response.status[i];\r\n                const error = new google_gax_1.GoogleError(status.message || undefined);\r\n                error.code = status.code;\r\n                // Since delete operations currently do not have write times, use a\r\n                // sentinel Timestamp value.\r\n                // TODO(b/158502664): Use actual delete timestamp.\r\n                const DELETE_TIMESTAMP_SENTINEL = timestamp_1.Timestamp.fromMillis(0);\r\n                const updateTime = error.code === google_gax_1.Status.OK\r\n                    ? timestamp_1.Timestamp.fromProto(result.updateTime || DELETE_TIMESTAMP_SENTINEL)\r\n                    : null;\r\n                return new write_batch_1.BatchWriteResult(updateTime, error);\r\n            });\r\n        }\r\n        catch (err) {\r\n            // Map the failure to each individual write's result.\r\n            results = this.pendingOps.map(() => {\r\n                return {\r\n                    writeTime: null,\r\n                    status: util_1.wrapError(err, stack),\r\n                };\r\n            });\r\n        }\r\n        return this.processResults(results);\r\n    }\r\n    /**\r\n     * Helper to update data structures associated with the operation and returns\r\n     * the result.\r\n     */\r\n    processLastOperation(documentRef) {\r\n        assert(!this.docPaths.has(documentRef.path), 'Batch should not contain writes to the same document');\r\n        this.docPaths.add(documentRef.path);\r\n        assert(this.state === BatchState.OPEN, 'Batch should be OPEN when adding writes');\r\n        const deferred = new util_1.Deferred();\r\n        this.pendingOps.push(deferred);\r\n        if (this._opCount === this.maxBatchSize) {\r\n            this.state = BatchState.READY_TO_SEND;\r\n        }\r\n        return deferred.promise.then(result => {\r\n            if (result.writeTime) {\r\n                return new write_batch_1.WriteResult(result.writeTime);\r\n            }\r\n            else {\r\n                throw result.status;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Resolves the individual operations in the batch with the results.\r\n     */\r\n    async processResults(results) {\r\n        await Promise.all(results.map((result, i) => {\r\n            const op = this.pendingOps[i];\r\n            if (result.status.code === google_gax_1.Status.OK) {\r\n                op.resolve(result);\r\n            }\r\n            else {\r\n                op.reject(result.status);\r\n            }\r\n            return util_1.silencePromise(op.promise);\r\n        }));\r\n    }\r\n}\r\n/**\r\n * The error thrown when a BulkWriter operation fails.\r\n *\r\n * @class BulkWriterError\r\n */\r\nclass BulkWriterError extends Error {\r\n    /** @hideconstructor */\r\n    constructor(\r\n    /** The status code of the error. */\r\n    code, \r\n    /** The error message of the error. */\r\n    message, \r\n    /** The document reference the operation was performed on. */\r\n    documentRef, \r\n    /** The type of operation performed. */\r\n    operationType, \r\n    /** How many times this operation has been attempted unsuccessfully. */\r\n    failedAttempts) {\r\n        super(message);\r\n        this.code = code;\r\n        this.message = message;\r\n        this.documentRef = documentRef;\r\n        this.operationType = operationType;\r\n        this.failedAttempts = failedAttempts;\r\n    }\r\n}\r\nexports.BulkWriterError = BulkWriterError;\r\n/**\r\n * A Firestore BulkWriter than can be used to perform a large number of writes\r\n * in parallel. Writes to the same document will be executed sequentially.\r\n *\r\n * @class BulkWriter\r\n */\r\nclass BulkWriter {\r\n    /** @hideconstructor */\r\n    constructor(firestore, options) {\r\n        var _a, _b;\r\n        this.firestore = firestore;\r\n        /**\r\n         * The maximum number of writes that can be in a single batch.\r\n         */\r\n        this._maxBatchSize = MAX_BATCH_SIZE;\r\n        /**\r\n         * A queue of batches to be written.\r\n         */\r\n        this._batchQueue = [];\r\n        /**\r\n         * A queue of batches containing operations that need to be retried.\r\n         */\r\n        this._retryBatchQueue = [];\r\n        /**\r\n         * A list of promises that represent sent batches. Each promise is resolved\r\n         * when the batch's response is received. This includes batches from both the\r\n         * batchQueue and retryBatchQueue.\r\n         */\r\n        this._pendingBatches = new Set();\r\n        /**\r\n         * A list of promises that represent pending BulkWriter operations. Each\r\n         * promise is resolved when the BulkWriter operation resolves. This set\r\n         * includes retries. Each retry's promise is added, attempted, and removed\r\n         * from this set before scheduling the next retry.\r\n         */\r\n        this._pendingOps = new Set();\r\n        /**\r\n         * Whether this BulkWriter instance has started to close. Afterwards, no\r\n         * new operations can be enqueued, except for retry operations scheduled by\r\n         * the error handler.\r\n         */\r\n        this._closing = false;\r\n        /**\r\n         * The user-provided callback to be run every time a BulkWriter operation\r\n         * successfully completes.\r\n         * @private\r\n         */\r\n        this._successFn = () => { };\r\n        /**\r\n         * The user-provided callback to be run every time a BulkWriter operation\r\n         * fails.\r\n         * @private\r\n         */\r\n        this._errorFn = error => {\r\n            const retryCodes = util_1.getRetryCodes('batchWrite');\r\n            return (error.code !== undefined &&\r\n                retryCodes.includes(error.code) &&\r\n                error.failedAttempts < backoff_1.MAX_RETRY_ATTEMPTS);\r\n        };\r\n        this.firestore._incrementBulkWritersCount();\r\n        validateBulkWriterOptions(options);\r\n        if ((options === null || options === void 0 ? void 0 : options.throttling) === false) {\r\n            this._rateLimiter = new rate_limiter_1.RateLimiter(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\r\n        }\r\n        else {\r\n            let startingRate = exports.DEFAULT_STARTING_MAXIMUM_OPS_PER_SECOND;\r\n            let maxRate = Number.POSITIVE_INFINITY;\r\n            if (typeof (options === null || options === void 0 ? void 0 : options.throttling) !== 'boolean') {\r\n                if (((_a = options === null || options === void 0 ? void 0 : options.throttling) === null || _a === void 0 ? void 0 : _a.maxOpsPerSecond) !== undefined) {\r\n                    maxRate = options.throttling.maxOpsPerSecond;\r\n                }\r\n                if (((_b = options === null || options === void 0 ? void 0 : options.throttling) === null || _b === void 0 ? void 0 : _b.initialOpsPerSecond) !== undefined) {\r\n                    startingRate = options.throttling.initialOpsPerSecond;\r\n                }\r\n                // The initial validation step ensures that the maxOpsPerSecond is\r\n                // greater than initialOpsPerSecond. If this inequality is true, that\r\n                // means initialOpsPerSecond was not set and maxOpsPerSecond is less\r\n                // than the default starting rate.\r\n                if (maxRate < startingRate) {\r\n                    startingRate = maxRate;\r\n                }\r\n                // Ensure that the batch size is not larger than the number of allowed\r\n                // operations per second.\r\n                if (startingRate < this._maxBatchSize) {\r\n                    this._maxBatchSize = startingRate;\r\n                }\r\n            }\r\n            this._rateLimiter = new rate_limiter_1.RateLimiter(startingRate, RATE_LIMITER_MULTIPLIER, RATE_LIMITER_MULTIPLIER_MILLIS, maxRate);\r\n        }\r\n    }\r\n    /**\r\n     * Create a document with the provided data. This single operation will fail\r\n     * if a document exists at its location.\r\n     *\r\n     * @param {DocumentReference} documentRef A reference to the document to be\r\n     * created.\r\n     * @param {T} data The object to serialize as the document.\r\n     * @returns {Promise<WriteResult>} A promise that resolves with the result of\r\n     * the write. If the write fails, the promise is rejected with a\r\n     * [BulkWriterError]{@link BulkWriterError}.\r\n     *\r\n     * @example\r\n     * let bulkWriter = firestore.bulkWriter();\r\n     * let documentRef = firestore.collection('col').doc();\r\n     *\r\n     * bulkWriter\r\n     *  .create(documentRef, {foo: 'bar'})\r\n     *  .then(result => {\r\n     *    console.log('Successfully executed write at: ', result);\r\n     *  })\r\n     *  .catch(err => {\r\n     *    console.log('Write failed with: ', err);\r\n     *  });\r\n     * });\r\n     */\r\n    create(documentRef, data) {\r\n        this.verifyNotClosed();\r\n        const op = this._executeWrite(documentRef, 'create', bulkCommitBatch => bulkCommitBatch.create(documentRef, data));\r\n        util_1.silencePromise(op);\r\n        return op;\r\n    }\r\n    /**\r\n     * Delete a document from the database.\r\n     *\r\n     * @param {DocumentReference} documentRef A reference to the document to be\r\n     * deleted.\r\n     * @param {Precondition=} precondition A precondition to enforce for this\r\n     * delete.\r\n     * @param {Timestamp=} precondition.lastUpdateTime If set, enforces that the\r\n     * document was last updated at lastUpdateTime. Fails the batch if the\r\n     * document doesn't exist or was last updated at a different time.\r\n     * @returns {Promise<WriteResult>} A promise that resolves with the result of\r\n     * the delete. If the delete fails, the promise is rejected with a\r\n     * [BulkWriterError]{@link BulkWriterError}.\r\n     *\r\n     * @example\r\n     * let bulkWriter = firestore.bulkWriter();\r\n     * let documentRef = firestore.doc('col/doc');\r\n     *\r\n     * bulkWriter\r\n     *  .delete(documentRef)\r\n     *  .then(result => {\r\n     *    console.log('Successfully deleted document');\r\n     *  })\r\n     *  .catch(err => {\r\n     *    console.log('Delete failed with: ', err);\r\n     *  });\r\n     * });\r\n     */\r\n    delete(documentRef, precondition) {\r\n        this.verifyNotClosed();\r\n        const op = this._executeWrite(documentRef, 'delete', bulkCommitBatch => bulkCommitBatch.delete(documentRef, precondition));\r\n        util_1.silencePromise(op);\r\n        return op;\r\n    }\r\n    /**\r\n     * Write to the document referred to by the provided\r\n     * [DocumentReference]{@link DocumentReference}. If the document does not\r\n     * exist yet, it will be created. If you pass [SetOptions]{@link SetOptions}.,\r\n     * the provided data can be merged into the existing document.\r\n     *\r\n     * @param {DocumentReference} documentRef A reference to the document to be\r\n     * set.\r\n     * @param {T} data The object to serialize as the document.\r\n     * @param {SetOptions=} options An object to configure the set behavior.\r\n     * @param {boolean=} options.merge - If true, set() merges the values\r\n     * specified in its data argument. Fields omitted from this set() call remain\r\n     * untouched.\r\n     * @param {Array.<string|FieldPath>=} options.mergeFields - If provided, set()\r\n     * only replaces the specified field paths. Any field path that is not\r\n     * specified is ignored and remains untouched.\r\n     * @returns {Promise<WriteResult>} A promise that resolves with the result of\r\n     * the write. If the write fails, the promise is rejected with a\r\n     * [BulkWriterError]{@link BulkWriterError}.\r\n     *\r\n     *\r\n     * @example\r\n     * let bulkWriter = firestore.bulkWriter();\r\n     * let documentRef = firestore.collection('col').doc();\r\n     *\r\n     * bulkWriter\r\n     *  .set(documentRef, {foo: 'bar'})\r\n     *  .then(result => {\r\n     *    console.log('Successfully executed write at: ', result);\r\n     *  })\r\n     *  .catch(err => {\r\n     *    console.log('Write failed with: ', err);\r\n     *  });\r\n     * });\r\n     */\r\n    set(documentRef, data, options) {\r\n        this.verifyNotClosed();\r\n        const op = this._executeWrite(documentRef, 'set', bulkCommitBatch => bulkCommitBatch.set(documentRef, data, options));\r\n        util_1.silencePromise(op);\r\n        return op;\r\n    }\r\n    /**\r\n     * Update fields of the document referred to by the provided\r\n     * [DocumentReference]{@link DocumentReference}. If the document doesn't yet\r\n     * exist, the update fails and the entire batch will be rejected.\r\n     *\r\n     * The update() method accepts either an object with field paths encoded as\r\n     * keys and field values encoded as values, or a variable number of arguments\r\n     * that alternate between field paths and field values. Nested fields can be\r\n     * updated by providing dot-separated field path strings or by providing\r\n     * FieldPath objects.\r\n     *\r\n     *\r\n     * A Precondition restricting this update can be specified as the last\r\n     * argument.\r\n     *\r\n     * @param {DocumentReference} documentRef A reference to the document to be\r\n     * updated.\r\n     * @param {UpdateData|string|FieldPath} dataOrField An object containing the\r\n     * fields and values with which to update the document or the path of the\r\n     * first field to update.\r\n     * @param {...(Precondition|*|string|FieldPath)} preconditionOrValues - An\r\n     * alternating list of field paths and values to update or a Precondition to\r\n     * restrict this update\r\n     * @returns {Promise<WriteResult>} A promise that resolves with the result of\r\n     * the write. If the write fails, the promise is rejected with a\r\n     * [BulkWriterError]{@link BulkWriterError}.\r\n     *\r\n     * @example\r\n     * let bulkWriter = firestore.bulkWriter();\r\n     * let documentRef = firestore.doc('col/doc');\r\n     *\r\n     * bulkWriter\r\n     *  .update(documentRef, {foo: 'bar'})\r\n     *  .then(result => {\r\n     *    console.log('Successfully executed write at: ', result);\r\n     *  })\r\n     *  .catch(err => {\r\n     *    console.log('Write failed with: ', err);\r\n     *  });\r\n     * });\r\n     */\r\n    update(documentRef, dataOrField, ...preconditionOrValues) {\r\n        this.verifyNotClosed();\r\n        const op = this._executeWrite(documentRef, 'update', bulkCommitBatch => bulkCommitBatch.update(documentRef, dataOrField, ...preconditionOrValues));\r\n        util_1.silencePromise(op);\r\n        return op;\r\n    }\r\n    /**\r\n     * Attaches a listener that is run every time a BulkWriter operation\r\n     * successfully completes.\r\n     *\r\n     * @param callback A callback to be called every time a BulkWriter operation\r\n     * successfully completes.\r\n     * @example\r\n     * let bulkWriter = firestore.bulkWriter();\r\n     *\r\n     * bulkWriter\r\n     *   .onWriteResult((documentRef, result) => {\r\n     *     console.log(\r\n     *       'Successfully executed write on document: ',\r\n     *       documentRef,\r\n     *       ' at: ',\r\n     *       result\r\n     *     );\r\n     *   });\r\n     */\r\n    onWriteResult(callback) {\r\n        this._successFn = callback;\r\n    }\r\n    /**\r\n     * Attaches an error handler listener that is run every time a BulkWriter\r\n     * operation fails.\r\n     *\r\n     * BulkWriter has a default error handler that retries UNAVAILABLE and\r\n     * ABORTED errors up to a maximum of 10 failed attempts. When an error\r\n     * handler is specified, the default error handler will be overwritten.\r\n     *\r\n     * @param shouldRetryCallback A callback to be called every time a BulkWriter\r\n     * operation fails. Returning `true` will retry the operation. Returning\r\n     * `false` will stop the retry loop.\r\n     * @example\r\n     * let bulkWriter = firestore.bulkWriter();\r\n     *\r\n     * bulkWriter\r\n     *   .onWriteError((error) => {\r\n     *     if (\r\n     *       error.code === GrpcStatus.UNAVAILABLE &&\r\n     *       error.failedAttempts < MAX_RETRY_ATTEMPTS\r\n     *     ) {\r\n     *       return true;\r\n     *     } else {\r\n     *       console.log('Failed write at document: ', error.documentRef);\r\n     *       return false;\r\n     *     }\r\n     *   });\r\n     */\r\n    onWriteError(shouldRetryCallback) {\r\n        this._errorFn = shouldRetryCallback;\r\n    }\r\n    /**\r\n     * Commits all writes that have been enqueued up to this point in parallel.\r\n     *\r\n     * Returns a Promise that resolves when all currently queued operations have\r\n     * been committed. The Promise will never be rejected since the results for\r\n     * each individual operation are conveyed via their individual Promises.\r\n     *\r\n     * The Promise resolves immediately if there are no pending writes. Otherwise,\r\n     * the Promise waits for all previously issued writes, but it does not wait\r\n     * for writes that were added after the method is called. If you want to wait\r\n     * for additional writes, call `flush()` again.\r\n     *\r\n     * @return {Promise<void>} A promise that resolves when all enqueued writes\r\n     * up to this point have been committed.\r\n     *\r\n     * @example\r\n     * let bulkWriter = firestore.bulkWriter();\r\n     *\r\n     * bulkWriter.create(documentRef, {foo: 'bar'});\r\n     * bulkWriter.update(documentRef2, {foo: 'bar'});\r\n     * bulkWriter.delete(documentRef3);\r\n     * await flush().then(() => {\r\n     *   console.log('Executed all writes');\r\n     * });\r\n     */\r\n    flush() {\r\n        this.verifyNotClosed();\r\n        // Copy the pending ops at the time flush() was called.\r\n        return this._flush(Array.from(this._pendingOps));\r\n    }\r\n    async _flush(pendingOps) {\r\n        let batchQueue = this._batchQueue;\r\n        batchQueue.forEach(batch => batch.markReadyToSend());\r\n        // Send all scheduled operations on the BatchQueue first.\r\n        this.sendReadyBatches(batchQueue);\r\n        await Promise.all(this._pendingBatches);\r\n        // Afterwards, send all accumulated retry operations. Wait until the\r\n        // retryBatchQueue is cleared. This way, operations scheduled after\r\n        // flush() will not be sent until the retries are completed.\r\n        batchQueue = this._retryBatchQueue;\r\n        if (batchQueue.length > 0) {\r\n            batchQueue.forEach(batch => batch.markReadyToSend());\r\n            this.sendReadyBatches(batchQueue);\r\n        }\r\n        // Make sure user promises resolve before flush() resolves.\r\n        return util_1.silencePromise(Promise.all(pendingOps));\r\n    }\r\n    /**\r\n     * Commits all enqueued writes and marks the BulkWriter instance as closed.\r\n     *\r\n     * After calling `close()`, calling any method wil throw an error. Any\r\n     * retries scheduled as part of an `onWriteError()` handler will be run\r\n     * before the `close()` promise resolves.\r\n     *\r\n     * Returns a Promise that resolves when there are no more pending writes. The\r\n     * Promise will never be rejected. Calling this method will send all requests.\r\n     * The promise resolves immediately if there are no pending writes.\r\n     *\r\n     * @return {Promise<void>} A promise that resolves when all enqueued writes\r\n     * up to this point have been committed.\r\n     *\r\n     * @example\r\n     * let bulkWriter = firestore.bulkWriter();\r\n     *\r\n     * bulkWriter.create(documentRef, {foo: 'bar'});\r\n     * bulkWriter.update(documentRef2, {foo: 'bar'});\r\n     * bulkWriter.delete(documentRef3);\r\n     * await close().then(() => {\r\n     *   console.log('Executed all writes');\r\n     * });\r\n     */\r\n    close() {\r\n        this.verifyNotClosed();\r\n        this.firestore._decrementBulkWritersCount();\r\n        const flushPromise = this.flush();\r\n        this._closing = true;\r\n        return flushPromise;\r\n    }\r\n    /**\r\n     * Throws an error if the BulkWriter instance has been closed.\r\n     * @private\r\n     */\r\n    verifyNotClosed() {\r\n        if (this._closing) {\r\n            throw new Error('BulkWriter has already been closed.');\r\n        }\r\n    }\r\n    /**\r\n     * Return the first eligible batch that can hold a write to the provided\r\n     * reference, or creates one if no eligible batches are found.\r\n     *\r\n     * @private\r\n     */\r\n    getEligibleBatch(documentRef, batchQueue) {\r\n        if (batchQueue.length > 0) {\r\n            const lastBatch = batchQueue[batchQueue.length - 1];\r\n            if (lastBatch.isOpen() && !lastBatch.has(documentRef)) {\r\n                return lastBatch;\r\n            }\r\n        }\r\n        return this.createNewBatch(batchQueue);\r\n    }\r\n    /**\r\n     * Creates a new batch and adds it to the appropriate batch queue. If there\r\n     * is already a batch enqueued, sends the batch after a new one is created.\r\n     *\r\n     * @private\r\n     */\r\n    createNewBatch(batchQueue) {\r\n        const newBatch = new BulkCommitBatch(this.firestore, this._maxBatchSize);\r\n        if (batchQueue.length > 0) {\r\n            batchQueue[batchQueue.length - 1].markReadyToSend();\r\n            this.sendReadyBatches(batchQueue);\r\n        }\r\n        batchQueue.push(newBatch);\r\n        return newBatch;\r\n    }\r\n    /**\r\n     * Attempts to send batches starting from the front of the provided batch\r\n     * queue until a batch cannot be sent.\r\n     *\r\n     * After a batch is complete, try sending batches again.\r\n     *\r\n     * @private\r\n     */\r\n    sendReadyBatches(batchQueue) {\r\n        let index = 0;\r\n        while (index < batchQueue.length && batchQueue[index].isReadyToSend()) {\r\n            const batch = batchQueue[index];\r\n            // Deferred promise that resolves when the current batch or its\r\n            // scheduling attempt completes.\r\n            const batchCompletedDeferred = new util_1.Deferred();\r\n            this._pendingBatches.add(batchCompletedDeferred.promise);\r\n            // Send the batch if it is under the rate limit, or schedule another\r\n            // attempt after the appropriate timeout.\r\n            const delayMs = this._rateLimiter.getNextRequestDelayMs(batch._opCount);\r\n            assert(delayMs !== -1, 'Batch size should be under capacity');\r\n            if (delayMs === 0) {\r\n                this.sendBatch(batch, batchQueue, batchCompletedDeferred);\r\n            }\r\n            else {\r\n                backoff_1.delayExecution(() => {\r\n                    this.sendReadyBatches(batchQueue);\r\n                    batchCompletedDeferred.resolve();\r\n                    this._pendingBatches.delete(batchCompletedDeferred.promise);\r\n                }, delayMs);\r\n                break;\r\n            }\r\n            index++;\r\n        }\r\n    }\r\n    /**\r\n     * Sends the provided batch and processes the results. After the batch is\r\n     * committed, sends the next group of ready batches.\r\n     *\r\n     * @param batchCompletedDeferred A deferred promise that resolves when the\r\n     * batch has been sent and received.\r\n     * @private\r\n     */\r\n    sendBatch(batch, batchQueue, batchCompletedDeferred) {\r\n        const success = this._rateLimiter.tryMakeRequest(batch._opCount);\r\n        assert(success, 'Batch should be under rate limit to be sent.');\r\n        batch.bulkCommit().then(() => {\r\n            // Remove the batch from the BatchQueue after it has been processed.\r\n            const batchIndex = batchQueue.indexOf(batch);\r\n            assert(batchIndex !== -1, 'The batch should be in the BatchQueue');\r\n            batchQueue.splice(batchIndex, 1);\r\n            if (batchQueue === this._retryBatchQueue) {\r\n                batchQueue.forEach(batch => batch.markReadyToSend());\r\n            }\r\n            batchCompletedDeferred.resolve();\r\n            this._pendingBatches.delete(batchCompletedDeferred.promise);\r\n            this.sendReadyBatches(batchQueue);\r\n        });\r\n    }\r\n    /**\r\n     * Schedules and runs the provided operation.\r\n     * @private\r\n     */\r\n    async _executeWrite(documentRef, operationType, operationFn) {\r\n        // A deferred promise that resolves when operationFn completes.\r\n        const operationCompletedDeferred = new util_1.Deferred();\r\n        this._pendingOps.add(operationCompletedDeferred.promise);\r\n        try {\r\n            for (let failedAttempts = 0;; ++failedAttempts) {\r\n                const batchQueue = failedAttempts > 0 ? this._retryBatchQueue : this._batchQueue;\r\n                const bulkCommitBatch = this.getEligibleBatch(documentRef, batchQueue);\r\n                // Send ready batches if this is the first attempt. Subsequent retry\r\n                // batches are scheduled after the initial batch returns.\r\n                if (failedAttempts === 0) {\r\n                    this.sendReadyBatches(batchQueue);\r\n                }\r\n                try {\r\n                    operationFn(bulkCommitBatch);\r\n                    const operationResult = await bulkCommitBatch.processLastOperation(documentRef);\r\n                    this._successFn(documentRef, operationResult);\r\n                    return operationResult;\r\n                }\r\n                catch (error) {\r\n                    const bulkWriterError = new BulkWriterError(error.code, error.message, documentRef, operationType, failedAttempts);\r\n                    const shouldRetry = this._errorFn(bulkWriterError);\r\n                    logger_1.logger('BulkWriter.errorFn', null, 'Running error callback on error code:', error.code, ', shouldRetry:', shouldRetry);\r\n                    if (!shouldRetry) {\r\n                        throw bulkWriterError;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        finally {\r\n            operationCompletedDeferred.resolve();\r\n            this._pendingOps.delete(operationCompletedDeferred.promise);\r\n        }\r\n    }\r\n    /**\r\n     * Sets the maximum number of allowed operations in a batch.\r\n     *\r\n     * @private\r\n     */\r\n    // Visible for testing.\r\n    _setMaxBatchSize(size) {\r\n        this._maxBatchSize = size;\r\n    }\r\n    /**\r\n     * Returns the rate limiter for testing.\r\n     *\r\n     * @private\r\n     */\r\n    // Visible for testing.\r\n    _getRateLimiter() {\r\n        return this._rateLimiter;\r\n    }\r\n}\r\nexports.BulkWriter = BulkWriter;\r\n/**\r\n * Validates the use of 'value' as BulkWriterOptions.\r\n *\r\n * @private\r\n * @param value The BulkWriterOptions object to validate.\r\n * @throws if the input is not a valid BulkWriterOptions object.\r\n */\r\nfunction validateBulkWriterOptions(value) {\r\n    if (validate_1.validateOptional(value, { optional: true })) {\r\n        return;\r\n    }\r\n    const argName = 'options';\r\n    if (!util_1.isObject(value)) {\r\n        throw new Error(`${validate_1.invalidArgumentMessage(argName, 'bulkWriter() options argument')} Input is not an object.`);\r\n    }\r\n    const options = value;\r\n    if (options.throttling === undefined ||\r\n        typeof options.throttling === 'boolean') {\r\n        return;\r\n    }\r\n    if (options.throttling.initialOpsPerSecond !== undefined) {\r\n        validate_1.validateInteger('initialOpsPerSecond', options.throttling.initialOpsPerSecond, {\r\n            minValue: 1,\r\n        });\r\n    }\r\n    if (options.throttling.maxOpsPerSecond !== undefined) {\r\n        validate_1.validateInteger('maxOpsPerSecond', options.throttling.maxOpsPerSecond, {\r\n            minValue: 1,\r\n        });\r\n        if (options.throttling.initialOpsPerSecond !== undefined &&\r\n            options.throttling.initialOpsPerSecond >\r\n                options.throttling.maxOpsPerSecond) {\r\n            throw new Error(`${validate_1.invalidArgumentMessage(argName, 'bulkWriter() options argument')} \"maxOpsPerSecond\" cannot be less than \"initialOpsPerSecond\".`);\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=bulk-writer.js.map"]},"metadata":{},"sourceType":"script"}