{"ast":null,"code":"\"use strict\";\n/*!\r\n * Copyright 2019 Google Inc. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ResourceStream = void 0;\n\nconst stream_1 = require(\"stream\");\n\nclass ResourceStream extends stream_1.Transform {\n  constructor(args, requestFn) {\n    const options = Object.assign({\n      objectMode: true\n    }, args.streamOptions);\n    super(options);\n    this._ended = false;\n    this._maxApiCalls = args.maxApiCalls === -1 ? Infinity : args.maxApiCalls;\n    this._nextQuery = args.query;\n    this._reading = false;\n    this._requestFn = requestFn;\n    this._requestsMade = 0;\n    this._resultsToSend = args.maxResults === -1 ? Infinity : args.maxResults;\n  }\n  /* eslint-disable  @typescript-eslint/no-explicit-any */\n\n\n  end(...args) {\n    this._ended = true;\n    return super.end(...args);\n  }\n\n  _read() {\n    if (this._reading) {\n      return;\n    }\n\n    this._reading = true; // Wrap in a try/catch to catch input linting errors, e.g.\n    // an invalid BigQuery query. These errors are thrown in an\n    // async fashion, which makes them un-catchable by the user.\n\n    try {\n      this._requestFn(this._nextQuery, (err, results, nextQuery) => {\n        if (err) {\n          this.destroy(err);\n          return;\n        }\n\n        this._nextQuery = nextQuery;\n\n        if (this._resultsToSend !== Infinity) {\n          results = results.splice(0, this._resultsToSend);\n          this._resultsToSend -= results.length;\n        }\n\n        let more = true;\n\n        for (const result of results) {\n          if (this._ended) {\n            break;\n          }\n\n          more = this.push(result);\n        }\n\n        const isFinished = !this._nextQuery || this._resultsToSend < 1;\n        const madeMaxCalls = ++this._requestsMade >= this._maxApiCalls;\n\n        if (isFinished || madeMaxCalls) {\n          this.end();\n        }\n\n        if (more && !this._ended) {\n          setImmediate(() => this._read());\n        }\n\n        this._reading = false;\n      });\n    } catch (e) {\n      this.destroy(e);\n    }\n  }\n\n}\n\nexports.ResourceStream = ResourceStream;","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Backend/node_modules/@google-cloud/paginator/build/src/resource-stream.js"],"names":["Object","defineProperty","exports","value","ResourceStream","stream_1","require","Transform","constructor","args","requestFn","options","assign","objectMode","streamOptions","_ended","_maxApiCalls","maxApiCalls","Infinity","_nextQuery","query","_reading","_requestFn","_requestsMade","_resultsToSend","maxResults","end","_read","err","results","nextQuery","destroy","splice","length","more","result","push","isFinished","madeMaxCalls","setImmediate","e"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,cAAR,GAAyB,KAAK,CAA9B;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,QAAD,CAAxB;;AACA,MAAMF,cAAN,SAA6BC,QAAQ,CAACE,SAAtC,CAAgD;AAC5CC,EAAAA,WAAW,CAACC,IAAD,EAAOC,SAAP,EAAkB;AACzB,UAAMC,OAAO,GAAGX,MAAM,CAACY,MAAP,CAAc;AAAEC,MAAAA,UAAU,EAAE;AAAd,KAAd,EAAoCJ,IAAI,CAACK,aAAzC,CAAhB;AACA,UAAMH,OAAN;AACA,SAAKI,MAAL,GAAc,KAAd;AACA,SAAKC,YAAL,GAAoBP,IAAI,CAACQ,WAAL,KAAqB,CAAC,CAAtB,GAA0BC,QAA1B,GAAqCT,IAAI,CAACQ,WAA9D;AACA,SAAKE,UAAL,GAAkBV,IAAI,CAACW,KAAvB;AACA,SAAKC,QAAL,GAAgB,KAAhB;AACA,SAAKC,UAAL,GAAkBZ,SAAlB;AACA,SAAKa,aAAL,GAAqB,CAArB;AACA,SAAKC,cAAL,GAAsBf,IAAI,CAACgB,UAAL,KAAoB,CAAC,CAArB,GAAyBP,QAAzB,GAAoCT,IAAI,CAACgB,UAA/D;AACH;AACD;;;AACAC,EAAAA,GAAG,CAAC,GAAGjB,IAAJ,EAAU;AACT,SAAKM,MAAL,GAAc,IAAd;AACA,WAAO,MAAMW,GAAN,CAAU,GAAGjB,IAAb,CAAP;AACH;;AACDkB,EAAAA,KAAK,GAAG;AACJ,QAAI,KAAKN,QAAT,EAAmB;AACf;AACH;;AACD,SAAKA,QAAL,GAAgB,IAAhB,CAJI,CAKJ;AACA;AACA;;AACA,QAAI;AACA,WAAKC,UAAL,CAAgB,KAAKH,UAArB,EAAiC,CAACS,GAAD,EAAMC,OAAN,EAAeC,SAAf,KAA6B;AAC1D,YAAIF,GAAJ,EAAS;AACL,eAAKG,OAAL,CAAaH,GAAb;AACA;AACH;;AACD,aAAKT,UAAL,GAAkBW,SAAlB;;AACA,YAAI,KAAKN,cAAL,KAAwBN,QAA5B,EAAsC;AAClCW,UAAAA,OAAO,GAAGA,OAAO,CAACG,MAAR,CAAe,CAAf,EAAkB,KAAKR,cAAvB,CAAV;AACA,eAAKA,cAAL,IAAuBK,OAAO,CAACI,MAA/B;AACH;;AACD,YAAIC,IAAI,GAAG,IAAX;;AACA,aAAK,MAAMC,MAAX,IAAqBN,OAArB,EAA8B;AAC1B,cAAI,KAAKd,MAAT,EAAiB;AACb;AACH;;AACDmB,UAAAA,IAAI,GAAG,KAAKE,IAAL,CAAUD,MAAV,CAAP;AACH;;AACD,cAAME,UAAU,GAAG,CAAC,KAAKlB,UAAN,IAAoB,KAAKK,cAAL,GAAsB,CAA7D;AACA,cAAMc,YAAY,GAAG,EAAE,KAAKf,aAAP,IAAwB,KAAKP,YAAlD;;AACA,YAAIqB,UAAU,IAAIC,YAAlB,EAAgC;AAC5B,eAAKZ,GAAL;AACH;;AACD,YAAIQ,IAAI,IAAI,CAAC,KAAKnB,MAAlB,EAA0B;AACtBwB,UAAAA,YAAY,CAAC,MAAM,KAAKZ,KAAL,EAAP,CAAZ;AACH;;AACD,aAAKN,QAAL,GAAgB,KAAhB;AACH,OA1BD;AA2BH,KA5BD,CA6BA,OAAOmB,CAAP,EAAU;AACN,WAAKT,OAAL,CAAaS,CAAb;AACH;AACJ;;AAzD2C;;AA2DhDtC,OAAO,CAACE,cAAR,GAAyBA,cAAzB","sourcesContent":["\"use strict\";\r\n/*!\r\n * Copyright 2019 Google Inc. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ResourceStream = void 0;\r\nconst stream_1 = require(\"stream\");\r\nclass ResourceStream extends stream_1.Transform {\r\n    constructor(args, requestFn) {\r\n        const options = Object.assign({ objectMode: true }, args.streamOptions);\r\n        super(options);\r\n        this._ended = false;\r\n        this._maxApiCalls = args.maxApiCalls === -1 ? Infinity : args.maxApiCalls;\r\n        this._nextQuery = args.query;\r\n        this._reading = false;\r\n        this._requestFn = requestFn;\r\n        this._requestsMade = 0;\r\n        this._resultsToSend = args.maxResults === -1 ? Infinity : args.maxResults;\r\n    }\r\n    /* eslint-disable  @typescript-eslint/no-explicit-any */\r\n    end(...args) {\r\n        this._ended = true;\r\n        return super.end(...args);\r\n    }\r\n    _read() {\r\n        if (this._reading) {\r\n            return;\r\n        }\r\n        this._reading = true;\r\n        // Wrap in a try/catch to catch input linting errors, e.g.\r\n        // an invalid BigQuery query. These errors are thrown in an\r\n        // async fashion, which makes them un-catchable by the user.\r\n        try {\r\n            this._requestFn(this._nextQuery, (err, results, nextQuery) => {\r\n                if (err) {\r\n                    this.destroy(err);\r\n                    return;\r\n                }\r\n                this._nextQuery = nextQuery;\r\n                if (this._resultsToSend !== Infinity) {\r\n                    results = results.splice(0, this._resultsToSend);\r\n                    this._resultsToSend -= results.length;\r\n                }\r\n                let more = true;\r\n                for (const result of results) {\r\n                    if (this._ended) {\r\n                        break;\r\n                    }\r\n                    more = this.push(result);\r\n                }\r\n                const isFinished = !this._nextQuery || this._resultsToSend < 1;\r\n                const madeMaxCalls = ++this._requestsMade >= this._maxApiCalls;\r\n                if (isFinished || madeMaxCalls) {\r\n                    this.end();\r\n                }\r\n                if (more && !this._ended) {\r\n                    setImmediate(() => this._read());\r\n                }\r\n                this._reading = false;\r\n            });\r\n        }\r\n        catch (e) {\r\n            this.destroy(e);\r\n        }\r\n    }\r\n}\r\nexports.ResourceStream = ResourceStream;\r\n//# sourceMappingURL=resource-stream.js.map"]},"metadata":{},"sourceType":"script"}