{"ast":null,"code":"let fs = require('fs');\n\nlet path = require('path');\n\nlet sdkCode = 'M'; // Constant per SDK\n\n/**\n * @description Gets the relevant versions of the SDK(package version, node version and sdkCode)\n * @param {'default' | 'x.y.z' | 'x.y' | string} useSDKVersion Default uses package.json version\n * @param {'default' | 'x.y.z' | 'x.y' | string} useNodeVersion Default uses process.versions.node\n * @return {{sdkSemver:string, techVersion:string, sdkCode:string}} A map of relevant versions and codes\n */\n\nfunction getSDKVersions(useSDKVersion = 'default', useNodeVersion = 'default') {\n  let pkgJSONFile = fs.readFileSync(path.join(__dirname, '../../../../package.json'), 'utf-8'); // allow to pass a custom SDKVersion\n\n  let sdkSemver = useSDKVersion === 'default' ? JSON.parse(pkgJSONFile).version : useSDKVersion; // allow to pass a custom techVersion (Node version)\n\n  let techVersion = useNodeVersion === 'default' ? process.versions.node : useNodeVersion;\n  return {\n    sdkSemver,\n    techVersion,\n    sdkCode\n  };\n}\n\nmodule.exports = getSDKVersions;","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Frontend/node_modules/cloudinary/lib/utils/encoding/sdkAnalytics/getSDKVersions.js"],"names":["fs","require","path","sdkCode","getSDKVersions","useSDKVersion","useNodeVersion","pkgJSONFile","readFileSync","join","__dirname","sdkSemver","JSON","parse","version","techVersion","process","versions","node","module","exports"],"mappings":"AAAA,IAAIA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIE,OAAO,GAAG,GAAd,C,CAAmB;;AAEnB;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,cAAT,CAAwBC,aAAa,GAAG,SAAxC,EAAmDC,cAAc,GAAG,SAApE,EAA+E;AAC7E,MAAIC,WAAW,GAAGP,EAAE,CAACQ,YAAH,CAAgBN,IAAI,CAACO,IAAL,CAAUC,SAAV,EAAqB,0BAArB,CAAhB,EAAkE,OAAlE,CAAlB,CAD6E,CAG7E;;AACA,MAAIC,SAAS,GAAGN,aAAa,KAAK,SAAlB,GAA8BO,IAAI,CAACC,KAAL,CAAWN,WAAX,EAAwBO,OAAtD,GAAgET,aAAhF,CAJ6E,CAM7E;;AACA,MAAIU,WAAW,GAAGT,cAAc,KAAK,SAAnB,GAA+BU,OAAO,CAACC,QAAR,CAAiBC,IAAhD,GAAuDZ,cAAzE;AAEA,SAAO;AACLK,IAAAA,SADK;AAELI,IAAAA,WAFK;AAGLZ,IAAAA;AAHK,GAAP;AAKD;;AAEDgB,MAAM,CAACC,OAAP,GAAiBhB,cAAjB","sourcesContent":["let fs = require('fs');\nlet path = require('path');\nlet sdkCode = 'M'; // Constant per SDK\n\n/**\n * @description Gets the relevant versions of the SDK(package version, node version and sdkCode)\n * @param {'default' | 'x.y.z' | 'x.y' | string} useSDKVersion Default uses package.json version\n * @param {'default' | 'x.y.z' | 'x.y' | string} useNodeVersion Default uses process.versions.node\n * @return {{sdkSemver:string, techVersion:string, sdkCode:string}} A map of relevant versions and codes\n */\nfunction getSDKVersions(useSDKVersion = 'default', useNodeVersion = 'default') {\n  let pkgJSONFile = fs.readFileSync(path.join(__dirname, '../../../../package.json'), 'utf-8');\n\n  // allow to pass a custom SDKVersion\n  let sdkSemver = useSDKVersion === 'default' ? JSON.parse(pkgJSONFile).version : useSDKVersion;\n\n  // allow to pass a custom techVersion (Node version)\n  let techVersion = useNodeVersion === 'default' ? process.versions.node : useNodeVersion;\n\n  return {\n    sdkSemver,\n    techVersion,\n    sdkCode\n  };\n}\n\nmodule.exports = getSDKVersions;\n"]},"metadata":{},"sourceType":"script"}