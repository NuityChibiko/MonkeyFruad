{"ast":null,"code":"\"use strict\"; // Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Bucket = exports.BucketActionToHTTPMethod = void 0;\n\nconst common_1 = require(\"@google-cloud/common\");\n\nconst paginator_1 = require(\"@google-cloud/paginator\");\n\nconst promisify_1 = require(\"@google-cloud/promisify\");\n\nconst arrify = require(\"arrify\");\n\nconst extend = require(\"extend\");\n\nconst fs = require(\"fs\");\n\nconst mime = require(\"mime-types\");\n\nconst path = require(\"path\");\n\nconst pLimit = require(\"p-limit\");\n\nconst util_1 = require(\"util\"); // eslint-disable-next-line @typescript-eslint/no-var-requires\n\n\nconst snakeize = require('snakeize');\n\nconst acl_1 = require(\"./acl\");\n\nconst file_1 = require(\"./file\");\n\nconst iam_1 = require(\"./iam\");\n\nconst notification_1 = require(\"./notification\");\n\nconst signer_1 = require(\"./signer\");\n\nvar BucketActionToHTTPMethod;\n\n(function (BucketActionToHTTPMethod) {\n  BucketActionToHTTPMethod[\"list\"] = \"GET\";\n})(BucketActionToHTTPMethod = exports.BucketActionToHTTPMethod || (exports.BucketActionToHTTPMethod = {}));\n/**\r\n * The size of a file (in bytes) must be greater than this number to\r\n * automatically trigger a resumable upload.\r\n *\r\n * @const {number}\r\n * @private\r\n */\n\n\nconst RESUMABLE_THRESHOLD = 5000000;\n/**\r\n * Get and set IAM policies for your bucket.\r\n *\r\n * @name Bucket#iam\r\n * @mixes Iam\r\n *\r\n * @see [Cloud Storage IAM Management](https://cloud.google.com/storage/docs/access-control/iam#short_title_iam_management)\r\n * @see [Granting, Changing, and Revoking Access](https://cloud.google.com/iam/docs/granting-changing-revoking-access)\r\n * @see [IAM Roles](https://cloud.google.com/iam/docs/understanding-roles)\r\n *\r\n * @example\r\n * const {Storage} = require('@google-cloud/storage');\r\n * const storage = new Storage();\r\n * const bucket = storage.bucket('albums');\r\n *\r\n * //-\r\n * // Get the IAM policy for your bucket.\r\n * //-\r\n * bucket.iam.getPolicy(function(err, policy) {\r\n *   console.log(policy);\r\n * });\r\n *\r\n * //-\r\n * // If the callback is omitted, we'll return a Promise.\r\n * //-\r\n * bucket.iam.getPolicy().then(function(data) {\r\n *   const policy = data[0];\r\n *   const apiResponse = data[1];\r\n * });\r\n *\r\n * @example <caption>include:samples/iam.js</caption>\r\n * region_tag:storage_view_bucket_iam_members\r\n * Example of retrieving a bucket's IAM policy:\r\n *\r\n * @example <caption>include:samples/iam.js</caption>\r\n * region_tag:storage_add_bucket_iam_member\r\n * Example of adding to a bucket's IAM policy:\r\n *\r\n * @example <caption>include:samples/iam.js</caption>\r\n * region_tag:storage_remove_bucket_iam_member\r\n * Example of removing from a bucket's IAM policy:\r\n */\n\n/**\r\n * Cloud Storage uses access control lists (ACLs) to manage object and\r\n * bucket access. ACLs are the mechanism you use to share objects with other\r\n * users and allow other users to access your buckets and objects.\r\n *\r\n * An ACL consists of one or more entries, where each entry grants permissions\r\n * to an entity. Permissions define the actions that can be performed against\r\n * an object or bucket (for example, `READ` or `WRITE`); the entity defines\r\n * who the permission applies to (for example, a specific user or group of\r\n * users).\r\n *\r\n * The `acl` object on a Bucket instance provides methods to get you a list of\r\n * the ACLs defined on your bucket, as well as set, update, and delete them.\r\n *\r\n * Buckets also have\r\n * [default\r\n * ACLs](https://cloud.google.com/storage/docs/access-control/lists#default)\r\n * for all created files. Default ACLs specify permissions that all new\r\n * objects added to the bucket will inherit by default. You can add, delete,\r\n * get, and update entities and permissions for these as well with\r\n * {@link Bucket#acl.default}.\r\n *\r\n * @see [About Access Control Lists]{@link http://goo.gl/6qBBPO}\r\n * @see [Default ACLs]{@link https://cloud.google.com/storage/docs/access-control/lists#default}\r\n *\r\n * @name Bucket#acl\r\n * @mixes Acl\r\n * @property {Acl} default Cloud Storage Buckets have\r\n * [default\r\n * ACLs](https://cloud.google.com/storage/docs/access-control/lists#default)\r\n * for all created files. You can add, delete, get, and update entities and\r\n * permissions for these as well. The method signatures and examples are all\r\n * the same, after only prefixing the method call with `default`.\r\n *\r\n * @example\r\n * const {Storage} = require('@google-cloud/storage');\r\n * const storage = new Storage();\r\n *\r\n * //-\r\n * // Make a bucket's contents publicly readable.\r\n * //-\r\n * const myBucket = storage.bucket('my-bucket');\r\n *\r\n * const options = {\r\n *   entity: 'allUsers',\r\n *   role: storage.acl.READER_ROLE\r\n * };\r\n *\r\n * myBucket.acl.add(options, function(err, aclObject) {});\r\n *\r\n * //-\r\n * // If the callback is omitted, we'll return a Promise.\r\n * //-\r\n * myBucket.acl.add(options).then(function(data) {\r\n *   const aclObject = data[0];\r\n *   const apiResponse = data[1];\r\n * });\r\n *\r\n * @example <caption>include:samples/acl.js</caption>\r\n * region_tag:storage_print_bucket_acl\r\n * Example of printing a bucket's ACL:\r\n *\r\n * @example <caption>include:samples/acl.js</caption>\r\n * region_tag:storage_print_bucket_acl_for_user\r\n * Example of printing a bucket's ACL for a specific user:\r\n *\r\n * @example <caption>include:samples/acl.js</caption>\r\n * region_tag:storage_add_bucket_owner\r\n * Example of adding an owner to a bucket:\r\n *\r\n * @example <caption>include:samples/acl.js</caption>\r\n * region_tag:storage_remove_bucket_owner\r\n * Example of removing an owner from a bucket:\r\n *\r\n * @example <caption>include:samples/acl.js</caption>\r\n * region_tag:storage_add_bucket_default_owner\r\n * Example of adding a default owner to a bucket:\r\n *\r\n * @example <caption>include:samples/acl.js</caption>\r\n * region_tag:storage_remove_bucket_default_owner\r\n * Example of removing a default owner from a bucket:\r\n */\n\n/**\r\n * The API-formatted resource description of the bucket.\r\n *\r\n * Note: This is not guaranteed to be up-to-date when accessed. To get the\r\n * latest record, call the `getMetadata()` method.\r\n *\r\n * @name Bucket#metadata\r\n * @type {object}\r\n */\n\n/**\r\n * The bucket's name.\r\n * @name Bucket#name\r\n * @type {string}\r\n */\n\n/**\r\n * Get {@link File} objects for the files currently in the bucket as a\r\n * readable object stream.\r\n *\r\n * @method Bucket#getFilesStream\r\n * @param {GetFilesOptions} [query] Query object for listing files.\r\n * @returns {ReadableStream} A readable stream that emits {@link File} instances.\r\n *\r\n * @example\r\n * const {Storage} = require('@google-cloud/storage');\r\n * const storage = new Storage();\r\n * const bucket = storage.bucket('albums');\r\n *\r\n * bucket.getFilesStream()\r\n *   .on('error', console.error)\r\n *   .on('data', function(file) {\r\n *     // file is a File object.\r\n *   })\r\n *   .on('end', function() {\r\n *     // All files retrieved.\r\n *   });\r\n *\r\n * //-\r\n * // If you anticipate many results, you can end a stream early to prevent\r\n * // unnecessary processing and API requests.\r\n * //-\r\n * bucket.getFilesStream()\r\n *   .on('data', function(file) {\r\n *     this.end();\r\n *   });\r\n *\r\n * //-\r\n * // If you're filtering files with a delimiter, you should use\r\n * // {@link Bucket#getFiles} and set `autoPaginate: false` in order to\r\n * // preserve the `apiResponse` argument.\r\n * //-\r\n * const prefixes = [];\r\n *\r\n * function callback(err, files, nextQuery, apiResponse) {\r\n *   prefixes = prefixes.concat(apiResponse.prefixes);\r\n *\r\n *   if (nextQuery) {\r\n *     bucket.getFiles(nextQuery, callback);\r\n *   } else {\r\n *     // prefixes = The finished array of prefixes.\r\n *   }\r\n * }\r\n *\r\n * bucket.getFiles({\r\n *   autoPaginate: false,\r\n *   delimiter: '/'\r\n * }, callback);\r\n */\n\n/**\r\n * Create a Bucket object to interact with a Cloud Storage bucket.\r\n *\r\n * @class\r\n * @hideconstructor\r\n *\r\n * @param {Storage} storage A {@link Storage} instance.\r\n * @param {string} name The name of the bucket.\r\n * @param {object} [options] Configuration object.\r\n * @param {string} [options.userProject] User project.\r\n *\r\n * @example\r\n * const {Storage} = require('@google-cloud/storage');\r\n * const storage = new Storage();\r\n * const bucket = storage.bucket('albums');\r\n */\n\nclass Bucket extends common_1.ServiceObject {\n  constructor(storage, name, options) {\n    options = options || {}; // Allow for \"gs://\"-style input, and strip any trailing slashes.\n\n    name = name.replace(/^gs:\\/\\//, '').replace(/\\/+$/, '');\n    const requestQueryObject = {};\n    const userProject = options.userProject;\n\n    if (typeof userProject === 'string') {\n      requestQueryObject.userProject = userProject;\n    }\n\n    const methods = {\n      /**\r\n       * Create a bucket.\r\n       *\r\n       * @method Bucket#create\r\n       * @param {CreateBucketRequest} [metadata] Metadata to set for the bucket.\r\n       * @param {CreateBucketCallback} [callback] Callback function.\r\n       * @returns {Promise<CreateBucketResponse>}\r\n       *\r\n       * @example\r\n       * const {Storage} = require('@google-cloud/storage');\r\n       * const storage = new Storage();\r\n       * const bucket = storage.bucket('albums');\r\n       * bucket.create(function(err, bucket, apiResponse) {\r\n       *   if (!err) {\r\n       *     // The bucket was created successfully.\r\n       *   }\r\n       * });\r\n       *\r\n       * //-\r\n       * // If the callback is omitted, we'll return a Promise.\r\n       * //-\r\n       * bucket.create().then(function(data) {\r\n       *   const bucket = data[0];\r\n       *   const apiResponse = data[1];\r\n       * });\r\n       */\n      create: {\n        reqOpts: {\n          qs: requestQueryObject\n        }\n      },\n\n      /**\r\n       * @typedef {object} DeleteBucketOptions Configuration options.\r\n       * @property {boolean} [ignoreNotFound = false] Ignore an error if\r\n       *     the bucket does not exist.\r\n       * @property {string} [userProject] The ID of the project which will be\r\n       *     billed for the request.\r\n       */\n\n      /**\r\n       * @typedef {array} DeleteBucketResponse\r\n       * @property {object} 0 The full API response.\r\n       */\n\n      /**\r\n       * @callback DeleteBucketCallback\r\n       * @param {?Error} err Request error, if any.\r\n       * @param {object} apiResponse The full API response.\r\n       */\n\n      /**\r\n       * Delete the bucket.\r\n       *\r\n       * @see [Buckets: delete API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/delete}\r\n       *\r\n       * @method Bucket#delete\r\n       * @param {DeleteBucketOptions} [options] Configuration options.\r\n       * @param {boolean} [options.ignoreNotFound = false] Ignore an error if\r\n       *     the bucket does not exist.\r\n       * @param {string} [options.userProject] The ID of the project which will be\r\n       *     billed for the request.\r\n       * @param {DeleteBucketCallback} [callback] Callback function.\r\n       * @returns {Promise<DeleteBucketResponse>}\r\n       *\r\n       * @example\r\n       * const {Storage} = require('@google-cloud/storage');\r\n       * const storage = new Storage();\r\n       * const bucket = storage.bucket('albums');\r\n       * bucket.delete(function(err, apiResponse) {});\r\n       *\r\n       * //-\r\n       * // If the callback is omitted, we'll return a Promise.\r\n       * //-\r\n       * bucket.delete().then(function(data) {\r\n       *   const apiResponse = data[0];\r\n       * });\r\n       *\r\n       * @example <caption>include:samples/buckets.js</caption>\r\n       * region_tag:storage_delete_bucket\r\n       * Another example:\r\n       */\n      delete: {\n        reqOpts: {\n          qs: requestQueryObject\n        }\n      },\n\n      /**\r\n       * @typedef {object} BucketExistsOptions Configuration options for Bucket#exists().\r\n       * @property {string} [userProject] The ID of the project which will be\r\n       *     billed for the request.\r\n       */\n\n      /**\r\n       * @typedef {array} BucketExistsResponse\r\n       * @property {boolean} 0 Whether the {@link Bucket} exists.\r\n       */\n\n      /**\r\n       * @callback BucketExistsCallback\r\n       * @param {?Error} err Request error, if any.\r\n       * @param {boolean} exists Whether the {@link Bucket} exists.\r\n       */\n\n      /**\r\n       * Check if the bucket exists.\r\n       *\r\n       * @method Bucket#exists\r\n       * @param {BucketExistsOptions} [options] Configuration options.\r\n       * @param {string} [options.userProject] The ID of the project which will be\r\n       *     billed for the request.\r\n       * @param {BucketExistsCallback} [callback] Callback function.\r\n       * @returns {Promise<BucketExistsResponse>}\r\n       *\r\n       * @example\r\n       * const {Storage} = require('@google-cloud/storage');\r\n       * const storage = new Storage();\r\n       * const bucket = storage.bucket('albums');\r\n       *\r\n       * bucket.exists(function(err, exists) {});\r\n       *\r\n       * //-\r\n       * // If the callback is omitted, we'll return a Promise.\r\n       * //-\r\n       * bucket.exists().then(function(data) {\r\n       *   const exists = data[0];\r\n       * });\r\n       */\n      exists: {\n        reqOpts: {\n          qs: requestQueryObject\n        }\n      },\n\n      /**\r\n       * @typedef {object} [GetBucketOptions] Configuration options for Bucket#get()\r\n       * @property {boolean} [autoCreate] Automatically create the object if\r\n       *     it does not exist. Default: `false`\r\n       * @property {string} [userProject] The ID of the project which will be\r\n       *     billed for the request.\r\n       */\n\n      /**\r\n       * @typedef {array} GetBucketResponse\r\n       * @property {Bucket} 0 The {@link Bucket}.\r\n       * @property {object} 1 The full API response.\r\n       */\n\n      /**\r\n       * @callback GetBucketCallback\r\n       * @param {?Error} err Request error, if any.\r\n       * @param {Bucket} bucket The {@link Bucket}.\r\n       * @param {object} apiResponse The full API response.\r\n       */\n\n      /**\r\n       * Get a bucket if it exists.\r\n       *\r\n       * You may optionally use this to \"get or create\" an object by providing\r\n       * an object with `autoCreate` set to `true`. Any extra configuration that\r\n       * is normally required for the `create` method must be contained within\r\n       * this object as well.\r\n       *\r\n       * @method Bucket#get\r\n       * @param {GetBucketOptions} [options] Configuration options.\r\n       * @param {boolean} [options.autoCreate] Automatically create the object if\r\n       *     it does not exist. Default: `false`\r\n       * @param {string} [options.userProject] The ID of the project which will be\r\n       *     billed for the request.\r\n       * @param {GetBucketCallback} [callback] Callback function.\r\n       * @returns {Promise<GetBucketResponse>}\r\n       *\r\n       * @example\r\n       * const {Storage} = require('@google-cloud/storage');\r\n       * const storage = new Storage();\r\n       * const bucket = storage.bucket('albums');\r\n       *\r\n       * bucket.get(function(err, bucket, apiResponse) {\r\n       *   // `bucket.metadata` has been populated.\r\n       * });\r\n       *\r\n       * //-\r\n       * // If the callback is omitted, we'll return a Promise.\r\n       * //-\r\n       * bucket.get().then(function(data) {\r\n       *   const bucket = data[0];\r\n       *   const apiResponse = data[1];\r\n       * });\r\n       */\n      get: {\n        reqOpts: {\n          qs: requestQueryObject\n        }\n      },\n\n      /**\r\n       * @typedef {array} GetBucketMetadataResponse\r\n       * @property {object} 0 The bucket metadata.\r\n       * @property {object} 1 The full API response.\r\n       */\n\n      /**\r\n       * @callback GetBucketMetadataCallback\r\n       * @param {?Error} err Request error, if any.\r\n       * @param {object} metadata The bucket metadata.\r\n       * @param {object} apiResponse The full API response.\r\n       */\n\n      /**\r\n       * @typedef {object} GetBucketMetadataOptions Configuration options for Bucket#getMetadata().\r\n       * @property {string} [userProject] The ID of the project which will be\r\n       *     billed for the request.\r\n       */\n\n      /**\r\n       * Get the bucket's metadata.\r\n       *\r\n       * To set metadata, see {@link Bucket#setMetadata}.\r\n       *\r\n       * @see [Buckets: get API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/get}\r\n       *\r\n       * @method Bucket#getMetadata\r\n       * @param {GetBucketMetadataOptions} [options] Configuration options.\r\n       * @param {string} [options.userProject] The ID of the project which will be\r\n       *     billed for the request.\r\n       * @param {GetBucketMetadataCallback} [callback] Callback function.\r\n       * @returns {Promise<GetBucketMetadataResponse>}\r\n       *\r\n       * @example\r\n       * const {Storage} = require('@google-cloud/storage');\r\n       * const storage = new Storage();\r\n       * const bucket = storage.bucket('albums');\r\n       *\r\n       * bucket.getMetadata(function(err, metadata, apiResponse) {});\r\n       *\r\n       * //-\r\n       * // If the callback is omitted, we'll return a Promise.\r\n       * //-\r\n       * bucket.getMetadata().then(function(data) {\r\n       *   const metadata = data[0];\r\n       *   const apiResponse = data[1];\r\n       * });\r\n       *\r\n       * @example <caption>include:samples/requesterPays.js</caption>\r\n       * region_tag:storage_get_requester_pays_status\r\n       * Example of retrieving the requester pays status of a bucket:\r\n       */\n      getMetadata: {\n        reqOpts: {\n          qs: requestQueryObject\n        }\n      },\n\n      /**\r\n       * @typedef {object} SetBucketMetadataOptions Configuration options for Bucket#setMetadata().\r\n       * @property {string} [userProject] The ID of the project which will be\r\n       *     billed for the request.\r\n       */\n\n      /**\r\n       * @typedef {array} SetBucketMetadataResponse\r\n       * @property {object} apiResponse The full API response.\r\n       */\n\n      /**\r\n       * @callback SetBucketMetadataCallback\r\n       * @param {?Error} err Request error, if any.\r\n       * @param {object} metadata The bucket metadata.\r\n       */\n\n      /**\r\n       * Set the bucket's metadata.\r\n       *\r\n       * @see [Buckets: patch API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/patch}\r\n       *\r\n       * @method Bucket#setMetadata\r\n       * @param {object<string, *>} metadata The metadata you wish to set.\r\n       * @param {SetBucketMetadataOptions} [options] Configuration options.\r\n       * @param {string} [options.userProject] The ID of the project which will be\r\n       *     billed for the request.\r\n       * @param {SetBucketMetadataCallback} [callback] Callback function.\r\n       * @returns {Promise<SetBucketMetadataResponse>}\r\n       *\r\n       * @example\r\n       * const {Storage} = require('@google-cloud/storage');\r\n       * const storage = new Storage();\r\n       * const bucket = storage.bucket('albums');\r\n       *\r\n       * //-\r\n       * // Set website metadata field on the bucket.\r\n       * //-\r\n       * const metadata = {\r\n       *   website: {\r\n       *     mainPageSuffix: 'http://example.com',\r\n       *     notFoundPage: 'http://example.com/404.html'\r\n       *   }\r\n       * };\r\n       *\r\n       * bucket.setMetadata(metadata, function(err, apiResponse) {});\r\n       *\r\n       * //-\r\n       * // Enable versioning for your bucket.\r\n       * //-\r\n       * bucket.setMetadata({\r\n       *   versioning: {\r\n       *     enabled: true\r\n       *   }\r\n       * }, function(err, apiResponse) {});\r\n       *\r\n       * //-\r\n       * // Enable KMS encryption for objects within this bucket.\r\n       * //-\r\n       * bucket.setMetadata({\r\n       *   encryption: {\r\n       *     defaultKmsKeyName: 'projects/grape-spaceship-123/...'\r\n       *   }\r\n       * }, function(err, apiResponse) {});\r\n       *\r\n       * //-\r\n       * // Set the default event-based hold value for new objects in this\r\n       * // bucket.\r\n       * //-\r\n       * bucket.setMetadata({\r\n       *   defaultEventBasedHold: true\r\n       * }, function(err, apiResponse) {});\r\n       *\r\n       * //-\r\n       * // Remove object lifecycle rules.\r\n       * //-\r\n       * bucket.setMetadata({\r\n       *   lifecycle: null\r\n       * }, function(err, apiResponse) {});\r\n       *\r\n       * //-\r\n       * // If the callback is omitted, we'll return a Promise.\r\n       * //-\r\n       * bucket.setMetadata(metadata).then(function(data) {\r\n       *   const apiResponse = data[0];\r\n       * });\r\n       */\n      setMetadata: {\n        reqOpts: {\n          qs: requestQueryObject\n        }\n      }\n    };\n    super({\n      parent: storage,\n      baseUrl: '/b',\n      id: name,\n      createMethod: storage.createBucket.bind(storage),\n      methods\n    });\n    this.name = name;\n    this.storage = storage;\n    this.userProject = options.userProject;\n    this.acl = new acl_1.Acl({\n      request: this.request.bind(this),\n      pathPrefix: '/acl'\n    });\n    this.acl.default = new acl_1.Acl({\n      request: this.request.bind(this),\n      pathPrefix: '/defaultObjectAcl'\n    });\n    this.iam = new iam_1.Iam(this);\n    this.getFilesStream = paginator_1.paginator.streamify('getFiles');\n  }\n  /**\r\n   * @typedef {object} AddLifecycleRuleOptions Configuration options for Bucket#addLifecycleRule().\r\n   * @property {boolean} [append=true] The new rules will be appended to any\r\n   *     pre-existing rules.\r\n   */\n\n  /**\r\n   *\r\n   * @typedef {object} LifecycleRule The new lifecycle rule to be added to objects\r\n   *     in this bucket.\r\n   * @property {string|object} action The action to be taken upon matching of\r\n   *     all the conditions 'delete' or 'setStorageClass'.\r\n   *     **Note**: For configuring a raw-formatted rule object to be passed as `action`\r\n   *               please refer to the [examples]{@link https://cloud.google.com/storage/docs/managing-lifecycles#configexamples}.\r\n   * @property {object} condition Condition a bucket must meet before the\r\n   *     action occurson the bucket. Refer to followitn supported [conditions]{@link https://cloud.google.com/storage/docs/lifecycle#conditions}.\r\n   * @property {string} [storageClass] When using the `setStorageClass`\r\n   *     action, provide this option to dictate which storage class the object\r\n   *     should update to. Please see\r\n   *     [SetStorageClass option documentation]{@link https://cloud.google.com/storage/docs/lifecycle#setstorageclass} for supported transitions.\r\n   */\n\n  /**\r\n   * Add an object lifecycle management rule to the bucket.\r\n   *\r\n   * By default, an Object Lifecycle Management rule provided to this method\r\n   * will be included to the existing policy. To replace all existing rules,\r\n   * supply the `options` argument, setting `append` to `false`.\r\n   *\r\n   * @see [Object Lifecycle Management]{@link https://cloud.google.com/storage/docs/lifecycle}\r\n   * @see [Buckets: patch API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/patch}\r\n   *\r\n   * @param {LifecycleRule} rule The new lifecycle rule to be added to objects\r\n   *     in this bucket.\r\n   * @param {string|object} rule.action The action to be taken upon matching of\r\n   *     all the conditions 'delete' or 'setStorageClass'.\r\n   *     **Note**: For configuring a raw-formatted rule object to be passed as `action`\r\n   *               please refer to the [examples]{@link https://cloud.google.com/storage/docs/managing-lifecycles#configexamples}.\r\n   * @param {object} rule.condition Condition a bucket must meet before the\r\n   *     action occurson the bucket. Refer to followitn supported [conditions]{@link https://cloud.google.com/storage/docs/lifecycle#conditions}.\r\n   * @param {string} [rule.storageClass] When using the `setStorageClass`\r\n   *     action, provide this option to dictate which storage class the object\r\n   *     should update to.\r\n   * @param {AddLifecycleRuleOptions} [options] Configuration object.\r\n   * @param {boolean} [options.append=true] Append the new rule to the existing\r\n   *     policy.\r\n   * @param {SetBucketMetadataCallback} [callback] Callback function.\r\n   * @returns {Promise<SetBucketMetadataResponse>}\r\n   *\r\n   * @example\r\n   * const {Storage} = require('@google-cloud/storage');\r\n   * const storage = new Storage();\r\n   * const bucket = storage.bucket('albums');\r\n   *\r\n   * //-\r\n   * // Automatically have an object deleted from this bucket once it is 3 years\r\n   * // of age.\r\n   * //-\r\n   * bucket.addLifecycleRule({\r\n   *   action: 'delete',\r\n   *   condition: {\r\n   *     age: 365 * 3 // Specified in days.\r\n   *   }\r\n   * }, function(err, apiResponse) {\r\n   *   if (err) {\r\n   *     // Error handling omitted.\r\n   *   }\r\n   *\r\n   *   const lifecycleRules = bucket.metadata.lifecycle.rule;\r\n   *\r\n   *   // Iterate over the Object Lifecycle Management rules on this bucket.\r\n   *   lifecycleRules.forEach(lifecycleRule => {});\r\n   * });\r\n   *\r\n   * //-\r\n   * // By default, the rule you provide will be added to the existing policy.\r\n   * // Optionally, you can disable this behavior to replace all of the\r\n   * // pre-existing rules.\r\n   * //-\r\n   * const options = {\r\n   *   append: false\r\n   * };\r\n   *\r\n   * bucket.addLifecycleRule({\r\n   *   action: 'delete',\r\n   *   condition: {\r\n   *     age: 365 * 3 // Specified in days.\r\n   *   }\r\n   * }, options, function(err, apiResponse) {\r\n   *   if (err) {\r\n   *     // Error handling omitted.\r\n   *   }\r\n   *\r\n   *   // All rules have been replaced with the new \"delete\" rule.\r\n   *\r\n   *   // Iterate over the Object Lifecycle Management rules on this bucket.\r\n   *   lifecycleRules.forEach(lifecycleRule => {});\r\n   * });\r\n   *\r\n   * //-\r\n   * // For objects created before 2018, \"downgrade\" the storage class.\r\n   * //-\r\n   * bucket.addLifecycleRule({\r\n   *   action: 'setStorageClass',\r\n   *   storageClass: 'COLDLINE',\r\n   *   condition: {\r\n   *     createdBefore: new Date('2018')\r\n   *   }\r\n   * }, function(err, apiResponse) {});\r\n   *\r\n   * //-\r\n   * // Delete objects created before 2016 which have the Coldline storage\r\n   * // class.\r\n   * //-\r\n   * bucket.addLifecycleRule({\r\n   *   action: 'delete',\r\n   *   condition: {\r\n   *     matchesStorageClass: [\r\n   *       'COLDLINE'\r\n   *     ],\r\n   *     createdBefore: new Date('2016')\r\n   *   }\r\n   * }, function(err, apiResponse) {});\r\n   *\r\n   * //-\r\n   * // Delete object that has a noncurrent timestamp that is at least 100 days.\r\n   * //-\r\n   * bucket.addLifecycleRule({\r\n   *   action: 'delete',\r\n   *   condition: {\r\n   *     daysSinceNoncurrentTime: 100\r\n   *   }\r\n   * }, function(err, apiResponse) {});\r\n   *\r\n   * //-\r\n   * // Delete object that has a noncurrent timestamp before 2020-01-01.\r\n   * //-\r\n   * bucket.addLifecycleRule({\r\n   *   action: 'delete',\r\n   *   condition: {\r\n   *     noncurrentTimeBefore: new Date('2020-01-01')\r\n   *   }\r\n   * }, function(err, apiResponse) {});\r\n   *\r\n   * //-\r\n   * // Delete object that has a customTime that is at least 100 days.\r\n   * //-\r\n   * bucket.addLifecycleRule({\r\n   *   action: 'delete',\r\n   *   condition: {\r\n   *     daysSinceCustomTime: 100\r\n   *   }\r\n   * }, function(err, apiResponse) ());\r\n   *\r\n   * //-\r\n   * // Delete object that has a customTime before 2020-01-01.\r\n   * //-\r\n   * bucket.addLifecycleRule({\r\n   *   action: 'delete',\r\n   *   condition: {\r\n   *     customTimeBefore: new Date('2020-01-01')\r\n   *   }\r\n   * }, function(err, apiResponse) {});\r\n   */\n\n\n  addLifecycleRule(rule, optionsOrCallback, callback) {\n    let options;\n\n    if (typeof optionsOrCallback === 'function') {\n      callback = optionsOrCallback;\n    } else if (optionsOrCallback) {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    const newLifecycleRules = arrify(rule).map(rule => {\n      if (typeof rule.action === 'object') {\n        // This is a raw-formatted rule object, the way the API expects.\n        // Just pass it through as-is.\n        return rule;\n      }\n\n      const apiFormattedRule = {};\n      apiFormattedRule.condition = {};\n      apiFormattedRule.action = {\n        type: rule.action.charAt(0).toUpperCase() + rule.action.slice(1)\n      };\n\n      if (rule.storageClass) {\n        apiFormattedRule.action.storageClass = rule.storageClass;\n      }\n\n      for (const condition in rule.condition) {\n        if (rule.condition[condition] instanceof Date) {\n          apiFormattedRule.condition[condition] = rule.condition[condition].toISOString().replace(/T.+$/, '');\n        } else {\n          apiFormattedRule.condition[condition] = rule.condition[condition];\n        }\n      }\n\n      return apiFormattedRule;\n    });\n\n    if (options.append === false) {\n      this.setMetadata({\n        lifecycle: {\n          rule: newLifecycleRules\n        }\n      }, callback);\n      return;\n    } // The default behavior appends the previously-defined lifecycle rules with\n    // the new ones just passed in by the user.\n\n\n    this.getMetadata((err, metadata) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      const currentLifecycleRules = arrify(metadata.lifecycle && metadata.lifecycle.rule);\n      this.setMetadata({\n        lifecycle: {\n          rule: currentLifecycleRules.concat(newLifecycleRules)\n        }\n      }, callback);\n    });\n  }\n  /**\r\n   * @typedef {object} CombineOptions\r\n   * @property {string} [kmsKeyName] Resource name of the Cloud KMS key, of\r\n   *     the form\r\n   *     `projects/my-project/locations/location/keyRings/my-kr/cryptoKeys/my-key`,\r\n   *     that will be used to encrypt the object. Overwrites the object\r\n   * metadata's `kms_key_name` value, if any.\r\n   * @property {string} [userProject] The ID of the project which will be\r\n   *     billed for the request.\r\n   */\n\n  /**\r\n   * @callback CombineCallback\r\n   * @param {?Error} err Request error, if any.\r\n   * @param {File} newFile The new {@link File}.\r\n   * @param {object} apiResponse The full API response.\r\n   */\n\n  /**\r\n   * @typedef {array} CombineResponse\r\n   * @property {File} 0 The new {@link File}.\r\n   * @property {object} 1 The full API response.\r\n   */\n\n  /**\r\n   * Combine multiple files into one new file.\r\n   *\r\n   * @see [Objects: compose API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/objects/compose}\r\n   *\r\n   * @throws {Error} if a non-array is provided as sources argument.\r\n   * @throws {Error} if no sources are provided.\r\n   * @throws {Error} if no destination is provided.\r\n   *\r\n   * @param {string[]|File[]} sources The source files that will be\r\n   *     combined.\r\n   * @param {string|File} destination The file you would like the\r\n   *     source files combined into.\r\n   * @param {CombineOptions} [options] Configuration options.\r\n   * @param {string} [options.kmsKeyName] Resource name of the Cloud KMS key, of\r\n   *     the form\r\n   *     `projects/my-project/locations/location/keyRings/my-kr/cryptoKeys/my-key`,\r\n   *     that will be used to encrypt the object. Overwrites the object\r\n   * metadata's `kms_key_name` value, if any.\r\n   * @param {string} [options.userProject] The ID of the project which will be\r\n   *     billed for the request.\r\n       * @param {CombineCallback} [callback] Callback function.\r\n   * @returns {Promise<CombineResponse>}\r\n   *\r\n   * @example\r\n   * const logBucket = storage.bucket('log-bucket');\r\n   *\r\n   * const sources = [\r\n   *   logBucket.file('2013-logs.txt'),\r\n   *   logBucket.file('2014-logs.txt')\r\n   * ];\r\n   *\r\n   * const allLogs = logBucket.file('all-logs.txt');\r\n   *\r\n   * logBucket.combine(sources, allLogs, function(err, newFile, apiResponse) {\r\n   *   // newFile === allLogs\r\n   * });\r\n   *\r\n   * //-\r\n   * // If the callback is omitted, we'll return a Promise.\r\n   * //-\r\n   * logBucket.combine(sources, allLogs).then(function(data) {\r\n   *   const newFile = data[0];\r\n   *   const apiResponse = data[1];\r\n   * });\r\n   */\n\n\n  combine(sources, destination, optionsOrCallback, callback) {\n    if (!Array.isArray(sources) || sources.length === 0) {\n      throw new Error('You must provide at least one source file.');\n    }\n\n    if (!destination) {\n      throw new Error('A destination file must be specified.');\n    }\n\n    let options = {};\n\n    if (typeof optionsOrCallback === 'function') {\n      callback = optionsOrCallback;\n    } else if (optionsOrCallback) {\n      options = optionsOrCallback;\n    }\n\n    const convertToFile = file => {\n      if (file instanceof file_1.File) {\n        return file;\n      }\n\n      return this.file(file);\n    }; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n    sources = sources.map(convertToFile);\n    const destinationFile = convertToFile(destination);\n    callback = callback || common_1.util.noop;\n\n    if (!destinationFile.metadata.contentType) {\n      const destinationContentType = mime.contentType(destinationFile.name);\n\n      if (destinationContentType) {\n        destinationFile.metadata.contentType = destinationContentType;\n      }\n    } // Make the request from the destination File object.\n\n\n    destinationFile.request({\n      method: 'POST',\n      uri: '/compose',\n      json: {\n        destination: {\n          contentType: destinationFile.metadata.contentType\n        },\n        sourceObjects: sources.map(source => {\n          const sourceObject = {\n            name: source.name\n          };\n\n          if (source.metadata && source.metadata.generation) {\n            sourceObject.generation = source.metadata.generation;\n          }\n\n          return sourceObject;\n        })\n      },\n      qs: options\n    }, (err, resp) => {\n      if (err) {\n        callback(err, null, resp);\n        return;\n      }\n\n      callback(null, destinationFile, resp);\n    });\n  }\n  /**\r\n   * See a [Objects:\r\n   * watchAll request\r\n   * body](https://cloud.google.com/storage/docs/json_api/v1/objects/watchAll).\r\n   *\r\n   * @typedef {object} CreateChannelConfig\r\n   * @property {string} address The address where notifications are\r\n   *     delivered for this channel.\r\n   * @property {string} [delimiter] Returns results in a directory-like mode.\r\n   * @property {number} [maxResults] Maximum number of `items` plus `prefixes`\r\n   *     to return in a single page of responses.\r\n   * @property {string} [pageToken] A previously-returned page token\r\n   *     representing part of the larger set of results to view.\r\n   * @property {string} [prefix] Filter results to objects whose names begin\r\n   *     with this prefix.\r\n   * @property {string} [projection=noAcl] Set of properties to return.\r\n   * @property {string} [userProject] The ID of the project which will be\r\n   *     billed for the request.\r\n   * @property {boolean} [versions=false] If `true`, lists all versions of an object\r\n   *     as distinct results.\r\n   */\n\n  /**\r\n   * @typedef {object} CreateChannelOptions\r\n   * @property {string} [userProject] The ID of the project which will be\r\n   *     billed for the request.\r\n   */\n\n  /**\r\n   * @typedef {array} CreateChannelResponse\r\n   * @property {Channel} 0 The new {@link Channel}.\r\n   * @property {object} 1 The full API response.\r\n   */\n\n  /**\r\n   * @callback CreateChannelCallback\r\n   * @param {?Error} err Request error, if any.\r\n   * @param {Channel} channel The new {@link Channel}.\r\n   * @param {object} apiResponse The full API response.\r\n   */\n\n  /**\r\n   * Create a channel that will be notified when objects in this bucket changes.\r\n   *\r\n   * @throws {Error} If an ID is not provided.\r\n   * @throws {Error} If an address is not provided.\r\n   *\r\n   * @see [Objects: watchAll API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/objects/watchAll}\r\n   *\r\n   * @param {string} id The ID of the channel to create.\r\n   * @param {CreateChannelConfig} config Configuration for creating channel.\r\n   * @param {string} config.address The address where notifications are\r\n   *     delivered for this channel.\r\n   * @param {string} [config.delimiter] Returns results in a directory-like mode.\r\n   * @param {number} [config.maxResults] Maximum number of `items` plus `prefixes`\r\n   *     to return in a single page of responses.\r\n   * @param {string} [config.pageToken] A previously-returned page token\r\n   *     representing part of the larger set of results to view.\r\n   * @param {string} [config.prefix] Filter results to objects whose names begin\r\n   *     with this prefix.\r\n   * @param {string} [config.projection=noAcl] Set of properties to return.\r\n   * @param {string} [config.userProject] The ID of the project which will be\r\n   *     billed for the request.\r\n   * @param {boolean} [config.versions=false] If `true`, lists all versions of an object\r\n   *     as distinct results.\r\n   * @param {CreateChannelOptions} [options] Configuration options.\r\n   * @param {string} [options.userProject] The ID of the project which will be\r\n   *     billed for the request.\r\n   * @param {CreateChannelCallback} [callback] Callback function.\r\n   * @returns {Promise<CreateChannelResponse>}\r\n   *\r\n   * @example\r\n   * const {Storage} = require('@google-cloud/storage');\r\n   * const storage = new Storage();\r\n   * const bucket = storage.bucket('albums');\r\n   * const id = 'new-channel-id';\r\n   *\r\n   * const config = {\r\n   *   address: 'https://...'\r\n   * };\r\n   *\r\n   * bucket.createChannel(id, config, function(err, channel, apiResponse) {\r\n   *   if (!err) {\r\n   *     // Channel created successfully.\r\n   *   }\r\n   * });\r\n   *\r\n   * //-\r\n   * // If the callback is omitted, we'll return a Promise.\r\n   * //-\r\n   * bucket.createChannel(id, config).then(function(data) {\r\n   *   const channel = data[0];\r\n   *   const apiResponse = data[1];\r\n   * });\r\n   */\n\n\n  createChannel(id, config, optionsOrCallback, callback) {\n    if (typeof id !== 'string') {\n      throw new Error('An ID is required to create a channel.');\n    }\n\n    if (typeof config.address !== 'string') {\n      throw new Error('An address is required to create a channel.');\n    }\n\n    let options = {};\n\n    if (typeof optionsOrCallback === 'function') {\n      callback = optionsOrCallback;\n    } else if (optionsOrCallback) {\n      options = optionsOrCallback;\n    }\n\n    this.request({\n      method: 'POST',\n      uri: '/o/watch',\n      json: Object.assign({\n        id,\n        type: 'web_hook'\n      }, config),\n      qs: options\n    }, (err, apiResponse) => {\n      if (err) {\n        callback(err, null, apiResponse);\n        return;\n      }\n\n      const resourceId = apiResponse.resourceId;\n      const channel = this.storage.channel(id, resourceId);\n      channel.metadata = apiResponse;\n      callback(null, channel, apiResponse);\n    });\n  }\n  /**\r\n   * Metadata to set for the Notification.\r\n   *\r\n   * @typedef {object} CreateNotificationOptions\r\n   * @property {object} [customAttributes] An optional list of additional\r\n   *     attributes to attach to each Cloud PubSub message published for this\r\n   *     notification subscription.\r\n   * @property {string[]} [eventTypes] If present, only send notifications about\r\n   *     listed event types. If empty, sent notifications for all event types.\r\n   * @property {string} [objectNamePrefix] If present, only apply this\r\n   *     notification configuration to object names that begin with this prefix.\r\n   * @property {string} [payloadFormat] The desired content of the Payload.\r\n   *     Defaults to `JSON_API_V1`.\r\n   *\r\n   *     Acceptable values are:\r\n   *     - `JSON_API_V1`\r\n   *\r\n   *     - `NONE`\r\n   * @property {string} [userProject] The ID of the project which will be\r\n   *     billed for the request.\r\n   */\n\n  /**\r\n   * @callback CreateNotificationCallback\r\n   * @param {?Error} err Request error, if any.\r\n   * @param {Notification} notification The new {@link Notification}.\r\n   * @param {object} apiResponse The full API response.\r\n   */\n\n  /**\r\n   * @typedef {array} CreateNotificationResponse\r\n   * @property {Notification} 0 The new {@link Notification}.\r\n   * @property {object} 1 The full API response.\r\n   */\n\n  /**\r\n   * Creates a notification subscription for the bucket.\r\n   *\r\n   * @see [Notifications: insert]{@link https://cloud.google.com/storage/docs/json_api/v1/notifications/insert}\r\n   *\r\n   * @param {Topic|string} topic The Cloud PubSub topic to which this\r\n   *     subscription publishes. If the project ID is omitted, the current\r\n   * project ID will be used.\r\n   *\r\n   *     Acceptable formats are:\r\n   *     - `projects/grape-spaceship-123/topics/my-topic`\r\n   *\r\n   *     - `my-topic`\r\n   * @param {CreateNotificationOptions} [options] Metadata to set for the\r\n   *     notification.\r\n   * @param {object} [options.customAttributes] An optional list of additional\r\n   *     attributes to attach to each Cloud PubSub message published for this\r\n   *     notification subscription.\r\n   * @param {string[]} [options.eventTypes] If present, only send notifications about\r\n   *     listed event types. If empty, sent notifications for all event types.\r\n   * @param {string} [options.objectNamePrefix] If present, only apply this\r\n   *     notification configuration to object names that begin with this prefix.\r\n   * @param {string} [options.payloadFormat] The desired content of the Payload.\r\n   *     Defaults to `JSON_API_V1`.\r\n   *\r\n   *     Acceptable values are:\r\n   *     - `JSON_API_V1`\r\n   *\r\n   *     - `NONE`\r\n   * @param {string} [options.userProject] The ID of the project which will be\r\n   *     billed for the request.\r\n   * @param {CreateNotificationCallback} [callback] Callback function.\r\n   * @returns {Promise<CreateNotificationResponse>}\r\n   * @throws {Error} If a valid topic is not provided.\r\n   * @see Notification#create\r\n   *\r\n   * @example\r\n   * const {Storage} = require('@google-cloud/storage');\r\n   * const storage = new Storage();\r\n   * const myBucket = storage.bucket('my-bucket');\r\n   *\r\n   * const callback = function(err, notification, apiResponse) {\r\n   *   if (!err) {\r\n   *     // The notification was created successfully.\r\n   *   }\r\n   * };\r\n   *\r\n   * myBucket.createNotification('my-topic', callback);\r\n   *\r\n   * //-\r\n   * // Configure the nofiication by providing Notification metadata.\r\n   * //-\r\n   * const metadata = {\r\n   *   objectNamePrefix: 'prefix-'\r\n   * };\r\n   *\r\n   * myBucket.createNotification('my-topic', metadata, callback);\r\n   *\r\n   * //-\r\n   * // If the callback is omitted, we'll return a Promise.\r\n   * //-\r\n   * myBucket.createNotification('my-topic').then(function(data) {\r\n   *   const notification = data[0];\r\n   *   const apiResponse = data[1];\r\n   * });\r\n   *\r\n   * @example <caption>include:samples/notifications.js</caption>\r\n   * region_tag:storage_create_notification\r\n   * Another example:\r\n   */\n\n\n  createNotification(topic, optionsOrCallback, callback) {\n    let options = {};\n\n    if (typeof optionsOrCallback === 'function') {\n      callback = optionsOrCallback;\n    } else if (optionsOrCallback) {\n      options = optionsOrCallback;\n    }\n\n    const topicIsObject = topic !== null && typeof topic === 'object';\n\n    if (topicIsObject && common_1.util.isCustomType(topic, 'pubsub/topic')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      topic = topic.name;\n    }\n\n    if (typeof topic !== 'string') {\n      throw new Error('A valid topic name is required.');\n    }\n\n    const body = Object.assign({\n      topic\n    }, options);\n\n    if (body.topic.indexOf('projects') !== 0) {\n      body.topic = 'projects/{{projectId}}/topics/' + body.topic;\n    }\n\n    body.topic = '//pubsub.googleapis.com/' + body.topic;\n\n    if (!body.payloadFormat) {\n      body.payloadFormat = 'JSON_API_V1';\n    }\n\n    const query = {};\n\n    if (body.userProject) {\n      query.userProject = body.userProject;\n      delete body.userProject;\n    }\n\n    this.request({\n      method: 'POST',\n      uri: '/notificationConfigs',\n      json: snakeize(body),\n      qs: query\n    }, (err, apiResponse) => {\n      if (err) {\n        callback(err, null, apiResponse);\n        return;\n      }\n\n      const notification = this.notification(apiResponse.id);\n      notification.metadata = apiResponse;\n      callback(null, notification, apiResponse);\n    });\n  }\n  /**\r\n   * @typedef {object} DeleteFilesOptions Query object. See {@link Bucket#getFiles}\r\n   *     for all of the supported properties.\r\n   * @property {boolean} [force] Suppress errors until all files have been\r\n   *     processed.\r\n   */\n\n  /**\r\n   * @callback DeleteFilesCallback\r\n   * @param {?Error|?Error[]} err Request error, if any, or array of errors from\r\n   *     files that were not able to be deleted.\r\n   * @param {object} [apiResponse] The full API response.\r\n   */\n\n  /**\r\n   * Iterate over the bucket's files, calling `file.delete()` on each.\r\n   *\r\n   * <strong>This is not an atomic request.</strong> A delete attempt will be\r\n   * made for each file individually. Any one can fail, in which case only a\r\n   * portion of the files you intended to be deleted would have.\r\n   *\r\n   * Operations are performed in parallel, up to 10 at once. The first error\r\n   * breaks the loop and will execute the provided callback with it. Specify\r\n   * `{ force: true }` to suppress the errors until all files have had a chance\r\n   * to be processed.\r\n   *\r\n   * The `query` object passed as the first argument will also be passed to\r\n   * {@link Bucket#getFiles}.\r\n   *\r\n   * @see [Objects: delete API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/objects/delete}\r\n   *\r\n   * @param {DeleteFilesOptions} [query] Query object. See {@link Bucket#getFiles}\r\n   * @param {boolean} [query.force] Suppress errors until all files have been\r\n   *     processed.\r\n   * @param {DeleteFilesCallback} [callback] Callback function.\r\n   * @returns {Promise}\r\n   *\r\n   * @example\r\n   * const {Storage} = require('@google-cloud/storage');\r\n   * const storage = new Storage();\r\n   * const bucket = storage.bucket('albums');\r\n   *\r\n   * //-\r\n   * // Delete all of the files in the bucket.\r\n   * //-\r\n   * bucket.deleteFiles(function(err) {});\r\n   *\r\n   * //-\r\n   * // By default, if a file cannot be deleted, this method will stop deleting\r\n   * // files from your bucket. You can override this setting with `force:\r\n   * // true`.\r\n   * //-\r\n   * bucket.deleteFiles({\r\n   *   force: true\r\n   * }, function(errors) {\r\n   *   // `errors`:\r\n   *   //    Array of errors if any occurred, otherwise null.\r\n   * });\r\n   *\r\n   * //-\r\n   * // The first argument to this method acts as a query to\r\n   * // {@link Bucket#getFiles}. As an example, you can delete files\r\n   * // which match a prefix.\r\n   * //-\r\n   * bucket.deleteFiles({\r\n   *   prefix: 'images/'\r\n   * }, function(err) {\r\n   *   if (!err) {\r\n   *     // All files in the `images` directory have been deleted.\r\n   *   }\r\n   * });\r\n   *\r\n   * //-\r\n   * // If the callback is omitted, we'll return a Promise.\r\n   * //-\r\n   * bucket.deleteFiles().then(function() {});\r\n   */\n\n\n  deleteFiles(queryOrCallback, callback) {\n    let query = {};\n\n    if (typeof queryOrCallback === 'function') {\n      callback = queryOrCallback;\n    } else if (queryOrCallback) {\n      query = queryOrCallback;\n    }\n\n    const MAX_PARALLEL_LIMIT = 10;\n    const errors = [];\n\n    const deleteFile = file => {\n      return file.delete(query).catch(err => {\n        if (!query.force) {\n          throw err;\n        }\n\n        errors.push(err);\n      });\n    };\n\n    this.getFiles(query).then(([files]) => {\n      const limit = pLimit(MAX_PARALLEL_LIMIT);\n      const promises = files.map(file => {\n        return limit(() => deleteFile(file));\n      });\n      return Promise.all(promises);\n    }).then(() => callback(errors.length > 0 ? errors : null), callback);\n  }\n  /**\r\n   * @typedef {array} DeleteLabelsResponse\r\n   * @property {object} 0 The full API response.\r\n   */\n\n  /**\r\n   * @callback DeleteLabelsCallback\r\n   * @param {?Error} err Request error, if any.\r\n   * @param {object} metadata Bucket's metadata.\r\n   */\n\n  /**\r\n   * Delete one or more labels from this bucket.\r\n   *\r\n   * @param {string|string[]} [labels] The labels to delete. If no labels are\r\n   *     provided, all of the labels are removed.\r\n   * @param {DeleteLabelsCallback} [callback] Callback function.\r\n   * @returns {Promise<DeleteLabelsResponse>}\r\n   *\r\n   * @example\r\n   * const {Storage} = require('@google-cloud/storage');\r\n   * const storage = new Storage();\r\n   * const bucket = storage.bucket('albums');\r\n   *\r\n   * //-\r\n   * // Delete all of the labels from this bucket.\r\n   * //-\r\n   * bucket.deleteLabels(function(err, apiResponse) {});\r\n   *\r\n   * //-\r\n   * // Delete a single label.\r\n   * //-\r\n   * bucket.deleteLabels('labelone', function(err, apiResponse) {});\r\n   *\r\n   * //-\r\n   * // Delete a specific set of labels.\r\n   * //-\r\n   * bucket.deleteLabels([\r\n   *   'labelone',\r\n   *   'labeltwo'\r\n   * ], function(err, apiResponse) {});\r\n   *\r\n   * //-\r\n   * // If the callback is omitted, we'll return a Promise.\r\n   * //-\r\n   * bucket.deleteLabels().then(function(data) {\r\n   *   const apiResponse = data[0];\r\n   * });\r\n   */\n\n\n  deleteLabels(labelsOrCallback, callback) {\n    let labels = new Array();\n\n    if (typeof labelsOrCallback === 'function') {\n      callback = labelsOrCallback;\n    } else if (labelsOrCallback) {\n      labels = arrify(labelsOrCallback);\n    }\n\n    const deleteLabels = labels => {\n      const nullLabelMap = labels.reduce((nullLabelMap, labelKey) => {\n        nullLabelMap[labelKey] = null;\n        return nullLabelMap;\n      }, {});\n      this.setLabels(nullLabelMap, callback);\n    };\n\n    if (labels.length === 0) {\n      this.getLabels((err, labels) => {\n        if (err) {\n          callback(err);\n          return;\n        }\n\n        deleteLabels(Object.keys(labels));\n      });\n    } else {\n      deleteLabels(labels);\n    }\n  }\n  /**\r\n   * @typedef {array} DisableRequesterPaysResponse\r\n   * @property {object} 0 The full API response.\r\n   */\n\n  /**\r\n   * @callback DisableRequesterPaysCallback\r\n   * @param {?Error} err Request error, if any.\r\n   * @param {object} apiResponse The full API response.\r\n   */\n\n  /**\r\n   * <div class=\"notice\">\r\n   *   <strong>Early Access Testers Only</strong>\r\n   *   <p>\r\n   *     This feature is not yet widely-available.\r\n   *   </p>\r\n   * </div>\r\n   *\r\n   * Disable `requesterPays` functionality from this bucket.\r\n   *\r\n   * @param {DisableRequesterPaysCallback} [callback] Callback function.\r\n   * @returns {Promise<DisableRequesterPaysCallback>}\r\n   *\r\n   * @example\r\n   * const {Storage} = require('@google-cloud/storage');\r\n   * const storage = new Storage();\r\n   * const bucket = storage.bucket('albums');\r\n   *\r\n   * bucket.disableRequesterPays(function(err, apiResponse) {\r\n   *   if (!err) {\r\n   *     // requesterPays functionality disabled successfully.\r\n   *   }\r\n   * });\r\n   *\r\n   * //-\r\n   * // If the callback is omitted, we'll return a Promise.\r\n   * //-\r\n   * bucket.disableRequesterPays().then(function(data) {\r\n   *   const apiResponse = data[0];\r\n   * });\r\n   *\r\n   * @example <caption>include:samples/requesterPays.js</caption>\r\n   * region_tag:storage_disable_requester_pays\r\n   * Example of disabling requester pays:\r\n   */\n\n\n  disableRequesterPays(callback) {\n    this.setMetadata({\n      billing: {\n        requesterPays: false\n      }\n    }, callback || common_1.util.noop);\n  }\n  /**\r\n   * Configuration object for enabling logging.\r\n   *\r\n   * @typedef {object} EnableLoggingOptions\r\n   * @property {string|Bucket} [bucket] The bucket for the log entries. By\r\n   *     default, the current bucket is used.\r\n   * @property {string} prefix A unique prefix for log object names.\r\n   */\n\n  /**\r\n   * Enable logging functionality for this bucket. This will make two API\r\n   * requests, first to grant Cloud Storage WRITE permission to the bucket, then\r\n   * to set the appropriate configuration on the Bucket's metadata.\r\n   *\r\n   * @param {EnableLoggingOptions} config Configuration options.\r\n   * @param {string|Bucket} [config.bucket] The bucket for the log entries. By\r\n   *     default, the current bucket is used.\r\n   * @param {string} config.prefix A unique prefix for log object names.\r\n   * @param {SetBucketMetadataCallback} [callback] Callback function.\r\n   * @returns {Promise<SetBucketMetadataResponse>}\r\n   *\r\n   * @example\r\n   * const {Storage} = require('@google-cloud/storage');\r\n   * const storage = new Storage();\r\n   * const bucket = storage.bucket('albums');\r\n   *\r\n   * const config = {\r\n   *   prefix: 'log'\r\n   * };\r\n   *\r\n   * bucket.enableLogging(config, function(err, apiResponse) {\r\n   *   if (!err) {\r\n   *     // Logging functionality enabled successfully.\r\n   *   }\r\n   * });\r\n   *\r\n   * @example <caption>Optionally, provide a destination bucket.</caption>\r\n   * const config = {\r\n   *   prefix: 'log',\r\n   *   bucket: 'destination-bucket'\r\n   * };\r\n   *\r\n   * bucket.enableLogging(config, function(err, apiResponse) {});\r\n   *\r\n   * @example <caption>If the callback is omitted, we'll return a Promise.</caption>\r\n   * bucket.enableLogging(config).then(function(data) {\r\n   *   const apiResponse = data[0];\r\n   * });\r\n   */\n\n\n  enableLogging(config, callback) {\n    if (!config || typeof config === 'function' || typeof config.prefix === 'undefined') {\n      throw new Error('A configuration object with a prefix is required.');\n    }\n\n    const logBucket = config.bucket ? config.bucket.id || config.bucket : this.id;\n\n    (async () => {\n      let setMetadataResponse;\n\n      try {\n        const [policy] = await this.iam.getPolicy();\n        policy.bindings.push({\n          members: ['group:cloud-storage-analytics@google.com'],\n          role: 'roles/storage.objectCreator'\n        });\n        await this.iam.setPolicy(policy);\n        [setMetadataResponse] = await this.setMetadata({\n          logging: {\n            logBucket,\n            logObjectPrefix: config.prefix\n          }\n        });\n      } catch (e) {\n        callback(e);\n        return;\n      }\n\n      callback(null, setMetadataResponse);\n    })();\n  }\n  /**\r\n   * @typedef {array} EnableRequesterPaysResponse\r\n   * @property {object} 0 The full API response.\r\n   */\n\n  /**\r\n   * @callback EnableRequesterPaysCallback\r\n   * @param {?Error} err Request error, if any.\r\n   * @param {object} apiResponse The full API response.\r\n   */\n\n  /**\r\n   * <div class=\"notice\">\r\n   *   <strong>Early Access Testers Only</strong>\r\n   *   <p>\r\n   *     This feature is not yet widely-available.\r\n   *   </p>\r\n   * </div>\r\n   *\r\n   * Enable `requesterPays` functionality for this bucket. This enables you, the\r\n   * bucket owner, to have the requesting user assume the charges for the access\r\n   * to your bucket and its contents.\r\n   *\r\n   * @param {EnableRequesterPaysCallback} [callback] Callback function.\r\n   * @returns {Promise<EnableRequesterPaysResponse>}\r\n   *\r\n   * @example\r\n   * const {Storage} = require('@google-cloud/storage');\r\n   * const storage = new Storage();\r\n   * const bucket = storage.bucket('albums');\r\n   *\r\n   * bucket.enableRequesterPays(function(err, apiResponse) {\r\n   *   if (!err) {\r\n   *     // requesterPays functionality enabled successfully.\r\n   *   }\r\n   * });\r\n   *\r\n   * //-\r\n   * // If the callback is omitted, we'll return a Promise.\r\n   * //-\r\n   * bucket.enableRequesterPays().then(function(data) {\r\n   *   const apiResponse = data[0];\r\n   * });\r\n   *\r\n   * @example <caption>include:samples/requesterPays.js</caption>\r\n   * region_tag:storage_enable_requester_pays\r\n   * Example of enabling requester pays:\r\n   */\n\n\n  enableRequesterPays(callback) {\n    this.setMetadata({\n      billing: {\n        requesterPays: true\n      }\n    }, callback || common_1.util.noop);\n  }\n  /**\r\n   * Create a {@link File} object. See {@link File} to see how to handle\r\n   * the different use cases you may have.\r\n   *\r\n   * @param {string} name The name of the file in this bucket.\r\n   * @param {FileOptions} [options] Configuration options.\r\n   * @param {string|number} [options.generation] Only use a specific revision of\r\n   *     this file.\r\n   * @param {string} [options.encryptionKey] A custom encryption key. See\r\n   *     [Customer-supplied Encryption\r\n   * Keys](https://cloud.google.com/storage/docs/encryption#customer-supplied).\r\n   * @param {string} [options.kmsKeyName] The name of the Cloud KMS key that will\r\n   *     be used to encrypt the object. Must be in the format:\r\n   *     `projects/my-project/locations/location/keyRings/my-kr/cryptoKeys/my-key`.\r\n   *     KMS key ring must use the same location as the bucket.\r\n   * @param {string} [options.userProject] The ID of the project which will be\r\n   *     billed for all requests made from File object.\r\n   * @returns {File}\r\n   *\r\n   * @example\r\n   * const {Storage} = require('@google-cloud/storage');\r\n   * const storage = new Storage();\r\n   * const bucket = storage.bucket('albums');\r\n   * const file = bucket.file('my-existing-file.png');\r\n   */\n\n\n  file(name, options) {\n    if (!name) {\n      throw Error('A file name must be specified.');\n    }\n\n    return new file_1.File(this, name, options);\n  }\n  /**\r\n   * @typedef {array} GetFilesResponse\r\n   * @property {File[]} 0 Array of {@link File} instances.\r\n   * @param {object} nextQuery 1 A query object to receive more results.\r\n   * @param {object} apiResponse 2 The full API response.\r\n   */\n\n  /**\r\n   * @callback GetFilesCallback\r\n   * @param {?Error} err Request error, if any.\r\n   * @param {File[]} files Array of {@link File} instances.\r\n   * @param {object} nextQuery A query object to receive more results.\r\n   * @param {object} apiResponse The full API response.\r\n   */\n\n  /**\r\n   * Query object for listing files.\r\n   *\r\n   * @typedef {object} GetFilesOptions\r\n   * @property {boolean} [autoPaginate=true] Have pagination handled\r\n   *     automatically.\r\n   * @property {string} [delimiter] Results will contain only objects whose\r\n   *     names, aside from the prefix, do not contain delimiter. Objects whose\r\n   *     names, aside from the prefix, contain delimiter will have their name\r\n   *     truncated after the delimiter, returned in `apiResponse.prefixes`.\r\n   *     Duplicate prefixes are omitted.\r\n   * @property {string} [directory] Filter results based on a directory name, or\r\n   *     more technically, a \"prefix\".\r\n   * @property {string} [endOffset] Filter results to objects whose names are\r\n   * lexicographically before endOffset. If startOffset is also set, the objects\r\n   * listed have names between startOffset (inclusive) and endOffset (exclusive).\r\n   * @property {boolean} [includeTrailingDelimiter] If true, objects that end in\r\n   * exactly one instance of delimiter have their metadata included in items[]\r\n   * in addition to the relevant part of the object name appearing in prefixes[].\r\n   * @property {string} [prefix] Filter results to objects whose names begin\r\n   *     with this prefix.\r\n   * @property {number} [maxApiCalls] Maximum number of API calls to make.\r\n   * @property {number} [maxResults] Maximum number of items plus prefixes to\r\n   *     return per call.\r\n   *     Note: By default will handle pagination automatically\r\n   *     if more than 1 page worth of results are requested per call.\r\n   *     When `autoPaginate` is set to `false` the smaller of `maxResults`\r\n   *     or 1 page of results will be returned per call.\r\n   * @property {string} [pageToken] A previously-returned page token\r\n   *     representing part of the larger set of results to view.\r\n   * @property {string} [startOffset] Filter results to objects whose names are\r\n   * lexicographically equal to or after startOffset. If endOffset is also set,\r\n   * the objects listed have names between startOffset (inclusive) and endOffset (exclusive).\r\n   * @property {string} [userProject] The ID of the project which will be\r\n   *     billed for the request.\r\n   * @property {boolean} [versions] If true, returns File objects scoped to\r\n   *     their versions.\r\n   */\n\n  /**\r\n   * Get {@link File} objects for the files currently in the bucket.\r\n   *\r\n   * @see [Objects: list API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/objects/list}\r\n   *\r\n   * @param {GetFilesOptions} [query] Query object for listing files.\r\n   * @param {boolean} [query.autoPaginate=true] Have pagination handled\r\n   *     automatically.\r\n   * @param {string} [query.delimiter] Results will contain only objects whose\r\n   *     names, aside from the prefix, do not contain delimiter. Objects whose\r\n   *     names, aside from the prefix, contain delimiter will have their name\r\n   *     truncated after the delimiter, returned in `apiResponse.prefixes`.\r\n   *     Duplicate prefixes are omitted.\r\n   * @param {string} [query.directory] Filter results based on a directory name, or\r\n   *     more technically, a \"prefix\".\r\n   * @param {string} [query.endOffset] Filter results to objects whose names are\r\n   * lexicographically before endOffset. If startOffset is also set, the objects\r\n   * listed have names between startOffset (inclusive) and endOffset (exclusive).\r\n   * @param {boolean} [query.includeTrailingDelimiter] If true, objects that end in\r\n   * exactly one instance of delimiter have their metadata included in items[]\r\n   * in addition to the relevant part of the object name appearing in prefixes[].\r\n   * @param {string} [query.prefix] Filter results to objects whose names begin\r\n   *     with this prefix.\r\n   * @param {number} [query.maxApiCalls] Maximum number of API calls to make.\r\n   * @param {number} [query.maxResults] Maximum number of items plus prefixes to\r\n   *     return per call.\r\n   *     Note: By default will handle pagination automatically\r\n   *     if more than 1 page worth of results are requested per call.\r\n   *     When `autoPaginate` is set to `false` the smaller of `maxResults`\r\n   *     or 1 page of results will be returned per call.\r\n   * @param {string} [query.pageToken] A previously-returned page token\r\n   *     representing part of the larger set of results to view.\r\n   * @param {string} [query.startOffset] Filter results to objects whose names are\r\n   * lexicographically equal to or after startOffset. If endOffset is also set,\r\n   * the objects listed have names between startOffset (inclusive) and endOffset (exclusive).\r\n   * @param {string} [query.userProject] The ID of the project which will be\r\n   *     billed for the request.\r\n   * @param {boolean} [query.versions] If true, returns File objects scoped to\r\n   *     their versions.\r\n   * @param {GetFilesCallback} [callback] Callback function.\r\n   * @returns {Promise<GetFilesResponse>}\r\n   *\r\n   * @example\r\n   * const {Storage} = require('@google-cloud/storage');\r\n   * const storage = new Storage();\r\n   * const bucket = storage.bucket('albums');\r\n   *\r\n   * bucket.getFiles(function(err, files) {\r\n   *   if (!err) {\r\n   *     // files is an array of File objects.\r\n   *   }\r\n   * });\r\n   *\r\n   * //-\r\n   * // If your bucket has versioning enabled, you can get all of your files\r\n   * // scoped to their generation.\r\n   * //-\r\n   * bucket.getFiles({\r\n   *   versions: true\r\n   * }, function(err, files) {\r\n   *   // Each file is scoped to its generation.\r\n   * });\r\n   *\r\n   * //-\r\n   * // To control how many API requests are made and page through the results\r\n   * // manually, set `autoPaginate` to `false`.\r\n   * //-\r\n   * const callback = function(err, files, nextQuery, apiResponse) {\r\n   *   if (nextQuery) {\r\n   *     // More results exist.\r\n   *     bucket.getFiles(nextQuery, callback);\r\n   *   }\r\n   *\r\n   *   // The `metadata` property is populated for you with the metadata at the\r\n   *   // time of fetching.\r\n   *   files[0].metadata;\r\n   *\r\n   *   // However, in cases where you are concerned the metadata could have\r\n   *   // changed, use the `getMetadata` method.\r\n   *   files[0].getMetadata(function(err, metadata) {});\r\n   * };\r\n   *\r\n   * bucket.getFiles({\r\n   *   autoPaginate: false\r\n   * }, callback);\r\n   *\r\n   * //-\r\n   * // If the callback is omitted, we'll return a Promise.\r\n   * //-\r\n   * bucket.getFiles().then(function(data) {\r\n   *   const files = data[0];\r\n   * });\r\n   *\r\n   * @example <caption><h6>Simulating a File System</h6><p>With `autoPaginate: false`, it's possible to iterate over files which incorporate a common structure using a delimiter.</p><p>Consider the following remote objects:</p><ol><li>\"a\"</li><li>\"a/b/c/d\"</li><li>\"b/d/e\"</li></ol><p>Using a delimiter of `/` will return a single file, \"a\".</p><p>`apiResponse.prefixes` will return the \"sub-directories\" that were found:</p><ol><li>\"a/\"</li><li>\"b/\"</li></ol></caption>\r\n   * bucket.getFiles({\r\n   *   autoPaginate: false,\r\n   *   delimiter: '/'\r\n   * }, function(err, files, nextQuery, apiResponse) {\r\n   *   // files = [\r\n   *   //   {File} // File object for file \"a\"\r\n   *   // ]\r\n   *\r\n   *   // apiResponse.prefixes = [\r\n   *   //   'a/',\r\n   *   //   'b/'\r\n   *   // ]\r\n   * });\r\n   *\r\n   * @example <caption>Using prefixes, it's now possible to simulate a file system with follow-up requests.</caption>\r\n   * bucket.getFiles({\r\n   *   autoPaginate: false,\r\n   *   delimiter: '/',\r\n   *   prefix: 'a/'\r\n   * }, function(err, files, nextQuery, apiResponse) {\r\n   *   // No files found within \"directory\" a.\r\n   *   // files = []\r\n   *\r\n   *   // However, a \"sub-directory\" was found.\r\n   *   // This prefix can be used to continue traversing the \"file system\".\r\n   *   // apiResponse.prefixes = [\r\n   *   //   'a/b/'\r\n   *   // ]\r\n   * });\r\n   *\r\n   * @example <caption>include:samples/files.js</caption>\r\n   * region_tag:storage_list_files\r\n   * Another example:\r\n   *\r\n   * @example <caption>include:samples/files.js</caption>\r\n   * region_tag:storage_list_files_with_prefix\r\n   * Example of listing files, filtered by a prefix:\r\n   */\n\n\n  getFiles(queryOrCallback, callback) {\n    let query = typeof queryOrCallback === 'object' ? queryOrCallback : {};\n\n    if (!callback) {\n      callback = queryOrCallback;\n    }\n\n    query = Object.assign({}, query);\n\n    if (query.directory) {\n      query.prefix = `${query.directory}/`.replace(/\\/*$/, '/');\n      delete query.directory;\n    }\n\n    this.request({\n      uri: '/o',\n      qs: query\n    }, (err, resp) => {\n      if (err) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        callback(err, null, null, resp);\n        return;\n      }\n\n      const files = arrify(resp.items).map(file => {\n        const options = {};\n\n        if (query.versions) {\n          options.generation = file.generation;\n        }\n\n        if (file.kmsKeyName) {\n          options.kmsKeyName = file.kmsKeyName;\n        }\n\n        const fileInstance = this.file(file.name, options);\n        fileInstance.metadata = file;\n        return fileInstance;\n      });\n      let nextQuery = null;\n\n      if (resp.nextPageToken) {\n        nextQuery = Object.assign({}, query, {\n          pageToken: resp.nextPageToken\n        });\n      } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n      callback(null, files, nextQuery, resp);\n    });\n  }\n  /**\r\n   * @typedef {object} GetLabelsOptions Configuration options for Bucket#getLabels().\r\n   * @param {string} [userProject] The ID of the project which will be\r\n   *     billed for the request.\r\n   */\n\n  /**\r\n   * @typedef {array} GetLabelsResponse\r\n   * @property {object} 0 Object of labels currently set on this bucket.\r\n   */\n\n  /**\r\n   * @callback GetLabelsCallback\r\n   * @param {?Error} err Request error, if any.\r\n   * @param {object} labels Object of labels currently set on this bucket.\r\n   */\n\n  /**\r\n   * Get the labels currently set on this bucket.\r\n   *\r\n   * @param {object} [options] Configuration options.\r\n   * @param {string} [options.userProject] The ID of the project which will be\r\n   *     billed for the request.\r\n   * @param {GetLabelsCallback} [callback] Callback function.\r\n   * @returns {Promise<GetLabelsCallback>}\r\n   *\r\n   * @example\r\n   * const {Storage} = require('@google-cloud/storage');\r\n   * const storage = new Storage();\r\n   * const bucket = storage.bucket('albums');\r\n   *\r\n   * bucket.getLabels(function(err, labels) {\r\n   *   if (err) {\r\n   *     // Error handling omitted.\r\n   *   }\r\n   *\r\n   *   // labels = {\r\n   *   //   label: 'labelValue',\r\n   *   //   ...\r\n   *   // }\r\n   * });\r\n   *\r\n   * //-\r\n   * // If the callback is omitted, we'll return a Promise.\r\n   * //-\r\n   * bucket.getLabels().then(function(data) {\r\n   *   const labels = data[0];\r\n   * });\r\n   */\n\n\n  getLabels(optionsOrCallback, callback) {\n    let options = {};\n\n    if (typeof optionsOrCallback === 'function') {\n      callback = optionsOrCallback;\n    } else if (optionsOrCallback) {\n      options = optionsOrCallback;\n    }\n\n    this.getMetadata(options, (err, metadata) => {\n      if (err) {\n        callback(err, null);\n        return;\n      }\n\n      callback(null, metadata.labels || {});\n    });\n  }\n  /**\r\n   * @typedef {object} GetNotificationsOptions Configuration options for Bucket#getNotification().\r\n   * @property {string} [userProject] The ID of the project which will be\r\n   *     billed for the request.\r\n   */\n\n  /**\r\n   * @callback GetNotificationsCallback\r\n   * @param {?Error} err Request error, if any.\r\n   * @param {Notification[]} notifications Array of {@link Notification}\r\n   *     instances.\r\n   * @param {object} apiResponse The full API response.\r\n   */\n\n  /**\r\n   * @typedef {array} GetNotificationsResponse\r\n   * @property {Notification[]} 0 Array of {@link Notification} instances.\r\n   * @property {object} 1 The full API response.\r\n   */\n\n  /**\r\n   * Retrieves a list of notification subscriptions for a given bucket.\r\n   *\r\n   * @see [Notifications: list]{@link https://cloud.google.com/storage/docs/json_api/v1/notifications/list}\r\n   *\r\n   * @param {GetNotificationsOptions} [options] Configuration options.\r\n   * @param {string} [options.userProject] The ID of the project which will be\r\n   *     billed for the request.\r\n   * @param {GetNotificationsCallback} [callback] Callback function.\r\n   * @returns {Promise<GetNotificationsResponse>}\r\n   *\r\n   * @example\r\n   * const {Storage} = require('@google-cloud/storage');\r\n   * const storage = new Storage();\r\n   * const bucket = storage.bucket('my-bucket');\r\n   *\r\n   * bucket.getNotifications(function(err, notifications, apiResponse) {\r\n   *   if (!err) {\r\n   *     // notifications is an array of Notification objects.\r\n   *   }\r\n   * });\r\n   *\r\n   * //-\r\n   * // If the callback is omitted, we'll return a Promise.\r\n   * //-\r\n   * bucket.getNotifications().then(function(data) {\r\n   *   const notifications = data[0];\r\n   *   const apiResponse = data[1];\r\n   * });\r\n   *\r\n   * @example <caption>include:samples/notifications.js</caption>\r\n   * region_tag:storage_list_notifications\r\n   * Another example:\r\n   */\n\n\n  getNotifications(optionsOrCallback, callback) {\n    let options = {};\n\n    if (typeof optionsOrCallback === 'function') {\n      callback = optionsOrCallback;\n    } else if (optionsOrCallback) {\n      options = optionsOrCallback;\n    }\n\n    this.request({\n      uri: '/notificationConfigs',\n      qs: options\n    }, (err, resp) => {\n      if (err) {\n        callback(err, null, resp);\n        return;\n      }\n\n      const notifications = arrify(resp.items).map(notification => {\n        const notificationInstance = this.notification(notification.id);\n        notificationInstance.metadata = notification;\n        return notificationInstance;\n      });\n      callback(null, notifications, resp);\n    });\n  }\n  /**\r\n   * @typedef {array} GetSignedUrlResponse\r\n   * @property {object} 0 The signed URL.\r\n   */\n\n  /**\r\n   * @callback GetSignedUrlCallback\r\n   * @param {?Error} err Request error, if any.\r\n   * @param {object} url The signed URL.\r\n   */\n\n  /**\r\n   * @typedef {object} GetBucketSignedUrlConfig\r\n   * @property {string} action Currently only supports \"list\" (HTTP: GET).\r\n   * @property {*} expires A timestamp when this link will expire. Any value\r\n   *     given is passed to `new Date()`.\r\n   *     Note: 'v4' supports maximum duration of 7 days (604800 seconds) from now.\r\n   * @property {string} [version='v2'] The signing version to use, either\r\n   *     'v2' or 'v4'.\r\n   * @property {boolean} [virtualHostedStyle=false] Use virtual hosted-style\r\n   *     URLs ('https://mybucket.storage.googleapis.com/...') instead of path-style\r\n   *     ('https://storage.googleapis.com/mybucket/...'). Virtual hosted-style URLs\r\n   *     should generally be preferred instaed of path-style URL.\r\n   *     Currently defaults to `false` for path-style, although this may change in a\r\n   *     future major-version release.\r\n   * @property {string} [cname] The cname for this bucket, i.e.,\r\n   *     \"https://cdn.example.com\".\r\n   *     See [reference]{@link https://cloud.google.com/storage/docs/access-control/signed-urls#example}\r\n   * @property {object} [extensionHeaders] If these headers are used, the\r\n   *     server will check to make sure that the client provides matching\r\n   * values. See [Canonical extension\r\n   * headers](https://cloud.google.com/storage/docs/access-control/signed-urls#about-canonical-extension-headers)\r\n   *     for the requirements of this feature, most notably:\r\n   *       - The header name must be prefixed with `x-goog-`\r\n   *       - The header name must be all lowercase\r\n   *     Note: Multi-valued header passed as an array in the extensionHeaders\r\n   *           object is converted into a string, delimited by `,` with\r\n   *           no space. Requests made using the signed URL will need to\r\n   *           delimit multi-valued headers using a single `,` as well, or\r\n   *           else the server will report a mismatched signature.\r\n   * @property {object} [queryParams] Additional query parameters to include\r\n   *     in the signed URL.\r\n   */\n\n  /**\r\n   * Get a signed URL to allow limited time access to a bucket.\r\n   *\r\n   * In Google Cloud Platform environments, such as Cloud Functions and App\r\n   * Engine, you usually don't provide a `keyFilename` or `credentials` during\r\n   * instantiation. In those environments, we call the\r\n   * [signBlob\r\n   * API](https://cloud.google.com/iam/docs/reference/credentials/rest/v1/projects.serviceAccounts/signBlob)\r\n   * to create a signed URL. That API requires either the\r\n   * `https://www.googleapis.com/auth/iam` or\r\n   * `https://www.googleapis.com/auth/cloud-platform` scope, so be sure they are\r\n   * enabled.\r\n   *\r\n   * @see [Signed URLs Reference]{@link https://cloud.google.com/storage/docs/access-control/signed-urls}\r\n   *\r\n   * @throws {Error} if an expiration timestamp from the past is given.\r\n   *\r\n   * @param {GetBucketSignedUrlConfig} config Configuration object.\r\n   * @param {string} config.action Currently only supports \"list\" (HTTP: GET).\r\n   * @param {*} config.expires A timestamp when this link will expire. Any value\r\n   *     given is passed to `new Date()`.\r\n   *     Note: 'v4' supports maximum duration of 7 days (604800 seconds) from now.\r\n   * @param {string} [config.version='v2'] The signing version to use, either\r\n   *     'v2' or 'v4'.\r\n   * @param {boolean} [config.virtualHostedStyle=false] Use virtual hosted-style\r\n   *     URLs ('https://mybucket.storage.googleapis.com/...') instead of path-style\r\n   *     ('https://storage.googleapis.com/mybucket/...'). Virtual hosted-style URLs\r\n   *     should generally be preferred instaed of path-style URL.\r\n   *     Currently defaults to `false` for path-style, although this may change in a\r\n   *     future major-version release.\r\n   * @param {string} [config.cname] The cname for this bucket, i.e.,\r\n   *     \"https://cdn.example.com\".\r\n   *     See [reference]{@link https://cloud.google.com/storage/docs/access-control/signed-urls#example}\r\n   * @param {object} [config.extensionHeaders] If these headers are used, the\r\n   *     server will check to make sure that the client provides matching\r\n   * values. See [Canonical extension\r\n   * headers](https://cloud.google.com/storage/docs/access-control/signed-urls#about-canonical-extension-headers)\r\n   *     for the requirements of this feature, most notably:\r\n   *       - The header name must be prefixed with `x-goog-`\r\n   *       - The header name must be all lowercase\r\n   *     Note: Multi-valued header passed as an array in the extensionHeaders\r\n   *           object is converted into a string, delimited by `,` with\r\n   *           no space. Requests made using the signed URL will need to\r\n   *           delimit multi-valued headers using a single `,` as well, or\r\n   *           else the server will report a mismatched signature.\r\n   * @property {object} [config.queryParams] Additional query parameters to include\r\n   *     in the signed URL.\r\n   * @param {GetSignedUrlCallback} [callback] Callback function.\r\n   * @returns {Promise<GetSignedUrlResponse>}\r\n   *\r\n   * @example\r\n   * const {Storage} = require('@google-cloud/storage');\r\n   * const storage = new Storage();\r\n   * const myBucket = storage.bucket('my-bucket');\r\n   *\r\n   * //-\r\n   * // Generate a URL that allows temporary access to list files in a bucket.\r\n   * //-\r\n   * const request = require('request');\r\n   *\r\n   * const config = {\r\n   *   action: 'list',\r\n   *   expires: '03-17-2025'\r\n   * };\r\n   *\r\n   * bucket.getSignedUrl(config, function(err, url) {\r\n   *   if (err) {\r\n   *     console.error(err);\r\n   *     return;\r\n   *   }\r\n   *\r\n   *   // The bucket is now available to be listed from this URL.\r\n   *   request(url, function(err, resp) {\r\n   *     // resp.statusCode = 200\r\n   *   });\r\n   * });\r\n   *\r\n   * //-\r\n   * // If the callback is omitted, we'll return a Promise.\r\n   * //-\r\n   * bucket.getSignedUrl(config).then(function(data) {\r\n   *   const url = data[0];\r\n   * });\r\n   */\n\n\n  getSignedUrl(cfg, callback) {\n    const method = BucketActionToHTTPMethod[cfg.action];\n\n    if (!method) {\n      throw new Error('The action is not provided or invalid.');\n    }\n\n    const signConfig = {\n      method,\n      expires: cfg.expires,\n      version: cfg.version,\n      cname: cfg.cname,\n      extensionHeaders: cfg.extensionHeaders || {},\n      queryParams: cfg.queryParams || {}\n    };\n\n    if (!this.signer) {\n      this.signer = new signer_1.URLSigner(this.storage.authClient, this);\n    }\n\n    this.signer.getSignedUrl(signConfig).then(signedUrl => callback(null, signedUrl), callback);\n  }\n  /**\r\n   * @callback BucketLockCallback\r\n   * @param {?Error} err Request error, if any.\r\n   * @param {object} apiResponse The full API response.\r\n   */\n\n  /**\r\n   * Lock a previously-defined retention policy. This will prevent changes to\r\n   * the policy.\r\n   *\r\n   * @throws {Error} if a metageneration is not provided.\r\n   *\r\n   * @param {number|string} metageneration The bucket's metageneration. This is\r\n   *     accesssible from calling {@link File#getMetadata}.\r\n   * @param {BucketLockCallback} [callback] Callback function.\r\n   * @returns {Promise<BucketLockResponse>}\r\n   *\r\n   * @example\r\n   * const storage = require('@google-cloud/storage')();\r\n   * const bucket = storage.bucket('albums');\r\n   *\r\n   * const metageneration = 2;\r\n   *\r\n   * bucket.lock(metageneration, function(err, apiResponse) {});\r\n   *\r\n   * //-\r\n   * // If the callback is omitted, we'll return a Promise.\r\n   * //-\r\n   * bucket.lock(metageneration).then(function(data) {\r\n   *   const apiResponse = data[0];\r\n   * });\r\n   */\n\n\n  lock(metageneration, callback) {\n    const metatype = typeof metageneration;\n\n    if (metatype !== 'number' && metatype !== 'string') {\n      throw new Error('A metageneration must be provided.');\n    }\n\n    this.request({\n      method: 'POST',\n      uri: '/lockRetentionPolicy',\n      qs: {\n        ifMetagenerationMatch: metageneration\n      }\n    }, callback);\n  }\n  /**\r\n   * @typedef {array} MakeBucketPrivateResponse\r\n   * @property {File[]} 0 List of files made private.\r\n   */\n\n  /**\r\n   * @callback MakeBucketPrivateCallback\r\n   * @param {?Error} err Request error, if any.\r\n   * @param {File[]} files List of files made private.\r\n   */\n\n  /**\r\n   * @typedef {object} MakeBucketPrivateOptions\r\n   * @property {boolean} [includeFiles=false] Make each file in the bucket\r\n   *     private.\r\n   * @property {Metadata} [metadata] Define custom metadata properties to define\r\n   *     along with the operation.\r\n   * @property {boolean} [force] Queue errors occurred while making files\r\n   *     private until all files have been processed.\r\n   * @property {string} [userProject] The ID of the project which will be\r\n   *     billed for the request.\r\n   */\n\n  /**\r\n   * Make the bucket listing private.\r\n   *\r\n   * You may also choose to make the contents of the bucket private by\r\n   * specifying `includeFiles: true`. This will automatically run\r\n   * {@link File#makePrivate} for every file in the bucket.\r\n   *\r\n   * When specifying `includeFiles: true`, use `force: true` to delay execution\r\n   * of your callback until all files have been processed. By default, the\r\n   * callback is executed after the first error. Use `force` to queue such\r\n   * errors until all files have been processed, after which they will be\r\n   * returned as an array as the first argument to your callback.\r\n   *\r\n   * NOTE: This may cause the process to be long-running and use a high number\r\n   * of requests. Use with caution.\r\n   *\r\n   * @see [Buckets: patch API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/patch}\r\n   *\r\n   * @param {MakeBucketPrivateOptions} [options] Configuration options.\r\n   * @param {boolean} [options.includeFiles=false] Make each file in the bucket\r\n   *     private.\r\n   * @param {Metadata} [options.metadata] Define custom metadata properties to define\r\n   *     along with the operation.\r\n   * @param {boolean} [options.force] Queue errors occurred while making files\r\n   *     private until all files have been processed.\r\n   * @param {string} [options.userProject] The ID of the project which will be\r\n   *     billed for the request.\r\n   * @param {MakeBucketPrivateCallback} [callback] Callback function.\r\n   * @returns {Promise<MakeBucketPrivateResponse>}\r\n   *\r\n   * @example\r\n   * const {Storage} = require('@google-cloud/storage');\r\n   * const storage = new Storage();\r\n   * const bucket = storage.bucket('albums');\r\n   *\r\n   * //-\r\n   * // Make the bucket private.\r\n   * //-\r\n   * bucket.makePrivate(function(err) {});\r\n   *\r\n   * //-\r\n   * // Make the bucket and its contents private.\r\n   * //-\r\n   * const opts = {\r\n   *   includeFiles: true\r\n   * };\r\n   *\r\n   * bucket.makePrivate(opts, function(err, files) {\r\n   *   // `err`:\r\n   *   //    The first error to occur, otherwise null.\r\n   *   //\r\n   *   // `files`:\r\n   *   //    Array of files successfully made private in the bucket.\r\n   * });\r\n   *\r\n   * //-\r\n   * // Make the bucket and its contents private, using force to suppress errors\r\n   * // until all files have been processed.\r\n   * //-\r\n   * const opts = {\r\n   *   includeFiles: true,\r\n   *   force: true\r\n   * };\r\n   *\r\n   * bucket.makePrivate(opts, function(errors, files) {\r\n   *   // `errors`:\r\n   *   //    Array of errors if any occurred, otherwise null.\r\n   *   //\r\n   *   // `files`:\r\n   *   //    Array of files successfully made private in the bucket.\r\n   * });\r\n   *\r\n   * //-\r\n   * // If the callback is omitted, we'll return a Promise.\r\n   * //-\r\n   * bucket.makePrivate(opts).then(function(data) {\r\n   *   const files = data[0];\r\n   * });\r\n   */\n\n\n  makePrivate(optionsOrCallback, callback) {\n    const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n    callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n    options.private = true;\n    const query = {\n      predefinedAcl: 'projectPrivate'\n    };\n\n    if (options.userProject) {\n      query.userProject = options.userProject;\n    } // You aren't allowed to set both predefinedAcl & acl properties on a bucket\n    // so acl must explicitly be nullified.\n\n\n    const metadata = extend({}, options.metadata, {\n      acl: null\n    });\n    this.setMetadata(metadata, query).then(() => {\n      if (options.includeFiles) {\n        return util_1.promisify(this.makeAllFilesPublicPrivate_).call(this, options);\n      }\n\n      return [];\n    }).then(files => callback(null, files), callback);\n  }\n  /**\r\n   * @typedef {object} MakeBucketPublicOptions\r\n   * @property {boolean} [includeFiles=false] Make each file in the bucket\r\n   *     private.\r\n   * @property {boolean} [force] Queue errors occurred while making files\r\n   *     private until all files have been processed.\r\n   */\n\n  /**\r\n   * @callback MakeBucketPublicCallback\r\n   * @param {?Error} err Request error, if any.\r\n   * @param {File[]} files List of files made public.\r\n   */\n\n  /**\r\n   * @typedef {array} MakeBucketPublicResponse\r\n   * @property {File[]} 0 List of files made public.\r\n   */\n\n  /**\r\n   * Make the bucket publicly readable.\r\n   *\r\n   * You may also choose to make the contents of the bucket publicly readable by\r\n   * specifying `includeFiles: true`. This will automatically run\r\n   * {@link File#makePublic} for every file in the bucket.\r\n   *\r\n   * When specifying `includeFiles: true`, use `force: true` to delay execution\r\n   * of your callback until all files have been processed. By default, the\r\n   * callback is executed after the first error. Use `force` to queue such\r\n   * errors until all files have been processed, after which they will be\r\n   * returned as an array as the first argument to your callback.\r\n   *\r\n   * NOTE: This may cause the process to be long-running and use a high number\r\n   * of requests. Use with caution.\r\n   *\r\n   * @see [Buckets: patch API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/patch}\r\n   *\r\n   * @param {MakeBucketPublicOptions} [options] Configuration options.\r\n   * @param {boolean} [options.includeFiles=false] Make each file in the bucket\r\n   *     private.\r\n   * @param {boolean} [options.force] Queue errors occurred while making files\r\n   *     private until all files have been processed.\r\n   * @param {MakeBucketPublicCallback} [callback] Callback function.\r\n   * @returns {Promise<MakeBucketPublicResponse>}\r\n   *\r\n   * @example\r\n   * const {Storage} = require('@google-cloud/storage');\r\n   * const storage = new Storage();\r\n   * const bucket = storage.bucket('albums');\r\n   *\r\n   * //-\r\n   * // Make the bucket publicly readable.\r\n   * //-\r\n   * bucket.makePublic(function(err) {});\r\n   *\r\n   * //-\r\n   * // Make the bucket and its contents publicly readable.\r\n   * //-\r\n   * const opts = {\r\n   *   includeFiles: true\r\n   * };\r\n   *\r\n   * bucket.makePublic(opts, function(err, files) {\r\n   *   // `err`:\r\n   *   //    The first error to occur, otherwise null.\r\n   *   //\r\n   *   // `files`:\r\n   *   //    Array of files successfully made public in the bucket.\r\n   * });\r\n   *\r\n   * //-\r\n   * // Make the bucket and its contents publicly readable, using force to\r\n   * // suppress errors until all files have been processed.\r\n   * //-\r\n   * const opts = {\r\n   *   includeFiles: true,\r\n   *   force: true\r\n   * };\r\n   *\r\n   * bucket.makePublic(opts, function(errors, files) {\r\n   *   // `errors`:\r\n   *   //    Array of errors if any occurred, otherwise null.\r\n   *   //\r\n   *   // `files`:\r\n   *   //    Array of files successfully made public in the bucket.\r\n   * });\r\n   *\r\n   * //-\r\n   * // If the callback is omitted, we'll return a Promise.\r\n   * //-\r\n   * bucket.makePublic(opts).then(function(data) {\r\n   *   const files = data[0];\r\n   * });\r\n   */\n\n\n  makePublic(optionsOrCallback, callback) {\n    const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n    callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n    const req = extend(true, {\n      public: true\n    }, options);\n    this.acl.add({\n      entity: 'allUsers',\n      role: 'READER'\n    }).then(() => {\n      return this.acl.default.add({\n        entity: 'allUsers',\n        role: 'READER'\n      });\n    }).then(() => {\n      if (req.includeFiles) {\n        return util_1.promisify(this.makeAllFilesPublicPrivate_).call(this, req);\n      }\n\n      return [];\n    }).then(files => callback(null, files), callback);\n  }\n  /**\r\n   * Get a reference to a Cloud Pub/Sub Notification.\r\n   *\r\n   * @param {string} id ID of notification.\r\n   * @returns {Notification}\r\n   * @see Notification\r\n   *\r\n   * @example\r\n   * const {Storage} = require('@google-cloud/storage');\r\n   * const storage = new Storage();\r\n   * const bucket = storage.bucket('my-bucket');\r\n   * const notification = bucket.notification('1');\r\n   */\n\n\n  notification(id) {\n    if (!id) {\n      throw new Error('You must supply a notification ID.');\n    }\n\n    return new notification_1.Notification(this, id);\n  }\n  /**\r\n   * Remove an already-existing retention policy from this bucket, if it is not\r\n   * locked.\r\n   *\r\n   * @param {SetBucketMetadataCallback} [callback] Callback function.\r\n   * @returns {Promise<SetBucketMetadataResponse>}\r\n   *\r\n   * @example\r\n   * const storage = require('@google-cloud/storage')();\r\n   * const bucket = storage.bucket('albums');\r\n   *\r\n   * bucket.removeRetentionPeriod(function(err, apiResponse) {});\r\n   *\r\n   * //-\r\n   * // If the callback is omitted, we'll return a Promise.\r\n   * //-\r\n   * bucket.removeRetentionPeriod().then(function(data) {\r\n   *   const apiResponse = data[0];\r\n   * });\r\n   */\n\n\n  removeRetentionPeriod(callback) {\n    this.setMetadata({\n      retentionPolicy: null\n    }, callback);\n  }\n  /**\r\n   * Makes request and applies userProject query parameter if necessary.\r\n   *\r\n   * @private\r\n   *\r\n   * @param {object} reqOpts - The request options.\r\n   * @param {function} callback - The callback function.\r\n   */\n\n\n  request(reqOpts, callback) {\n    if (this.userProject && (!reqOpts.qs || !reqOpts.qs.userProject)) {\n      reqOpts.qs = extend(reqOpts.qs, {\n        userProject: this.userProject\n      });\n    }\n\n    return super.request(reqOpts, callback);\n  }\n  /**\r\n   * @typedef {array} SetLabelsResponse\r\n   * @property {object} 0 The bucket metadata.\r\n   */\n\n  /**\r\n   * @callback SetLabelsCallback\r\n   * @param {?Error} err Request error, if any.\r\n   * @param {object} metadata The bucket metadata.\r\n   */\n\n  /**\r\n   * @typedef {object} SetLabelsOptions Configuration options for Bucket#setLabels().\r\n   * @property {string} [userProject] The ID of the project which will be\r\n   *     billed for the request.\r\n   */\n\n  /**\r\n   * Set labels on the bucket.\r\n   *\r\n   * This makes an underlying call to {@link Bucket#setMetadata}, which\r\n   * is a PATCH request. This means an individual label can be overwritten, but\r\n   * unmentioned labels will not be touched.\r\n   *\r\n   * @param {object<string, string>} labels Labels to set on the bucket.\r\n   * @param {SetLabelsOptions} [options] Configuration options.\r\n   * @param {string} [options.userProject] The ID of the project which will be\r\n   *     billed for the request.\r\n   * @param {SetLabelsCallback} [callback] Callback function.\r\n   * @returns {Promise<SetLabelsResponse>}\r\n   *\r\n   * @example\r\n   * const {Storage} = require('@google-cloud/storage');\r\n   * const storage = new Storage();\r\n   * const bucket = storage.bucket('albums');\r\n   *\r\n   * const labels = {\r\n   *   labelone: 'labelonevalue',\r\n   *   labeltwo: 'labeltwovalue'\r\n   * };\r\n   *\r\n   * bucket.setLabels(labels, function(err, metadata) {\r\n   *   if (!err) {\r\n   *     // Labels set successfully.\r\n   *   }\r\n   * });\r\n   *\r\n   * //-\r\n   * // If the callback is omitted, we'll return a Promise.\r\n   * //-\r\n   * bucket.setLabels(labels).then(function(data) {\r\n   *   const metadata = data[0];\r\n   * });\r\n   */\n\n\n  setLabels(labels, optionsOrCallback, callback) {\n    const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n    callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n    callback = callback || common_1.util.noop;\n    this.setMetadata({\n      labels\n    }, options, callback);\n  }\n  /**\r\n   * Lock all objects contained in the bucket, based on their creation time. Any\r\n   * attempt to overwrite or delete objects younger than the retention period\r\n   * will result in a `PERMISSION_DENIED` error.\r\n   *\r\n   * An unlocked retention policy can be modified or removed from the bucket via\r\n   * {@link File#removeRetentionPeriod} and {@link File#setRetentionPeriod}. A\r\n   * locked retention policy cannot be removed or shortened in duration for the\r\n   * lifetime of the bucket. Attempting to remove or decrease period of a locked\r\n   * retention policy will result in a `PERMISSION_DENIED` error. You can still\r\n   * increase the policy.\r\n   *\r\n   * @param {*} duration In seconds, the minimum retention time for all objects\r\n   *     contained in this bucket.\r\n   * @param {SetBucketMetadataCallback} [callback] Callback function.\r\n   * @returns {Promise<SetBucketMetadataResponse>}\r\n   *\r\n   * @example\r\n   * const storage = require('@google-cloud/storage')();\r\n   * const bucket = storage.bucket('albums');\r\n   *\r\n   * const DURATION_SECONDS = 15780000; // 6 months.\r\n   *\r\n   * //-\r\n   * // Lock the objects in this bucket for 6 months.\r\n   * //-\r\n   * bucket.setRetentionPeriod(DURATION_SECONDS, function(err, apiResponse) {});\r\n   *\r\n   * //-\r\n   * // If the callback is omitted, we'll return a Promise.\r\n   * //-\r\n   * bucket.setRetentionPeriod(DURATION_SECONDS).then(function(data) {\r\n   *   const apiResponse = data[0];\r\n   * });\r\n   */\n\n\n  setRetentionPeriod(duration, callback) {\n    this.setMetadata({\n      retentionPolicy: {\n        retentionPeriod: duration\n      }\n    }, callback);\n  }\n  /**\r\n   *\r\n   * @typedef {object} Cors\r\n   * @property {number} [maxAgeSeconds] The number of seconds the browser is\r\n   *     allowed to make requests before it must repeat the preflight request.\r\n   * @property {string[]} [method] HTTP method allowed for cross origin resource\r\n   *     sharing with this bucket.\r\n   * @property {string[]} [origin] an origin allowed for cross origin resource\r\n   *     sharing with this bucket.\r\n   * @property {string[]} [responseHeader] A header allowed for cross origin\r\n   *     resource sharing with this bucket.\r\n   */\n\n  /**\r\n   * This can be used to set the CORS configuration on the bucket.\r\n   *\r\n   * The configuration will be overwritten with the value passed into this.\r\n   *\r\n   * @param {Cors[]} corsConfiguration The new CORS configuration to set\r\n   * @param {number} [corsConfiguration.maxAgeSeconds] The number of seconds the browser is\r\n   *     allowed to make requests before it must repeat the preflight request.\r\n   * @param {string[]} [corsConfiguration.method] HTTP method allowed for cross origin resource\r\n   *     sharing with this bucket.\r\n   * @param {string[]} [corsConfiguration.origin] an origin allowed for cross origin resource\r\n   *     sharing with this bucket.\r\n   * @param {string[]} [corsConfiguration.responseHeader] A header allowed for cross origin\r\n   *     resource sharing with this bucket.\r\n   * @param {SetBucketMetadataCallback} [callback] Callback function.\r\n   * @returns {Promise<SetBucketMetadataResponse>}\r\n   *\r\n   * @example\r\n   * const storage = require('@google-cloud/storage')();\r\n   * const bucket = storage.bucket('albums');\r\n   *\r\n   * const corsConfiguration = [{maxAgeSeconds: 3600}]; // 1 hour\r\n   * bucket.setCorsConfiguration(corsConfiguration);\r\n   *\r\n   * //-\r\n   * // If the callback is omitted, we'll return a Promise.\r\n   * //-\r\n   * bucket.setCorsConfiguration(corsConfiguration).then(function(data) {\r\n   *   const apiResponse = data[0];\r\n   * });\r\n   */\n\n\n  setCorsConfiguration(corsConfiguration, callback) {\n    this.setMetadata({\n      cors: corsConfiguration\n    }, callback);\n  }\n  /**\r\n   * @typedef {object} SetBucketStorageClassOptions\r\n   * @property {string} [userProject] - The ID of the project which will be\r\n   *     billed for the request.\r\n   */\n\n  /**\r\n   * @callback SetBucketStorageClassCallback\r\n   * @param {?Error} err Request error, if any.\r\n   */\n\n  /**\r\n   * Set the default storage class for new files in this bucket.\r\n   *\r\n   * @see [Storage Classes]{@link https://cloud.google.com/storage/docs/storage-classes}\r\n   *\r\n   * @param {string} storageClass The new storage class. (`standard`,\r\n   *     `nearline`, `coldline`, or `archive`).\r\n   *     **Note:** The storage classes `multi_regional`, `regional`, and\r\n   *     `durable_reduced_availability` are now legacy and will be deprecated in\r\n   *     the future.\r\n   * @param {object} [options] Configuration options.\r\n   * @param {string} [options.userProject] - The ID of the project which will be\r\n   *     billed for the request.\r\n   * @param {SetStorageClassCallback} [callback] Callback function.\r\n   * @returns {Promise}\r\n   *\r\n   * @example\r\n   * const {Storage} = require('@google-cloud/storage');\r\n   * const storage = new Storage();\r\n   * const bucket = storage.bucket('albums');\r\n   *\r\n   * bucket.setStorageClass('nearline', function(err, apiResponse) {\r\n   *   if (err) {\r\n   *     // Error handling omitted.\r\n   *   }\r\n   *\r\n   *   // The storage class was updated successfully.\r\n   * });\r\n   *\r\n   * //-\r\n   * // If the callback is omitted, we'll return a Promise.\r\n   * //-\r\n   * bucket.setStorageClass('nearline').then(function() {});\r\n   */\n\n\n  setStorageClass(storageClass, optionsOrCallback, callback) {\n    const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n    callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : callback; // In case we get input like `storageClass`, convert to `storage_class`.\n\n    storageClass = storageClass.replace(/-/g, '_').replace(/([a-z])([A-Z])/g, (_, low, up) => {\n      return low + '_' + up;\n    }).toUpperCase();\n    this.setMetadata({\n      storageClass\n    }, options, callback);\n  }\n  /**\r\n   * Set a user project to be billed for all requests made from this Bucket\r\n   * object and any files referenced from this Bucket object.\r\n   *\r\n   * @param {string} userProject The user project.\r\n   *\r\n   * @example\r\n   * const {Storage} = require('@google-cloud/storage');\r\n   * const storage = new Storage();\r\n   * const bucket = storage.bucket('albums');\r\n   *\r\n   * bucket.setUserProject('grape-spaceship-123');\r\n   */\n\n\n  setUserProject(userProject) {\n    this.userProject = userProject;\n    const methods = ['create', 'delete', 'exists', 'get', 'getMetadata', 'setMetadata'];\n    methods.forEach(method => {\n      const methodConfig = this.methods[method];\n\n      if (typeof methodConfig === 'object') {\n        if (typeof methodConfig.reqOpts === 'object') {\n          extend(methodConfig.reqOpts.qs, {\n            userProject\n          });\n        } else {\n          methodConfig.reqOpts = {\n            qs: {\n              userProject\n            }\n          };\n        }\n      }\n    });\n  }\n  /**\r\n   * @typedef {object} UploadOptions Configuration options for Bucket#upload().\r\n   * @property {string|File} [destination] The place to save\r\n   *     your file. If given a string, the file will be uploaded to the bucket\r\n   *     using the string as a filename. When given a File object, your local\r\n   * file will be uploaded to the File object's bucket and under the File\r\n   * object's name. Lastly, when this argument is omitted, the file is uploaded\r\n   * to your bucket using the name of the local file.\r\n   * @property {string} [encryptionKey] A custom encryption key. See\r\n   *     [Customer-supplied Encryption\r\n   * Keys](https://cloud.google.com/storage/docs/encryption#customer-supplied).\r\n   * @property {boolean} [gzip] Automatically gzip the file. This will set\r\n   *     `options.metadata.contentEncoding` to `gzip`.\r\n   * @property {string} [kmsKeyName] The name of the Cloud KMS key that will\r\n   *     be used to encrypt the object. Must be in the format:\r\n   *     `projects/my-project/locations/location/keyRings/my-kr/cryptoKeys/my-key`.\r\n   * @property {object} [metadata] See an\r\n   *     [Objects: insert request\r\n   * body](https://cloud.google.com/storage/docs/json_api/v1/objects/insert#request_properties_JSON).\r\n   * @property {string} [offset] The starting byte of the upload stream, for\r\n   *     resuming an interrupted upload. Defaults to 0.\r\n   * @property {string} [predefinedAcl] Apply a predefined set of access\r\n   *     controls to this object.\r\n   *\r\n   *     Acceptable values are:\r\n   *     - **`authenticatedRead`** - Object owner gets `OWNER` access, and\r\n   *       `allAuthenticatedUsers` get `READER` access.\r\n   *\r\n   *     - **`bucketOwnerFullControl`** - Object owner gets `OWNER` access, and\r\n   *       project team owners get `OWNER` access.\r\n   *\r\n   *     - **`bucketOwnerRead`** - Object owner gets `OWNER` access, and project\r\n   *       team owners get `READER` access.\r\n   *\r\n   *     - **`private`** - Object owner gets `OWNER` access.\r\n   *\r\n   *     - **`projectPrivate`** - Object owner gets `OWNER` access, and project\r\n   *       team members get access according to their roles.\r\n   *\r\n   *     - **`publicRead`** - Object owner gets `OWNER` access, and `allUsers`\r\n   * get `READER` access.\r\n   * @property {boolean} [private] Make the uploaded file private. (Alias for\r\n   *     `options.predefinedAcl = 'private'`)\r\n   * @property {boolean} [public] Make the uploaded file public. (Alias for\r\n   *     `options.predefinedAcl = 'publicRead'`)\r\n   * @property {boolean} [resumable] Force a resumable upload. (default:\r\n   *     true for files larger than 5 MB).\r\n   * @property {number} [timeout=60000] Set the HTTP request timeout in\r\n   *     milliseconds. This option is not available for resumable uploads.\r\n   *     Default: `60000`\r\n   * @property {string} [uri] The URI for an already-created resumable\r\n   *     upload. See {@link File#createResumableUpload}.\r\n   * @property {string} [userProject] The ID of the project which will be\r\n   *     billed for the request.\r\n   * @property {string|boolean} [validation] Possible values: `\"md5\"`,\r\n   *     `\"crc32c\"`, or `false`. By default, data integrity is validated with an\r\n   *     MD5 checksum for maximum reliability. CRC32c will provide better\r\n   *     performance with less reliability. You may also choose to skip\r\n   * validation completely, however this is **not recommended**.\r\n   */\n\n  /**\r\n   * @typedef {array} UploadResponse\r\n   * @property {object} 0 The uploaded {@link File}.\r\n   * @property {object} 1 The full API response.\r\n   */\n\n  /**\r\n   * @callback UploadCallback\r\n   * @param {?Error} err Request error, if any.\r\n   * @param {object} file The uploaded {@link File}.\r\n   * @param {object} apiResponse The full API response.\r\n   */\n\n  /**\r\n   * Upload a file to the bucket. This is a convenience method that wraps\r\n   * {@link File#createWriteStream}.\r\n   *\r\n   * You can specify whether or not an upload is resumable by setting\r\n   * `options.resumable`. *Resumable uploads are enabled by default if your\r\n   * input file is larger than 5 MB.*\r\n   *\r\n   * For faster crc32c computation, you must manually install\r\n   * [`fast-crc32c`](https://www.npmjs.com/package/fast-crc32c):\r\n   *\r\n   *     $ npm install --save fast-crc32c\r\n   *\r\n   * @see [Upload Options (Simple or Resumable)]{@link https://cloud.google.com/storage/docs/json_api/v1/how-tos/upload#uploads}\r\n   * @see [Objects: insert API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/objects/insert}\r\n   *\r\n   * @param {string} pathString The fully qualified path to the file you\r\n   *     wish to upload to your bucket.\r\n   * @param {UploadOptions} [options] Configuration options.\r\n   * @param {string|File} [options.destination] The place to save\r\n   *     your file. If given a string, the file will be uploaded to the bucket\r\n   *     using the string as a filename. When given a File object, your local\r\n   * file will be uploaded to the File object's bucket and under the File\r\n   * object's name. Lastly, when this argument is omitted, the file is uploaded\r\n   * to your bucket using the name of the local file.\r\n   * @param {string} [options.encryptionKey] A custom encryption key. See\r\n   *     [Customer-supplied Encryption\r\n   * Keys](https://cloud.google.com/storage/docs/encryption#customer-supplied).\r\n   * @param {boolean} [options.gzip] Automatically gzip the file. This will set\r\n   *     `options.metadata.contentEncoding` to `gzip`.\r\n   * @param {string} [options.kmsKeyName] The name of the Cloud KMS key that will\r\n   *     be used to encrypt the object. Must be in the format:\r\n   *     `projects/my-project/locations/location/keyRings/my-kr/cryptoKeys/my-key`.\r\n   * @param {object} [options.metadata] See an\r\n   *     [Objects: insert request\r\n   * body](https://cloud.google.com/storage/docs/json_api/v1/objects/insert#request_properties_JSON).\r\n   * @param {string} [options.offset] The starting byte of the upload stream, for\r\n   *     resuming an interrupted upload. Defaults to 0.\r\n   * @param {string} [options.predefinedAcl] Apply a predefined set of access\r\n   *     controls to this object.\r\n   *\r\n   *     Acceptable values are:\r\n   *     - **`authenticatedRead`** - Object owner gets `OWNER` access, and\r\n   *       `allAuthenticatedUsers` get `READER` access.\r\n   *\r\n   *     - **`bucketOwnerFullControl`** - Object owner gets `OWNER` access, and\r\n   *       project team owners get `OWNER` access.\r\n   *\r\n   *     - **`bucketOwnerRead`** - Object owner gets `OWNER` access, and project\r\n   *       team owners get `READER` access.\r\n   *\r\n   *     - **`private`** - Object owner gets `OWNER` access.\r\n   *\r\n   *     - **`projectPrivate`** - Object owner gets `OWNER` access, and project\r\n   *       team members get access according to their roles.\r\n   *\r\n   *     - **`publicRead`** - Object owner gets `OWNER` access, and `allUsers`\r\n   * get `READER` access.\r\n   * @param {boolean} [options.private] Make the uploaded file private. (Alias for\r\n   *     `options.predefinedAcl = 'private'`)\r\n   * @param {boolean} [options.public] Make the uploaded file public. (Alias for\r\n   *     `options.predefinedAcl = 'publicRead'`)\r\n   * @param {boolean} [options.resumable] Force a resumable upload. (default:\r\n   *     true for files larger than 5 MB).\r\n   * @param {number} [options.timeout=60000] Set the HTTP request timeout in\r\n   *     milliseconds. This option is not available for resumable uploads.\r\n   *     Default: `60000`\r\n   * @param {string} [options.uri] The URI for an already-created resumable\r\n   *     upload. See {@link File#createResumableUpload}.\r\n   * @param {string} [options.userProject] The ID of the project which will be\r\n   *     billed for the request.\r\n   * @param {string|boolean} [options.validation] Possible values: `\"md5\"`,\r\n   *     `\"crc32c\"`, or `false`. By default, data integrity is validated with an\r\n   *     MD5 checksum for maximum reliability. CRC32c will provide better\r\n   *     performance with less reliability. You may also choose to skip\r\n   * validation completely, however this is **not recommended**.\r\n   * @param {UploadCallback} [callback] Callback function.\r\n   * @returns {Promise<UploadResponse>}\r\n   *\r\n   * @example\r\n   * const {Storage} = require('@google-cloud/storage');\r\n   * const storage = new Storage();\r\n   * const bucket = storage.bucket('albums');\r\n   *\r\n   * //-\r\n   * // Upload a file from a local path.\r\n   * //-\r\n   * bucket.upload('/local/path/image.png', function(err, file, apiResponse) {\r\n   *   // Your bucket now contains:\r\n   *   // - \"image.png\" (with the contents of `/local/path/image.png')\r\n   *\r\n   *   // `file` is an instance of a File object that refers to your new file.\r\n   * });\r\n   *\r\n   *\r\n   * //-\r\n   * // It's not always that easy. You will likely want to specify the filename\r\n   * // used when your new file lands in your bucket.\r\n   * //\r\n   * // You may also want to set metadata or customize other options.\r\n   * //-\r\n   * const options = {\r\n   *   destination: 'new-image.png',\r\n   *   resumable: true,\r\n   *   validation: 'crc32c',\r\n   *   metadata: {\r\n   *     metadata: {\r\n   *       event: 'Fall trip to the zoo'\r\n   *     }\r\n   *   }\r\n   * };\r\n   *\r\n   * bucket.upload('local-image.png', options, function(err, file) {\r\n   *   // Your bucket now contains:\r\n   *   // - \"new-image.png\" (with the contents of `local-image.png')\r\n   *\r\n   *   // `file` is an instance of a File object that refers to your new file.\r\n   * });\r\n   *\r\n   * //-\r\n   * // You can also have a file gzip'd on the fly.\r\n   * //-\r\n   * bucket.upload('index.html', { gzip: true }, function(err, file) {\r\n   *   // Your bucket now contains:\r\n   *   // - \"index.html\" (automatically compressed with gzip)\r\n   *\r\n   *   // Downloading the file with `file.download` will automatically decode\r\n   * the\r\n   *   // file.\r\n   * });\r\n   *\r\n   * //-\r\n   * // You may also re-use a File object, {File}, that references\r\n   * // the file you wish to create or overwrite.\r\n   * //-\r\n   * const options = {\r\n   *   destination: bucket.file('existing-file.png'),\r\n   *   resumable: false\r\n   * };\r\n   *\r\n   * bucket.upload('local-img.png', options, function(err, newFile) {\r\n   *   // Your bucket now contains:\r\n   *   // - \"existing-file.png\" (with the contents of `local-img.png')\r\n   *\r\n   *   // Note:\r\n   *   // The `newFile` parameter is equal to `file`.\r\n   * });\r\n   *\r\n   * //-\r\n   * // To use\r\n   * // <a\r\n   * href=\"https://cloud.google.com/storage/docs/encryption#customer-supplied\">\r\n   * // Customer-supplied Encryption Keys</a>, provide the `encryptionKey`\r\n   * option.\r\n   * //-\r\n   * const crypto = require('crypto');\r\n   * const encryptionKey = crypto.randomBytes(32);\r\n   *\r\n   * bucket.upload('img.png', {\r\n   *   encryptionKey: encryptionKey\r\n   * }, function(err, newFile) {\r\n   *   // `img.png` was uploaded with your custom encryption key.\r\n   *\r\n   *   // `newFile` is already configured to use the encryption key when making\r\n   *   // operations on the remote object.\r\n   *\r\n   *   // However, to use your encryption key later, you must create a `File`\r\n   *   // instance with the `key` supplied:\r\n   *   const file = bucket.file('img.png', {\r\n   *     encryptionKey: encryptionKey\r\n   *   });\r\n   *\r\n   *   // Or with `file#setEncryptionKey`:\r\n   *   const file = bucket.file('img.png');\r\n   *   file.setEncryptionKey(encryptionKey);\r\n   * });\r\n   *\r\n   * //-\r\n   * // If the callback is omitted, we'll return a Promise.\r\n   * //-\r\n   * bucket.upload('local-image.png').then(function(data) {\r\n   *   const file = data[0];\r\n   * });\r\n   *\r\n   * To upload a file from a URL, use {@link File#createWriteStream}.\r\n   *\r\n   * @example <caption>include:samples/files.js</caption>\r\n   * region_tag:storage_upload_file\r\n   * Another example:\r\n   *\r\n   * @example <caption>include:samples/encryption.js</caption>\r\n   * region_tag:storage_upload_encrypted_file\r\n   * Example of uploading an encrypted file:\r\n   */\n\n\n  upload(pathString, optionsOrCallback, callback) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (global['GCLOUD_SANDBOX_ENV']) {\n      return;\n    }\n\n    let options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n    callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n    options = Object.assign({\n      metadata: {}\n    }, options);\n    let newFile;\n\n    if (options.destination instanceof file_1.File) {\n      newFile = options.destination;\n    } else if (options.destination !== null && typeof options.destination === 'string') {\n      // Use the string as the name of the file.\n      newFile = this.file(options.destination, {\n        encryptionKey: options.encryptionKey,\n        kmsKeyName: options.kmsKeyName\n      });\n    } else {\n      // Resort to using the name of the incoming file.\n      const destination = path.basename(pathString);\n      newFile = this.file(destination, {\n        encryptionKey: options.encryptionKey,\n        kmsKeyName: options.kmsKeyName\n      });\n    }\n\n    if (options.resumable !== null && typeof options.resumable === 'boolean') {\n      upload();\n    } else {\n      // Determine if the upload should be resumable if it's over the threshold.\n      fs.stat(pathString, (err, fd) => {\n        if (err) {\n          callback(err);\n          return;\n        }\n\n        if (fd.size <= RESUMABLE_THRESHOLD) {\n          // Only disable resumable uploads so createWriteStream still attempts them and falls back to simple upload.\n          options.resumable = false;\n        }\n\n        upload();\n      });\n    }\n\n    function upload() {\n      const writable = newFile.createWriteStream(options);\n\n      if (options.onUploadProgress) {\n        writable.on('progress', options.onUploadProgress);\n      }\n\n      fs.createReadStream(pathString).on('error', callback).pipe(writable).on('error', callback).on('finish', () => {\n        callback(null, newFile, newFile.metadata);\n      });\n    }\n  }\n  /**\r\n   * @private\r\n   *\r\n   * @typedef {object} MakeAllFilesPublicPrivateOptions\r\n   * @property {boolean} [force] Suppress errors until all files have been\r\n   *     processed.\r\n   * @property {boolean} [private] Make files private.\r\n   * @property {boolean} [public] Make files public.\r\n   * @property {string} [userProject] The ID of the project which will be\r\n   *     billed for the request.\r\n   */\n\n  /**\r\n   * @private\r\n   *\r\n   * @callback SetBucketMetadataCallback\r\n   * @param {?Error} err Request error, if any.\r\n   * @param {File[]} files Files that were updated.\r\n   */\n\n  /**\r\n   * @typedef {array} MakeAllFilesPublicPrivateResponse\r\n   * @property {File[]} 0 List of files affected.\r\n   */\n\n  /**\r\n   * Iterate over all of a bucket's files, calling `file.makePublic()` (public)\r\n   * or `file.makePrivate()` (private) on each.\r\n   *\r\n   * Operations are performed in parallel, up to 10 at once. The first error\r\n   * breaks the loop, and will execute the provided callback with it. Specify\r\n   * `{ force: true }` to suppress the errors.\r\n   *\r\n   * @private\r\n   *\r\n   * @param {MakeAllFilesPublicPrivateOptions} [options] Configuration options.\r\n   * @param {boolean} [options.force] Suppress errors until all files have been\r\n   *     processed.\r\n   * @param {boolean} [options.private] Make files private.\r\n   * @param {boolean} [options.public] Make files public.\r\n   * @param {string} [options.userProject] The ID of the project which will be\r\n   *     billed for the request.\r\n       * @param {MakeAllFilesPublicPrivateCallback} callback Callback function.\r\n   *\r\n   * @return {Promise<MakeAllFilesPublicPrivateResponse>}\r\n   */\n\n\n  makeAllFilesPublicPrivate_(optionsOrCallback, callback) {\n    const MAX_PARALLEL_LIMIT = 10;\n    const errors = [];\n    const updatedFiles = [];\n    const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n    callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n\n    const processFile = async file => {\n      try {\n        await (options.public ? file.makePublic() : file.makePrivate(options));\n        updatedFiles.push(file);\n      } catch (e) {\n        if (!options.force) {\n          throw e;\n        }\n\n        errors.push(e);\n      }\n    };\n\n    this.getFiles(options).then(([files]) => {\n      const limit = pLimit(MAX_PARALLEL_LIMIT);\n      const promises = files.map(file => {\n        return limit(() => processFile(file));\n      });\n      return Promise.all(promises);\n    }).then(() => callback(errors.length > 0 ? errors : null, updatedFiles), err => callback(err, updatedFiles));\n  }\n\n  getId() {\n    return this.id;\n  }\n\n}\n\nexports.Bucket = Bucket;\n/*! Developer Documentation\r\n *\r\n * These methods can be auto-paginated.\r\n */\n\npaginator_1.paginator.extend(Bucket, 'getFiles');\n/*! Developer Documentation\r\n *\r\n * All async methods (except for streams) will return a Promise in the event\r\n * that a callback is omitted.\r\n */\n\npromisify_1.promisifyAll(Bucket, {\n  exclude: ['request', 'file', 'notification']\n});","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Backend/node_modules/@google-cloud/storage/build/src/bucket.js"],"names":["Object","defineProperty","exports","value","Bucket","BucketActionToHTTPMethod","common_1","require","paginator_1","promisify_1","arrify","extend","fs","mime","path","pLimit","util_1","snakeize","acl_1","file_1","iam_1","notification_1","signer_1","RESUMABLE_THRESHOLD","ServiceObject","constructor","storage","name","options","replace","requestQueryObject","userProject","methods","create","reqOpts","qs","delete","exists","get","getMetadata","setMetadata","parent","baseUrl","id","createMethod","createBucket","bind","acl","Acl","request","pathPrefix","default","iam","Iam","getFilesStream","paginator","streamify","addLifecycleRule","rule","optionsOrCallback","callback","newLifecycleRules","map","action","apiFormattedRule","condition","type","charAt","toUpperCase","slice","storageClass","Date","toISOString","append","lifecycle","err","metadata","currentLifecycleRules","concat","combine","sources","destination","Array","isArray","length","Error","convertToFile","file","File","destinationFile","util","noop","contentType","destinationContentType","method","uri","json","sourceObjects","source","sourceObject","generation","resp","createChannel","config","address","assign","apiResponse","resourceId","channel","createNotification","topic","topicIsObject","isCustomType","body","indexOf","payloadFormat","query","notification","deleteFiles","queryOrCallback","MAX_PARALLEL_LIMIT","errors","deleteFile","catch","force","push","getFiles","then","files","limit","promises","Promise","all","deleteLabels","labelsOrCallback","labels","nullLabelMap","reduce","labelKey","setLabels","getLabels","keys","disableRequesterPays","billing","requesterPays","enableLogging","prefix","logBucket","bucket","setMetadataResponse","policy","getPolicy","bindings","members","role","setPolicy","logging","logObjectPrefix","e","enableRequesterPays","directory","items","versions","kmsKeyName","fileInstance","nextQuery","nextPageToken","pageToken","getNotifications","notifications","notificationInstance","getSignedUrl","cfg","signConfig","expires","version","cname","extensionHeaders","queryParams","signer","URLSigner","authClient","signedUrl","lock","metageneration","metatype","ifMetagenerationMatch","makePrivate","private","predefinedAcl","includeFiles","promisify","makeAllFilesPublicPrivate_","call","makePublic","req","public","add","entity","Notification","removeRetentionPeriod","retentionPolicy","setRetentionPeriod","duration","retentionPeriod","setCorsConfiguration","corsConfiguration","cors","setStorageClass","_","low","up","setUserProject","forEach","methodConfig","upload","pathString","global","newFile","encryptionKey","basename","resumable","stat","fd","size","writable","createWriteStream","onUploadProgress","on","createReadStream","pipe","updatedFiles","processFile","getId","promisifyAll","exclude"],"mappings":"AAAA,a,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,MAAR,GAAiBF,OAAO,CAACG,wBAAR,GAAmC,KAAK,CAAzD;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,sBAAD,CAAxB;;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,yBAAD,CAA3B;;AACA,MAAME,WAAW,GAAGF,OAAO,CAAC,yBAAD,CAA3B;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMI,MAAM,GAAGJ,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMK,EAAE,GAAGL,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMM,IAAI,GAAGN,OAAO,CAAC,YAAD,CAApB;;AACA,MAAMO,IAAI,GAAGP,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMQ,MAAM,GAAGR,OAAO,CAAC,SAAD,CAAtB;;AACA,MAAMS,MAAM,GAAGT,OAAO,CAAC,MAAD,CAAtB,C,CACA;;;AACA,MAAMU,QAAQ,GAAGV,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAMW,KAAK,GAAGX,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMY,MAAM,GAAGZ,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMa,KAAK,GAAGb,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMc,cAAc,GAAGd,OAAO,CAAC,gBAAD,CAA9B;;AACA,MAAMe,QAAQ,GAAGf,OAAO,CAAC,UAAD,CAAxB;;AACA,IAAIF,wBAAJ;;AACA,CAAC,UAAUA,wBAAV,EAAoC;AACjCA,EAAAA,wBAAwB,CAAC,MAAD,CAAxB,GAAmC,KAAnC;AACH,CAFD,EAEGA,wBAAwB,GAAGH,OAAO,CAACG,wBAAR,KAAqCH,OAAO,CAACG,wBAAR,GAAmC,EAAxE,CAF9B;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMkB,mBAAmnB,MAAN,SAAqBE,QAAQ,CAACkB,aAA9B,CAA4C;AACxCC,EAAAA,WAAW,CAACC,OAAD,EAAUC,IAAV,EAAgBC,OAAhB,EAAyB;AAChCA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB,CADgC,CAEhC;;AACAD,IAAAA,IAAI,GAAGA,IAAI,CAACE,OAAL,CAAa,UAAb,EAAyB,EAAzB,EAA6BA,OAA7B,CAAqC,MAArC,EAA6C,EAA7C,CAAP;AACA,UAAMC,kBAAkB,GAAG,EAA3B;AACA,UAAMC,WAAW,GAAGH,OAAO,CAACG,WAA5B;;AACA,QAAI,OAAOA,WAAP,KAAuB,QAA3B,EAAqC;AACjCD,MAAAA,kBAAkB,CAACC,WAAnB,GAAiCA,WAAjC;AACH;;AACD,UAAMC,OAAO,GAAG;AACZ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACYC,MAAAA,MAAM,EAAE;AACJC,QAAAA,OAAO,EAAE;AACLC,UAAAA,EAAE,EAAEL;AADC;AADL,OA3BI;;AAgCZ;AACZ;AACA;AACA;AACA;AACA;AACA;;AACY;AACZ;AACA;AACA;;AACY;AACZ;AACA;AACA;AACA;;AACY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACYM,MAAAA,MAAM,EAAE;AACJF,QAAAA,OAAO,EAAE;AACLC,UAAAA,EAAE,EAAEL;AADC;AADL,OA/EI;;AAoFZ;AACZ;AACA;AACA;AACA;;AACY;AACZ;AACA;AACA;;AACY;AACZ;AACA;AACA;AACA;;AACY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACYO,MAAAA,MAAM,EAAE;AACJH,QAAAA,OAAO,EAAE;AACLC,UAAAA,EAAE,EAAEL;AADC;AADL,OA1HI;;AA+HZ;AACZ;AACA;AACA;AACA;AACA;AACA;;AACY;AACZ;AACA;AACA;AACA;;AACY;AACZ;AACA;AACA;AACA;AACA;;AACY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACYQ,MAAAA,GAAG,EAAE;AACDJ,QAAAA,OAAO,EAAE;AACLC,UAAAA,EAAE,EAAEL;AADC;AADR,OAnLO;;AAwLZ;AACZ;AACA;AACA;AACA;;AACY;AACZ;AACA;AACA;AACA;AACA;;AACY;AACZ;AACA;AACA;AACA;;AACY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACYS,MAAAA,WAAW,EAAE;AACTL,QAAAA,OAAO,EAAE;AACLC,UAAAA,EAAE,EAAEL;AADC;AADA,OAzOD;;AA8OZ;AACZ;AACA;AACA;AACA;;AACY;AACZ;AACA;AACA;;AACY;AACZ;AACA;AACA;AACA;;AACY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACYU,MAAAA,WAAW,EAAE;AACTN,QAAAA,OAAO,EAAE;AACLC,UAAAA,EAAE,EAAEL;AADC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,CAAR;AACH,KAjBD;AAkBH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIG,EAAAA,kBAAkB,CAACC,KAAD,EAAQnD,iBAAR,EAA2BC,QAA3B,EAAqC;AACnD,QAAIhC,OAAO,GAAG,EAAd;;AACA,QAAI,OAAO+B,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,MAAAA,QAAQ,GAAGD,iBAAX;AACH,KAFD,MAGK,IAAIA,iBAAJ,EAAuB;AACxB/B,MAAAA,OAAO,GAAG+B,iBAAV;AACH;;AACD,UAAMoD,aAAa,GAAGD,KAAK,KAAK,IAAV,IAAkB,OAAOA,KAAP,KAAiB,QAAzD;;AACA,QAAIC,aAAa,IAAIzG,QAAQ,CAACoF,IAAT,CAAcsB,YAAd,CAA2BF,KAA3B,EAAkC,cAAlC,CAArB,EAAwE;AACpE;AACAA,MAAAA,KAAK,GAAGA,KAAK,CAACnF,IAAd;AACH;;AACD,QAAI,OAAOmF,KAAP,KAAiB,QAArB,EAA+B;AAC3B,YAAM,IAAIzB,KAAJ,CAAU,iCAAV,CAAN;AACH;;AACD,UAAM4B,IAAI,GAAGjH,MAAM,CAACyG,MAAP,CAAc;AAAEK,MAAAA;AAAF,KAAd,EAAyBlF,OAAzB,CAAb;;AACA,QAAIqF,IAAI,CAACH,KAAL,CAAWI,OAAX,CAAmB,UA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CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIU,EAAAA,mBAAmB,CAACnG,QAAD,EAAW;AAC1B,SAAKpB,WAAL,CAAiB;AACbuG,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,EAAE;AADV;AADI,KAAjB,EAIGpF,QAAQ,IAAItD,QAAQ,CAACoF,IAAT,CAAcC,IAJ7B;AAKH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIJ,EAAAA,IAAI,CAAC5D,IAAD,EAAOC,OAAP,EAAgB;AAChB,QAAI,CAACD,IAAL,EAAW;AACP,YAAM0D,KAAK,CAAC,gCAAD,CAAX;AACH;;AACD,WAAO,IAAIlE,MAAM,CAACqE,IAAX,CAAgB,IAAhB,EAAsB7D,IAAtB,EAA4BC,OAA5B,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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hC,OAAO,GAAG,OAAO+B,iBAAP,KAA6B,QAA7B,GAAwCA,iBAAxC,GAA4D,EAA5E;AACAC,IAAAA,QAAQ,GACJ,OAAOD,iBAAP,KAA6B,UAA7B,GAA0CA,iBAA1C,GAA8DC,QADlE;AAEAA,IAAAA,QAAQ,GAAGA,QAAQ,IAAItD,QAAQ,CAACoF,IAAT,CAAcC,IAArC;AACA,SAAKnD,WAAL,CAAiB;AAAE+F,MAAAA;AAAF,KAAjB,EAA6B3G,OAA7B,EAAsCgC,QAAtC;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI8I,EAAAA,kBAAkB,CAACC,QAAD,EAAW/I,QAAX,EAAqB;AACnC,SAAKpB,WAAL,CAAiB;AACbiK,MAAAA,eAAe,EAAE;AACbG,QAAAA,eAAe,EAAED;AADJ;AADJ,KAAjB,EAIG/I,QAJH;AAKH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIiJ,EAAAA,oBAAoB,CAACC,iBAAD,EAAoBlJ,QAApB,EAA8B;AAC9C,SAAKpB,WAAL,CAAiB;AACbuK,MAAAA,IAAI,EAAED;AADO,KAAjB,EAEGlJ,QAFH;AAGH;AACD;AACJ;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIoJ,EAAAA,eAAe,CAAC1I,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","sourcesContent":["\"use strict\";\r\n// Copyright 2019 Google LLC\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Bucket = exports.BucketActionToHTTPMethod = void 0;\r\nconst common_1 = require(\"@google-cloud/common\");\r\nconst paginator_1 = require(\"@google-cloud/paginator\");\r\nconst promisify_1 = require(\"@google-cloud/promisify\");\r\nconst arrify = require(\"arrify\");\r\nconst extend = require(\"extend\");\r\nconst fs = require(\"fs\");\r\nconst mime = require(\"mime-types\");\r\nconst path = require(\"path\");\r\nconst pLimit = require(\"p-limit\");\r\nconst util_1 = require(\"util\");\r\n// eslint-disable-next-line @typescript-eslint/no-var-requires\r\nconst snakeize = require('snakeize');\r\nconst acl_1 = require(\"./acl\");\r\nconst file_1 = require(\"./file\");\r\nconst iam_1 = require(\"./iam\");\r\nconst notification_1 = require(\"./notification\");\r\nconst signer_1 = require(\"./signer\");\r\nvar BucketActionToHTTPMethod;\r\n(function (BucketActionToHTTPMethod) {\r\n    BucketActionToHTTPMethod[\"list\"] = \"GET\";\r\n})(BucketActionToHTTPMethod = exports.BucketActionToHTTPMethod || (exports.BucketActionToHTTPMethod = {}));\r\n/**\r\n * The size of a file (in bytes) must be greater than this number to\r\n * automatically trigger a resumable upload.\r\n *\r\n * @const {number}\r\n * @private\r\n */\r\nconst RESUMABLE_THRESHOLD = 5000000;\r\n/**\r\n * Get and set IAM policies for your bucket.\r\n *\r\n * @name Bucket#iam\r\n * @mixes Iam\r\n *\r\n * @see [Cloud Storage IAM Management](https://cloud.google.com/storage/docs/access-control/iam#short_title_iam_management)\r\n * @see [Granting, Changing, and Revoking Access](https://cloud.google.com/iam/docs/granting-changing-revoking-access)\r\n * @see [IAM Roles](https://cloud.google.com/iam/docs/understanding-roles)\r\n *\r\n * @example\r\n * const {Storage} = require('@google-cloud/storage');\r\n * const storage = new Storage();\r\n * const bucket = storage.bucket('albums');\r\n *\r\n * //-\r\n * // Get the IAM policy for your bucket.\r\n * //-\r\n * bucket.iam.getPolicy(function(err, policy) {\r\n *   console.log(policy);\r\n * });\r\n *\r\n * //-\r\n * // If the callback is omitted, we'll return a Promise.\r\n * //-\r\n * bucket.iam.getPolicy().then(function(data) {\r\n *   const policy = data[0];\r\n *   const apiResponse = data[1];\r\n * });\r\n *\r\n * @example <caption>include:samples/iam.js</caption>\r\n * region_tag:storage_view_bucket_iam_members\r\n * Example of retrieving a bucket's IAM policy:\r\n *\r\n * @example <caption>include:samples/iam.js</caption>\r\n * region_tag:storage_add_bucket_iam_member\r\n * Example of adding to a bucket's IAM policy:\r\n *\r\n * @example <caption>include:samples/iam.js</caption>\r\n * region_tag:storage_remove_bucket_iam_member\r\n * Example of removing from a bucket's IAM policy:\r\n */\r\n/**\r\n * Cloud Storage uses access control lists (ACLs) to manage object and\r\n * bucket access. ACLs are the mechanism you use to share objects with other\r\n * users and allow other users to access your buckets and objects.\r\n *\r\n * An ACL consists of one or more entries, where each entry grants permissions\r\n * to an entity. Permissions define the actions that can be performed against\r\n * an object or bucket (for example, `READ` or `WRITE`); the entity defines\r\n * who the permission applies to (for example, a specific user or group of\r\n * users).\r\n *\r\n * The `acl` object on a Bucket instance provides methods to get you a list of\r\n * the ACLs defined on your bucket, as well as set, update, and delete them.\r\n *\r\n * Buckets also have\r\n * [default\r\n * ACLs](https://cloud.google.com/storage/docs/access-control/lists#default)\r\n * for all created files. Default ACLs specify permissions that all new\r\n * objects added to the bucket will inherit by default. You can add, delete,\r\n * get, and update entities and permissions for these as well with\r\n * {@link Bucket#acl.default}.\r\n *\r\n * @see [About Access Control Lists]{@link http://goo.gl/6qBBPO}\r\n * @see [Default ACLs]{@link https://cloud.google.com/storage/docs/access-control/lists#default}\r\n *\r\n * @name Bucket#acl\r\n * @mixes Acl\r\n * @property {Acl} default Cloud Storage Buckets have\r\n * [default\r\n * ACLs](https://cloud.google.com/storage/docs/access-control/lists#default)\r\n * for all created files. You can add, delete, get, and update entities and\r\n * permissions for these as well. The method signatures and examples are all\r\n * the same, after only prefixing the method call with `default`.\r\n *\r\n * @example\r\n * const {Storage} = require('@google-cloud/storage');\r\n * const storage = new Storage();\r\n *\r\n * //-\r\n * // Make a bucket's contents publicly readable.\r\n * //-\r\n * const myBucket = storage.bucket('my-bucket');\r\n *\r\n * const options = {\r\n *   entity: 'allUsers',\r\n *   role: storage.acl.READER_ROLE\r\n * };\r\n *\r\n * myBucket.acl.add(options, function(err, aclObject) {});\r\n *\r\n * //-\r\n * // If the callback is omitted, we'll return a Promise.\r\n * //-\r\n * myBucket.acl.add(options).then(function(data) {\r\n *   const aclObject = data[0];\r\n *   const apiResponse = data[1];\r\n * });\r\n *\r\n * @example <caption>include:samples/acl.js</caption>\r\n * region_tag:storage_print_bucket_acl\r\n * Example of printing a bucket's ACL:\r\n *\r\n * @example <caption>include:samples/acl.js</caption>\r\n * region_tag:storage_print_bucket_acl_for_user\r\n * Example of printing a bucket's ACL for a specific user:\r\n *\r\n * @example <caption>include:samples/acl.js</caption>\r\n * region_tag:storage_add_bucket_owner\r\n * Example of adding an owner to a bucket:\r\n *\r\n * @example <caption>include:samples/acl.js</caption>\r\n * region_tag:storage_remove_bucket_owner\r\n * Example of removing an owner from a bucket:\r\n *\r\n * @example <caption>include:samples/acl.js</caption>\r\n * region_tag:storage_add_bucket_default_owner\r\n * Example of adding a default owner to a bucket:\r\n *\r\n * @example <caption>include:samples/acl.js</caption>\r\n * region_tag:storage_remove_bucket_default_owner\r\n * Example of removing a default owner from a bucket:\r\n */\r\n/**\r\n * The API-formatted resource description of the bucket.\r\n *\r\n * Note: This is not guaranteed to be up-to-date when accessed. To get the\r\n * latest record, call the `getMetadata()` method.\r\n *\r\n * @name Bucket#metadata\r\n * @type {object}\r\n */\r\n/**\r\n * The bucket's name.\r\n * @name Bucket#name\r\n * @type {string}\r\n */\r\n/**\r\n * Get {@link File} objects for the files currently in the bucket as a\r\n * readable object stream.\r\n *\r\n * @method Bucket#getFilesStream\r\n * @param {GetFilesOptions} [query] Query object for listing files.\r\n * @returns {ReadableStream} A readable stream that emits {@link File} instances.\r\n *\r\n * @example\r\n * const {Storage} = require('@google-cloud/storage');\r\n * const storage = new Storage();\r\n * const bucket = storage.bucket('albums');\r\n *\r\n * bucket.getFilesStream()\r\n *   .on('error', console.error)\r\n *   .on('data', function(file) {\r\n *     // file is a File object.\r\n *   })\r\n *   .on('end', function() {\r\n *     // All files retrieved.\r\n *   });\r\n *\r\n * //-\r\n * // If you anticipate many results, you can end a stream early to prevent\r\n * // unnecessary processing and API requests.\r\n * //-\r\n * bucket.getFilesStream()\r\n *   .on('data', function(file) {\r\n *     this.end();\r\n *   });\r\n *\r\n * //-\r\n * // If you're filtering files with a delimiter, you should use\r\n * // {@link Bucket#getFiles} and set `autoPaginate: false` in order to\r\n * // preserve the `apiResponse` argument.\r\n * //-\r\n * const prefixes = [];\r\n *\r\n * function callback(err, files, nextQuery, apiResponse) {\r\n *   prefixes = prefixes.concat(apiResponse.prefixes);\r\n *\r\n *   if (nextQuery) {\r\n *     bucket.getFiles(nextQuery, callback);\r\n *   } else {\r\n *     // prefixes = The finished array of prefixes.\r\n *   }\r\n * }\r\n *\r\n * bucket.getFiles({\r\n *   autoPaginate: false,\r\n *   delimiter: '/'\r\n * }, callback);\r\n */\r\n/**\r\n * Create a Bucket object to interact with a Cloud Storage bucket.\r\n *\r\n * @class\r\n * @hideconstructor\r\n *\r\n * @param {Storage} storage A {@link Storage} instance.\r\n * @param {string} name The name of the bucket.\r\n * @param {object} [options] Configuration object.\r\n * @param {string} [options.userProject] User project.\r\n *\r\n * @example\r\n * const {Storage} = require('@google-cloud/storage');\r\n * const storage = new Storage();\r\n * const bucket = storage.bucket('albums');\r\n */\r\nclass Bucket extends common_1.ServiceObject {\r\n    constructor(storage, name, options) {\r\n        options = options || {};\r\n        // Allow for \"gs://\"-style input, and strip any trailing slashes.\r\n        name = name.replace(/^gs:\\/\\//, '').replace(/\\/+$/, '');\r\n        const requestQueryObject = {};\r\n        const userProject = options.userProject;\r\n        if (typeof userProject === 'string') {\r\n            requestQueryObject.userProject = userProject;\r\n        }\r\n        const methods = {\r\n            /**\r\n             * Create a bucket.\r\n             *\r\n             * @method Bucket#create\r\n             * @param {CreateBucketRequest} [metadata] Metadata to set for the bucket.\r\n             * @param {CreateBucketCallback} [callback] Callback function.\r\n             * @returns {Promise<CreateBucketResponse>}\r\n             *\r\n             * @example\r\n             * const {Storage} = require('@google-cloud/storage');\r\n             * const storage = new Storage();\r\n             * const bucket = storage.bucket('albums');\r\n             * bucket.create(function(err, bucket, apiResponse) {\r\n             *   if (!err) {\r\n             *     // The bucket was created successfully.\r\n             *   }\r\n             * });\r\n             *\r\n             * //-\r\n             * // If the callback is omitted, we'll return a Promise.\r\n             * //-\r\n             * bucket.create().then(function(data) {\r\n             *   const bucket = data[0];\r\n             *   const apiResponse = data[1];\r\n             * });\r\n             */\r\n            create: {\r\n                reqOpts: {\r\n                    qs: requestQueryObject,\r\n                },\r\n            },\r\n            /**\r\n             * @typedef {object} DeleteBucketOptions Configuration options.\r\n             * @property {boolean} [ignoreNotFound = false] Ignore an error if\r\n             *     the bucket does not exist.\r\n             * @property {string} [userProject] The ID of the project which will be\r\n             *     billed for the request.\r\n             */\r\n            /**\r\n             * @typedef {array} DeleteBucketResponse\r\n             * @property {object} 0 The full API response.\r\n             */\r\n            /**\r\n             * @callback DeleteBucketCallback\r\n             * @param {?Error} err Request error, if any.\r\n             * @param {object} apiResponse The full API response.\r\n             */\r\n            /**\r\n             * Delete the bucket.\r\n             *\r\n             * @see [Buckets: delete API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/delete}\r\n             *\r\n             * @method Bucket#delete\r\n             * @param {DeleteBucketOptions} [options] Configuration options.\r\n             * @param {boolean} [options.ignoreNotFound = false] Ignore an error if\r\n             *     the bucket does not exist.\r\n             * @param {string} [options.userProject] The ID of the project which will be\r\n             *     billed for the request.\r\n             * @param {DeleteBucketCallback} [callback] Callback function.\r\n             * @returns {Promise<DeleteBucketResponse>}\r\n             *\r\n             * @example\r\n             * const {Storage} = require('@google-cloud/storage');\r\n             * const storage = new Storage();\r\n             * const bucket = storage.bucket('albums');\r\n             * bucket.delete(function(err, apiResponse) {});\r\n             *\r\n             * //-\r\n             * // If the callback is omitted, we'll return a Promise.\r\n             * //-\r\n             * bucket.delete().then(function(data) {\r\n             *   const apiResponse = data[0];\r\n             * });\r\n             *\r\n             * @example <caption>include:samples/buckets.js</caption>\r\n             * region_tag:storage_delete_bucket\r\n             * Another example:\r\n             */\r\n            delete: {\r\n                reqOpts: {\r\n                    qs: requestQueryObject,\r\n                },\r\n            },\r\n            /**\r\n             * @typedef {object} BucketExistsOptions Configuration options for Bucket#exists().\r\n             * @property {string} [userProject] The ID of the project which will be\r\n             *     billed for the request.\r\n             */\r\n            /**\r\n             * @typedef {array} BucketExistsResponse\r\n             * @property {boolean} 0 Whether the {@link Bucket} exists.\r\n             */\r\n            /**\r\n             * @callback BucketExistsCallback\r\n             * @param {?Error} err Request error, if any.\r\n             * @param {boolean} exists Whether the {@link Bucket} exists.\r\n             */\r\n            /**\r\n             * Check if the bucket exists.\r\n             *\r\n             * @method Bucket#exists\r\n             * @param {BucketExistsOptions} [options] Configuration options.\r\n             * @param {string} [options.userProject] The ID of the project which will be\r\n             *     billed for the request.\r\n             * @param {BucketExistsCallback} [callback] Callback function.\r\n             * @returns {Promise<BucketExistsResponse>}\r\n             *\r\n             * @example\r\n             * const {Storage} = require('@google-cloud/storage');\r\n             * const storage = new Storage();\r\n             * const bucket = storage.bucket('albums');\r\n             *\r\n             * bucket.exists(function(err, exists) {});\r\n             *\r\n             * //-\r\n             * // If the callback is omitted, we'll return a Promise.\r\n             * //-\r\n             * bucket.exists().then(function(data) {\r\n             *   const exists = data[0];\r\n             * });\r\n             */\r\n            exists: {\r\n                reqOpts: {\r\n                    qs: requestQueryObject,\r\n                },\r\n            },\r\n            /**\r\n             * @typedef {object} [GetBucketOptions] Configuration options for Bucket#get()\r\n             * @property {boolean} [autoCreate] Automatically create the object if\r\n             *     it does not exist. Default: `false`\r\n             * @property {string} [userProject] The ID of the project which will be\r\n             *     billed for the request.\r\n             */\r\n            /**\r\n             * @typedef {array} GetBucketResponse\r\n             * @property {Bucket} 0 The {@link Bucket}.\r\n             * @property {object} 1 The full API response.\r\n             */\r\n            /**\r\n             * @callback GetBucketCallback\r\n             * @param {?Error} err Request error, if any.\r\n             * @param {Bucket} bucket The {@link Bucket}.\r\n             * @param {object} apiResponse The full API response.\r\n             */\r\n            /**\r\n             * Get a bucket if it exists.\r\n             *\r\n             * You may optionally use this to \"get or create\" an object by providing\r\n             * an object with `autoCreate` set to `true`. Any extra configuration that\r\n             * is normally required for the `create` method must be contained within\r\n             * this object as well.\r\n             *\r\n             * @method Bucket#get\r\n             * @param {GetBucketOptions} [options] Configuration options.\r\n             * @param {boolean} [options.autoCreate] Automatically create the object if\r\n             *     it does not exist. Default: `false`\r\n             * @param {string} [options.userProject] The ID of the project which will be\r\n             *     billed for the request.\r\n             * @param {GetBucketCallback} [callback] Callback function.\r\n             * @returns {Promise<GetBucketResponse>}\r\n             *\r\n             * @example\r\n             * const {Storage} = require('@google-cloud/storage');\r\n             * const storage = new Storage();\r\n             * const bucket = storage.bucket('albums');\r\n             *\r\n             * bucket.get(function(err, bucket, apiResponse) {\r\n             *   // `bucket.metadata` has been populated.\r\n             * });\r\n             *\r\n             * //-\r\n             * // If the callback is omitted, we'll return a Promise.\r\n             * //-\r\n             * bucket.get().then(function(data) {\r\n             *   const bucket = data[0];\r\n             *   const apiResponse = data[1];\r\n             * });\r\n             */\r\n            get: {\r\n                reqOpts: {\r\n                    qs: requestQueryObject,\r\n                },\r\n            },\r\n            /**\r\n             * @typedef {array} GetBucketMetadataResponse\r\n             * @property {object} 0 The bucket metadata.\r\n             * @property {object} 1 The full API response.\r\n             */\r\n            /**\r\n             * @callback GetBucketMetadataCallback\r\n             * @param {?Error} err Request error, if any.\r\n             * @param {object} metadata The bucket metadata.\r\n             * @param {object} apiResponse The full API response.\r\n             */\r\n            /**\r\n             * @typedef {object} GetBucketMetadataOptions Configuration options for Bucket#getMetadata().\r\n             * @property {string} [userProject] The ID of the project which will be\r\n             *     billed for the request.\r\n             */\r\n            /**\r\n             * Get the bucket's metadata.\r\n             *\r\n             * To set metadata, see {@link Bucket#setMetadata}.\r\n             *\r\n             * @see [Buckets: get API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/get}\r\n             *\r\n             * @method Bucket#getMetadata\r\n             * @param {GetBucketMetadataOptions} [options] Configuration options.\r\n             * @param {string} [options.userProject] The ID of the project which will be\r\n             *     billed for the request.\r\n             * @param {GetBucketMetadataCallback} [callback] Callback function.\r\n             * @returns {Promise<GetBucketMetadataResponse>}\r\n             *\r\n             * @example\r\n             * const {Storage} = require('@google-cloud/storage');\r\n             * const storage = new Storage();\r\n             * const bucket = storage.bucket('albums');\r\n             *\r\n             * bucket.getMetadata(function(err, metadata, apiResponse) {});\r\n             *\r\n             * //-\r\n             * // If the callback is omitted, we'll return a Promise.\r\n             * //-\r\n             * bucket.getMetadata().then(function(data) {\r\n             *   const metadata = data[0];\r\n             *   const apiResponse = data[1];\r\n             * });\r\n             *\r\n             * @example <caption>include:samples/requesterPays.js</caption>\r\n             * region_tag:storage_get_requester_pays_status\r\n             * Example of retrieving the requester pays status of a bucket:\r\n             */\r\n            getMetadata: {\r\n                reqOpts: {\r\n                    qs: requestQueryObject,\r\n                },\r\n            },\r\n            /**\r\n             * @typedef {object} SetBucketMetadataOptions Configuration options for Bucket#setMetadata().\r\n             * @property {string} [userProject] The ID of the project which will be\r\n             *     billed for the request.\r\n             */\r\n            /**\r\n             * @typedef {array} SetBucketMetadataResponse\r\n             * @property {object} apiResponse The full API response.\r\n             */\r\n            /**\r\n             * @callback SetBucketMetadataCallback\r\n             * @param {?Error} err Request error, if any.\r\n             * @param {object} metadata The bucket metadata.\r\n             */\r\n            /**\r\n             * Set the bucket's metadata.\r\n             *\r\n             * @see [Buckets: patch API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/patch}\r\n             *\r\n             * @method Bucket#setMetadata\r\n             * @param {object<string, *>} metadata The metadata you wish to set.\r\n             * @param {SetBucketMetadataOptions} [options] Configuration options.\r\n             * @param {string} [options.userProject] The ID of the project which will be\r\n             *     billed for the request.\r\n             * @param {SetBucketMetadataCallback} [callback] Callback function.\r\n             * @returns {Promise<SetBucketMetadataResponse>}\r\n             *\r\n             * @example\r\n             * const {Storage} = require('@google-cloud/storage');\r\n             * const storage = new Storage();\r\n             * const bucket = storage.bucket('albums');\r\n             *\r\n             * //-\r\n             * // Set website metadata field on the bucket.\r\n             * //-\r\n             * const metadata = {\r\n             *   website: {\r\n             *     mainPageSuffix: 'http://example.com',\r\n             *     notFoundPage: 'http://example.com/404.html'\r\n             *   }\r\n             * };\r\n             *\r\n             * bucket.setMetadata(metadata, function(err, apiResponse) {});\r\n             *\r\n             * //-\r\n             * // Enable versioning for your bucket.\r\n             * //-\r\n             * bucket.setMetadata({\r\n             *   versioning: {\r\n             *     enabled: true\r\n             *   }\r\n             * }, function(err, apiResponse) {});\r\n             *\r\n             * //-\r\n             * // Enable KMS encryption for objects within this bucket.\r\n             * //-\r\n             * bucket.setMetadata({\r\n             *   encryption: {\r\n             *     defaultKmsKeyName: 'projects/grape-spaceship-123/...'\r\n             *   }\r\n             * }, function(err, apiResponse) {});\r\n             *\r\n             * //-\r\n             * // Set the default event-based hold value for new objects in this\r\n             * // bucket.\r\n             * //-\r\n             * bucket.setMetadata({\r\n             *   defaultEventBasedHold: true\r\n             * }, function(err, apiResponse) {});\r\n             *\r\n             * //-\r\n             * // Remove object lifecycle rules.\r\n             * //-\r\n             * bucket.setMetadata({\r\n             *   lifecycle: null\r\n             * }, function(err, apiResponse) {});\r\n             *\r\n             * //-\r\n             * // If the callback is omitted, we'll return a Promise.\r\n             * //-\r\n             * bucket.setMetadata(metadata).then(function(data) {\r\n             *   const apiResponse = data[0];\r\n             * });\r\n             */\r\n            setMetadata: {\r\n                reqOpts: {\r\n                    qs: requestQueryObject,\r\n                },\r\n            },\r\n        };\r\n        super({\r\n            parent: storage,\r\n            baseUrl: '/b',\r\n            id: name,\r\n            createMethod: storage.createBucket.bind(storage),\r\n            methods,\r\n        });\r\n        this.name = name;\r\n        this.storage = storage;\r\n        this.userProject = options.userProject;\r\n        this.acl = new acl_1.Acl({\r\n            request: this.request.bind(this),\r\n            pathPrefix: '/acl',\r\n        });\r\n        this.acl.default = new acl_1.Acl({\r\n            request: this.request.bind(this),\r\n            pathPrefix: '/defaultObjectAcl',\r\n        });\r\n        this.iam = new iam_1.Iam(this);\r\n        this.getFilesStream = paginator_1.paginator.streamify('getFiles');\r\n    }\r\n    /**\r\n     * @typedef {object} AddLifecycleRuleOptions Configuration options for Bucket#addLifecycleRule().\r\n     * @property {boolean} [append=true] The new rules will be appended to any\r\n     *     pre-existing rules.\r\n     */\r\n    /**\r\n     *\r\n     * @typedef {object} LifecycleRule The new lifecycle rule to be added to objects\r\n     *     in this bucket.\r\n     * @property {string|object} action The action to be taken upon matching of\r\n     *     all the conditions 'delete' or 'setStorageClass'.\r\n     *     **Note**: For configuring a raw-formatted rule object to be passed as `action`\r\n     *               please refer to the [examples]{@link https://cloud.google.com/storage/docs/managing-lifecycles#configexamples}.\r\n     * @property {object} condition Condition a bucket must meet before the\r\n     *     action occurson the bucket. Refer to followitn supported [conditions]{@link https://cloud.google.com/storage/docs/lifecycle#conditions}.\r\n     * @property {string} [storageClass] When using the `setStorageClass`\r\n     *     action, provide this option to dictate which storage class the object\r\n     *     should update to. Please see\r\n     *     [SetStorageClass option documentation]{@link https://cloud.google.com/storage/docs/lifecycle#setstorageclass} for supported transitions.\r\n     */\r\n    /**\r\n     * Add an object lifecycle management rule to the bucket.\r\n     *\r\n     * By default, an Object Lifecycle Management rule provided to this method\r\n     * will be included to the existing policy. To replace all existing rules,\r\n     * supply the `options` argument, setting `append` to `false`.\r\n     *\r\n     * @see [Object Lifecycle Management]{@link https://cloud.google.com/storage/docs/lifecycle}\r\n     * @see [Buckets: patch API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/patch}\r\n     *\r\n     * @param {LifecycleRule} rule The new lifecycle rule to be added to objects\r\n     *     in this bucket.\r\n     * @param {string|object} rule.action The action to be taken upon matching of\r\n     *     all the conditions 'delete' or 'setStorageClass'.\r\n     *     **Note**: For configuring a raw-formatted rule object to be passed as `action`\r\n     *               please refer to the [examples]{@link https://cloud.google.com/storage/docs/managing-lifecycles#configexamples}.\r\n     * @param {object} rule.condition Condition a bucket must meet before the\r\n     *     action occurson the bucket. Refer to followitn supported [conditions]{@link https://cloud.google.com/storage/docs/lifecycle#conditions}.\r\n     * @param {string} [rule.storageClass] When using the `setStorageClass`\r\n     *     action, provide this option to dictate which storage class the object\r\n     *     should update to.\r\n     * @param {AddLifecycleRuleOptions} [options] Configuration object.\r\n     * @param {boolean} [options.append=true] Append the new rule to the existing\r\n     *     policy.\r\n     * @param {SetBucketMetadataCallback} [callback] Callback function.\r\n     * @returns {Promise<SetBucketMetadataResponse>}\r\n     *\r\n     * @example\r\n     * const {Storage} = require('@google-cloud/storage');\r\n     * const storage = new Storage();\r\n     * const bucket = storage.bucket('albums');\r\n     *\r\n     * //-\r\n     * // Automatically have an object deleted from this bucket once it is 3 years\r\n     * // of age.\r\n     * //-\r\n     * bucket.addLifecycleRule({\r\n     *   action: 'delete',\r\n     *   condition: {\r\n     *     age: 365 * 3 // Specified in days.\r\n     *   }\r\n     * }, function(err, apiResponse) {\r\n     *   if (err) {\r\n     *     // Error handling omitted.\r\n     *   }\r\n     *\r\n     *   const lifecycleRules = bucket.metadata.lifecycle.rule;\r\n     *\r\n     *   // Iterate over the Object Lifecycle Management rules on this bucket.\r\n     *   lifecycleRules.forEach(lifecycleRule => {});\r\n     * });\r\n     *\r\n     * //-\r\n     * // By default, the rule you provide will be added to the existing policy.\r\n     * // Optionally, you can disable this behavior to replace all of the\r\n     * // pre-existing rules.\r\n     * //-\r\n     * const options = {\r\n     *   append: false\r\n     * };\r\n     *\r\n     * bucket.addLifecycleRule({\r\n     *   action: 'delete',\r\n     *   condition: {\r\n     *     age: 365 * 3 // Specified in days.\r\n     *   }\r\n     * }, options, function(err, apiResponse) {\r\n     *   if (err) {\r\n     *     // Error handling omitted.\r\n     *   }\r\n     *\r\n     *   // All rules have been replaced with the new \"delete\" rule.\r\n     *\r\n     *   // Iterate over the Object Lifecycle Management rules on this bucket.\r\n     *   lifecycleRules.forEach(lifecycleRule => {});\r\n     * });\r\n     *\r\n     * //-\r\n     * // For objects created before 2018, \"downgrade\" the storage class.\r\n     * //-\r\n     * bucket.addLifecycleRule({\r\n     *   action: 'setStorageClass',\r\n     *   storageClass: 'COLDLINE',\r\n     *   condition: {\r\n     *     createdBefore: new Date('2018')\r\n     *   }\r\n     * }, function(err, apiResponse) {});\r\n     *\r\n     * //-\r\n     * // Delete objects created before 2016 which have the Coldline storage\r\n     * // class.\r\n     * //-\r\n     * bucket.addLifecycleRule({\r\n     *   action: 'delete',\r\n     *   condition: {\r\n     *     matchesStorageClass: [\r\n     *       'COLDLINE'\r\n     *     ],\r\n     *     createdBefore: new Date('2016')\r\n     *   }\r\n     * }, function(err, apiResponse) {});\r\n     *\r\n     * //-\r\n     * // Delete object that has a noncurrent timestamp that is at least 100 days.\r\n     * //-\r\n     * bucket.addLifecycleRule({\r\n     *   action: 'delete',\r\n     *   condition: {\r\n     *     daysSinceNoncurrentTime: 100\r\n     *   }\r\n     * }, function(err, apiResponse) {});\r\n     *\r\n     * //-\r\n     * // Delete object that has a noncurrent timestamp before 2020-01-01.\r\n     * //-\r\n     * bucket.addLifecycleRule({\r\n     *   action: 'delete',\r\n     *   condition: {\r\n     *     noncurrentTimeBefore: new Date('2020-01-01')\r\n     *   }\r\n     * }, function(err, apiResponse) {});\r\n     *\r\n     * //-\r\n     * // Delete object that has a customTime that is at least 100 days.\r\n     * //-\r\n     * bucket.addLifecycleRule({\r\n     *   action: 'delete',\r\n     *   condition: {\r\n     *     daysSinceCustomTime: 100\r\n     *   }\r\n     * }, function(err, apiResponse) ());\r\n     *\r\n     * //-\r\n     * // Delete object that has a customTime before 2020-01-01.\r\n     * //-\r\n     * bucket.addLifecycleRule({\r\n     *   action: 'delete',\r\n     *   condition: {\r\n     *     customTimeBefore: new Date('2020-01-01')\r\n     *   }\r\n     * }, function(err, apiResponse) {});\r\n     */\r\n    addLifecycleRule(rule, optionsOrCallback, callback) {\r\n        let options;\r\n        if (typeof optionsOrCallback === 'function') {\r\n            callback = optionsOrCallback;\r\n        }\r\n        else if (optionsOrCallback) {\r\n            options = optionsOrCallback;\r\n        }\r\n        options = options || {};\r\n        const newLifecycleRules = arrify(rule).map(rule => {\r\n            if (typeof rule.action === 'object') {\r\n                // This is a raw-formatted rule object, the way the API expects.\r\n                // Just pass it through as-is.\r\n                return rule;\r\n            }\r\n            const apiFormattedRule = {};\r\n            apiFormattedRule.condition = {};\r\n            apiFormattedRule.action = {\r\n                type: rule.action.charAt(0).toUpperCase() + rule.action.slice(1),\r\n            };\r\n            if (rule.storageClass) {\r\n                apiFormattedRule.action.storageClass = rule.storageClass;\r\n            }\r\n            for (const condition in rule.condition) {\r\n                if (rule.condition[condition] instanceof Date) {\r\n                    apiFormattedRule.condition[condition] = rule.condition[condition]\r\n                        .toISOString()\r\n                        .replace(/T.+$/, '');\r\n                }\r\n                else {\r\n                    apiFormattedRule.condition[condition] = rule.condition[condition];\r\n                }\r\n            }\r\n            return apiFormattedRule;\r\n        });\r\n        if (options.append === false) {\r\n            this.setMetadata({ lifecycle: { rule: newLifecycleRules } }, callback);\r\n            return;\r\n        }\r\n        // The default behavior appends the previously-defined lifecycle rules with\r\n        // the new ones just passed in by the user.\r\n        this.getMetadata((err, metadata) => {\r\n            if (err) {\r\n                callback(err);\r\n                return;\r\n            }\r\n            const currentLifecycleRules = arrify(metadata.lifecycle && metadata.lifecycle.rule);\r\n            this.setMetadata({\r\n                lifecycle: {\r\n                    rule: currentLifecycleRules.concat(newLifecycleRules),\r\n                },\r\n            }, callback);\r\n        });\r\n    }\r\n    /**\r\n     * @typedef {object} CombineOptions\r\n     * @property {string} [kmsKeyName] Resource name of the Cloud KMS key, of\r\n     *     the form\r\n     *     `projects/my-project/locations/location/keyRings/my-kr/cryptoKeys/my-key`,\r\n     *     that will be used to encrypt the object. Overwrites the object\r\n     * metadata's `kms_key_name` value, if any.\r\n     * @property {string} [userProject] The ID of the project which will be\r\n     *     billed for the request.\r\n     */\r\n    /**\r\n     * @callback CombineCallback\r\n     * @param {?Error} err Request error, if any.\r\n     * @param {File} newFile The new {@link File}.\r\n     * @param {object} apiResponse The full API response.\r\n     */\r\n    /**\r\n     * @typedef {array} CombineResponse\r\n     * @property {File} 0 The new {@link File}.\r\n     * @property {object} 1 The full API response.\r\n     */\r\n    /**\r\n     * Combine multiple files into one new file.\r\n     *\r\n     * @see [Objects: compose API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/objects/compose}\r\n     *\r\n     * @throws {Error} if a non-array is provided as sources argument.\r\n     * @throws {Error} if no sources are provided.\r\n     * @throws {Error} if no destination is provided.\r\n     *\r\n     * @param {string[]|File[]} sources The source files that will be\r\n     *     combined.\r\n     * @param {string|File} destination The file you would like the\r\n     *     source files combined into.\r\n     * @param {CombineOptions} [options] Configuration options.\r\n     * @param {string} [options.kmsKeyName] Resource name of the Cloud KMS key, of\r\n     *     the form\r\n     *     `projects/my-project/locations/location/keyRings/my-kr/cryptoKeys/my-key`,\r\n     *     that will be used to encrypt the object. Overwrites the object\r\n     * metadata's `kms_key_name` value, if any.\r\n     * @param {string} [options.userProject] The ID of the project which will be\r\n     *     billed for the request.\r\n  \r\n     * @param {CombineCallback} [callback] Callback function.\r\n     * @returns {Promise<CombineResponse>}\r\n     *\r\n     * @example\r\n     * const logBucket = storage.bucket('log-bucket');\r\n     *\r\n     * const sources = [\r\n     *   logBucket.file('2013-logs.txt'),\r\n     *   logBucket.file('2014-logs.txt')\r\n     * ];\r\n     *\r\n     * const allLogs = logBucket.file('all-logs.txt');\r\n     *\r\n     * logBucket.combine(sources, allLogs, function(err, newFile, apiResponse) {\r\n     *   // newFile === allLogs\r\n     * });\r\n     *\r\n     * //-\r\n     * // If the callback is omitted, we'll return a Promise.\r\n     * //-\r\n     * logBucket.combine(sources, allLogs).then(function(data) {\r\n     *   const newFile = data[0];\r\n     *   const apiResponse = data[1];\r\n     * });\r\n     */\r\n    combine(sources, destination, optionsOrCallback, callback) {\r\n        if (!Array.isArray(sources) || sources.length === 0) {\r\n            throw new Error('You must provide at least one source file.');\r\n        }\r\n        if (!destination) {\r\n            throw new Error('A destination file must be specified.');\r\n        }\r\n        let options = {};\r\n        if (typeof optionsOrCallback === 'function') {\r\n            callback = optionsOrCallback;\r\n        }\r\n        else if (optionsOrCallback) {\r\n            options = optionsOrCallback;\r\n        }\r\n        const convertToFile = (file) => {\r\n            if (file instanceof file_1.File) {\r\n                return file;\r\n            }\r\n            return this.file(file);\r\n        };\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        sources = sources.map(convertToFile);\r\n        const destinationFile = convertToFile(destination);\r\n        callback = callback || common_1.util.noop;\r\n        if (!destinationFile.metadata.contentType) {\r\n            const destinationContentType = mime.contentType(destinationFile.name);\r\n            if (destinationContentType) {\r\n                destinationFile.metadata.contentType = destinationContentType;\r\n            }\r\n        }\r\n        // Make the request from the destination File object.\r\n        destinationFile.request({\r\n            method: 'POST',\r\n            uri: '/compose',\r\n            json: {\r\n                destination: {\r\n                    contentType: destinationFile.metadata.contentType,\r\n                },\r\n                sourceObjects: sources.map(source => {\r\n                    const sourceObject = {\r\n                        name: source.name,\r\n                    };\r\n                    if (source.metadata && source.metadata.generation) {\r\n                        sourceObject.generation = source.metadata.generation;\r\n                    }\r\n                    return sourceObject;\r\n                }),\r\n            },\r\n            qs: options,\r\n        }, (err, resp) => {\r\n            if (err) {\r\n                callback(err, null, resp);\r\n                return;\r\n            }\r\n            callback(null, destinationFile, resp);\r\n        });\r\n    }\r\n    /**\r\n     * See a [Objects:\r\n     * watchAll request\r\n     * body](https://cloud.google.com/storage/docs/json_api/v1/objects/watchAll).\r\n     *\r\n     * @typedef {object} CreateChannelConfig\r\n     * @property {string} address The address where notifications are\r\n     *     delivered for this channel.\r\n     * @property {string} [delimiter] Returns results in a directory-like mode.\r\n     * @property {number} [maxResults] Maximum number of `items` plus `prefixes`\r\n     *     to return in a single page of responses.\r\n     * @property {string} [pageToken] A previously-returned page token\r\n     *     representing part of the larger set of results to view.\r\n     * @property {string} [prefix] Filter results to objects whose names begin\r\n     *     with this prefix.\r\n     * @property {string} [projection=noAcl] Set of properties to return.\r\n     * @property {string} [userProject] The ID of the project which will be\r\n     *     billed for the request.\r\n     * @property {boolean} [versions=false] If `true`, lists all versions of an object\r\n     *     as distinct results.\r\n     */\r\n    /**\r\n     * @typedef {object} CreateChannelOptions\r\n     * @property {string} [userProject] The ID of the project which will be\r\n     *     billed for the request.\r\n     */\r\n    /**\r\n     * @typedef {array} CreateChannelResponse\r\n     * @property {Channel} 0 The new {@link Channel}.\r\n     * @property {object} 1 The full API response.\r\n     */\r\n    /**\r\n     * @callback CreateChannelCallback\r\n     * @param {?Error} err Request error, if any.\r\n     * @param {Channel} channel The new {@link Channel}.\r\n     * @param {object} apiResponse The full API response.\r\n     */\r\n    /**\r\n     * Create a channel that will be notified when objects in this bucket changes.\r\n     *\r\n     * @throws {Error} If an ID is not provided.\r\n     * @throws {Error} If an address is not provided.\r\n     *\r\n     * @see [Objects: watchAll API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/objects/watchAll}\r\n     *\r\n     * @param {string} id The ID of the channel to create.\r\n     * @param {CreateChannelConfig} config Configuration for creating channel.\r\n     * @param {string} config.address The address where notifications are\r\n     *     delivered for this channel.\r\n     * @param {string} [config.delimiter] Returns results in a directory-like mode.\r\n     * @param {number} [config.maxResults] Maximum number of `items` plus `prefixes`\r\n     *     to return in a single page of responses.\r\n     * @param {string} [config.pageToken] A previously-returned page token\r\n     *     representing part of the larger set of results to view.\r\n     * @param {string} [config.prefix] Filter results to objects whose names begin\r\n     *     with this prefix.\r\n     * @param {string} [config.projection=noAcl] Set of properties to return.\r\n     * @param {string} [config.userProject] The ID of the project which will be\r\n     *     billed for the request.\r\n     * @param {boolean} [config.versions=false] If `true`, lists all versions of an object\r\n     *     as distinct results.\r\n     * @param {CreateChannelOptions} [options] Configuration options.\r\n     * @param {string} [options.userProject] The ID of the project which will be\r\n     *     billed for the request.\r\n     * @param {CreateChannelCallback} [callback] Callback function.\r\n     * @returns {Promise<CreateChannelResponse>}\r\n     *\r\n     * @example\r\n     * const {Storage} = require('@google-cloud/storage');\r\n     * const storage = new Storage();\r\n     * const bucket = storage.bucket('albums');\r\n     * const id = 'new-channel-id';\r\n     *\r\n     * const config = {\r\n     *   address: 'https://...'\r\n     * };\r\n     *\r\n     * bucket.createChannel(id, config, function(err, channel, apiResponse) {\r\n     *   if (!err) {\r\n     *     // Channel created successfully.\r\n     *   }\r\n     * });\r\n     *\r\n     * //-\r\n     * // If the callback is omitted, we'll return a Promise.\r\n     * //-\r\n     * bucket.createChannel(id, config).then(function(data) {\r\n     *   const channel = data[0];\r\n     *   const apiResponse = data[1];\r\n     * });\r\n     */\r\n    createChannel(id, config, optionsOrCallback, callback) {\r\n        if (typeof id !== 'string') {\r\n            throw new Error('An ID is required to create a channel.');\r\n        }\r\n        if (typeof config.address !== 'string') {\r\n            throw new Error('An address is required to create a channel.');\r\n        }\r\n        let options = {};\r\n        if (typeof optionsOrCallback === 'function') {\r\n            callback = optionsOrCallback;\r\n        }\r\n        else if (optionsOrCallback) {\r\n            options = optionsOrCallback;\r\n        }\r\n        this.request({\r\n            method: 'POST',\r\n            uri: '/o/watch',\r\n            json: Object.assign({\r\n                id,\r\n                type: 'web_hook',\r\n            }, config),\r\n            qs: options,\r\n        }, (err, apiResponse) => {\r\n            if (err) {\r\n                callback(err, null, apiResponse);\r\n                return;\r\n            }\r\n            const resourceId = apiResponse.resourceId;\r\n            const channel = this.storage.channel(id, resourceId);\r\n            channel.metadata = apiResponse;\r\n            callback(null, channel, apiResponse);\r\n        });\r\n    }\r\n    /**\r\n     * Metadata to set for the Notification.\r\n     *\r\n     * @typedef {object} CreateNotificationOptions\r\n     * @property {object} [customAttributes] An optional list of additional\r\n     *     attributes to attach to each Cloud PubSub message published for this\r\n     *     notification subscription.\r\n     * @property {string[]} [eventTypes] If present, only send notifications about\r\n     *     listed event types. If empty, sent notifications for all event types.\r\n     * @property {string} [objectNamePrefix] If present, only apply this\r\n     *     notification configuration to object names that begin with this prefix.\r\n     * @property {string} [payloadFormat] The desired content of the Payload.\r\n     *     Defaults to `JSON_API_V1`.\r\n     *\r\n     *     Acceptable values are:\r\n     *     - `JSON_API_V1`\r\n     *\r\n     *     - `NONE`\r\n     * @property {string} [userProject] The ID of the project which will be\r\n     *     billed for the request.\r\n     */\r\n    /**\r\n     * @callback CreateNotificationCallback\r\n     * @param {?Error} err Request error, if any.\r\n     * @param {Notification} notification The new {@link Notification}.\r\n     * @param {object} apiResponse The full API response.\r\n     */\r\n    /**\r\n     * @typedef {array} CreateNotificationResponse\r\n     * @property {Notification} 0 The new {@link Notification}.\r\n     * @property {object} 1 The full API response.\r\n     */\r\n    /**\r\n     * Creates a notification subscription for the bucket.\r\n     *\r\n     * @see [Notifications: insert]{@link https://cloud.google.com/storage/docs/json_api/v1/notifications/insert}\r\n     *\r\n     * @param {Topic|string} topic The Cloud PubSub topic to which this\r\n     *     subscription publishes. If the project ID is omitted, the current\r\n     * project ID will be used.\r\n     *\r\n     *     Acceptable formats are:\r\n     *     - `projects/grape-spaceship-123/topics/my-topic`\r\n     *\r\n     *     - `my-topic`\r\n     * @param {CreateNotificationOptions} [options] Metadata to set for the\r\n     *     notification.\r\n     * @param {object} [options.customAttributes] An optional list of additional\r\n     *     attributes to attach to each Cloud PubSub message published for this\r\n     *     notification subscription.\r\n     * @param {string[]} [options.eventTypes] If present, only send notifications about\r\n     *     listed event types. If empty, sent notifications for all event types.\r\n     * @param {string} [options.objectNamePrefix] If present, only apply this\r\n     *     notification configuration to object names that begin with this prefix.\r\n     * @param {string} [options.payloadFormat] The desired content of the Payload.\r\n     *     Defaults to `JSON_API_V1`.\r\n     *\r\n     *     Acceptable values are:\r\n     *     - `JSON_API_V1`\r\n     *\r\n     *     - `NONE`\r\n     * @param {string} [options.userProject] The ID of the project which will be\r\n     *     billed for the request.\r\n     * @param {CreateNotificationCallback} [callback] Callback function.\r\n     * @returns {Promise<CreateNotificationResponse>}\r\n     * @throws {Error} If a valid topic is not provided.\r\n     * @see Notification#create\r\n     *\r\n     * @example\r\n     * const {Storage} = require('@google-cloud/storage');\r\n     * const storage = new Storage();\r\n     * const myBucket = storage.bucket('my-bucket');\r\n     *\r\n     * const callback = function(err, notification, apiResponse) {\r\n     *   if (!err) {\r\n     *     // The notification was created successfully.\r\n     *   }\r\n     * };\r\n     *\r\n     * myBucket.createNotification('my-topic', callback);\r\n     *\r\n     * //-\r\n     * // Configure the nofiication by providing Notification metadata.\r\n     * //-\r\n     * const metadata = {\r\n     *   objectNamePrefix: 'prefix-'\r\n     * };\r\n     *\r\n     * myBucket.createNotification('my-topic', metadata, callback);\r\n     *\r\n     * //-\r\n     * // If the callback is omitted, we'll return a Promise.\r\n     * //-\r\n     * myBucket.createNotification('my-topic').then(function(data) {\r\n     *   const notification = data[0];\r\n     *   const apiResponse = data[1];\r\n     * });\r\n     *\r\n     * @example <caption>include:samples/notifications.js</caption>\r\n     * region_tag:storage_create_notification\r\n     * Another example:\r\n     */\r\n    createNotification(topic, optionsOrCallback, callback) {\r\n        let options = {};\r\n        if (typeof optionsOrCallback === 'function') {\r\n            callback = optionsOrCallback;\r\n        }\r\n        else if (optionsOrCallback) {\r\n            options = optionsOrCallback;\r\n        }\r\n        const topicIsObject = topic !== null && typeof topic === 'object';\r\n        if (topicIsObject && common_1.util.isCustomType(topic, 'pubsub/topic')) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            topic = topic.name;\r\n        }\r\n        if (typeof topic !== 'string') {\r\n            throw new Error('A valid topic name is required.');\r\n        }\r\n        const body = Object.assign({ topic }, options);\r\n        if (body.topic.indexOf('projects') !== 0) {\r\n            body.topic = 'projects/{{projectId}}/topics/' + body.topic;\r\n        }\r\n        body.topic = '//pubsub.googleapis.com/' + body.topic;\r\n        if (!body.payloadFormat) {\r\n            body.payloadFormat = 'JSON_API_V1';\r\n        }\r\n        const query = {};\r\n        if (body.userProject) {\r\n            query.userProject = body.userProject;\r\n            delete body.userProject;\r\n        }\r\n        this.request({\r\n            method: 'POST',\r\n            uri: '/notificationConfigs',\r\n            json: snakeize(body),\r\n            qs: query,\r\n        }, (err, apiResponse) => {\r\n            if (err) {\r\n                callback(err, null, apiResponse);\r\n                return;\r\n            }\r\n            const notification = this.notification(apiResponse.id);\r\n            notification.metadata = apiResponse;\r\n            callback(null, notification, apiResponse);\r\n        });\r\n    }\r\n    /**\r\n     * @typedef {object} DeleteFilesOptions Query object. See {@link Bucket#getFiles}\r\n     *     for all of the supported properties.\r\n     * @property {boolean} [force] Suppress errors until all files have been\r\n     *     processed.\r\n     */\r\n    /**\r\n     * @callback DeleteFilesCallback\r\n     * @param {?Error|?Error[]} err Request error, if any, or array of errors from\r\n     *     files that were not able to be deleted.\r\n     * @param {object} [apiResponse] The full API response.\r\n     */\r\n    /**\r\n     * Iterate over the bucket's files, calling `file.delete()` on each.\r\n     *\r\n     * <strong>This is not an atomic request.</strong> A delete attempt will be\r\n     * made for each file individually. Any one can fail, in which case only a\r\n     * portion of the files you intended to be deleted would have.\r\n     *\r\n     * Operations are performed in parallel, up to 10 at once. The first error\r\n     * breaks the loop and will execute the provided callback with it. Specify\r\n     * `{ force: true }` to suppress the errors until all files have had a chance\r\n     * to be processed.\r\n     *\r\n     * The `query` object passed as the first argument will also be passed to\r\n     * {@link Bucket#getFiles}.\r\n     *\r\n     * @see [Objects: delete API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/objects/delete}\r\n     *\r\n     * @param {DeleteFilesOptions} [query] Query object. See {@link Bucket#getFiles}\r\n     * @param {boolean} [query.force] Suppress errors until all files have been\r\n     *     processed.\r\n     * @param {DeleteFilesCallback} [callback] Callback function.\r\n     * @returns {Promise}\r\n     *\r\n     * @example\r\n     * const {Storage} = require('@google-cloud/storage');\r\n     * const storage = new Storage();\r\n     * const bucket = storage.bucket('albums');\r\n     *\r\n     * //-\r\n     * // Delete all of the files in the bucket.\r\n     * //-\r\n     * bucket.deleteFiles(function(err) {});\r\n     *\r\n     * //-\r\n     * // By default, if a file cannot be deleted, this method will stop deleting\r\n     * // files from your bucket. You can override this setting with `force:\r\n     * // true`.\r\n     * //-\r\n     * bucket.deleteFiles({\r\n     *   force: true\r\n     * }, function(errors) {\r\n     *   // `errors`:\r\n     *   //    Array of errors if any occurred, otherwise null.\r\n     * });\r\n     *\r\n     * //-\r\n     * // The first argument to this method acts as a query to\r\n     * // {@link Bucket#getFiles}. As an example, you can delete files\r\n     * // which match a prefix.\r\n     * //-\r\n     * bucket.deleteFiles({\r\n     *   prefix: 'images/'\r\n     * }, function(err) {\r\n     *   if (!err) {\r\n     *     // All files in the `images` directory have been deleted.\r\n     *   }\r\n     * });\r\n     *\r\n     * //-\r\n     * // If the callback is omitted, we'll return a Promise.\r\n     * //-\r\n     * bucket.deleteFiles().then(function() {});\r\n     */\r\n    deleteFiles(queryOrCallback, callback) {\r\n        let query = {};\r\n        if (typeof queryOrCallback === 'function') {\r\n            callback = queryOrCallback;\r\n        }\r\n        else if (queryOrCallback) {\r\n            query = queryOrCallback;\r\n        }\r\n        const MAX_PARALLEL_LIMIT = 10;\r\n        const errors = [];\r\n        const deleteFile = (file) => {\r\n            return file.delete(query).catch(err => {\r\n                if (!query.force) {\r\n                    throw err;\r\n                }\r\n                errors.push(err);\r\n            });\r\n        };\r\n        this.getFiles(query)\r\n            .then(([files]) => {\r\n            const limit = pLimit(MAX_PARALLEL_LIMIT);\r\n            const promises = files.map(file => {\r\n                return limit(() => deleteFile(file));\r\n            });\r\n            return Promise.all(promises);\r\n        })\r\n            .then(() => callback(errors.length > 0 ? errors : null), callback);\r\n    }\r\n    /**\r\n     * @typedef {array} DeleteLabelsResponse\r\n     * @property {object} 0 The full API response.\r\n     */\r\n    /**\r\n     * @callback DeleteLabelsCallback\r\n     * @param {?Error} err Request error, if any.\r\n     * @param {object} metadata Bucket's metadata.\r\n     */\r\n    /**\r\n     * Delete one or more labels from this bucket.\r\n     *\r\n     * @param {string|string[]} [labels] The labels to delete. If no labels are\r\n     *     provided, all of the labels are removed.\r\n     * @param {DeleteLabelsCallback} [callback] Callback function.\r\n     * @returns {Promise<DeleteLabelsResponse>}\r\n     *\r\n     * @example\r\n     * const {Storage} = require('@google-cloud/storage');\r\n     * const storage = new Storage();\r\n     * const bucket = storage.bucket('albums');\r\n     *\r\n     * //-\r\n     * // Delete all of the labels from this bucket.\r\n     * //-\r\n     * bucket.deleteLabels(function(err, apiResponse) {});\r\n     *\r\n     * //-\r\n     * // Delete a single label.\r\n     * //-\r\n     * bucket.deleteLabels('labelone', function(err, apiResponse) {});\r\n     *\r\n     * //-\r\n     * // Delete a specific set of labels.\r\n     * //-\r\n     * bucket.deleteLabels([\r\n     *   'labelone',\r\n     *   'labeltwo'\r\n     * ], function(err, apiResponse) {});\r\n     *\r\n     * //-\r\n     * // If the callback is omitted, we'll return a Promise.\r\n     * //-\r\n     * bucket.deleteLabels().then(function(data) {\r\n     *   const apiResponse = data[0];\r\n     * });\r\n     */\r\n    deleteLabels(labelsOrCallback, callback) {\r\n        let labels = new Array();\r\n        if (typeof labelsOrCallback === 'function') {\r\n            callback = labelsOrCallback;\r\n        }\r\n        else if (labelsOrCallback) {\r\n            labels = arrify(labelsOrCallback);\r\n        }\r\n        const deleteLabels = (labels) => {\r\n            const nullLabelMap = labels.reduce((nullLabelMap, labelKey) => {\r\n                nullLabelMap[labelKey] = null;\r\n                return nullLabelMap;\r\n            }, {});\r\n            this.setLabels(nullLabelMap, callback);\r\n        };\r\n        if (labels.length === 0) {\r\n            this.getLabels((err, labels) => {\r\n                if (err) {\r\n                    callback(err);\r\n                    return;\r\n                }\r\n                deleteLabels(Object.keys(labels));\r\n            });\r\n        }\r\n        else {\r\n            deleteLabels(labels);\r\n        }\r\n    }\r\n    /**\r\n     * @typedef {array} DisableRequesterPaysResponse\r\n     * @property {object} 0 The full API response.\r\n     */\r\n    /**\r\n     * @callback DisableRequesterPaysCallback\r\n     * @param {?Error} err Request error, if any.\r\n     * @param {object} apiResponse The full API response.\r\n     */\r\n    /**\r\n     * <div class=\"notice\">\r\n     *   <strong>Early Access Testers Only</strong>\r\n     *   <p>\r\n     *     This feature is not yet widely-available.\r\n     *   </p>\r\n     * </div>\r\n     *\r\n     * Disable `requesterPays` functionality from this bucket.\r\n     *\r\n     * @param {DisableRequesterPaysCallback} [callback] Callback function.\r\n     * @returns {Promise<DisableRequesterPaysCallback>}\r\n     *\r\n     * @example\r\n     * const {Storage} = require('@google-cloud/storage');\r\n     * const storage = new Storage();\r\n     * const bucket = storage.bucket('albums');\r\n     *\r\n     * bucket.disableRequesterPays(function(err, apiResponse) {\r\n     *   if (!err) {\r\n     *     // requesterPays functionality disabled successfully.\r\n     *   }\r\n     * });\r\n     *\r\n     * //-\r\n     * // If the callback is omitted, we'll return a Promise.\r\n     * //-\r\n     * bucket.disableRequesterPays().then(function(data) {\r\n     *   const apiResponse = data[0];\r\n     * });\r\n     *\r\n     * @example <caption>include:samples/requesterPays.js</caption>\r\n     * region_tag:storage_disable_requester_pays\r\n     * Example of disabling requester pays:\r\n     */\r\n    disableRequesterPays(callback) {\r\n        this.setMetadata({\r\n            billing: {\r\n                requesterPays: false,\r\n            },\r\n        }, callback || common_1.util.noop);\r\n    }\r\n    /**\r\n     * Configuration object for enabling logging.\r\n     *\r\n     * @typedef {object} EnableLoggingOptions\r\n     * @property {string|Bucket} [bucket] The bucket for the log entries. By\r\n     *     default, the current bucket is used.\r\n     * @property {string} prefix A unique prefix for log object names.\r\n     */\r\n    /**\r\n     * Enable logging functionality for this bucket. This will make two API\r\n     * requests, first to grant Cloud Storage WRITE permission to the bucket, then\r\n     * to set the appropriate configuration on the Bucket's metadata.\r\n     *\r\n     * @param {EnableLoggingOptions} config Configuration options.\r\n     * @param {string|Bucket} [config.bucket] The bucket for the log entries. By\r\n     *     default, the current bucket is used.\r\n     * @param {string} config.prefix A unique prefix for log object names.\r\n     * @param {SetBucketMetadataCallback} [callback] Callback function.\r\n     * @returns {Promise<SetBucketMetadataResponse>}\r\n     *\r\n     * @example\r\n     * const {Storage} = require('@google-cloud/storage');\r\n     * const storage = new Storage();\r\n     * const bucket = storage.bucket('albums');\r\n     *\r\n     * const config = {\r\n     *   prefix: 'log'\r\n     * };\r\n     *\r\n     * bucket.enableLogging(config, function(err, apiResponse) {\r\n     *   if (!err) {\r\n     *     // Logging functionality enabled successfully.\r\n     *   }\r\n     * });\r\n     *\r\n     * @example <caption>Optionally, provide a destination bucket.</caption>\r\n     * const config = {\r\n     *   prefix: 'log',\r\n     *   bucket: 'destination-bucket'\r\n     * };\r\n     *\r\n     * bucket.enableLogging(config, function(err, apiResponse) {});\r\n     *\r\n     * @example <caption>If the callback is omitted, we'll return a Promise.</caption>\r\n     * bucket.enableLogging(config).then(function(data) {\r\n     *   const apiResponse = data[0];\r\n     * });\r\n     */\r\n    enableLogging(config, callback) {\r\n        if (!config ||\r\n            typeof config === 'function' ||\r\n            typeof config.prefix === 'undefined') {\r\n            throw new Error('A configuration object with a prefix is required.');\r\n        }\r\n        const logBucket = config.bucket\r\n            ? config.bucket.id || config.bucket\r\n            : this.id;\r\n        (async () => {\r\n            let setMetadataResponse;\r\n            try {\r\n                const [policy] = await this.iam.getPolicy();\r\n                policy.bindings.push({\r\n                    members: ['group:cloud-storage-analytics@google.com'],\r\n                    role: 'roles/storage.objectCreator',\r\n                });\r\n                await this.iam.setPolicy(policy);\r\n                [setMetadataResponse] = await this.setMetadata({\r\n                    logging: {\r\n                        logBucket,\r\n                        logObjectPrefix: config.prefix,\r\n                    },\r\n                });\r\n            }\r\n            catch (e) {\r\n                callback(e);\r\n                return;\r\n            }\r\n            callback(null, setMetadataResponse);\r\n        })();\r\n    }\r\n    /**\r\n     * @typedef {array} EnableRequesterPaysResponse\r\n     * @property {object} 0 The full API response.\r\n     */\r\n    /**\r\n     * @callback EnableRequesterPaysCallback\r\n     * @param {?Error} err Request error, if any.\r\n     * @param {object} apiResponse The full API response.\r\n     */\r\n    /**\r\n     * <div class=\"notice\">\r\n     *   <strong>Early Access Testers Only</strong>\r\n     *   <p>\r\n     *     This feature is not yet widely-available.\r\n     *   </p>\r\n     * </div>\r\n     *\r\n     * Enable `requesterPays` functionality for this bucket. This enables you, the\r\n     * bucket owner, to have the requesting user assume the charges for the access\r\n     * to your bucket and its contents.\r\n     *\r\n     * @param {EnableRequesterPaysCallback} [callback] Callback function.\r\n     * @returns {Promise<EnableRequesterPaysResponse>}\r\n     *\r\n     * @example\r\n     * const {Storage} = require('@google-cloud/storage');\r\n     * const storage = new Storage();\r\n     * const bucket = storage.bucket('albums');\r\n     *\r\n     * bucket.enableRequesterPays(function(err, apiResponse) {\r\n     *   if (!err) {\r\n     *     // requesterPays functionality enabled successfully.\r\n     *   }\r\n     * });\r\n     *\r\n     * //-\r\n     * // If the callback is omitted, we'll return a Promise.\r\n     * //-\r\n     * bucket.enableRequesterPays().then(function(data) {\r\n     *   const apiResponse = data[0];\r\n     * });\r\n     *\r\n     * @example <caption>include:samples/requesterPays.js</caption>\r\n     * region_tag:storage_enable_requester_pays\r\n     * Example of enabling requester pays:\r\n     */\r\n    enableRequesterPays(callback) {\r\n        this.setMetadata({\r\n            billing: {\r\n                requesterPays: true,\r\n            },\r\n        }, callback || common_1.util.noop);\r\n    }\r\n    /**\r\n     * Create a {@link File} object. See {@link File} to see how to handle\r\n     * the different use cases you may have.\r\n     *\r\n     * @param {string} name The name of the file in this bucket.\r\n     * @param {FileOptions} [options] Configuration options.\r\n     * @param {string|number} [options.generation] Only use a specific revision of\r\n     *     this file.\r\n     * @param {string} [options.encryptionKey] A custom encryption key. See\r\n     *     [Customer-supplied Encryption\r\n     * Keys](https://cloud.google.com/storage/docs/encryption#customer-supplied).\r\n     * @param {string} [options.kmsKeyName] The name of the Cloud KMS key that will\r\n     *     be used to encrypt the object. Must be in the format:\r\n     *     `projects/my-project/locations/location/keyRings/my-kr/cryptoKeys/my-key`.\r\n     *     KMS key ring must use the same location as the bucket.\r\n     * @param {string} [options.userProject] The ID of the project which will be\r\n     *     billed for all requests made from File object.\r\n     * @returns {File}\r\n     *\r\n     * @example\r\n     * const {Storage} = require('@google-cloud/storage');\r\n     * const storage = new Storage();\r\n     * const bucket = storage.bucket('albums');\r\n     * const file = bucket.file('my-existing-file.png');\r\n     */\r\n    file(name, options) {\r\n        if (!name) {\r\n            throw Error('A file name must be specified.');\r\n        }\r\n        return new file_1.File(this, name, options);\r\n    }\r\n    /**\r\n     * @typedef {array} GetFilesResponse\r\n     * @property {File[]} 0 Array of {@link File} instances.\r\n     * @param {object} nextQuery 1 A query object to receive more results.\r\n     * @param {object} apiResponse 2 The full API response.\r\n     */\r\n    /**\r\n     * @callback GetFilesCallback\r\n     * @param {?Error} err Request error, if any.\r\n     * @param {File[]} files Array of {@link File} instances.\r\n     * @param {object} nextQuery A query object to receive more results.\r\n     * @param {object} apiResponse The full API response.\r\n     */\r\n    /**\r\n     * Query object for listing files.\r\n     *\r\n     * @typedef {object} GetFilesOptions\r\n     * @property {boolean} [autoPaginate=true] Have pagination handled\r\n     *     automatically.\r\n     * @property {string} [delimiter] Results will contain only objects whose\r\n     *     names, aside from the prefix, do not contain delimiter. Objects whose\r\n     *     names, aside from the prefix, contain delimiter will have their name\r\n     *     truncated after the delimiter, returned in `apiResponse.prefixes`.\r\n     *     Duplicate prefixes are omitted.\r\n     * @property {string} [directory] Filter results based on a directory name, or\r\n     *     more technically, a \"prefix\".\r\n     * @property {string} [endOffset] Filter results to objects whose names are\r\n     * lexicographically before endOffset. If startOffset is also set, the objects\r\n     * listed have names between startOffset (inclusive) and endOffset (exclusive).\r\n     * @property {boolean} [includeTrailingDelimiter] If true, objects that end in\r\n     * exactly one instance of delimiter have their metadata included in items[]\r\n     * in addition to the relevant part of the object name appearing in prefixes[].\r\n     * @property {string} [prefix] Filter results to objects whose names begin\r\n     *     with this prefix.\r\n     * @property {number} [maxApiCalls] Maximum number of API calls to make.\r\n     * @property {number} [maxResults] Maximum number of items plus prefixes to\r\n     *     return per call.\r\n     *     Note: By default will handle pagination automatically\r\n     *     if more than 1 page worth of results are requested per call.\r\n     *     When `autoPaginate` is set to `false` the smaller of `maxResults`\r\n     *     or 1 page of results will be returned per call.\r\n     * @property {string} [pageToken] A previously-returned page token\r\n     *     representing part of the larger set of results to view.\r\n     * @property {string} [startOffset] Filter results to objects whose names are\r\n     * lexicographically equal to or after startOffset. If endOffset is also set,\r\n     * the objects listed have names between startOffset (inclusive) and endOffset (exclusive).\r\n     * @property {string} [userProject] The ID of the project which will be\r\n     *     billed for the request.\r\n     * @property {boolean} [versions] If true, returns File objects scoped to\r\n     *     their versions.\r\n     */\r\n    /**\r\n     * Get {@link File} objects for the files currently in the bucket.\r\n     *\r\n     * @see [Objects: list API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/objects/list}\r\n     *\r\n     * @param {GetFilesOptions} [query] Query object for listing files.\r\n     * @param {boolean} [query.autoPaginate=true] Have pagination handled\r\n     *     automatically.\r\n     * @param {string} [query.delimiter] Results will contain only objects whose\r\n     *     names, aside from the prefix, do not contain delimiter. Objects whose\r\n     *     names, aside from the prefix, contain delimiter will have their name\r\n     *     truncated after the delimiter, returned in `apiResponse.prefixes`.\r\n     *     Duplicate prefixes are omitted.\r\n     * @param {string} [query.directory] Filter results based on a directory name, or\r\n     *     more technically, a \"prefix\".\r\n     * @param {string} [query.endOffset] Filter results to objects whose names are\r\n     * lexicographically before endOffset. If startOffset is also set, the objects\r\n     * listed have names between startOffset (inclusive) and endOffset (exclusive).\r\n     * @param {boolean} [query.includeTrailingDelimiter] If true, objects that end in\r\n     * exactly one instance of delimiter have their metadata included in items[]\r\n     * in addition to the relevant part of the object name appearing in prefixes[].\r\n     * @param {string} [query.prefix] Filter results to objects whose names begin\r\n     *     with this prefix.\r\n     * @param {number} [query.maxApiCalls] Maximum number of API calls to make.\r\n     * @param {number} [query.maxResults] Maximum number of items plus prefixes to\r\n     *     return per call.\r\n     *     Note: By default will handle pagination automatically\r\n     *     if more than 1 page worth of results are requested per call.\r\n     *     When `autoPaginate` is set to `false` the smaller of `maxResults`\r\n     *     or 1 page of results will be returned per call.\r\n     * @param {string} [query.pageToken] A previously-returned page token\r\n     *     representing part of the larger set of results to view.\r\n     * @param {string} [query.startOffset] Filter results to objects whose names are\r\n     * lexicographically equal to or after startOffset. If endOffset is also set,\r\n     * the objects listed have names between startOffset (inclusive) and endOffset (exclusive).\r\n     * @param {string} [query.userProject] The ID of the project which will be\r\n     *     billed for the request.\r\n     * @param {boolean} [query.versions] If true, returns File objects scoped to\r\n     *     their versions.\r\n     * @param {GetFilesCallback} [callback] Callback function.\r\n     * @returns {Promise<GetFilesResponse>}\r\n     *\r\n     * @example\r\n     * const {Storage} = require('@google-cloud/storage');\r\n     * const storage = new Storage();\r\n     * const bucket = storage.bucket('albums');\r\n     *\r\n     * bucket.getFiles(function(err, files) {\r\n     *   if (!err) {\r\n     *     // files is an array of File objects.\r\n     *   }\r\n     * });\r\n     *\r\n     * //-\r\n     * // If your bucket has versioning enabled, you can get all of your files\r\n     * // scoped to their generation.\r\n     * //-\r\n     * bucket.getFiles({\r\n     *   versions: true\r\n     * }, function(err, files) {\r\n     *   // Each file is scoped to its generation.\r\n     * });\r\n     *\r\n     * //-\r\n     * // To control how many API requests are made and page through the results\r\n     * // manually, set `autoPaginate` to `false`.\r\n     * //-\r\n     * const callback = function(err, files, nextQuery, apiResponse) {\r\n     *   if (nextQuery) {\r\n     *     // More results exist.\r\n     *     bucket.getFiles(nextQuery, callback);\r\n     *   }\r\n     *\r\n     *   // The `metadata` property is populated for you with the metadata at the\r\n     *   // time of fetching.\r\n     *   files[0].metadata;\r\n     *\r\n     *   // However, in cases where you are concerned the metadata could have\r\n     *   // changed, use the `getMetadata` method.\r\n     *   files[0].getMetadata(function(err, metadata) {});\r\n     * };\r\n     *\r\n     * bucket.getFiles({\r\n     *   autoPaginate: false\r\n     * }, callback);\r\n     *\r\n     * //-\r\n     * // If the callback is omitted, we'll return a Promise.\r\n     * //-\r\n     * bucket.getFiles().then(function(data) {\r\n     *   const files = data[0];\r\n     * });\r\n     *\r\n     * @example <caption><h6>Simulating a File System</h6><p>With `autoPaginate: false`, it's possible to iterate over files which incorporate a common structure using a delimiter.</p><p>Consider the following remote objects:</p><ol><li>\"a\"</li><li>\"a/b/c/d\"</li><li>\"b/d/e\"</li></ol><p>Using a delimiter of `/` will return a single file, \"a\".</p><p>`apiResponse.prefixes` will return the \"sub-directories\" that were found:</p><ol><li>\"a/\"</li><li>\"b/\"</li></ol></caption>\r\n     * bucket.getFiles({\r\n     *   autoPaginate: false,\r\n     *   delimiter: '/'\r\n     * }, function(err, files, nextQuery, apiResponse) {\r\n     *   // files = [\r\n     *   //   {File} // File object for file \"a\"\r\n     *   // ]\r\n     *\r\n     *   // apiResponse.prefixes = [\r\n     *   //   'a/',\r\n     *   //   'b/'\r\n     *   // ]\r\n     * });\r\n     *\r\n     * @example <caption>Using prefixes, it's now possible to simulate a file system with follow-up requests.</caption>\r\n     * bucket.getFiles({\r\n     *   autoPaginate: false,\r\n     *   delimiter: '/',\r\n     *   prefix: 'a/'\r\n     * }, function(err, files, nextQuery, apiResponse) {\r\n     *   // No files found within \"directory\" a.\r\n     *   // files = []\r\n     *\r\n     *   // However, a \"sub-directory\" was found.\r\n     *   // This prefix can be used to continue traversing the \"file system\".\r\n     *   // apiResponse.prefixes = [\r\n     *   //   'a/b/'\r\n     *   // ]\r\n     * });\r\n     *\r\n     * @example <caption>include:samples/files.js</caption>\r\n     * region_tag:storage_list_files\r\n     * Another example:\r\n     *\r\n     * @example <caption>include:samples/files.js</caption>\r\n     * region_tag:storage_list_files_with_prefix\r\n     * Example of listing files, filtered by a prefix:\r\n     */\r\n    getFiles(queryOrCallback, callback) {\r\n        let query = typeof queryOrCallback === 'object' ? queryOrCallback : {};\r\n        if (!callback) {\r\n            callback = queryOrCallback;\r\n        }\r\n        query = Object.assign({}, query);\r\n        if (query.directory) {\r\n            query.prefix = `${query.directory}/`.replace(/\\/*$/, '/');\r\n            delete query.directory;\r\n        }\r\n        this.request({\r\n            uri: '/o',\r\n            qs: query,\r\n        }, (err, resp) => {\r\n            if (err) {\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                callback(err, null, null, resp);\r\n                return;\r\n            }\r\n            const files = arrify(resp.items).map((file) => {\r\n                const options = {};\r\n                if (query.versions) {\r\n                    options.generation = file.generation;\r\n                }\r\n                if (file.kmsKeyName) {\r\n                    options.kmsKeyName = file.kmsKeyName;\r\n                }\r\n                const fileInstance = this.file(file.name, options);\r\n                fileInstance.metadata = file;\r\n                return fileInstance;\r\n            });\r\n            let nextQuery = null;\r\n            if (resp.nextPageToken) {\r\n                nextQuery = Object.assign({}, query, {\r\n                    pageToken: resp.nextPageToken,\r\n                });\r\n            }\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            callback(null, files, nextQuery, resp);\r\n        });\r\n    }\r\n    /**\r\n     * @typedef {object} GetLabelsOptions Configuration options for Bucket#getLabels().\r\n     * @param {string} [userProject] The ID of the project which will be\r\n     *     billed for the request.\r\n     */\r\n    /**\r\n     * @typedef {array} GetLabelsResponse\r\n     * @property {object} 0 Object of labels currently set on this bucket.\r\n     */\r\n    /**\r\n     * @callback GetLabelsCallback\r\n     * @param {?Error} err Request error, if any.\r\n     * @param {object} labels Object of labels currently set on this bucket.\r\n     */\r\n    /**\r\n     * Get the labels currently set on this bucket.\r\n     *\r\n     * @param {object} [options] Configuration options.\r\n     * @param {string} [options.userProject] The ID of the project which will be\r\n     *     billed for the request.\r\n     * @param {GetLabelsCallback} [callback] Callback function.\r\n     * @returns {Promise<GetLabelsCallback>}\r\n     *\r\n     * @example\r\n     * const {Storage} = require('@google-cloud/storage');\r\n     * const storage = new Storage();\r\n     * const bucket = storage.bucket('albums');\r\n     *\r\n     * bucket.getLabels(function(err, labels) {\r\n     *   if (err) {\r\n     *     // Error handling omitted.\r\n     *   }\r\n     *\r\n     *   // labels = {\r\n     *   //   label: 'labelValue',\r\n     *   //   ...\r\n     *   // }\r\n     * });\r\n     *\r\n     * //-\r\n     * // If the callback is omitted, we'll return a Promise.\r\n     * //-\r\n     * bucket.getLabels().then(function(data) {\r\n     *   const labels = data[0];\r\n     * });\r\n     */\r\n    getLabels(optionsOrCallback, callback) {\r\n        let options = {};\r\n        if (typeof optionsOrCallback === 'function') {\r\n            callback = optionsOrCallback;\r\n        }\r\n        else if (optionsOrCallback) {\r\n            options = optionsOrCallback;\r\n        }\r\n        this.getMetadata(options, (err, metadata) => {\r\n            if (err) {\r\n                callback(err, null);\r\n                return;\r\n            }\r\n            callback(null, metadata.labels || {});\r\n        });\r\n    }\r\n    /**\r\n     * @typedef {object} GetNotificationsOptions Configuration options for Bucket#getNotification().\r\n     * @property {string} [userProject] The ID of the project which will be\r\n     *     billed for the request.\r\n     */\r\n    /**\r\n     * @callback GetNotificationsCallback\r\n     * @param {?Error} err Request error, if any.\r\n     * @param {Notification[]} notifications Array of {@link Notification}\r\n     *     instances.\r\n     * @param {object} apiResponse The full API response.\r\n     */\r\n    /**\r\n     * @typedef {array} GetNotificationsResponse\r\n     * @property {Notification[]} 0 Array of {@link Notification} instances.\r\n     * @property {object} 1 The full API response.\r\n     */\r\n    /**\r\n     * Retrieves a list of notification subscriptions for a given bucket.\r\n     *\r\n     * @see [Notifications: list]{@link https://cloud.google.com/storage/docs/json_api/v1/notifications/list}\r\n     *\r\n     * @param {GetNotificationsOptions} [options] Configuration options.\r\n     * @param {string} [options.userProject] The ID of the project which will be\r\n     *     billed for the request.\r\n     * @param {GetNotificationsCallback} [callback] Callback function.\r\n     * @returns {Promise<GetNotificationsResponse>}\r\n     *\r\n     * @example\r\n     * const {Storage} = require('@google-cloud/storage');\r\n     * const storage = new Storage();\r\n     * const bucket = storage.bucket('my-bucket');\r\n     *\r\n     * bucket.getNotifications(function(err, notifications, apiResponse) {\r\n     *   if (!err) {\r\n     *     // notifications is an array of Notification objects.\r\n     *   }\r\n     * });\r\n     *\r\n     * //-\r\n     * // If the callback is omitted, we'll return a Promise.\r\n     * //-\r\n     * bucket.getNotifications().then(function(data) {\r\n     *   const notifications = data[0];\r\n     *   const apiResponse = data[1];\r\n     * });\r\n     *\r\n     * @example <caption>include:samples/notifications.js</caption>\r\n     * region_tag:storage_list_notifications\r\n     * Another example:\r\n     */\r\n    getNotifications(optionsOrCallback, callback) {\r\n        let options = {};\r\n        if (typeof optionsOrCallback === 'function') {\r\n            callback = optionsOrCallback;\r\n        }\r\n        else if (optionsOrCallback) {\r\n            options = optionsOrCallback;\r\n        }\r\n        this.request({\r\n            uri: '/notificationConfigs',\r\n            qs: options,\r\n        }, (err, resp) => {\r\n            if (err) {\r\n                callback(err, null, resp);\r\n                return;\r\n            }\r\n            const notifications = arrify(resp.items).map((notification) => {\r\n                const notificationInstance = this.notification(notification.id);\r\n                notificationInstance.metadata = notification;\r\n                return notificationInstance;\r\n            });\r\n            callback(null, notifications, resp);\r\n        });\r\n    }\r\n    /**\r\n     * @typedef {array} GetSignedUrlResponse\r\n     * @property {object} 0 The signed URL.\r\n     */\r\n    /**\r\n     * @callback GetSignedUrlCallback\r\n     * @param {?Error} err Request error, if any.\r\n     * @param {object} url The signed URL.\r\n     */\r\n    /**\r\n     * @typedef {object} GetBucketSignedUrlConfig\r\n     * @property {string} action Currently only supports \"list\" (HTTP: GET).\r\n     * @property {*} expires A timestamp when this link will expire. Any value\r\n     *     given is passed to `new Date()`.\r\n     *     Note: 'v4' supports maximum duration of 7 days (604800 seconds) from now.\r\n     * @property {string} [version='v2'] The signing version to use, either\r\n     *     'v2' or 'v4'.\r\n     * @property {boolean} [virtualHostedStyle=false] Use virtual hosted-style\r\n     *     URLs ('https://mybucket.storage.googleapis.com/...') instead of path-style\r\n     *     ('https://storage.googleapis.com/mybucket/...'). Virtual hosted-style URLs\r\n     *     should generally be preferred instaed of path-style URL.\r\n     *     Currently defaults to `false` for path-style, although this may change in a\r\n     *     future major-version release.\r\n     * @property {string} [cname] The cname for this bucket, i.e.,\r\n     *     \"https://cdn.example.com\".\r\n     *     See [reference]{@link https://cloud.google.com/storage/docs/access-control/signed-urls#example}\r\n     * @property {object} [extensionHeaders] If these headers are used, the\r\n     *     server will check to make sure that the client provides matching\r\n     * values. See [Canonical extension\r\n     * headers](https://cloud.google.com/storage/docs/access-control/signed-urls#about-canonical-extension-headers)\r\n     *     for the requirements of this feature, most notably:\r\n     *       - The header name must be prefixed with `x-goog-`\r\n     *       - The header name must be all lowercase\r\n     *     Note: Multi-valued header passed as an array in the extensionHeaders\r\n     *           object is converted into a string, delimited by `,` with\r\n     *           no space. Requests made using the signed URL will need to\r\n     *           delimit multi-valued headers using a single `,` as well, or\r\n     *           else the server will report a mismatched signature.\r\n     * @property {object} [queryParams] Additional query parameters to include\r\n     *     in the signed URL.\r\n     */\r\n    /**\r\n     * Get a signed URL to allow limited time access to a bucket.\r\n     *\r\n     * In Google Cloud Platform environments, such as Cloud Functions and App\r\n     * Engine, you usually don't provide a `keyFilename` or `credentials` during\r\n     * instantiation. In those environments, we call the\r\n     * [signBlob\r\n     * API](https://cloud.google.com/iam/docs/reference/credentials/rest/v1/projects.serviceAccounts/signBlob)\r\n     * to create a signed URL. That API requires either the\r\n     * `https://www.googleapis.com/auth/iam` or\r\n     * `https://www.googleapis.com/auth/cloud-platform` scope, so be sure they are\r\n     * enabled.\r\n     *\r\n     * @see [Signed URLs Reference]{@link https://cloud.google.com/storage/docs/access-control/signed-urls}\r\n     *\r\n     * @throws {Error} if an expiration timestamp from the past is given.\r\n     *\r\n     * @param {GetBucketSignedUrlConfig} config Configuration object.\r\n     * @param {string} config.action Currently only supports \"list\" (HTTP: GET).\r\n     * @param {*} config.expires A timestamp when this link will expire. Any value\r\n     *     given is passed to `new Date()`.\r\n     *     Note: 'v4' supports maximum duration of 7 days (604800 seconds) from now.\r\n     * @param {string} [config.version='v2'] The signing version to use, either\r\n     *     'v2' or 'v4'.\r\n     * @param {boolean} [config.virtualHostedStyle=false] Use virtual hosted-style\r\n     *     URLs ('https://mybucket.storage.googleapis.com/...') instead of path-style\r\n     *     ('https://storage.googleapis.com/mybucket/...'). Virtual hosted-style URLs\r\n     *     should generally be preferred instaed of path-style URL.\r\n     *     Currently defaults to `false` for path-style, although this may change in a\r\n     *     future major-version release.\r\n     * @param {string} [config.cname] The cname for this bucket, i.e.,\r\n     *     \"https://cdn.example.com\".\r\n     *     See [reference]{@link https://cloud.google.com/storage/docs/access-control/signed-urls#example}\r\n     * @param {object} [config.extensionHeaders] If these headers are used, the\r\n     *     server will check to make sure that the client provides matching\r\n     * values. See [Canonical extension\r\n     * headers](https://cloud.google.com/storage/docs/access-control/signed-urls#about-canonical-extension-headers)\r\n     *     for the requirements of this feature, most notably:\r\n     *       - The header name must be prefixed with `x-goog-`\r\n     *       - The header name must be all lowercase\r\n     *     Note: Multi-valued header passed as an array in the extensionHeaders\r\n     *           object is converted into a string, delimited by `,` with\r\n     *           no space. Requests made using the signed URL will need to\r\n     *           delimit multi-valued headers using a single `,` as well, or\r\n     *           else the server will report a mismatched signature.\r\n     * @property {object} [config.queryParams] Additional query parameters to include\r\n     *     in the signed URL.\r\n     * @param {GetSignedUrlCallback} [callback] Callback function.\r\n     * @returns {Promise<GetSignedUrlResponse>}\r\n     *\r\n     * @example\r\n     * const {Storage} = require('@google-cloud/storage');\r\n     * const storage = new Storage();\r\n     * const myBucket = storage.bucket('my-bucket');\r\n     *\r\n     * //-\r\n     * // Generate a URL that allows temporary access to list files in a bucket.\r\n     * //-\r\n     * const request = require('request');\r\n     *\r\n     * const config = {\r\n     *   action: 'list',\r\n     *   expires: '03-17-2025'\r\n     * };\r\n     *\r\n     * bucket.getSignedUrl(config, function(err, url) {\r\n     *   if (err) {\r\n     *     console.error(err);\r\n     *     return;\r\n     *   }\r\n     *\r\n     *   // The bucket is now available to be listed from this URL.\r\n     *   request(url, function(err, resp) {\r\n     *     // resp.statusCode = 200\r\n     *   });\r\n     * });\r\n     *\r\n     * //-\r\n     * // If the callback is omitted, we'll return a Promise.\r\n     * //-\r\n     * bucket.getSignedUrl(config).then(function(data) {\r\n     *   const url = data[0];\r\n     * });\r\n     */\r\n    getSignedUrl(cfg, callback) {\r\n        const method = BucketActionToHTTPMethod[cfg.action];\r\n        if (!method) {\r\n            throw new Error('The action is not provided or invalid.');\r\n        }\r\n        const signConfig = {\r\n            method,\r\n            expires: cfg.expires,\r\n            version: cfg.version,\r\n            cname: cfg.cname,\r\n            extensionHeaders: cfg.extensionHeaders || {},\r\n            queryParams: cfg.queryParams || {},\r\n        };\r\n        if (!this.signer) {\r\n            this.signer = new signer_1.URLSigner(this.storage.authClient, this);\r\n        }\r\n        this.signer\r\n            .getSignedUrl(signConfig)\r\n            .then(signedUrl => callback(null, signedUrl), callback);\r\n    }\r\n    /**\r\n     * @callback BucketLockCallback\r\n     * @param {?Error} err Request error, if any.\r\n     * @param {object} apiResponse The full API response.\r\n     */\r\n    /**\r\n     * Lock a previously-defined retention policy. This will prevent changes to\r\n     * the policy.\r\n     *\r\n     * @throws {Error} if a metageneration is not provided.\r\n     *\r\n     * @param {number|string} metageneration The bucket's metageneration. This is\r\n     *     accesssible from calling {@link File#getMetadata}.\r\n     * @param {BucketLockCallback} [callback] Callback function.\r\n     * @returns {Promise<BucketLockResponse>}\r\n     *\r\n     * @example\r\n     * const storage = require('@google-cloud/storage')();\r\n     * const bucket = storage.bucket('albums');\r\n     *\r\n     * const metageneration = 2;\r\n     *\r\n     * bucket.lock(metageneration, function(err, apiResponse) {});\r\n     *\r\n     * //-\r\n     * // If the callback is omitted, we'll return a Promise.\r\n     * //-\r\n     * bucket.lock(metageneration).then(function(data) {\r\n     *   const apiResponse = data[0];\r\n     * });\r\n     */\r\n    lock(metageneration, callback) {\r\n        const metatype = typeof metageneration;\r\n        if (metatype !== 'number' && metatype !== 'string') {\r\n            throw new Error('A metageneration must be provided.');\r\n        }\r\n        this.request({\r\n            method: 'POST',\r\n            uri: '/lockRetentionPolicy',\r\n            qs: {\r\n                ifMetagenerationMatch: metageneration,\r\n            },\r\n        }, callback);\r\n    }\r\n    /**\r\n     * @typedef {array} MakeBucketPrivateResponse\r\n     * @property {File[]} 0 List of files made private.\r\n     */\r\n    /**\r\n     * @callback MakeBucketPrivateCallback\r\n     * @param {?Error} err Request error, if any.\r\n     * @param {File[]} files List of files made private.\r\n     */\r\n    /**\r\n     * @typedef {object} MakeBucketPrivateOptions\r\n     * @property {boolean} [includeFiles=false] Make each file in the bucket\r\n     *     private.\r\n     * @property {Metadata} [metadata] Define custom metadata properties to define\r\n     *     along with the operation.\r\n     * @property {boolean} [force] Queue errors occurred while making files\r\n     *     private until all files have been processed.\r\n     * @property {string} [userProject] The ID of the project which will be\r\n     *     billed for the request.\r\n     */\r\n    /**\r\n     * Make the bucket listing private.\r\n     *\r\n     * You may also choose to make the contents of the bucket private by\r\n     * specifying `includeFiles: true`. This will automatically run\r\n     * {@link File#makePrivate} for every file in the bucket.\r\n     *\r\n     * When specifying `includeFiles: true`, use `force: true` to delay execution\r\n     * of your callback until all files have been processed. By default, the\r\n     * callback is executed after the first error. Use `force` to queue such\r\n     * errors until all files have been processed, after which they will be\r\n     * returned as an array as the first argument to your callback.\r\n     *\r\n     * NOTE: This may cause the process to be long-running and use a high number\r\n     * of requests. Use with caution.\r\n     *\r\n     * @see [Buckets: patch API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/patch}\r\n     *\r\n     * @param {MakeBucketPrivateOptions} [options] Configuration options.\r\n     * @param {boolean} [options.includeFiles=false] Make each file in the bucket\r\n     *     private.\r\n     * @param {Metadata} [options.metadata] Define custom metadata properties to define\r\n     *     along with the operation.\r\n     * @param {boolean} [options.force] Queue errors occurred while making files\r\n     *     private until all files have been processed.\r\n     * @param {string} [options.userProject] The ID of the project which will be\r\n     *     billed for the request.\r\n     * @param {MakeBucketPrivateCallback} [callback] Callback function.\r\n     * @returns {Promise<MakeBucketPrivateResponse>}\r\n     *\r\n     * @example\r\n     * const {Storage} = require('@google-cloud/storage');\r\n     * const storage = new Storage();\r\n     * const bucket = storage.bucket('albums');\r\n     *\r\n     * //-\r\n     * // Make the bucket private.\r\n     * //-\r\n     * bucket.makePrivate(function(err) {});\r\n     *\r\n     * //-\r\n     * // Make the bucket and its contents private.\r\n     * //-\r\n     * const opts = {\r\n     *   includeFiles: true\r\n     * };\r\n     *\r\n     * bucket.makePrivate(opts, function(err, files) {\r\n     *   // `err`:\r\n     *   //    The first error to occur, otherwise null.\r\n     *   //\r\n     *   // `files`:\r\n     *   //    Array of files successfully made private in the bucket.\r\n     * });\r\n     *\r\n     * //-\r\n     * // Make the bucket and its contents private, using force to suppress errors\r\n     * // until all files have been processed.\r\n     * //-\r\n     * const opts = {\r\n     *   includeFiles: true,\r\n     *   force: true\r\n     * };\r\n     *\r\n     * bucket.makePrivate(opts, function(errors, files) {\r\n     *   // `errors`:\r\n     *   //    Array of errors if any occurred, otherwise null.\r\n     *   //\r\n     *   // `files`:\r\n     *   //    Array of files successfully made private in the bucket.\r\n     * });\r\n     *\r\n     * //-\r\n     * // If the callback is omitted, we'll return a Promise.\r\n     * //-\r\n     * bucket.makePrivate(opts).then(function(data) {\r\n     *   const files = data[0];\r\n     * });\r\n     */\r\n    makePrivate(optionsOrCallback, callback) {\r\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\r\n        callback =\r\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\r\n        options.private = true;\r\n        const query = {\r\n            predefinedAcl: 'projectPrivate',\r\n        };\r\n        if (options.userProject) {\r\n            query.userProject = options.userProject;\r\n        }\r\n        // You aren't allowed to set both predefinedAcl & acl properties on a bucket\r\n        // so acl must explicitly be nullified.\r\n        const metadata = extend({}, options.metadata, { acl: null });\r\n        this.setMetadata(metadata, query)\r\n            .then(() => {\r\n            if (options.includeFiles) {\r\n                return util_1.promisify(this.makeAllFilesPublicPrivate_).call(this, options);\r\n            }\r\n            return [];\r\n        })\r\n            .then(files => callback(null, files), callback);\r\n    }\r\n    /**\r\n     * @typedef {object} MakeBucketPublicOptions\r\n     * @property {boolean} [includeFiles=false] Make each file in the bucket\r\n     *     private.\r\n     * @property {boolean} [force] Queue errors occurred while making files\r\n     *     private until all files have been processed.\r\n     */\r\n    /**\r\n     * @callback MakeBucketPublicCallback\r\n     * @param {?Error} err Request error, if any.\r\n     * @param {File[]} files List of files made public.\r\n     */\r\n    /**\r\n     * @typedef {array} MakeBucketPublicResponse\r\n     * @property {File[]} 0 List of files made public.\r\n     */\r\n    /**\r\n     * Make the bucket publicly readable.\r\n     *\r\n     * You may also choose to make the contents of the bucket publicly readable by\r\n     * specifying `includeFiles: true`. This will automatically run\r\n     * {@link File#makePublic} for every file in the bucket.\r\n     *\r\n     * When specifying `includeFiles: true`, use `force: true` to delay execution\r\n     * of your callback until all files have been processed. By default, the\r\n     * callback is executed after the first error. Use `force` to queue such\r\n     * errors until all files have been processed, after which they will be\r\n     * returned as an array as the first argument to your callback.\r\n     *\r\n     * NOTE: This may cause the process to be long-running and use a high number\r\n     * of requests. Use with caution.\r\n     *\r\n     * @see [Buckets: patch API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/patch}\r\n     *\r\n     * @param {MakeBucketPublicOptions} [options] Configuration options.\r\n     * @param {boolean} [options.includeFiles=false] Make each file in the bucket\r\n     *     private.\r\n     * @param {boolean} [options.force] Queue errors occurred while making files\r\n     *     private until all files have been processed.\r\n     * @param {MakeBucketPublicCallback} [callback] Callback function.\r\n     * @returns {Promise<MakeBucketPublicResponse>}\r\n     *\r\n     * @example\r\n     * const {Storage} = require('@google-cloud/storage');\r\n     * const storage = new Storage();\r\n     * const bucket = storage.bucket('albums');\r\n     *\r\n     * //-\r\n     * // Make the bucket publicly readable.\r\n     * //-\r\n     * bucket.makePublic(function(err) {});\r\n     *\r\n     * //-\r\n     * // Make the bucket and its contents publicly readable.\r\n     * //-\r\n     * const opts = {\r\n     *   includeFiles: true\r\n     * };\r\n     *\r\n     * bucket.makePublic(opts, function(err, files) {\r\n     *   // `err`:\r\n     *   //    The first error to occur, otherwise null.\r\n     *   //\r\n     *   // `files`:\r\n     *   //    Array of files successfully made public in the bucket.\r\n     * });\r\n     *\r\n     * //-\r\n     * // Make the bucket and its contents publicly readable, using force to\r\n     * // suppress errors until all files have been processed.\r\n     * //-\r\n     * const opts = {\r\n     *   includeFiles: true,\r\n     *   force: true\r\n     * };\r\n     *\r\n     * bucket.makePublic(opts, function(errors, files) {\r\n     *   // `errors`:\r\n     *   //    Array of errors if any occurred, otherwise null.\r\n     *   //\r\n     *   // `files`:\r\n     *   //    Array of files successfully made public in the bucket.\r\n     * });\r\n     *\r\n     * //-\r\n     * // If the callback is omitted, we'll return a Promise.\r\n     * //-\r\n     * bucket.makePublic(opts).then(function(data) {\r\n     *   const files = data[0];\r\n     * });\r\n     */\r\n    makePublic(optionsOrCallback, callback) {\r\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\r\n        callback =\r\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\r\n        const req = extend(true, { public: true }, options);\r\n        this.acl\r\n            .add({\r\n            entity: 'allUsers',\r\n            role: 'READER',\r\n        })\r\n            .then(() => {\r\n            return this.acl.default.add({\r\n                entity: 'allUsers',\r\n                role: 'READER',\r\n            });\r\n        })\r\n            .then(() => {\r\n            if (req.includeFiles) {\r\n                return util_1.promisify(this.makeAllFilesPublicPrivate_).call(this, req);\r\n            }\r\n            return [];\r\n        })\r\n            .then(files => callback(null, files), callback);\r\n    }\r\n    /**\r\n     * Get a reference to a Cloud Pub/Sub Notification.\r\n     *\r\n     * @param {string} id ID of notification.\r\n     * @returns {Notification}\r\n     * @see Notification\r\n     *\r\n     * @example\r\n     * const {Storage} = require('@google-cloud/storage');\r\n     * const storage = new Storage();\r\n     * const bucket = storage.bucket('my-bucket');\r\n     * const notification = bucket.notification('1');\r\n     */\r\n    notification(id) {\r\n        if (!id) {\r\n            throw new Error('You must supply a notification ID.');\r\n        }\r\n        return new notification_1.Notification(this, id);\r\n    }\r\n    /**\r\n     * Remove an already-existing retention policy from this bucket, if it is not\r\n     * locked.\r\n     *\r\n     * @param {SetBucketMetadataCallback} [callback] Callback function.\r\n     * @returns {Promise<SetBucketMetadataResponse>}\r\n     *\r\n     * @example\r\n     * const storage = require('@google-cloud/storage')();\r\n     * const bucket = storage.bucket('albums');\r\n     *\r\n     * bucket.removeRetentionPeriod(function(err, apiResponse) {});\r\n     *\r\n     * //-\r\n     * // If the callback is omitted, we'll return a Promise.\r\n     * //-\r\n     * bucket.removeRetentionPeriod().then(function(data) {\r\n     *   const apiResponse = data[0];\r\n     * });\r\n     */\r\n    removeRetentionPeriod(callback) {\r\n        this.setMetadata({\r\n            retentionPolicy: null,\r\n        }, callback);\r\n    }\r\n    /**\r\n     * Makes request and applies userProject query parameter if necessary.\r\n     *\r\n     * @private\r\n     *\r\n     * @param {object} reqOpts - The request options.\r\n     * @param {function} callback - The callback function.\r\n     */\r\n    request(reqOpts, callback) {\r\n        if (this.userProject && (!reqOpts.qs || !reqOpts.qs.userProject)) {\r\n            reqOpts.qs = extend(reqOpts.qs, { userProject: this.userProject });\r\n        }\r\n        return super.request(reqOpts, callback);\r\n    }\r\n    /**\r\n     * @typedef {array} SetLabelsResponse\r\n     * @property {object} 0 The bucket metadata.\r\n     */\r\n    /**\r\n     * @callback SetLabelsCallback\r\n     * @param {?Error} err Request error, if any.\r\n     * @param {object} metadata The bucket metadata.\r\n     */\r\n    /**\r\n     * @typedef {object} SetLabelsOptions Configuration options for Bucket#setLabels().\r\n     * @property {string} [userProject] The ID of the project which will be\r\n     *     billed for the request.\r\n     */\r\n    /**\r\n     * Set labels on the bucket.\r\n     *\r\n     * This makes an underlying call to {@link Bucket#setMetadata}, which\r\n     * is a PATCH request. This means an individual label can be overwritten, but\r\n     * unmentioned labels will not be touched.\r\n     *\r\n     * @param {object<string, string>} labels Labels to set on the bucket.\r\n     * @param {SetLabelsOptions} [options] Configuration options.\r\n     * @param {string} [options.userProject] The ID of the project which will be\r\n     *     billed for the request.\r\n     * @param {SetLabelsCallback} [callback] Callback function.\r\n     * @returns {Promise<SetLabelsResponse>}\r\n     *\r\n     * @example\r\n     * const {Storage} = require('@google-cloud/storage');\r\n     * const storage = new Storage();\r\n     * const bucket = storage.bucket('albums');\r\n     *\r\n     * const labels = {\r\n     *   labelone: 'labelonevalue',\r\n     *   labeltwo: 'labeltwovalue'\r\n     * };\r\n     *\r\n     * bucket.setLabels(labels, function(err, metadata) {\r\n     *   if (!err) {\r\n     *     // Labels set successfully.\r\n     *   }\r\n     * });\r\n     *\r\n     * //-\r\n     * // If the callback is omitted, we'll return a Promise.\r\n     * //-\r\n     * bucket.setLabels(labels).then(function(data) {\r\n     *   const metadata = data[0];\r\n     * });\r\n     */\r\n    setLabels(labels, optionsOrCallback, callback) {\r\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\r\n        callback =\r\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\r\n        callback = callback || common_1.util.noop;\r\n        this.setMetadata({ labels }, options, callback);\r\n    }\r\n    /**\r\n     * Lock all objects contained in the bucket, based on their creation time. Any\r\n     * attempt to overwrite or delete objects younger than the retention period\r\n     * will result in a `PERMISSION_DENIED` error.\r\n     *\r\n     * An unlocked retention policy can be modified or removed from the bucket via\r\n     * {@link File#removeRetentionPeriod} and {@link File#setRetentionPeriod}. A\r\n     * locked retention policy cannot be removed or shortened in duration for the\r\n     * lifetime of the bucket. Attempting to remove or decrease period of a locked\r\n     * retention policy will result in a `PERMISSION_DENIED` error. You can still\r\n     * increase the policy.\r\n     *\r\n     * @param {*} duration In seconds, the minimum retention time for all objects\r\n     *     contained in this bucket.\r\n     * @param {SetBucketMetadataCallback} [callback] Callback function.\r\n     * @returns {Promise<SetBucketMetadataResponse>}\r\n     *\r\n     * @example\r\n     * const storage = require('@google-cloud/storage')();\r\n     * const bucket = storage.bucket('albums');\r\n     *\r\n     * const DURATION_SECONDS = 15780000; // 6 months.\r\n     *\r\n     * //-\r\n     * // Lock the objects in this bucket for 6 months.\r\n     * //-\r\n     * bucket.setRetentionPeriod(DURATION_SECONDS, function(err, apiResponse) {});\r\n     *\r\n     * //-\r\n     * // If the callback is omitted, we'll return a Promise.\r\n     * //-\r\n     * bucket.setRetentionPeriod(DURATION_SECONDS).then(function(data) {\r\n     *   const apiResponse = data[0];\r\n     * });\r\n     */\r\n    setRetentionPeriod(duration, callback) {\r\n        this.setMetadata({\r\n            retentionPolicy: {\r\n                retentionPeriod: duration,\r\n            },\r\n        }, callback);\r\n    }\r\n    /**\r\n     *\r\n     * @typedef {object} Cors\r\n     * @property {number} [maxAgeSeconds] The number of seconds the browser is\r\n     *     allowed to make requests before it must repeat the preflight request.\r\n     * @property {string[]} [method] HTTP method allowed for cross origin resource\r\n     *     sharing with this bucket.\r\n     * @property {string[]} [origin] an origin allowed for cross origin resource\r\n     *     sharing with this bucket.\r\n     * @property {string[]} [responseHeader] A header allowed for cross origin\r\n     *     resource sharing with this bucket.\r\n     */\r\n    /**\r\n     * This can be used to set the CORS configuration on the bucket.\r\n     *\r\n     * The configuration will be overwritten with the value passed into this.\r\n     *\r\n     * @param {Cors[]} corsConfiguration The new CORS configuration to set\r\n     * @param {number} [corsConfiguration.maxAgeSeconds] The number of seconds the browser is\r\n     *     allowed to make requests before it must repeat the preflight request.\r\n     * @param {string[]} [corsConfiguration.method] HTTP method allowed for cross origin resource\r\n     *     sharing with this bucket.\r\n     * @param {string[]} [corsConfiguration.origin] an origin allowed for cross origin resource\r\n     *     sharing with this bucket.\r\n     * @param {string[]} [corsConfiguration.responseHeader] A header allowed for cross origin\r\n     *     resource sharing with this bucket.\r\n     * @param {SetBucketMetadataCallback} [callback] Callback function.\r\n     * @returns {Promise<SetBucketMetadataResponse>}\r\n     *\r\n     * @example\r\n     * const storage = require('@google-cloud/storage')();\r\n     * const bucket = storage.bucket('albums');\r\n     *\r\n     * const corsConfiguration = [{maxAgeSeconds: 3600}]; // 1 hour\r\n     * bucket.setCorsConfiguration(corsConfiguration);\r\n     *\r\n     * //-\r\n     * // If the callback is omitted, we'll return a Promise.\r\n     * //-\r\n     * bucket.setCorsConfiguration(corsConfiguration).then(function(data) {\r\n     *   const apiResponse = data[0];\r\n     * });\r\n     */\r\n    setCorsConfiguration(corsConfiguration, callback) {\r\n        this.setMetadata({\r\n            cors: corsConfiguration,\r\n        }, callback);\r\n    }\r\n    /**\r\n     * @typedef {object} SetBucketStorageClassOptions\r\n     * @property {string} [userProject] - The ID of the project which will be\r\n     *     billed for the request.\r\n     */\r\n    /**\r\n     * @callback SetBucketStorageClassCallback\r\n     * @param {?Error} err Request error, if any.\r\n     */\r\n    /**\r\n     * Set the default storage class for new files in this bucket.\r\n     *\r\n     * @see [Storage Classes]{@link https://cloud.google.com/storage/docs/storage-classes}\r\n     *\r\n     * @param {string} storageClass The new storage class. (`standard`,\r\n     *     `nearline`, `coldline`, or `archive`).\r\n     *     **Note:** The storage classes `multi_regional`, `regional`, and\r\n     *     `durable_reduced_availability` are now legacy and will be deprecated in\r\n     *     the future.\r\n     * @param {object} [options] Configuration options.\r\n     * @param {string} [options.userProject] - The ID of the project which will be\r\n     *     billed for the request.\r\n     * @param {SetStorageClassCallback} [callback] Callback function.\r\n     * @returns {Promise}\r\n     *\r\n     * @example\r\n     * const {Storage} = require('@google-cloud/storage');\r\n     * const storage = new Storage();\r\n     * const bucket = storage.bucket('albums');\r\n     *\r\n     * bucket.setStorageClass('nearline', function(err, apiResponse) {\r\n     *   if (err) {\r\n     *     // Error handling omitted.\r\n     *   }\r\n     *\r\n     *   // The storage class was updated successfully.\r\n     * });\r\n     *\r\n     * //-\r\n     * // If the callback is omitted, we'll return a Promise.\r\n     * //-\r\n     * bucket.setStorageClass('nearline').then(function() {});\r\n     */\r\n    setStorageClass(storageClass, optionsOrCallback, callback) {\r\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\r\n        callback =\r\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\r\n        // In case we get input like `storageClass`, convert to `storage_class`.\r\n        storageClass = storageClass\r\n            .replace(/-/g, '_')\r\n            .replace(/([a-z])([A-Z])/g, (_, low, up) => {\r\n            return low + '_' + up;\r\n        })\r\n            .toUpperCase();\r\n        this.setMetadata({ storageClass }, options, callback);\r\n    }\r\n    /**\r\n     * Set a user project to be billed for all requests made from this Bucket\r\n     * object and any files referenced from this Bucket object.\r\n     *\r\n     * @param {string} userProject The user project.\r\n     *\r\n     * @example\r\n     * const {Storage} = require('@google-cloud/storage');\r\n     * const storage = new Storage();\r\n     * const bucket = storage.bucket('albums');\r\n     *\r\n     * bucket.setUserProject('grape-spaceship-123');\r\n     */\r\n    setUserProject(userProject) {\r\n        this.userProject = userProject;\r\n        const methods = [\r\n            'create',\r\n            'delete',\r\n            'exists',\r\n            'get',\r\n            'getMetadata',\r\n            'setMetadata',\r\n        ];\r\n        methods.forEach(method => {\r\n            const methodConfig = this.methods[method];\r\n            if (typeof methodConfig === 'object') {\r\n                if (typeof methodConfig.reqOpts === 'object') {\r\n                    extend(methodConfig.reqOpts.qs, { userProject });\r\n                }\r\n                else {\r\n                    methodConfig.reqOpts = {\r\n                        qs: { userProject },\r\n                    };\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @typedef {object} UploadOptions Configuration options for Bucket#upload().\r\n     * @property {string|File} [destination] The place to save\r\n     *     your file. If given a string, the file will be uploaded to the bucket\r\n     *     using the string as a filename. When given a File object, your local\r\n     * file will be uploaded to the File object's bucket and under the File\r\n     * object's name. Lastly, when this argument is omitted, the file is uploaded\r\n     * to your bucket using the name of the local file.\r\n     * @property {string} [encryptionKey] A custom encryption key. See\r\n     *     [Customer-supplied Encryption\r\n     * Keys](https://cloud.google.com/storage/docs/encryption#customer-supplied).\r\n     * @property {boolean} [gzip] Automatically gzip the file. This will set\r\n     *     `options.metadata.contentEncoding` to `gzip`.\r\n     * @property {string} [kmsKeyName] The name of the Cloud KMS key that will\r\n     *     be used to encrypt the object. Must be in the format:\r\n     *     `projects/my-project/locations/location/keyRings/my-kr/cryptoKeys/my-key`.\r\n     * @property {object} [metadata] See an\r\n     *     [Objects: insert request\r\n     * body](https://cloud.google.com/storage/docs/json_api/v1/objects/insert#request_properties_JSON).\r\n     * @property {string} [offset] The starting byte of the upload stream, for\r\n     *     resuming an interrupted upload. Defaults to 0.\r\n     * @property {string} [predefinedAcl] Apply a predefined set of access\r\n     *     controls to this object.\r\n     *\r\n     *     Acceptable values are:\r\n     *     - **`authenticatedRead`** - Object owner gets `OWNER` access, and\r\n     *       `allAuthenticatedUsers` get `READER` access.\r\n     *\r\n     *     - **`bucketOwnerFullControl`** - Object owner gets `OWNER` access, and\r\n     *       project team owners get `OWNER` access.\r\n     *\r\n     *     - **`bucketOwnerRead`** - Object owner gets `OWNER` access, and project\r\n     *       team owners get `READER` access.\r\n     *\r\n     *     - **`private`** - Object owner gets `OWNER` access.\r\n     *\r\n     *     - **`projectPrivate`** - Object owner gets `OWNER` access, and project\r\n     *       team members get access according to their roles.\r\n     *\r\n     *     - **`publicRead`** - Object owner gets `OWNER` access, and `allUsers`\r\n     * get `READER` access.\r\n     * @property {boolean} [private] Make the uploaded file private. (Alias for\r\n     *     `options.predefinedAcl = 'private'`)\r\n     * @property {boolean} [public] Make the uploaded file public. (Alias for\r\n     *     `options.predefinedAcl = 'publicRead'`)\r\n     * @property {boolean} [resumable] Force a resumable upload. (default:\r\n     *     true for files larger than 5 MB).\r\n     * @property {number} [timeout=60000] Set the HTTP request timeout in\r\n     *     milliseconds. This option is not available for resumable uploads.\r\n     *     Default: `60000`\r\n     * @property {string} [uri] The URI for an already-created resumable\r\n     *     upload. See {@link File#createResumableUpload}.\r\n     * @property {string} [userProject] The ID of the project which will be\r\n     *     billed for the request.\r\n     * @property {string|boolean} [validation] Possible values: `\"md5\"`,\r\n     *     `\"crc32c\"`, or `false`. By default, data integrity is validated with an\r\n     *     MD5 checksum for maximum reliability. CRC32c will provide better\r\n     *     performance with less reliability. You may also choose to skip\r\n     * validation completely, however this is **not recommended**.\r\n     */\r\n    /**\r\n     * @typedef {array} UploadResponse\r\n     * @property {object} 0 The uploaded {@link File}.\r\n     * @property {object} 1 The full API response.\r\n     */\r\n    /**\r\n     * @callback UploadCallback\r\n     * @param {?Error} err Request error, if any.\r\n     * @param {object} file The uploaded {@link File}.\r\n     * @param {object} apiResponse The full API response.\r\n     */\r\n    /**\r\n     * Upload a file to the bucket. This is a convenience method that wraps\r\n     * {@link File#createWriteStream}.\r\n     *\r\n     * You can specify whether or not an upload is resumable by setting\r\n     * `options.resumable`. *Resumable uploads are enabled by default if your\r\n     * input file is larger than 5 MB.*\r\n     *\r\n     * For faster crc32c computation, you must manually install\r\n     * [`fast-crc32c`](https://www.npmjs.com/package/fast-crc32c):\r\n     *\r\n     *     $ npm install --save fast-crc32c\r\n     *\r\n     * @see [Upload Options (Simple or Resumable)]{@link https://cloud.google.com/storage/docs/json_api/v1/how-tos/upload#uploads}\r\n     * @see [Objects: insert API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/objects/insert}\r\n     *\r\n     * @param {string} pathString The fully qualified path to the file you\r\n     *     wish to upload to your bucket.\r\n     * @param {UploadOptions} [options] Configuration options.\r\n     * @param {string|File} [options.destination] The place to save\r\n     *     your file. If given a string, the file will be uploaded to the bucket\r\n     *     using the string as a filename. When given a File object, your local\r\n     * file will be uploaded to the File object's bucket and under the File\r\n     * object's name. Lastly, when this argument is omitted, the file is uploaded\r\n     * to your bucket using the name of the local file.\r\n     * @param {string} [options.encryptionKey] A custom encryption key. See\r\n     *     [Customer-supplied Encryption\r\n     * Keys](https://cloud.google.com/storage/docs/encryption#customer-supplied).\r\n     * @param {boolean} [options.gzip] Automatically gzip the file. This will set\r\n     *     `options.metadata.contentEncoding` to `gzip`.\r\n     * @param {string} [options.kmsKeyName] The name of the Cloud KMS key that will\r\n     *     be used to encrypt the object. Must be in the format:\r\n     *     `projects/my-project/locations/location/keyRings/my-kr/cryptoKeys/my-key`.\r\n     * @param {object} [options.metadata] See an\r\n     *     [Objects: insert request\r\n     * body](https://cloud.google.com/storage/docs/json_api/v1/objects/insert#request_properties_JSON).\r\n     * @param {string} [options.offset] The starting byte of the upload stream, for\r\n     *     resuming an interrupted upload. Defaults to 0.\r\n     * @param {string} [options.predefinedAcl] Apply a predefined set of access\r\n     *     controls to this object.\r\n     *\r\n     *     Acceptable values are:\r\n     *     - **`authenticatedRead`** - Object owner gets `OWNER` access, and\r\n     *       `allAuthenticatedUsers` get `READER` access.\r\n     *\r\n     *     - **`bucketOwnerFullControl`** - Object owner gets `OWNER` access, and\r\n     *       project team owners get `OWNER` access.\r\n     *\r\n     *     - **`bucketOwnerRead`** - Object owner gets `OWNER` access, and project\r\n     *       team owners get `READER` access.\r\n     *\r\n     *     - **`private`** - Object owner gets `OWNER` access.\r\n     *\r\n     *     - **`projectPrivate`** - Object owner gets `OWNER` access, and project\r\n     *       team members get access according to their roles.\r\n     *\r\n     *     - **`publicRead`** - Object owner gets `OWNER` access, and `allUsers`\r\n     * get `READER` access.\r\n     * @param {boolean} [options.private] Make the uploaded file private. (Alias for\r\n     *     `options.predefinedAcl = 'private'`)\r\n     * @param {boolean} [options.public] Make the uploaded file public. (Alias for\r\n     *     `options.predefinedAcl = 'publicRead'`)\r\n     * @param {boolean} [options.resumable] Force a resumable upload. (default:\r\n     *     true for files larger than 5 MB).\r\n     * @param {number} [options.timeout=60000] Set the HTTP request timeout in\r\n     *     milliseconds. This option is not available for resumable uploads.\r\n     *     Default: `60000`\r\n     * @param {string} [options.uri] The URI for an already-created resumable\r\n     *     upload. See {@link File#createResumableUpload}.\r\n     * @param {string} [options.userProject] The ID of the project which will be\r\n     *     billed for the request.\r\n     * @param {string|boolean} [options.validation] Possible values: `\"md5\"`,\r\n     *     `\"crc32c\"`, or `false`. By default, data integrity is validated with an\r\n     *     MD5 checksum for maximum reliability. CRC32c will provide better\r\n     *     performance with less reliability. You may also choose to skip\r\n     * validation completely, however this is **not recommended**.\r\n     * @param {UploadCallback} [callback] Callback function.\r\n     * @returns {Promise<UploadResponse>}\r\n     *\r\n     * @example\r\n     * const {Storage} = require('@google-cloud/storage');\r\n     * const storage = new Storage();\r\n     * const bucket = storage.bucket('albums');\r\n     *\r\n     * //-\r\n     * // Upload a file from a local path.\r\n     * //-\r\n     * bucket.upload('/local/path/image.png', function(err, file, apiResponse) {\r\n     *   // Your bucket now contains:\r\n     *   // - \"image.png\" (with the contents of `/local/path/image.png')\r\n     *\r\n     *   // `file` is an instance of a File object that refers to your new file.\r\n     * });\r\n     *\r\n     *\r\n     * //-\r\n     * // It's not always that easy. You will likely want to specify the filename\r\n     * // used when your new file lands in your bucket.\r\n     * //\r\n     * // You may also want to set metadata or customize other options.\r\n     * //-\r\n     * const options = {\r\n     *   destination: 'new-image.png',\r\n     *   resumable: true,\r\n     *   validation: 'crc32c',\r\n     *   metadata: {\r\n     *     metadata: {\r\n     *       event: 'Fall trip to the zoo'\r\n     *     }\r\n     *   }\r\n     * };\r\n     *\r\n     * bucket.upload('local-image.png', options, function(err, file) {\r\n     *   // Your bucket now contains:\r\n     *   // - \"new-image.png\" (with the contents of `local-image.png')\r\n     *\r\n     *   // `file` is an instance of a File object that refers to your new file.\r\n     * });\r\n     *\r\n     * //-\r\n     * // You can also have a file gzip'd on the fly.\r\n     * //-\r\n     * bucket.upload('index.html', { gzip: true }, function(err, file) {\r\n     *   // Your bucket now contains:\r\n     *   // - \"index.html\" (automatically compressed with gzip)\r\n     *\r\n     *   // Downloading the file with `file.download` will automatically decode\r\n     * the\r\n     *   // file.\r\n     * });\r\n     *\r\n     * //-\r\n     * // You may also re-use a File object, {File}, that references\r\n     * // the file you wish to create or overwrite.\r\n     * //-\r\n     * const options = {\r\n     *   destination: bucket.file('existing-file.png'),\r\n     *   resumable: false\r\n     * };\r\n     *\r\n     * bucket.upload('local-img.png', options, function(err, newFile) {\r\n     *   // Your bucket now contains:\r\n     *   // - \"existing-file.png\" (with the contents of `local-img.png')\r\n     *\r\n     *   // Note:\r\n     *   // The `newFile` parameter is equal to `file`.\r\n     * });\r\n     *\r\n     * //-\r\n     * // To use\r\n     * // <a\r\n     * href=\"https://cloud.google.com/storage/docs/encryption#customer-supplied\">\r\n     * // Customer-supplied Encryption Keys</a>, provide the `encryptionKey`\r\n     * option.\r\n     * //-\r\n     * const crypto = require('crypto');\r\n     * const encryptionKey = crypto.randomBytes(32);\r\n     *\r\n     * bucket.upload('img.png', {\r\n     *   encryptionKey: encryptionKey\r\n     * }, function(err, newFile) {\r\n     *   // `img.png` was uploaded with your custom encryption key.\r\n     *\r\n     *   // `newFile` is already configured to use the encryption key when making\r\n     *   // operations on the remote object.\r\n     *\r\n     *   // However, to use your encryption key later, you must create a `File`\r\n     *   // instance with the `key` supplied:\r\n     *   const file = bucket.file('img.png', {\r\n     *     encryptionKey: encryptionKey\r\n     *   });\r\n     *\r\n     *   // Or with `file#setEncryptionKey`:\r\n     *   const file = bucket.file('img.png');\r\n     *   file.setEncryptionKey(encryptionKey);\r\n     * });\r\n     *\r\n     * //-\r\n     * // If the callback is omitted, we'll return a Promise.\r\n     * //-\r\n     * bucket.upload('local-image.png').then(function(data) {\r\n     *   const file = data[0];\r\n     * });\r\n     *\r\n     * To upload a file from a URL, use {@link File#createWriteStream}.\r\n     *\r\n     * @example <caption>include:samples/files.js</caption>\r\n     * region_tag:storage_upload_file\r\n     * Another example:\r\n     *\r\n     * @example <caption>include:samples/encryption.js</caption>\r\n     * region_tag:storage_upload_encrypted_file\r\n     * Example of uploading an encrypted file:\r\n     */\r\n    upload(pathString, optionsOrCallback, callback) {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        if (global['GCLOUD_SANDBOX_ENV']) {\r\n            return;\r\n        }\r\n        let options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\r\n        callback =\r\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\r\n        options = Object.assign({\r\n            metadata: {},\r\n        }, options);\r\n        let newFile;\r\n        if (options.destination instanceof file_1.File) {\r\n            newFile = options.destination;\r\n        }\r\n        else if (options.destination !== null &&\r\n            typeof options.destination === 'string') {\r\n            // Use the string as the name of the file.\r\n            newFile = this.file(options.destination, {\r\n                encryptionKey: options.encryptionKey,\r\n                kmsKeyName: options.kmsKeyName,\r\n            });\r\n        }\r\n        else {\r\n            // Resort to using the name of the incoming file.\r\n            const destination = path.basename(pathString);\r\n            newFile = this.file(destination, {\r\n                encryptionKey: options.encryptionKey,\r\n                kmsKeyName: options.kmsKeyName,\r\n            });\r\n        }\r\n        if (options.resumable !== null && typeof options.resumable === 'boolean') {\r\n            upload();\r\n        }\r\n        else {\r\n            // Determine if the upload should be resumable if it's over the threshold.\r\n            fs.stat(pathString, (err, fd) => {\r\n                if (err) {\r\n                    callback(err);\r\n                    return;\r\n                }\r\n                if (fd.size <= RESUMABLE_THRESHOLD) {\r\n                    // Only disable resumable uploads so createWriteStream still attempts them and falls back to simple upload.\r\n                    options.resumable = false;\r\n                }\r\n                upload();\r\n            });\r\n        }\r\n        function upload() {\r\n            const writable = newFile.createWriteStream(options);\r\n            if (options.onUploadProgress) {\r\n                writable.on('progress', options.onUploadProgress);\r\n            }\r\n            fs.createReadStream(pathString)\r\n                .on('error', callback)\r\n                .pipe(writable)\r\n                .on('error', callback)\r\n                .on('finish', () => {\r\n                callback(null, newFile, newFile.metadata);\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     *\r\n     * @typedef {object} MakeAllFilesPublicPrivateOptions\r\n     * @property {boolean} [force] Suppress errors until all files have been\r\n     *     processed.\r\n     * @property {boolean} [private] Make files private.\r\n     * @property {boolean} [public] Make files public.\r\n     * @property {string} [userProject] The ID of the project which will be\r\n     *     billed for the request.\r\n     */\r\n    /**\r\n     * @private\r\n     *\r\n     * @callback SetBucketMetadataCallback\r\n     * @param {?Error} err Request error, if any.\r\n     * @param {File[]} files Files that were updated.\r\n     */\r\n    /**\r\n     * @typedef {array} MakeAllFilesPublicPrivateResponse\r\n     * @property {File[]} 0 List of files affected.\r\n     */\r\n    /**\r\n     * Iterate over all of a bucket's files, calling `file.makePublic()` (public)\r\n     * or `file.makePrivate()` (private) on each.\r\n     *\r\n     * Operations are performed in parallel, up to 10 at once. The first error\r\n     * breaks the loop, and will execute the provided callback with it. Specify\r\n     * `{ force: true }` to suppress the errors.\r\n     *\r\n     * @private\r\n     *\r\n     * @param {MakeAllFilesPublicPrivateOptions} [options] Configuration options.\r\n     * @param {boolean} [options.force] Suppress errors until all files have been\r\n     *     processed.\r\n     * @param {boolean} [options.private] Make files private.\r\n     * @param {boolean} [options.public] Make files public.\r\n     * @param {string} [options.userProject] The ID of the project which will be\r\n     *     billed for the request.\r\n  \r\n     * @param {MakeAllFilesPublicPrivateCallback} callback Callback function.\r\n     *\r\n     * @return {Promise<MakeAllFilesPublicPrivateResponse>}\r\n     */\r\n    makeAllFilesPublicPrivate_(optionsOrCallback, callback) {\r\n        const MAX_PARALLEL_LIMIT = 10;\r\n        const errors = [];\r\n        const updatedFiles = [];\r\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\r\n        callback =\r\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\r\n        const processFile = async (file) => {\r\n            try {\r\n                await (options.public ? file.makePublic() : file.makePrivate(options));\r\n                updatedFiles.push(file);\r\n            }\r\n            catch (e) {\r\n                if (!options.force) {\r\n                    throw e;\r\n                }\r\n                errors.push(e);\r\n            }\r\n        };\r\n        this.getFiles(options)\r\n            .then(([files]) => {\r\n            const limit = pLimit(MAX_PARALLEL_LIMIT);\r\n            const promises = files.map(file => {\r\n                return limit(() => processFile(file));\r\n            });\r\n            return Promise.all(promises);\r\n        })\r\n            .then(() => callback(errors.length > 0 ? errors : null, updatedFiles), err => callback(err, updatedFiles));\r\n    }\r\n    getId() {\r\n        return this.id;\r\n    }\r\n}\r\nexports.Bucket = Bucket;\r\n/*! Developer Documentation\r\n *\r\n * These methods can be auto-paginated.\r\n */\r\npaginator_1.paginator.extend(Bucket, 'getFiles');\r\n/*! Developer Documentation\r\n *\r\n * All async methods (except for streams) will return a Promise in the event\r\n * that a callback is omitted.\r\n */\r\npromisify_1.promisifyAll(Bucket, {\r\n    exclude: ['request', 'file', 'notification'],\r\n});\r\n//# sourceMappingURL=bucket.js.map"]},"metadata":{},"sourceType":"script"}