{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst stream_1 = require(\"stream\"); // Copyright 2014 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\r\n * Populate the `{{projectId}}` placeholder.\r\n *\r\n * @throws {Error} If a projectId is required, but one is not provided.\r\n *\r\n * @param {*} - Any input value that may contain a placeholder. Arrays and objects will be looped.\r\n * @param {string} projectId - A projectId. If not provided\r\n * @return {*} - The original argument with all placeholders populated.\r\n */\n// eslint-disable-next-line  @typescript-eslint/no-explicit-any\n\n\nfunction replaceProjectIdToken(value, projectId) {\n  if (Array.isArray(value)) {\n    value = value.map(v => replaceProjectIdToken(v, projectId));\n  }\n\n  if (value !== null && typeof value === 'object' && !(value instanceof Buffer) && !(value instanceof stream_1.Stream) && typeof value.hasOwnProperty === 'function') {\n    for (const opt in value) {\n      // eslint-disable-next-line no-prototype-builtins\n      if (value.hasOwnProperty(opt)) {\n        value[opt] = replaceProjectIdToken(value[opt], projectId);\n      }\n    }\n  }\n\n  if (typeof value === 'string' && value.indexOf('{{projectId}}') > -1) {\n    if (!projectId || projectId === '{{projectId}}') {\n      throw new MissingProjectIdError();\n    }\n\n    value = value.replace(/{{projectId}}/g, projectId);\n  }\n\n  return value;\n}\n\nexports.replaceProjectIdToken = replaceProjectIdToken;\n/**\r\n * Custom error type for missing project ID errors.\r\n */\n\nclass MissingProjectIdError extends Error {\n  constructor() {\n    super(...arguments);\n    this.message = `Sorry, we cannot connect to Cloud Services without a project\n    ID. You may specify one with an environment variable named\n    \"GOOGLE_CLOUD_PROJECT\".`.replace(/ +/g, ' ');\n  }\n\n}\n\nexports.MissingProjectIdError = MissingProjectIdError;","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Backend/node_modules/@google-cloud/projectify/build/src/index.js"],"names":["Object","defineProperty","exports","value","stream_1","require","replaceProjectIdToken","projectId","Array","isArray","map","v","Buffer","Stream","hasOwnProperty","opt","indexOf","MissingProjectIdError","replace","Error","constructor","arguments","message"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,QAAD,CAAxB,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,qBAAT,CAA+BH,KAA/B,EAAsCI,SAAtC,EAAiD;AAC7C,MAAIC,KAAK,CAACC,OAAN,CAAcN,KAAd,CAAJ,EAA0B;AACtBA,IAAAA,KAAK,GAAGA,KAAK,CAACO,GAAN,CAAUC,CAAC,IAAIL,qBAAqB,CAACK,CAAD,EAAIJ,SAAJ,CAApC,CAAR;AACH;;AACD,MAAIJ,KAAK,KAAK,IAAV,IACA,OAAOA,KAAP,KAAiB,QADjB,IAEA,EAAEA,KAAK,YAAYS,MAAnB,CAFA,IAGA,EAAET,KAAK,YAAYC,QAAQ,CAACS,MAA5B,CAHA,IAIA,OAAOV,KAAK,CAACW,cAAb,KAAgC,UAJpC,EAIgD;AAC5C,SAAK,MAAMC,GAAX,IAAkBZ,KAAlB,EAAyB;AACrB;AACA,UAAIA,KAAK,CAACW,cAAN,CAAqBC,GAArB,CAAJ,EAA+B;AAC3BZ,QAAAA,KAAK,CAACY,GAAD,CAAL,GAAaT,qBAAqB,CAACH,KAAK,CAACY,GAAD,CAAN,EAAaR,SAAb,CAAlC;AACH;AACJ;AACJ;;AACD,MAAI,OAAOJ,KAAP,KAAiB,QAAjB,IACAA,KAAK,CAACa,OAAN,CAAc,eAAd,IAAiC,CAAC,CADtC,EACyC;AACrC,QAAI,CAACT,SAAD,IAAcA,SAAS,KAAK,eAAhC,EAAiD;AAC7C,YAAM,IAAIU,qBAAJ,EAAN;AACH;;AACDd,IAAAA,KAAK,GAAGA,KAAK,CAACe,OAAN,CAAc,gBAAd,EAAgCX,SAAhC,CAAR;AACH;;AACD,SAAOJ,KAAP;AACH;;AACDD,OAAO,CAACI,qBAAR,GAAgCA,qBAAhC;AACA;AACA;AACA;;AACA,MAAMW,qBAAN,SAAoCE,KAApC,CAA0C;AACtCC,EAAAA,WAAW,GAAG;AACV,UAAM,GAAGC,SAAT;AACA,SAAKC,OAAL,GAAgB;AACxB;AACA,4BAFuB,CAEMJ,OAFN,CAEc,KAFd,EAEqB,GAFrB,CAAf;AAGH;;AANqC;;AAQ1ChB,OAAO,CAACe,qBAAR,GAAgCA,qBAAhC","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst stream_1 = require(\"stream\");\r\n// Copyright 2014 Google LLC\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n/**\r\n * Populate the `{{projectId}}` placeholder.\r\n *\r\n * @throws {Error} If a projectId is required, but one is not provided.\r\n *\r\n * @param {*} - Any input value that may contain a placeholder. Arrays and objects will be looped.\r\n * @param {string} projectId - A projectId. If not provided\r\n * @return {*} - The original argument with all placeholders populated.\r\n */\r\n// eslint-disable-next-line  @typescript-eslint/no-explicit-any\r\nfunction replaceProjectIdToken(value, projectId) {\r\n    if (Array.isArray(value)) {\r\n        value = value.map(v => replaceProjectIdToken(v, projectId));\r\n    }\r\n    if (value !== null &&\r\n        typeof value === 'object' &&\r\n        !(value instanceof Buffer) &&\r\n        !(value instanceof stream_1.Stream) &&\r\n        typeof value.hasOwnProperty === 'function') {\r\n        for (const opt in value) {\r\n            // eslint-disable-next-line no-prototype-builtins\r\n            if (value.hasOwnProperty(opt)) {\r\n                value[opt] = replaceProjectIdToken(value[opt], projectId);\r\n            }\r\n        }\r\n    }\r\n    if (typeof value === 'string' &&\r\n        value.indexOf('{{projectId}}') > -1) {\r\n        if (!projectId || projectId === '{{projectId}}') {\r\n            throw new MissingProjectIdError();\r\n        }\r\n        value = value.replace(/{{projectId}}/g, projectId);\r\n    }\r\n    return value;\r\n}\r\nexports.replaceProjectIdToken = replaceProjectIdToken;\r\n/**\r\n * Custom error type for missing project ID errors.\r\n */\r\nclass MissingProjectIdError extends Error {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.message = `Sorry, we cannot connect to Cloud Services without a project\r\n    ID. You may specify one with an environment variable named\r\n    \"GOOGLE_CLOUD_PROJECT\".`.replace(/ +/g, ' ');\r\n    }\r\n}\r\nexports.MissingProjectIdError = MissingProjectIdError;\r\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}