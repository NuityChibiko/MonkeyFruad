{"ast":null,"code":"var redefine = require('../internals/redefine');\n\nvar DatePrototype = Date.prototype;\nvar INVALID_DATE = 'Invalid Date';\nvar TO_STRING = 'toString';\nvar nativeDateToString = DatePrototype[TO_STRING];\nvar getTime = DatePrototype.getTime; // `Date.prototype.toString` method\n// https://tc39.github.io/ecma262/#sec-date.prototype.tostring\n\nif (new Date(NaN) + '' != INVALID_DATE) {\n  redefine(DatePrototype, TO_STRING, function toString() {\n    var value = getTime.call(this); // eslint-disable-next-line no-self-compare\n\n    return value === value ? nativeDateToString.call(this) : INVALID_DATE;\n  });\n}","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Backend/node_modules/core-js/modules/es.date.to-string.js"],"names":["redefine","require","DatePrototype","Date","prototype","INVALID_DATE","TO_STRING","nativeDateToString","getTime","NaN","toString","value","call"],"mappings":"AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,uBAAD,CAAtB;;AAEA,IAAIC,aAAa,GAAGC,IAAI,CAACC,SAAzB;AACA,IAAIC,YAAY,GAAG,cAAnB;AACA,IAAIC,SAAS,GAAG,UAAhB;AACA,IAAIC,kBAAkB,GAAGL,aAAa,CAACI,SAAD,CAAtC;AACA,IAAIE,OAAO,GAAGN,aAAa,CAACM,OAA5B,C,CAEA;AACA;;AACA,IAAI,IAAIL,IAAJ,CAASM,GAAT,IAAgB,EAAhB,IAAsBJ,YAA1B,EAAwC;AACtCL,EAAAA,QAAQ,CAACE,aAAD,EAAgBI,SAAhB,EAA2B,SAASI,QAAT,GAAoB;AACrD,QAAIC,KAAK,GAAGH,OAAO,CAACI,IAAR,CAAa,IAAb,CAAZ,CADqD,CAErD;;AACA,WAAOD,KAAK,KAAKA,KAAV,GAAkBJ,kBAAkB,CAACK,IAAnB,CAAwB,IAAxB,CAAlB,GAAkDP,YAAzD;AACD,GAJO,CAAR;AAKD","sourcesContent":["var redefine = require('../internals/redefine');\r\n\r\nvar DatePrototype = Date.prototype;\r\nvar INVALID_DATE = 'Invalid Date';\r\nvar TO_STRING = 'toString';\r\nvar nativeDateToString = DatePrototype[TO_STRING];\r\nvar getTime = DatePrototype.getTime;\r\n\r\n// `Date.prototype.toString` method\r\n// https://tc39.github.io/ecma262/#sec-date.prototype.tostring\r\nif (new Date(NaN) + '' != INVALID_DATE) {\r\n  redefine(DatePrototype, TO_STRING, function toString() {\r\n    var value = getTime.call(this);\r\n    // eslint-disable-next-line no-self-compare\r\n    return value === value ? nativeDateToString.call(this) : INVALID_DATE;\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"script"}