{"ast":null,"code":"'use strict';\n\nvar isGlob = require('is-glob');\n\nvar pathPosixDirname = require('path').posix.dirname;\n\nvar isWin32 = require('os').platform() === 'win32';\nvar slash = '/';\nvar backslash = /\\\\/g;\nvar enclosure = /[\\{\\[].*[\\/]*.*[\\}\\]]$/;\nvar globby = /(^|[^\\\\])([\\{\\[]|\\([^\\)]+$)/;\nvar escaped = /\\\\([\\!\\*\\?\\|\\[\\]\\(\\)\\{\\}])/g;\n/**\r\n * @param {string} str\r\n * @param {Object} opts\r\n * @param {boolean} [opts.flipBackslashes=true]\r\n */\n\nmodule.exports = function globParent(str, opts) {\n  var options = Object.assign({\n    flipBackslashes: true\n  }, opts); // flip windows path separators\n\n  if (options.flipBackslashes && isWin32 && str.indexOf(slash) < 0) {\n    str = str.replace(backslash, slash);\n  } // special case for strings ending in enclosure containing path separator\n\n\n  if (enclosure.test(str)) {\n    str += slash;\n  } // preserves full path in case of trailing path separator\n\n\n  str += 'a'; // remove path parts that are globby\n\n  do {\n    str = pathPosixDirname(str);\n  } while (isGlob(str) || globby.test(str)); // remove escape chars and return result\n\n\n  return str.replace(escaped, '$1');\n};","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Frontend/node_modules/glob-parent/index.js"],"names":["isGlob","require","pathPosixDirname","posix","dirname","isWin32","platform","slash","backslash","enclosure","globby","escaped","module","exports","globParent","str","opts","options","Object","assign","flipBackslashes","indexOf","replace","test"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,SAAD,CAApB;;AACA,IAAIC,gBAAgB,GAAGD,OAAO,CAAC,MAAD,CAAP,CAAgBE,KAAhB,CAAsBC,OAA7C;;AACA,IAAIC,OAAO,GAAGJ,OAAO,CAAC,IAAD,CAAP,CAAcK,QAAd,OAA6B,OAA3C;AAEA,IAAIC,KAAK,GAAG,GAAZ;AACA,IAAIC,SAAS,GAAG,KAAhB;AACA,IAAIC,SAAS,GAAG,wBAAhB;AACA,IAAIC,MAAM,GAAG,6BAAb;AACA,IAAIC,OAAO,GAAG,6BAAd;AAEA;AACA;AACA;AACA;AACA;;AACAC,MAAM,CAACC,OAAP,GAAiB,SAASC,UAAT,CAAoBC,GAApB,EAAyBC,IAAzB,EAA+B;AAC9C,MAAIC,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc;AAAEC,IAAAA,eAAe,EAAE;AAAnB,GAAd,EAAyCJ,IAAzC,CAAd,CAD8C,CAG9C;;AACA,MAAIC,OAAO,CAACG,eAAR,IAA2Bf,OAA3B,IAAsCU,GAAG,CAACM,OAAJ,CAAYd,KAAZ,IAAqB,CAA/D,EAAkE;AAChEQ,IAAAA,GAAG,GAAGA,GAAG,CAACO,OAAJ,CAAYd,SAAZ,EAAuBD,KAAvB,CAAN;AACD,GAN6C,CAQ9C;;;AACA,MAAIE,SAAS,CAACc,IAAV,CAAeR,GAAf,CAAJ,EAAyB;AACvBA,IAAAA,GAAG,IAAIR,KAAP;AACD,GAX6C,CAa9C;;;AACAQ,EAAAA,GAAG,IAAI,GAAP,CAd8C,CAgB9C;;AACA,KAAG;AACDA,IAAAA,GAAG,GAAGb,gBAAgB,CAACa,GAAD,CAAtB;AACD,GAFD,QAESf,MAAM,CAACe,GAAD,CAAN,IAAeL,MAAM,CAACa,IAAP,CAAYR,GAAZ,CAFxB,EAjB8C,CAqB9C;;;AACA,SAAOA,GAAG,CAACO,OAAJ,CAAYX,OAAZ,EAAqB,IAArB,CAAP;AACD,CAvBD","sourcesContent":["'use strict';\r\n\r\nvar isGlob = require('is-glob');\r\nvar pathPosixDirname = require('path').posix.dirname;\r\nvar isWin32 = require('os').platform() === 'win32';\r\n\r\nvar slash = '/';\r\nvar backslash = /\\\\/g;\r\nvar enclosure = /[\\{\\[].*[\\/]*.*[\\}\\]]$/;\r\nvar globby = /(^|[^\\\\])([\\{\\[]|\\([^\\)]+$)/;\r\nvar escaped = /\\\\([\\!\\*\\?\\|\\[\\]\\(\\)\\{\\}])/g;\r\n\r\n/**\r\n * @param {string} str\r\n * @param {Object} opts\r\n * @param {boolean} [opts.flipBackslashes=true]\r\n */\r\nmodule.exports = function globParent(str, opts) {\r\n  var options = Object.assign({ flipBackslashes: true }, opts);\r\n\r\n  // flip windows path separators\r\n  if (options.flipBackslashes && isWin32 && str.indexOf(slash) < 0) {\r\n    str = str.replace(backslash, slash);\r\n  }\r\n\r\n  // special case for strings ending in enclosure containing path separator\r\n  if (enclosure.test(str)) {\r\n    str += slash;\r\n  }\r\n\r\n  // preserves full path in case of trailing path separator\r\n  str += 'a';\r\n\r\n  // remove path parts that are globby\r\n  do {\r\n    str = pathPosixDirname(str);\r\n  } while (isGlob(str) || globby.test(str));\r\n\r\n  // remove escape chars and return result\r\n  return str.replace(escaped, '$1');\r\n};\r\n"]},"metadata":{},"sourceType":"script"}