{"ast":null,"code":"/**\n * Utilities\n * @module utils\n * @borrows module:auth_token as generate_auth_token\n */\nconst crypto = require(\"crypto\");\n\nconst querystring = require(\"querystring\");\n\nconst urlParse = require(\"url\").parse; // Functions used internally\n\n\nconst compact = require(\"lodash/compact\");\n\nconst first = require(\"lodash/first\");\n\nconst isFunction = require(\"lodash/isFunction\");\n\nconst isPlainObject = require(\"lodash/isPlainObject\");\n\nconst last = require(\"lodash/last\");\n\nconst map = require(\"lodash/map\");\n\nconst take = require(\"lodash/take\");\n\nconst at = require(\"lodash/at\"); // Exposed by the module\n\n\nconst clone = require(\"lodash/clone\");\n\nconst extend = require(\"lodash/extend\");\n\nconst filter = require(\"lodash/filter\");\n\nconst includes = require(\"lodash/includes\");\n\nconst isArray = require(\"lodash/isArray\");\n\nconst isEmpty = require(\"lodash/isEmpty\");\n\nconst isNumber = require(\"lodash/isNumber\");\n\nconst isObject = require(\"lodash/isObject\");\n\nconst isString = require(\"lodash/isString\");\n\nconst isUndefined = require(\"lodash/isUndefined\");\n\nconst smart_escape = require(\"./encoding/smart_escape\");\n\nconst consumeOption = require('./parsing/consumeOption');\n\nconst toArray = require('./parsing/toArray');\n\nlet {\n  base64EncodeURL\n} = require('./encoding/base64EncodeURL');\n\nconst encodeDoubleArray = require('./encoding/encodeDoubleArray');\n\nconst config = require(\"../config\");\n\nconst generate_token = require(\"../auth_token\");\n\nconst utf8_encode = require('./utf8_encode');\n\nconst crc32 = require('./crc32');\n\nconst ensurePresenceOf = require('./ensurePresenceOf');\n\nconst ensureOption = require('./ensureOption').defaults(config());\n\nconst entries = require('./entries');\n\nconst isRemoteUrl = require('./isRemoteUrl');\n\nconst getSDKVersions = require('./encoding/sdkAnalytics/getSDKVersions');\n\nconst {\n  getAnalyticsOptions,\n  getSDKAnalyticsSignature\n} = require('cloudinary-core').Util;\n\nexports = module.exports;\nconst utils = module.exports;\n\ntry {\n  // eslint-disable-next-line global-require\n  utils.VERSION = require('../../package.json').version;\n} catch (error) {\n  utils.VERSION = '';\n}\n\nfunction generate_auth_token(options) {\n  let token_options = Object.assign({}, config().auth_token, options);\n  return generate_token(token_options);\n}\n\nexports.CF_SHARED_CDN = \"d3jpl91pxevbkh.cloudfront.net\";\nexports.OLD_AKAMAI_SHARED_CDN = \"cloudinary-a.akamaihd.net\";\nexports.AKAMAI_SHARED_CDN = \"res.cloudinary.com\";\nexports.SHARED_CDN = exports.AKAMAI_SHARED_CDN;\nexports.USER_AGENT = `CloudinaryNodeJS/${exports.VERSION}`; // Add platform information to the USER_AGENT header\n// This is intended for platform information and not individual applications!\n\nexports.userPlatform = \"\";\n\nfunction getUserAgent() {\n  return isEmpty(utils.userPlatform) ? `${utils.USER_AGENT}` : `${utils.userPlatform} ${utils.USER_AGENT}`;\n}\n\nconst {\n  DEFAULT_RESPONSIVE_WIDTH_TRANSFORMATION,\n  DEFAULT_POSTER_OPTIONS,\n  DEFAULT_VIDEO_SOURCE_TYPES,\n  CONDITIONAL_OPERATORS,\n  PREDEFINED_VARS,\n  LAYER_KEYWORD_PARAMS,\n  TRANSFORMATION_PARAMS,\n  SIMPLE_PARAMS,\n  UPLOAD_PREFIX\n} = require('./consts');\n\nfunction textStyle(layer) {\n  let keywords = [];\n  let style = \"\";\n  Object.keys(LAYER_KEYWORD_PARAMS).forEach(attr => {\n    let default_value = LAYER_KEYWORD_PARAMS[attr];\n    let attr_value = layer[attr] || default_value;\n\n    if (attr_value !== default_value) {\n      keywords.push(attr_value);\n    }\n  });\n  Object.keys(layer).forEach(attr => {\n    if (attr === \"letter_spacing\" || attr === \"line_spacing\") {\n      keywords.push(`${attr}_${layer[attr]}`);\n    }\n\n    if (attr === \"font_hinting\") {\n      keywords.push(`${attr.split(\"_\").pop()}_${layer[attr]}`);\n    }\n\n    if (attr === \"font_antialiasing\") {\n      keywords.push(`antialias_${layer[attr]}`);\n    }\n  });\n\n  if (layer.hasOwnProperty(\"font_size\" || \"font_family\") || !isEmpty(keywords)) {\n    if (!layer.font_size) throw `Must supply font_size for text in overlay/underlay`;\n    if (!layer.font_family) throw `Must supply font_family for text in overlay/underlay`;\n    keywords.unshift(layer.font_size);\n    keywords.unshift(layer.font_family);\n    style = compact(keywords).join(\"_\");\n  }\n\n  return style;\n}\n/**\n * Normalize an offset value\n * @param {String} expression a decimal value which may have a 'p' or '%' postfix. E.g. '35%', '0.4p'\n * @return {Object|String} a normalized String of the input value if possible otherwise the value itself\n */\n\n\nfunction normalize_expression(expression) {\n  if (!isString(expression) || expression.length === 0 || expression.match(/^!.+!$/)) {\n    return expression;\n  }\n\n  const operators = \"\\\\|\\\\||>=|<=|&&|!=|>|=|<|/|-|\\\\^|\\\\+|\\\\*\";\n  const operatorsPattern = \"((\" + operators + \")(?=[ _]))\";\n  const operatorsReplaceRE = new RegExp(operatorsPattern, \"g\");\n  expression = expression.replace(operatorsReplaceRE, match => CONDITIONAL_OPERATORS[match]);\n  const predefinedVarsPattern = \"(\" + Object.keys(PREDEFINED_VARS).join(\"|\") + \")\";\n  const predefinedVarsReplaceRE = new RegExp(predefinedVarsPattern, \"g\");\n  expression = expression.replace(predefinedVarsReplaceRE, (match, p1, offset) => expression[offset - 1] === '$' ? match : PREDEFINED_VARS[match]);\n  return expression.replace(/[ _]+/g, '_');\n}\n/**\n * Parse custom_function options\n * @private\n * @param {object|*} customFunction a custom function object containing function_type and source values\n * @return {string|*} custom_function transformation string\n */\n\n\nfunction process_custom_function(customFunction) {\n  if (!isObject(customFunction)) {\n    return customFunction;\n  }\n\n  if (customFunction.function_type === \"remote\") {\n    return [customFunction.function_type, base64EncodeURL(customFunction.source)].join(\":\");\n  }\n\n  return [customFunction.function_type, customFunction.source].join(\":\");\n}\n/**\n * Parse custom_pre_function options\n * @private\n * @param {object|*} customPreFunction a custom function object containing function_type and source values\n * @return {string|*} custom_pre_function transformation string\n */\n\n\nfunction process_custom_pre_function(customPreFunction) {\n  let result = process_custom_function(customPreFunction);\n  return utils.isString(result) ? `pre:${result}` : null;\n}\n/**\n * Parse \"if\" parameter\n * Translates the condition if provided.\n * @private\n * @return {string} \"if_\" + ifValue\n */\n\n\nfunction process_if(ifValue) {\n  return ifValue ? \"if_\" + normalize_expression(ifValue) : ifValue;\n}\n/**\n * Parse layer options\n * @private\n * @param {object|*} layer The layer to parse.\n * @return {string} layer transformation string\n */\n\n\nfunction process_layer(layer) {\n  let result = '';\n\n  if (isPlainObject(layer)) {\n    if (layer.resource_type === \"fetch\" || layer.url != null) {\n      result = `fetch:${base64EncodeURL(layer.url)}`;\n    } else {\n      let public_id = layer.public_id;\n      let format = layer.format;\n      let resource_type = layer.resource_type || \"image\";\n      let type = layer.type || \"upload\";\n      let text = layer.text;\n      let style = null;\n      let components = [];\n      const noPublicId = isEmpty(public_id);\n\n      if (!noPublicId) {\n        public_id = public_id.replace(new RegExp(\"/\", 'g'), \":\");\n\n        if (format != null) {\n          public_id = `${public_id}.${format}`;\n        }\n      }\n\n      if (isEmpty(text) && resource_type !== \"text\") {\n        if (noPublicId) {\n          throw \"Must supply public_id for resource_type layer_parameter\";\n        }\n\n        if (resource_type === \"subtitles\") {\n          style = textStyle(layer);\n        }\n      } else {\n        resource_type = \"text\";\n        type = null; // type is ignored for text layers\n\n        style = textStyle(layer);\n\n        if (!isEmpty(text)) {\n          const noStyle = isEmpty(style);\n\n          if (!(noPublicId || noStyle) || noPublicId && noStyle) {\n            throw \"Must supply either style parameters or a public_id when providing text parameter in a text overlay/underlay\";\n          }\n\n          let re = /\\$\\([a-zA-Z]\\w*\\)/g;\n          let start = 0;\n          let textSource = smart_escape(decodeURIComponent(text), /[,\\/]/g);\n          text = \"\";\n\n          for (let res = re.exec(textSource); res; res = re.exec(textSource)) {\n            text += smart_escape(textSource.slice(start, res.index));\n            text += res[0];\n            start = res.index + res[0].length;\n          }\n\n          text += encodeURIComponent(textSource.slice(start));\n        }\n      }\n\n      if (resource_type !== \"image\") {\n        components.push(resource_type);\n      }\n\n      if (type !== \"upload\") {\n        components.push(type);\n      }\n\n      components.push(style);\n      components.push(public_id);\n      components.push(text);\n      result = compact(components).join(\":\");\n    }\n  } else if (/^fetch:.+/.test(layer)) {\n    result = `fetch:${base64EncodeURL(layer.substr(6))}`;\n  } else {\n    result = layer;\n  }\n\n  return result;\n}\n/**\n * Parse radius options\n * @private\n * @param {Array<string|number>|string|number} radius The radius to parse\n * @return {string} radius transformation string\n */\n\n\nfunction process_radius(radius) {\n  if (!radius) {\n    return radius;\n  }\n\n  if (!isArray(radius)) {\n    radius = [radius];\n  }\n\n  if (radius.length === 0 || radius.length > 4) {\n    throw new Error(\"Radius array should contain between 1 and 4 values\");\n  }\n\n  if (radius.findIndex(x => x === null) >= 0) {\n    throw new Error(\"Corner: Cannot be null\");\n  }\n\n  return radius.map(normalize_expression).join(':');\n}\n\nfunction build_upload_params(options) {\n  let params = {\n    access_mode: options.access_mode,\n    allowed_formats: options.allowed_formats && toArray(options.allowed_formats).join(\",\"),\n    async: utils.as_safe_bool(options.async),\n    backup: utils.as_safe_bool(options.backup),\n    callback: options.callback,\n    cinemagraph_analysis: utils.as_safe_bool(options.cinemagraph_analysis),\n    colors: utils.as_safe_bool(options.colors),\n    discard_original_filename: utils.as_safe_bool(options.discard_original_filename),\n    eager: utils.build_eager(options.eager),\n    eager_async: utils.as_safe_bool(options.eager_async),\n    eager_notification_url: options.eager_notification_url,\n    eval: options.eval,\n    exif: utils.as_safe_bool(options.exif),\n    faces: utils.as_safe_bool(options.faces),\n    folder: options.folder,\n    format: options.format,\n    image_metadata: utils.as_safe_bool(options.image_metadata),\n    invalidate: utils.as_safe_bool(options.invalidate),\n    moderation: options.moderation,\n    notification_url: options.notification_url,\n    overwrite: utils.as_safe_bool(options.overwrite),\n    phash: utils.as_safe_bool(options.phash),\n    proxy: options.proxy,\n    public_id: options.public_id,\n    quality_analysis: utils.as_safe_bool(options.quality_analysis),\n    responsive_breakpoints: utils.generate_responsive_breakpoints_string(options.responsive_breakpoints),\n    return_delete_token: utils.as_safe_bool(options.return_delete_token),\n    timestamp: options.timestamp || exports.timestamp(),\n    transformation: utils.generate_transformation_string(clone(options)),\n    type: options.type,\n    unique_filename: utils.as_safe_bool(options.unique_filename),\n    upload_preset: options.upload_preset,\n    use_filename: utils.as_safe_bool(options.use_filename),\n    quality_override: options.quality_override\n  };\n  return utils.updateable_resource_params(options, params);\n}\n\nfunction encode_key_value(arg) {\n  if (!isObject(arg)) {\n    return arg;\n  }\n\n  return entries(arg).map(([k, v]) => `${k}=${v}`).join('|');\n}\n/**\n * @description Escape = and | with two backslashes \\\\\n * @param {string|number} value\n * @return {string}\n */\n\n\nfunction escapeMetadataValue(value) {\n  return value.toString().replace(/([=|])/g, '\\\\$&');\n}\n/**\n *\n * @description Encode metadata fields based on incoming value.\n *              If array, escape as color_id=[\\\"green\\\",\\\"red\\\"]\n *              If string/number, escape as in_stock_id=50\n *\n *              Joins resulting values with a pipe:\n *              in_stock_id=50|color_id=[\\\"green\\\",\\\"red\\\"]\n *\n *              = and | and escaped by default (this can't be turned off)\n *\n * @param metadataObj\n * @return {string}\n */\n\n\nfunction encode_context(metadataObj) {\n  if (!isObject(metadataObj)) {\n    return metadataObj;\n  }\n\n  return entries(metadataObj).map(([key, value]) => {\n    // if string, simply parse the value and move on\n    if (isString(value)) {\n      return `${key}=${escapeMetadataValue(value)}`; // If array, parse each item individually\n    } else if (isArray(value)) {\n      let values = value.map(innerVal => {\n        return `\\\"${escapeMetadataValue(innerVal)}\\\"`;\n      }).join(',');\n      return `${key}=[${values}]`; // if unknown, return the value as string\n    } else {\n      return value.toString();\n    }\n  }).join('|');\n}\n\nfunction build_eager(transformations) {\n  return toArray(transformations).map(transformation => {\n    const transformationString = utils.generate_transformation_string(clone(transformation));\n    const format = transformation.format;\n    return format == null ? transformationString : `${transformationString}/${format}`;\n  }).join('|');\n}\n/**\n * Build the custom headers for the request\n * @private\n * @param headers\n * @return {Array<string>|object|string} An object of name and value,\n *         an array of header strings, or a string of headers\n */\n\n\nfunction build_custom_headers(headers) {\n  switch (true) {\n    case headers == null:\n      return void 0;\n\n    case isArray(headers):\n      return headers.join(\"\\n\");\n\n    case isObject(headers):\n      return entries(headers).map(([k, v]) => `${k}:${v}`).join(\"\\n\");\n\n    default:\n      return headers;\n  }\n}\n\nfunction generate_transformation_string(options) {\n  if (utils.isString(options)) {\n    return options;\n  }\n\n  if (isArray(options)) {\n    return options.map(t => utils.generate_transformation_string(clone(t))).filter(utils.present).join('/');\n  }\n\n  let responsive_width = consumeOption(options, \"responsive_width\", config().responsive_width);\n  let width = options.width;\n  let height = options.height;\n  let size = consumeOption(options, \"size\");\n\n  if (size) {\n    [width, height] = size.split(\"x\");\n    [options.width, options.height] = [width, height];\n  }\n\n  let has_layer = options.overlay || options.underlay;\n  let crop = consumeOption(options, \"crop\");\n  let angle = toArray(consumeOption(options, \"angle\")).join(\".\");\n  let no_html_sizes = has_layer || utils.present(angle) || crop === \"fit\" || crop === \"limit\" || responsive_width;\n\n  if (width && (width.toString().indexOf(\"auto\") === 0 || no_html_sizes || parseFloat(width) < 1)) {\n    delete options.width;\n  }\n\n  if (height && (no_html_sizes || parseFloat(height) < 1)) {\n    delete options.height;\n  }\n\n  let background = consumeOption(options, \"background\");\n  background = background && background.replace(/^#/, \"rgb:\");\n  let color = consumeOption(options, \"color\");\n  color = color && color.replace(/^#/, \"rgb:\");\n  let base_transformations = toArray(consumeOption(options, \"transformation\", []));\n  let named_transformation = [];\n\n  if (base_transformations.some(isObject)) {\n    base_transformations = base_transformations.map(tr => utils.generate_transformation_string(isObject(tr) ? clone(tr) : {\n      transformation: tr\n    }));\n  } else {\n    named_transformation = base_transformations.join(\".\");\n    base_transformations = [];\n  }\n\n  let effect = consumeOption(options, \"effect\");\n\n  if (isArray(effect)) {\n    effect = effect.join(\":\");\n  } else if (isObject(effect)) {\n    effect = entries(effect).map(([key, value]) => `${key}:${value}`);\n  }\n\n  let border = consumeOption(options, \"border\");\n\n  if (isObject(border)) {\n    border = `${border.width != null ? border.width : 2}px_solid_${(border.color != null ? border.color : \"black\").replace(/^#/, 'rgb:')}`;\n  } else if (/^\\d+$/.exec(border)) {\n    // fallback to html border attributes\n    options.border = border;\n    border = void 0;\n  }\n\n  let flags = toArray(consumeOption(options, \"flags\")).join(\".\");\n  let dpr = consumeOption(options, \"dpr\", config().dpr);\n\n  if (options.offset != null) {\n    [options.start_offset, options.end_offset] = split_range(consumeOption(options, \"offset\"));\n  }\n\n  let overlay = process_layer(consumeOption(options, \"overlay\"));\n  let radius = process_radius(consumeOption(options, \"radius\"));\n  let underlay = process_layer(consumeOption(options, \"underlay\"));\n  let ifValue = process_if(consumeOption(options, \"if\"));\n  let custom_function = process_custom_function(consumeOption(options, \"custom_function\"));\n  let custom_pre_function = process_custom_pre_function(consumeOption(options, \"custom_pre_function\"));\n  let fps = consumeOption(options, 'fps');\n\n  if (isArray(fps)) {\n    fps = fps.join('-');\n  }\n\n  let params = {\n    a: normalize_expression(angle),\n    ar: normalize_expression(consumeOption(options, \"aspect_ratio\")),\n    b: background,\n    bo: border,\n    c: crop,\n    co: color,\n    dpr: normalize_expression(dpr),\n    e: normalize_expression(effect),\n    fl: flags,\n    fn: custom_function || custom_pre_function,\n    fps: fps,\n    h: normalize_expression(height),\n    ki: normalize_expression(consumeOption(options, \"keyframe_interval\")),\n    l: overlay,\n    o: normalize_expression(consumeOption(options, \"opacity\")),\n    q: normalize_expression(consumeOption(options, \"quality\")),\n    r: radius,\n    t: named_transformation,\n    u: underlay,\n    w: normalize_expression(width),\n    x: normalize_expression(consumeOption(options, \"x\")),\n    y: normalize_expression(consumeOption(options, \"y\")),\n    z: normalize_expression(consumeOption(options, \"zoom\"))\n  };\n  SIMPLE_PARAMS.forEach(([name, short]) => {\n    let value = consumeOption(options, name);\n\n    if (value !== undefined) {\n      params[short] = value;\n    }\n  });\n\n  if (params.vc != null) {\n    params.vc = process_video_params(params.vc);\n  }\n\n  [\"so\", \"eo\", \"du\"].forEach(short => {\n    if (params[short] !== undefined) {\n      params[short] = norm_range_value(params[short]);\n    }\n  });\n  let variablesParam = consumeOption(options, \"variables\", []);\n  let variables = entries(options).filter(([key, value]) => key.startsWith('$')).map(([key, value]) => {\n    delete options[key];\n    return `${key}_${normalize_expression(value)}`;\n  }).sort().concat(variablesParam.map(([name, value]) => `${name}_${normalize_expression(value)}`)).join(',');\n  let transformations = entries(params).filter(([key, value]) => utils.present(value)).map(([key, value]) => key + '_' + value).sort().join(',');\n  let raw_transformation = consumeOption(options, 'raw_transformation');\n  transformations = compact([ifValue, variables, transformations, raw_transformation]).join(\",\");\n  base_transformations.push(transformations);\n  transformations = base_transformations;\n\n  if (responsive_width) {\n    let responsive_width_transformation = config().responsive_width_transformation || DEFAULT_RESPONSIVE_WIDTH_TRANSFORMATION;\n    transformations.push(utils.generate_transformation_string(clone(responsive_width_transformation)));\n  }\n\n  if (String(width).startsWith(\"auto\") || responsive_width) {\n    options.responsive = true;\n  }\n\n  if (dpr === \"auto\") {\n    options.hidpi = true;\n  }\n\n  return filter(transformations, utils.present).join(\"/\");\n}\n\nfunction updateable_resource_params(options, params = {}) {\n  if (options.access_control != null) {\n    params.access_control = utils.jsonArrayParam(options.access_control);\n  }\n\n  if (options.auto_tagging != null) {\n    params.auto_tagging = options.auto_tagging;\n  }\n\n  if (options.background_removal != null) {\n    params.background_removal = options.background_removal;\n  }\n\n  if (options.categorization != null) {\n    params.categorization = options.categorization;\n  }\n\n  if (options.context != null) {\n    params.context = utils.encode_context(options.context);\n  }\n\n  if (options.metadata != null) {\n    params.metadata = utils.encode_context(options.metadata);\n  }\n\n  if (options.custom_coordinates != null) {\n    params.custom_coordinates = encodeDoubleArray(options.custom_coordinates);\n  }\n\n  if (options.detection != null) {\n    params.detection = options.detection;\n  }\n\n  if (options.face_coordinates != null) {\n    params.face_coordinates = encodeDoubleArray(options.face_coordinates);\n  }\n\n  if (options.headers != null) {\n    params.headers = utils.build_custom_headers(options.headers);\n  }\n\n  if (options.notification_url != null) {\n    params.notification_url = options.notification_url;\n  }\n\n  if (options.ocr != null) {\n    params.ocr = options.ocr;\n  }\n\n  if (options.raw_convert != null) {\n    params.raw_convert = options.raw_convert;\n  }\n\n  if (options.similarity_search != null) {\n    params.similarity_search = options.similarity_search;\n  }\n\n  if (options.tags != null) {\n    params.tags = toArray(options.tags).join(\",\");\n  }\n\n  if (options.quality_override != null) {\n    params.quality_override = options.quality_override;\n  }\n\n  return params;\n}\n/**\n * A list of keys used by the url() function.\n * @private\n */\n\n\nconst URL_KEYS = ['api_secret', 'auth_token', 'cdn_subdomain', 'cloud_name', 'cname', 'format', 'long_url_signature', 'private_cdn', 'resource_type', 'secure', 'secure_cdn_subdomain', 'secure_distribution', 'shorten', 'sign_url', 'ssl_detected', 'type', 'url_suffix', 'use_root_path', 'version'];\n/**\n * Create a new object with only URL parameters\n * @param {object} options The source object\n * @return {Object} An object containing only URL parameters\n */\n\nfunction extractUrlParams(options) {\n  return pickOnlyExistingValues(options, ...URL_KEYS);\n}\n/**\n * Create a new object with only transformation parameters\n * @param {object} options The source object\n * @return {Object} An object containing only transformation parameters\n */\n\n\nfunction extractTransformationParams(options) {\n  return pickOnlyExistingValues(options, ...TRANSFORMATION_PARAMS);\n}\n/**\n * Handle the format parameter for fetch urls\n * @private\n * @param options url and transformation options. This argument may be changed by the function!\n */\n\n\nfunction patchFetchFormat(options = {}) {\n  if (options.type === \"fetch\") {\n    if (options.fetch_format == null) {\n      options.fetch_format = consumeOption(options, \"format\");\n    }\n  }\n}\n\nfunction url(public_id, options = {}) {\n  let signature, source_to_sign;\n  utils.patchFetchFormat(options);\n  let type = consumeOption(options, \"type\", null);\n  let transformation = utils.generate_transformation_string(options);\n  let resource_type = consumeOption(options, \"resource_type\", \"image\");\n  let version = consumeOption(options, \"version\");\n  let force_version = consumeOption(options, \"force_version\", config().force_version);\n\n  if (force_version == null) {\n    force_version = true;\n  }\n\n  let long_url_signature = !!consumeOption(options, \"long_url_signature\", config().long_url_signature);\n  let format = consumeOption(options, \"format\");\n  let cloud_name = consumeOption(options, \"cloud_name\", config().cloud_name);\n\n  if (!cloud_name) {\n    throw \"Unknown cloud_name\";\n  }\n\n  let private_cdn = consumeOption(options, \"private_cdn\", config().private_cdn);\n  let secure_distribution = consumeOption(options, \"secure_distribution\", config().secure_distribution);\n  let secure = consumeOption(options, \"secure\", null);\n  let ssl_detected = consumeOption(options, \"ssl_detected\", config().ssl_detected);\n\n  if (secure === null) {\n    secure = ssl_detected || config().secure;\n  }\n\n  let cdn_subdomain = consumeOption(options, \"cdn_subdomain\", config().cdn_subdomain);\n  let secure_cdn_subdomain = consumeOption(options, \"secure_cdn_subdomain\", config().secure_cdn_subdomain);\n  let cname = consumeOption(options, \"cname\", config().cname);\n  let shorten = consumeOption(options, \"shorten\", config().shorten);\n  let sign_url = consumeOption(options, \"sign_url\", config().sign_url);\n  let api_secret = consumeOption(options, \"api_secret\", config().api_secret);\n  let url_suffix = consumeOption(options, \"url_suffix\");\n  let use_root_path = consumeOption(options, \"use_root_path\", config().use_root_path);\n  let auth_token = consumeOption(options, \"auth_token\");\n\n  if (auth_token !== false) {\n    auth_token = exports.merge(config().auth_token, auth_token);\n  }\n\n  let preloaded = /^(image|raw)\\/([a-z0-9_]+)\\/v(\\d+)\\/([^#]+)$/.exec(public_id);\n\n  if (preloaded) {\n    resource_type = preloaded[1];\n    type = preloaded[2];\n    version = preloaded[3];\n    public_id = preloaded[4];\n  }\n\n  let original_source = public_id;\n\n  if (public_id == null) {\n    return original_source;\n  }\n\n  public_id = public_id.toString();\n\n  if (type === null && public_id.match(/^https?:\\//i)) {\n    return original_source;\n  }\n\n  [resource_type, type] = finalize_resource_type(resource_type, type, url_suffix, use_root_path, shorten);\n  [public_id, source_to_sign] = finalize_source(public_id, format, url_suffix);\n\n  if (version == null && force_version && source_to_sign.indexOf(\"/\") >= 0 && !source_to_sign.match(/^v[0-9]+/) && !source_to_sign.match(/^https?:\\//)) {\n    version = 1;\n  }\n\n  if (version != null) {\n    version = `v${version}`;\n  } else {\n    version = null;\n  }\n\n  transformation = transformation.replace(/([^:])\\/\\//g, '$1/');\n\n  if (sign_url && isEmpty(auth_token)) {\n    let to_sign = [transformation, source_to_sign].filter(function (part) {\n      return part != null && part !== '';\n    }).join('/');\n\n    try {\n      for (let i = 0; to_sign !== decodeURIComponent(to_sign) && i < 10; i++) {\n        to_sign = decodeURIComponent(to_sign);\n      } // eslint-disable-next-line no-empty\n\n    } catch (error) {}\n\n    let shasum = crypto.createHash(long_url_signature ? 'sha256' : 'sha1');\n    shasum.update(utf8_encode(to_sign + api_secret), 'binary');\n    signature = shasum.digest('base64').replace(/\\//g, '_').replace(/\\+/g, '-').substring(0, long_url_signature ? 32 : 8);\n    signature = `s--${signature}--`;\n  }\n\n  let prefix = unsigned_url_prefix(public_id, cloud_name, private_cdn, cdn_subdomain, secure_cdn_subdomain, cname, secure, secure_distribution);\n  let resultUrl = [prefix, resource_type, type, signature, transformation, version, public_id].filter(function (part) {\n    return part != null && part !== '';\n  }).join('/').replace(' ', '%20');\n\n  if (sign_url && !isEmpty(auth_token)) {\n    auth_token.url = urlParse(resultUrl).path;\n    let token = generate_token(auth_token);\n    resultUrl += `?${token}`;\n  }\n\n  let urlAnalytics = ensureOption(options, 'urlAnalytics', false);\n\n  if (urlAnalytics === true) {\n    let sdkVersions = getSDKVersions();\n    let analyticsOptions = getAnalyticsOptions(Object.assign({}, options, sdkVersions));\n    let sdkAnalyticsSignature = getSDKAnalyticsSignature(analyticsOptions); // url might already have a '?' query param\n\n    let appender = '?';\n\n    if (resultUrl.indexOf('?') >= 0) {\n      appender = '&';\n    }\n\n    resultUrl = `${resultUrl}${appender}_s=${sdkAnalyticsSignature}`;\n  }\n\n  return resultUrl;\n}\n\nfunction video_url(public_id, options) {\n  options = extend({\n    resource_type: 'video'\n  }, options);\n  return utils.url(public_id, options);\n}\n\nfunction finalize_source(source, format, url_suffix) {\n  let source_to_sign;\n  source = source.replace(/([^:])\\/\\//g, '$1/');\n\n  if (source.match(/^https?:\\//i)) {\n    source = smart_escape(source);\n    source_to_sign = source;\n  } else {\n    source = encodeURIComponent(decodeURIComponent(source)).replace(/%3A/g, \":\").replace(/%2F/g, \"/\");\n    source_to_sign = source;\n\n    if (url_suffix) {\n      if (url_suffix.match(/[\\.\\/]/)) {\n        throw new Error('url_suffix should not include . or /');\n      }\n\n      source = source + '/' + url_suffix;\n    }\n\n    if (format != null) {\n      source = source + '.' + format;\n      source_to_sign = source_to_sign + '.' + format;\n    }\n  }\n\n  return [source, source_to_sign];\n}\n\nfunction video_thumbnail_url(public_id, options) {\n  options = extend({}, DEFAULT_POSTER_OPTIONS, options);\n  return utils.url(public_id, options);\n}\n\nfunction finalize_resource_type(resource_type, type, url_suffix, use_root_path, shorten) {\n  if (type == null) {\n    type = 'upload';\n  }\n\n  if (url_suffix != null) {\n    if (resource_type === 'image' && type === 'upload') {\n      resource_type = \"images\";\n      type = null;\n    } else if (resource_type === 'image' && type === 'private') {\n      resource_type = 'private_images';\n      type = null;\n    } else if (resource_type === 'image' && type === 'authenticated') {\n      resource_type = 'authenticated_images';\n      type = null;\n    } else if (resource_type === 'raw' && type === 'upload') {\n      resource_type = 'files';\n      type = null;\n    } else if (resource_type === 'video' && type === 'upload') {\n      resource_type = 'videos';\n      type = null;\n    } else {\n      throw new Error(\"URL Suffix only supported for image/upload, image/private, image/authenticated, video/upload and raw/upload\");\n    }\n  }\n\n  if (use_root_path) {\n    if (resource_type === 'image' && type === 'upload' || resource_type === 'images' && type == null) {\n      resource_type = null;\n      type = null;\n    } else {\n      throw new Error(\"Root path only supported for image/upload\");\n    }\n  }\n\n  if (shorten && resource_type === 'image' && type === 'upload') {\n    resource_type = 'iu';\n    type = null;\n  }\n\n  return [resource_type, type];\n} // cdn_subdomain and secure_cdn_subdomain\n// 1) Customers in shared distribution (e.g. res.cloudinary.com)\n//    if cdn_domain is true uses res-[1-5].cloudinary.com for both http and https.\n//    Setting secure_cdn_subdomain to false disables this for https.\n// 2) Customers with private cdn\n//    if cdn_domain is true uses cloudname-res-[1-5].cloudinary.com for http\n//    if secure_cdn_domain is true uses cloudname-res-[1-5].cloudinary.com for https\n//      (please contact support if you require this)\n// 3) Customers with cname\n//    if cdn_domain is true uses a[1-5].cname for http.\n//    For https, uses the same naming scheme as 1 for shared distribution and as 2 for private distribution.\n\n\nfunction unsigned_url_prefix(source, cloud_name, private_cdn, cdn_subdomain, secure_cdn_subdomain, cname, secure, secure_distribution) {\n  let prefix;\n\n  if (cloud_name.indexOf(\"/\") === 0) {\n    return '/res' + cloud_name;\n  }\n\n  let shared_domain = !private_cdn;\n\n  if (secure) {\n    if (secure_distribution == null || secure_distribution === exports.OLD_AKAMAI_SHARED_CDN) {\n      secure_distribution = private_cdn ? cloud_name + \"-res.cloudinary.com\" : exports.SHARED_CDN;\n    }\n\n    if (shared_domain == null) {\n      shared_domain = secure_distribution === exports.SHARED_CDN;\n    }\n\n    if (secure_cdn_subdomain == null && shared_domain) {\n      secure_cdn_subdomain = cdn_subdomain;\n    }\n\n    if (secure_cdn_subdomain) {\n      secure_distribution = secure_distribution.replace('res.cloudinary.com', 'res-' + (crc32(source) % 5 + 1 + '.cloudinary.com'));\n    }\n\n    prefix = 'https://' + secure_distribution;\n  } else if (cname) {\n    let subdomain = cdn_subdomain ? 'a' + (crc32(source) % 5 + 1) + '.' : '';\n    prefix = 'http://' + subdomain + cname;\n  } else {\n    let cdn_part = private_cdn ? cloud_name + '-' : '';\n    let subdomain_part = cdn_subdomain ? '-' + (crc32(source) % 5 + 1) : '';\n    let host = [cdn_part, 'res', subdomain_part, '.cloudinary.com'].join('');\n    prefix = 'http://' + host;\n  }\n\n  if (shared_domain) {\n    prefix += '/' + cloud_name;\n  }\n\n  return prefix;\n}\n\nfunction base_api_url(path = [], options = {}) {\n  let cloudinary = ensureOption(options, \"upload_prefix\", UPLOAD_PREFIX);\n  let cloud_name = ensureOption(options, \"cloud_name\");\n  return [cloudinary, \"v1_1\", cloud_name].concat(path).join(\"/\");\n}\n\nfunction api_url(action = 'upload', options = {}) {\n  let resource_type = options.resource_type || \"image\";\n  return base_api_url([resource_type, action], options);\n}\n\nfunction random_public_id() {\n  return crypto.randomBytes(12).toString('base64').replace(/[^a-z0-9]/g, \"\");\n}\n\nfunction signed_preloaded_image(result) {\n  return `${result.resource_type}/upload/v${result.version}/${filter([result.public_id, result.format], utils.present).join(\".\")}#${result.signature}`;\n}\n\nfunction api_sign_request(params_to_sign, api_secret) {\n  let to_sign = entries(params_to_sign).filter(([k, v]) => utils.present(v)).map(([k, v]) => `${k}=${toArray(v).join(\",\")}`).sort().join(\"&\");\n  let shasum = crypto.createHash('sha1');\n  shasum.update(utf8_encode(to_sign + api_secret), 'binary');\n  return shasum.digest('hex');\n}\n\nfunction clear_blank(hash) {\n  let filtered_hash = {};\n  entries(hash).filter(([k, v]) => utils.present(v)).forEach(([k, v]) => {\n    filtered_hash[k] = v;\n  });\n  return filtered_hash;\n}\n\nfunction merge(hash1, hash2) {\n  return { ...hash1,\n    ...hash2\n  };\n}\n\nfunction sign_request(params, options = {}) {\n  let apiKey = ensureOption(options, 'api_key');\n  let apiSecret = ensureOption(options, 'api_secret');\n  params = exports.clear_blank(params);\n  params.signature = exports.api_sign_request(params, apiSecret);\n  params.api_key = apiKey;\n  return params;\n}\n\nfunction webhook_signature(data, timestamp, options = {}) {\n  ensurePresenceOf({\n    data,\n    timestamp\n  });\n  let api_secret = ensureOption(options, 'api_secret');\n  let shasum = crypto.createHash('sha1');\n  shasum.update(data + timestamp + api_secret, 'binary');\n  return shasum.digest('hex');\n}\n/**\n * Verifies the authenticity of a notification signature\n *\n * @param {string} body JSON of the request's body\n * @param {number} timestamp Unix timestamp. Can be retrieved from the X-Cld-Timestamp header\n * @param {string} signature Actual signature. Can be retrieved from the X-Cld-Signature header\n * @param {number} [valid_for=7200] The desired time in seconds for considering the request valid\n *\n * @return {boolean}\n */\n\n\nfunction verifyNotificationSignature(body, timestamp, signature, valid_for = 7200) {\n  // verify that signature is valid for the given timestamp\n  if (timestamp < Date.now() - valid_for) {\n    return false;\n  }\n\n  const payload_hash = utils.webhook_signature(body, timestamp, {\n    api_secret: config().api_secret\n  });\n  return signature === payload_hash;\n}\n\nfunction process_request_params(params, options) {\n  if (options.unsigned != null && options.unsigned) {\n    params = exports.clear_blank(params);\n    delete params.timestamp;\n  } else if (options.signature) {\n    params = exports.clear_blank(options);\n  } else {\n    params = exports.sign_request(params, options);\n  }\n\n  return params;\n}\n\nfunction private_download_url(public_id, format, options = {}) {\n  let params = exports.sign_request({\n    timestamp: options.timestamp || exports.timestamp(),\n    public_id: public_id,\n    format: format,\n    type: options.type,\n    attachment: options.attachment,\n    expires_at: options.expires_at\n  }, options);\n  return exports.api_url(\"download\", options) + \"?\" + querystring.stringify(params);\n}\n/**\n * Utility method that uses the deprecated ZIP download API.\n * @deprecated Replaced by {download_zip_url} that uses the more advanced and robust archive generation and download API\n */\n\n\nfunction zip_download_url(tag, options = {}) {\n  let params = exports.sign_request({\n    timestamp: options.timestamp || exports.timestamp(),\n    tag: tag,\n    transformation: utils.generate_transformation_string(options)\n  }, options);\n  return exports.api_url(\"download_tag.zip\", options) + \"?\" + hashToQuery(params);\n}\n/**\n * The returned url should allow downloading the backedup asset based on the\n * version and asset id\n * asset and version id are returned with resource(<PUBLIC_ID1>, { versions: true })\n * @param asset_id\n * @param version_id\n * @param options\n * @returns {string }\n */\n\n\nfunction download_backedup_asset(asset_id, version_id, options = {}) {\n  let params = exports.sign_request({\n    timestamp: options.timestamp || exports.timestamp(),\n    asset_id: asset_id,\n    version_id: version_id\n  }, options);\n  return exports.base_api_url(['download_backup'], options) + \"?\" + hashToQuery(params);\n}\n/**\n * Returns a URL that when invokes creates an archive and returns it.\n * @param {object} options\n * @param {string} [options.resource_type=\"image\"] The resource type of files to include in the archive.\n *   Must be one of :image | :video | :raw\n * @param {string} [options.type=\"upload\"] The specific file type of resources: :upload|:private|:authenticated\n * @param {string|Array} [options.tags] list of tags to include in the archive\n * @param {string|Array<string>} [options.public_ids] list of public_ids to include in the archive\n * @param {string|Array<string>} [options.prefixes]  list of prefixes of public IDs (e.g., folders).\n * @param {string|Array<string>} [options.fully_qualified_public_ids] list of fully qualified public_ids to include\n *   in the archive.\n * @param {string|Array<string>} [options.transformations]  list of transformations.\n *   The derived images of the given transformations are included in the archive. Using the string representation of\n *   multiple chained transformations as we use for the 'eager' upload parameter.\n * @param {string} [options.mode=\"create\"] return the generated archive file or to store it as a raw resource and\n *   return a JSON with URLs for accessing the archive. Possible values: :download, :create\n * @param {string} [options.target_format=\"zip\"]\n * @param {string} [options.target_public_id]  public ID of the generated raw resource.\n *   Relevant only for the create mode. If not specified, random public ID is generated.\n * @param {boolean} [options.flatten_folders=false] If true, flatten public IDs with folders to be in the root\n *   of the archive. Add numeric counter to the file name in case of a name conflict.\n * @param {boolean} [options.flatten_transformations=false] If true, and multiple transformations are given,\n *   flatten the folder structure of derived images and store the transformation details on the file name instead.\n * @param {boolean} [options.use_original_filename] Use the original file name of included images\n *   (if available) instead of the public ID.\n * @param {boolean} [options.async=false] If true, return immediately and perform archive creation in the background.\n *   Relevant only for the create mode.\n * @param {string} [options.notification_url] URL to send an HTTP post request (webhook) to when the\n *   archive creation is completed.\n * @param {string|Array<string>} [options.target_tags=] Allows assigning one or more tags to the generated archive file\n *   (for later housekeeping via the admin API).\n * @param {string} [options.keep_derived=false] keep the derived images used for generating the archive\n * @return {String} archive url\n */\n\n\nfunction download_archive_url(options = {}) {\n  let cloudinary_params = exports.sign_request(exports.archive_params(merge(options, {\n    mode: \"download\"\n  })), options);\n  return exports.api_url(\"generate_archive\", options) + \"?\" + hashToQuery(cloudinary_params);\n}\n/**\n * Returns a URL that when invokes creates an zip archive and returns it.\n * @see download_archive_url\n */\n\n\nfunction download_zip_url(options = {}) {\n  return exports.download_archive_url(merge(options, {\n    target_format: \"zip\"\n  }));\n}\n/**\n * Creates and returns a URL that when invoked creates an archive of a folder\n * @param {string} folder_path Full path (from the root) of the folder to download\n * @param {object} options Additional options\n * @returns {string} Url for downloading an archive of a folder\n */\n\n\nfunction download_folder(folder_path, options = {}) {\n  options.resource_type = options.resource_type || \"all\";\n  options.prefixes = folder_path;\n  let cloudinary_params = exports.sign_request(exports.archive_params(merge(options, {\n    mode: \"download\"\n  })), options);\n  return exports.api_url(\"generate_archive\", options) + \"?\" + hashToQuery(cloudinary_params);\n}\n/**\n * Render the key/value pair as an HTML tag attribute\n * @private\n * @param {string} key\n * @param {string|boolean|number} [value]\n * @return {string} A string representing the HTML attribute\n */\n\n\nfunction join_pair(key, value) {\n  if (!value) {\n    return void 0;\n  }\n\n  return value === true ? key : key + \"='\" + value + \"'\";\n}\n/**\n * If the given value is a string, replaces single or double quotes with character entities\n * @private\n * @param {*} value The string to encode quotes in\n * @return {*} Encoded string or original value if not a string\n */\n\n\nfunction escapeQuotes(value) {\n  return isString(value) ? value.replace('\"', '&#34;').replace(\"'\", '&#39;') : value;\n}\n/**\n *\n * @param attrs\n * @return {*}\n */\n\n\nexports.html_attrs = function html_attrs(attrs) {\n  return filter(map(attrs, function (value, key) {\n    return join_pair(key, escapeQuotes(value));\n  })).sort().join(\" \");\n};\n\nconst CLOUDINARY_JS_CONFIG_PARAMS = ['api_key', 'cloud_name', 'private_cdn', 'secure_distribution', 'cdn_subdomain'];\n\nfunction cloudinary_js_config() {\n  let params = pickOnlyExistingValues(config(), ...CLOUDINARY_JS_CONFIG_PARAMS);\n  return `<script type='text/javascript'>\\n$.cloudinary.config(${JSON.stringify(params)});\\n</script>`;\n}\n\nfunction v1_result_adapter(callback) {\n  if (callback == null) {\n    return undefined;\n  }\n\n  return function (result) {\n    if (result.error != null) {\n      return callback(result.error);\n    }\n\n    return callback(void 0, result);\n  };\n}\n\nfunction v1_adapter(name, num_pass_args, v1) {\n  return function (...args) {\n    let pass_args = take(args, num_pass_args);\n    let options = args[num_pass_args];\n    let callback = args[num_pass_args + 1];\n\n    if (callback == null && isFunction(options)) {\n      callback = options;\n      options = {};\n    }\n\n    callback = v1_result_adapter(callback);\n    args = pass_args.concat([callback, options]);\n    return v1[name].apply(this, args);\n  };\n}\n\nfunction v1_adapters(exports, v1, mapping) {\n  return Object.keys(mapping).map(name => {\n    let num_pass_args = mapping[name];\n    exports[name] = v1_adapter(name, num_pass_args, v1);\n    return exports[name];\n  });\n}\n\nfunction as_safe_bool(value) {\n  if (value == null) {\n    return void 0;\n  }\n\n  if (value === true || value === 'true' || value === '1') {\n    value = 1;\n  }\n\n  if (value === false || value === 'false' || value === '0') {\n    value = 0;\n  }\n\n  return value;\n}\n\nconst NUMBER_PATTERN = \"([0-9]*)\\\\.([0-9]+)|([0-9]+)\";\nconst OFFSET_ANY_PATTERN = `(${NUMBER_PATTERN})([%pP])?`;\nconst RANGE_VALUE_RE = RegExp(`^${OFFSET_ANY_PATTERN}$`);\nconst OFFSET_ANY_PATTERN_RE = RegExp(`(${OFFSET_ANY_PATTERN})\\\\.\\\\.(${OFFSET_ANY_PATTERN})`); // Split a range into the start and end values\n\nfunction split_range(range) {\n  // :nodoc:\n  switch (range.constructor) {\n    case String:\n      if (!OFFSET_ANY_PATTERN_RE.test(range)) {\n        return range;\n      }\n\n      return range.split(\"..\");\n\n    case Array:\n      return [first(range), last(range)];\n\n    default:\n      return [null, null];\n  }\n}\n\nfunction norm_range_value(value) {\n  // :nodoc:\n  let offset = String(value).match(RANGE_VALUE_RE);\n\n  if (offset) {\n    let modifier = offset[5] ? 'p' : '';\n    value = `${offset[1] || offset[4]}${modifier}`;\n  }\n\n  return value;\n}\n/**\n * A video codec parameter can be either a String or a Hash.\n * @param {Object} param <code>vc_<codec>[ : <profile> : [<level>]]</code>\n *                       or <code>{ codec: 'h264', profile: 'basic', level: '3.1' }</code>\n * @return {String} <code><codec> : <profile> : [<level>]]</code> if a Hash was provided\n *                   or the param if a String was provided.\n *                   Returns null if param is not a Hash or String\n */\n\n\nfunction process_video_params(param) {\n  switch (param.constructor) {\n    case Object:\n      {\n        let video = \"\";\n\n        if ('codec' in param) {\n          video = param.codec;\n\n          if ('profile' in param) {\n            video += \":\" + param.profile;\n\n            if ('level' in param) {\n              video += \":\" + param.level;\n            }\n          }\n        }\n\n        return video;\n      }\n\n    case String:\n      return param;\n\n    default:\n      return null;\n  }\n}\n/**\n * Returns a Hash of parameters used to create an archive\n * @private\n * @param {object} options\n * @return {object} Archive API parameters\n */\n\n\nfunction archive_params(options = {}) {\n  return {\n    allow_missing: exports.as_safe_bool(options.allow_missing),\n    async: exports.as_safe_bool(options.async),\n    expires_at: options.expires_at,\n    flatten_folders: exports.as_safe_bool(options.flatten_folders),\n    flatten_transformations: exports.as_safe_bool(options.flatten_transformations),\n    keep_derived: exports.as_safe_bool(options.keep_derived),\n    mode: options.mode,\n    notification_url: options.notification_url,\n    prefixes: options.prefixes && toArray(options.prefixes),\n    fully_qualified_public_ids: options.fully_qualified_public_ids && toArray(options.fully_qualified_public_ids),\n    public_ids: options.public_ids && toArray(options.public_ids),\n    skip_transformation_name: exports.as_safe_bool(options.skip_transformation_name),\n    tags: options.tags && toArray(options.tags),\n    target_format: options.target_format,\n    target_public_id: options.target_public_id,\n    target_tags: options.target_tags && toArray(options.target_tags),\n    timestamp: options.timestamp || exports.timestamp(),\n    transformations: utils.build_eager(options.transformations),\n    type: options.type,\n    use_original_filename: exports.as_safe_bool(options.use_original_filename),\n    folder_path: options.folder_path\n  };\n}\n\nexports.create_source_tag = function create_source_tag(src, source_type, codecs = null) {\n  let video_type = source_type === 'ogv' ? 'ogg' : source_type;\n  let mime_type = `video/${video_type}`;\n\n  if (!isEmpty(codecs)) {\n    let codecs_str = isArray(codecs) ? codecs.join(', ') : codecs;\n    mime_type += `; codecs=${codecs_str}`;\n  }\n\n  return `<source ${utils.html_attrs({\n    src,\n    type: mime_type\n  })}>`;\n};\n\nfunction build_explicit_api_params(public_id, options = {}) {\n  return [exports.build_upload_params(extend({}, {\n    public_id\n  }, options))];\n}\n\nfunction generate_responsive_breakpoints_string(breakpoints) {\n  if (breakpoints == null) {\n    return null;\n  }\n\n  breakpoints = clone(breakpoints);\n\n  if (!isArray(breakpoints)) {\n    breakpoints = [breakpoints];\n  }\n\n  for (let j = 0; j < breakpoints.length; j++) {\n    let breakpoint_settings = breakpoints[j];\n\n    if (breakpoint_settings != null) {\n      if (breakpoint_settings.transformation) {\n        breakpoint_settings.transformation = utils.generate_transformation_string(clone(breakpoint_settings.transformation));\n      }\n    }\n  }\n\n  return JSON.stringify(breakpoints);\n}\n\nfunction build_streaming_profiles_param(options = {}) {\n  let params = pickOnlyExistingValues(options, \"display_name\", \"representations\");\n\n  if (isArray(params.representations)) {\n    params.representations = JSON.stringify(params.representations.map(r => ({\n      transformation: utils.generate_transformation_string(r.transformation)\n    })));\n  }\n\n  return params;\n}\n\nfunction hashToParameters(hash) {\n  return entries(hash).reduce((parameters, [key, value]) => {\n    if (isArray(value)) {\n      key = key.endsWith('[]') ? key : key + '[]';\n      const items = value.map(v => [key, v]);\n      parameters = parameters.concat(items);\n    } else {\n      parameters.push([key, value]);\n    }\n\n    return parameters;\n  }, []);\n}\n/**\n * Convert a hash of values to a URI query string.\n * Array values are spread as individual parameters.\n * @param {object} hash Key-value parameters\n * @return {string} A URI query string.\n */\n\n\nfunction hashToQuery(hash) {\n  return hashToParameters(hash).map(([key, value]) => `${querystring.escape(key)}=${querystring.escape(value)}`).join('&');\n}\n/**\n * Verify that the parameter `value` is defined and it's string value is not zero.\n * <br>This function should not be confused with `isEmpty()`.\n * @private\n * @param {string|number} value The value to check.\n * @return {boolean} True if the value is defined and not empty.\n */\n\n\nfunction present(value) {\n  return value != null && (\"\" + value).length > 0;\n}\n/**\n * Returns a new object with key values from source based on the keys.\n * `null` or `undefined` values are not copied.\n * @private\n * @param {object} source The object to pick values from.\n * @param {...string} keys One or more keys to copy from source.\n * @return {object} A new object with the required keys and values.\n */\n\n\nfunction pickOnlyExistingValues(source, ...keys) {\n  let result = {};\n\n  if (source) {\n    keys.forEach(key => {\n      if (source[key] != null) {\n        result[key] = source[key];\n      }\n    });\n  }\n\n  return result;\n}\n/**\n * Returns a JSON array as String.\n * Yields the array before it is converted to JSON format\n * @private\n * @param {object|String|Array<object>} data\n * @param {function(*):*} [modifier] called with the array before the array is stringified\n * @return {String|null} a JSON array string or `null` if data is `null`\n */\n\n\nfunction jsonArrayParam(data, modifier) {\n  if (!data) {\n    return null;\n  }\n\n  if (isString(data)) {\n    data = JSON.parse(data);\n  }\n\n  if (!isArray(data)) {\n    data = [data];\n  }\n\n  if (isFunction(modifier)) {\n    data = modifier(data);\n  }\n\n  return JSON.stringify(data);\n}\n/**\n * Empty function - do nothing\n *\n */\n\n\nexports.NOP = function () {};\n\nexports.generate_auth_token = generate_auth_token;\nexports.getUserAgent = getUserAgent;\nexports.build_upload_params = build_upload_params;\n\nexports.timestamp = () => Math.floor(new Date().getTime() / 1000);\n\nexports.option_consume = consumeOption; // for backwards compatibility\n\nexports.build_array = toArray; // for backwards compatibility\n\nexports.encode_double_array = encodeDoubleArray;\nexports.encode_key_value = encode_key_value;\nexports.encode_context = encode_context;\nexports.build_eager = build_eager;\nexports.build_custom_headers = build_custom_headers;\nexports.generate_transformation_string = generate_transformation_string;\nexports.updateable_resource_params = updateable_resource_params;\nexports.extractUrlParams = extractUrlParams;\nexports.extractTransformationParams = extractTransformationParams;\nexports.patchFetchFormat = patchFetchFormat;\nexports.url = url;\nexports.video_url = video_url;\nexports.video_thumbnail_url = video_thumbnail_url;\nexports.api_url = api_url;\nexports.random_public_id = random_public_id;\nexports.signed_preloaded_image = signed_preloaded_image;\nexports.api_sign_request = api_sign_request;\nexports.clear_blank = clear_blank;\nexports.merge = merge;\nexports.sign_request = sign_request;\nexports.webhook_signature = webhook_signature;\nexports.verifyNotificationSignature = verifyNotificationSignature;\nexports.process_request_params = process_request_params;\nexports.private_download_url = private_download_url;\nexports.zip_download_url = zip_download_url;\nexports.download_archive_url = download_archive_url;\nexports.download_zip_url = download_zip_url;\nexports.cloudinary_js_config = cloudinary_js_config;\nexports.v1_adapters = v1_adapters;\nexports.as_safe_bool = as_safe_bool;\nexports.archive_params = archive_params;\nexports.build_explicit_api_params = build_explicit_api_params;\nexports.generate_responsive_breakpoints_string = generate_responsive_breakpoints_string;\nexports.build_streaming_profiles_param = build_streaming_profiles_param;\nexports.hashToParameters = hashToParameters;\nexports.present = present;\nexports.only = pickOnlyExistingValues; // for backwards compatibility\n\nexports.pickOnlyExistingValues = pickOnlyExistingValues;\nexports.jsonArrayParam = jsonArrayParam;\nexports.download_folder = download_folder;\nexports.base_api_url = base_api_url;\nexports.download_backedup_asset = download_backedup_asset; // was exported before, so kept for backwards compatibility\n\nexports.DEFAULT_POSTER_OPTIONS = DEFAULT_POSTER_OPTIONS;\nexports.DEFAULT_VIDEO_SOURCE_TYPES = DEFAULT_VIDEO_SOURCE_TYPES;\nObject.assign(module.exports, {\n  at,\n  clone,\n  extend,\n  filter,\n  includes,\n  isArray,\n  isEmpty,\n  isNumber,\n  isObject,\n  isRemoteUrl,\n  isString,\n  isUndefined,\n  keys: source => Object.keys(source),\n  ensurePresenceOf\n});","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Frontend/node_modules/cloudinary/lib/utils/index.js"],"names":["crypto","require","querystring","urlParse","parse","compact","first","isFunction","isPlainObject","last","map","take","at","clone","extend","filter","includes","isArray","isEmpty","isNumber","isObject","isString","isUndefined","smart_escape","consumeOption","toArray","base64EncodeURL","encodeDoubleArray","config","generate_token","utf8_encode","crc32","ensurePresenceOf","ensureOption","defaults","entries","isRemoteUrl","getSDKVersions","getAnalyticsOptions","getSDKAnalyticsSignature","Util","exports","module","utils","VERSION","version","error","generate_auth_token","options","token_options","Object","assign","auth_token","CF_SHARED_CDN","OLD_AKAMAI_SHARED_CDN","AKAMAI_SHARED_CDN","SHARED_CDN","USER_AGENT","userPlatform","getUserAgent","DEFAULT_RESPONSIVE_WIDTH_TRANSFORMATION","DEFAULT_POSTER_OPTIONS","DEFAULT_VIDEO_SOURCE_TYPES","CONDITIONAL_OPERATORS","PREDEFINED_VARS","LAYER_KEYWORD_PARAMS","TRANSFORMATION_PARAMS","SIMPLE_PARAMS","UPLOAD_PREFIX","textStyle","layer","keywords","style","keys","forEach","attr","default_value","attr_value","push","split","pop","hasOwnProperty","font_size","font_family","unshift","join","normalize_expression","expression","length","match","operators","operatorsPattern","operatorsReplaceRE","RegExp","replace","predefinedVarsPattern","predefinedVarsReplaceRE","p1","offset","process_custom_function","customFunction","function_type","source","process_custom_pre_function","customPreFunction","result","process_if","ifValue","process_layer","resource_type","url","public_id","format","type","text","components","noPublicId","noStyle","re","start","textSource","decodeURIComponent","res","exec","slice","index","encodeURIComponent","test","substr","process_radius","radius","Error","findIndex","x","build_upload_params","params","access_mode","allowed_formats","async","as_safe_bool","backup","callback","cinemagraph_analysis","colors","discard_original_filename","eager","build_eager","eager_async","eager_notification_url","eval","exif","faces","folder","image_metadata","invalidate","moderation","notification_url","overwrite","phash","proxy","quality_analysis","responsive_breakpoints","generate_responsive_breakpoints_string","return_delete_token","timestamp","transformation","generate_transformation_string","unique_filename","upload_preset","use_filename","quality_override","updateable_resource_params","encode_key_value","arg","k","v","escapeMetadataValue","value","toString","encode_context","metadataObj","key","values","innerVal","transformations","transformationString","build_custom_headers","headers","t","present","responsive_width","width","height","size","has_layer","overlay","underlay","crop","angle","no_html_sizes","indexOf","parseFloat","background","color","base_transformations","named_transformation","some","tr","effect","border","flags","dpr","start_offset","end_offset","split_range","custom_function","custom_pre_function","fps","a","ar","b","bo","c","co","e","fl","fn","h","ki","l","o","q","r","u","w","y","z","name","short","undefined","vc","process_video_params","norm_range_value","variablesParam","variables","startsWith","sort","concat","raw_transformation","responsive_width_transformation","String","responsive","hidpi","access_control","jsonArrayParam","auto_tagging","background_removal","categorization","context","metadata","custom_coordinates","detection","face_coordinates","ocr","raw_convert","similarity_search","tags","URL_KEYS","extractUrlParams","pickOnlyExistingValues","extractTransformationParams","patchFetchFormat","fetch_format","signature","source_to_sign","force_version","long_url_signature","cloud_name","private_cdn","secure_distribution","secure","ssl_detected","cdn_subdomain","secure_cdn_subdomain","cname","shorten","sign_url","api_secret","url_suffix","use_root_path","merge","preloaded","original_source","finalize_resource_type","finalize_source","to_sign","part","i","shasum","createHash","update","digest","substring","prefix","unsigned_url_prefix","resultUrl","path","token","urlAnalytics","sdkVersions","analyticsOptions","sdkAnalyticsSignature","appender","video_url","video_thumbnail_url","shared_domain","subdomain","cdn_part","subdomain_part","host","base_api_url","cloudinary","api_url","action","random_public_id","randomBytes","signed_preloaded_image","api_sign_request","params_to_sign","clear_blank","hash","filtered_hash","hash1","hash2","sign_request","apiKey","apiSecret","api_key","webhook_signature","data","verifyNotificationSignature","body","valid_for","Date","now","payload_hash","process_request_params","unsigned","private_download_url","attachment","expires_at","stringify","zip_download_url","tag","hashToQuery","download_backedup_asset","asset_id","version_id","download_archive_url","cloudinary_params","archive_params","mode","download_zip_url","target_format","download_folder","folder_path","prefixes","join_pair","escapeQuotes","html_attrs","attrs","CLOUDINARY_JS_CONFIG_PARAMS","cloudinary_js_config","JSON","v1_result_adapter","v1_adapter","num_pass_args","v1","args","pass_args","apply","v1_adapters","mapping","NUMBER_PATTERN","OFFSET_ANY_PATTERN","RANGE_VALUE_RE","OFFSET_ANY_PATTERN_RE","range","constructor","Array","modifier","param","video","codec","profile","level","allow_missing","flatten_folders","flatten_transformations","keep_derived","fully_qualified_public_ids","public_ids","skip_transformation_name","target_public_id","target_tags","use_original_filename","create_source_tag","src","source_type","codecs","video_type","mime_type","codecs_str","build_explicit_api_params","breakpoints","j","breakpoint_settings","build_streaming_profiles_param","representations","hashToParameters","reduce","parameters","endsWith","items","escape","NOP","Math","floor","getTime","option_consume","build_array","encode_double_array","only"],"mappings":"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","sourcesContent":["/**\n * Utilities\n * @module utils\n * @borrows module:auth_token as generate_auth_token\n */\n\nconst crypto = require(\"crypto\");\nconst querystring = require(\"querystring\");\nconst urlParse = require(\"url\").parse;\n\n// Functions used internally\nconst compact = require(\"lodash/compact\");\nconst first = require(\"lodash/first\");\nconst isFunction = require(\"lodash/isFunction\");\nconst isPlainObject = require(\"lodash/isPlainObject\");\nconst last = require(\"lodash/last\");\nconst map = require(\"lodash/map\");\nconst take = require(\"lodash/take\");\nconst at = require(\"lodash/at\");\n\n// Exposed by the module\nconst clone = require(\"lodash/clone\");\nconst extend = require(\"lodash/extend\");\nconst filter = require(\"lodash/filter\");\nconst includes = require(\"lodash/includes\");\nconst isArray = require(\"lodash/isArray\");\nconst isEmpty = require(\"lodash/isEmpty\");\nconst isNumber = require(\"lodash/isNumber\");\nconst isObject = require(\"lodash/isObject\");\nconst isString = require(\"lodash/isString\");\nconst isUndefined = require(\"lodash/isUndefined\");\n\nconst smart_escape = require(\"./encoding/smart_escape\");\nconst consumeOption = require('./parsing/consumeOption');\nconst toArray = require('./parsing/toArray');\nlet { base64EncodeURL } = require('./encoding/base64EncodeURL');\nconst encodeDoubleArray = require('./encoding/encodeDoubleArray');\n\nconst config = require(\"../config\");\nconst generate_token = require(\"../auth_token\");\nconst utf8_encode = require('./utf8_encode');\nconst crc32 = require('./crc32');\nconst ensurePresenceOf = require('./ensurePresenceOf');\nconst ensureOption = require('./ensureOption').defaults(config());\nconst entries = require('./entries');\nconst isRemoteUrl = require('./isRemoteUrl');\nconst getSDKVersions = require('./encoding/sdkAnalytics/getSDKVersions');\nconst {getAnalyticsOptions, getSDKAnalyticsSignature} = require('cloudinary-core').Util;\n\nexports = module.exports;\nconst utils = module.exports;\n\ntry {\n  // eslint-disable-next-line global-require\n  utils.VERSION = require('../../package.json').version;\n} catch (error) {\n  utils.VERSION = '';\n}\n\nfunction generate_auth_token(options) {\n  let token_options = Object.assign({}, config().auth_token, options);\n  return generate_token(token_options);\n}\n\nexports.CF_SHARED_CDN = \"d3jpl91pxevbkh.cloudfront.net\";\nexports.OLD_AKAMAI_SHARED_CDN = \"cloudinary-a.akamaihd.net\";\nexports.AKAMAI_SHARED_CDN = \"res.cloudinary.com\";\nexports.SHARED_CDN = exports.AKAMAI_SHARED_CDN;\nexports.USER_AGENT = `CloudinaryNodeJS/${exports.VERSION}`;\n\n// Add platform information to the USER_AGENT header\n// This is intended for platform information and not individual applications!\nexports.userPlatform = \"\";\n\nfunction getUserAgent() {\n  return isEmpty(utils.userPlatform) ? `${utils.USER_AGENT}` : `${utils.userPlatform} ${utils.USER_AGENT}`;\n}\n\nconst {\n  DEFAULT_RESPONSIVE_WIDTH_TRANSFORMATION,\n  DEFAULT_POSTER_OPTIONS,\n  DEFAULT_VIDEO_SOURCE_TYPES,\n  CONDITIONAL_OPERATORS,\n  PREDEFINED_VARS,\n  LAYER_KEYWORD_PARAMS,\n  TRANSFORMATION_PARAMS,\n  SIMPLE_PARAMS,\n  UPLOAD_PREFIX\n} = require('./consts');\n\nfunction textStyle(layer) {\n  let keywords = [];\n  let style = \"\";\n  Object.keys(LAYER_KEYWORD_PARAMS).forEach((attr) => {\n    let default_value = LAYER_KEYWORD_PARAMS[attr];\n    let attr_value = layer[attr] || default_value;\n    if (attr_value !== default_value) {\n      keywords.push(attr_value);\n    }\n  });\n\n  Object.keys(layer).forEach((attr) => {\n    if (attr === \"letter_spacing\" || attr === \"line_spacing\") {\n      keywords.push(`${attr}_${layer[attr]}`);\n    }\n    if (attr === \"font_hinting\") {\n      keywords.push(`${attr.split(\"_\").pop()}_${layer[attr]}`);\n    }\n    if (attr === \"font_antialiasing\") {\n      keywords.push(`antialias_${layer[attr]}`);\n    }\n  });\n\n  if (layer.hasOwnProperty(\"font_size\" || \"font_family\") || !isEmpty(keywords)) {\n    if (!layer.font_size) throw `Must supply font_size for text in overlay/underlay`;\n    if (!layer.font_family) throw `Must supply font_family for text in overlay/underlay`;\n    keywords.unshift(layer.font_size);\n    keywords.unshift(layer.font_family);\n    style = compact(keywords).join(\"_\");\n  }\n  return style;\n}\n\n/**\n * Normalize an offset value\n * @param {String} expression a decimal value which may have a 'p' or '%' postfix. E.g. '35%', '0.4p'\n * @return {Object|String} a normalized String of the input value if possible otherwise the value itself\n */\nfunction normalize_expression(expression) {\n  if (!isString(expression) || expression.length === 0 || expression.match(/^!.+!$/)) {\n    return expression;\n  }\n\n  const operators = \"\\\\|\\\\||>=|<=|&&|!=|>|=|<|/|-|\\\\^|\\\\+|\\\\*\";\n  const operatorsPattern = \"((\" + operators + \")(?=[ _]))\";\n  const operatorsReplaceRE = new RegExp(operatorsPattern, \"g\");\n  expression = expression.replace(operatorsReplaceRE, match => CONDITIONAL_OPERATORS[match]);\n\n  const predefinedVarsPattern = \"(\" + Object.keys(PREDEFINED_VARS).join(\"|\") + \")\";\n  const predefinedVarsReplaceRE = new RegExp(predefinedVarsPattern, \"g\");\n  expression = expression.replace(predefinedVarsReplaceRE, (match, p1, offset) => (expression[offset - 1] === '$' ? match : PREDEFINED_VARS[match]));\n\n  return expression.replace(/[ _]+/g, '_');\n}\n\n/**\n * Parse custom_function options\n * @private\n * @param {object|*} customFunction a custom function object containing function_type and source values\n * @return {string|*} custom_function transformation string\n */\nfunction process_custom_function(customFunction) {\n  if (!isObject(customFunction)) {\n    return customFunction;\n  }\n  if (customFunction.function_type === \"remote\") {\n    return [customFunction.function_type, base64EncodeURL(customFunction.source)].join(\":\");\n  }\n  return [customFunction.function_type, customFunction.source].join(\":\");\n}\n\n/**\n * Parse custom_pre_function options\n * @private\n * @param {object|*} customPreFunction a custom function object containing function_type and source values\n * @return {string|*} custom_pre_function transformation string\n */\nfunction process_custom_pre_function(customPreFunction) {\n  let result = process_custom_function(customPreFunction);\n  return utils.isString(result) ? `pre:${result}` : null;\n}\n\n/**\n * Parse \"if\" parameter\n * Translates the condition if provided.\n * @private\n * @return {string} \"if_\" + ifValue\n */\nfunction process_if(ifValue) {\n  return ifValue ? \"if_\" + normalize_expression(ifValue) : ifValue;\n}\n\n/**\n * Parse layer options\n * @private\n * @param {object|*} layer The layer to parse.\n * @return {string} layer transformation string\n */\nfunction process_layer(layer) {\n  let result = '';\n  if (isPlainObject(layer)) {\n    if (layer.resource_type === \"fetch\" || (layer.url != null)) {\n      result = `fetch:${base64EncodeURL(layer.url)}`;\n    } else {\n      let public_id = layer.public_id;\n      let format = layer.format;\n      let resource_type = layer.resource_type || \"image\";\n      let type = layer.type || \"upload\";\n      let text = layer.text;\n      let style = null;\n      let components = [];\n      const noPublicId = isEmpty(public_id);\n      if (!noPublicId) {\n        public_id = public_id.replace(new RegExp(\"/\", 'g'), \":\");\n        if (format != null) {\n          public_id = `${public_id}.${format}`;\n        }\n      }\n      if (isEmpty(text) && resource_type !== \"text\") {\n        if (noPublicId) {\n          throw \"Must supply public_id for resource_type layer_parameter\";\n        }\n        if (resource_type === \"subtitles\") {\n          style = textStyle(layer);\n        }\n      } else {\n        resource_type = \"text\";\n        type = null;\n        // type is ignored for text layers\n        style = textStyle(layer);\n        if (!isEmpty(text)) {\n          const noStyle = isEmpty(style);\n          if (!(noPublicId || noStyle) || (noPublicId && noStyle)) {\n            throw \"Must supply either style parameters or a public_id when providing text parameter in a text overlay/underlay\";\n          }\n          let re = /\\$\\([a-zA-Z]\\w*\\)/g;\n          let start = 0;\n          let textSource = smart_escape(decodeURIComponent(text), /[,\\/]/g);\n          text = \"\";\n          for (let res = re.exec(textSource); res; res = re.exec(textSource)) {\n            text += smart_escape(textSource.slice(start, res.index));\n            text += res[0];\n            start = res.index + res[0].length;\n          }\n          text += encodeURIComponent(textSource.slice(start));\n        }\n      }\n      if (resource_type !== \"image\") {\n        components.push(resource_type);\n      }\n      if (type !== \"upload\") {\n        components.push(type);\n      }\n      components.push(style);\n      components.push(public_id);\n      components.push(text);\n      result = compact(components).join(\":\");\n    }\n  } else if (/^fetch:.+/.test(layer)) {\n    result = `fetch:${base64EncodeURL(layer.substr(6))}`;\n  } else {\n    result = layer;\n  }\n  return result;\n}\n\n/**\n * Parse radius options\n * @private\n * @param {Array<string|number>|string|number} radius The radius to parse\n * @return {string} radius transformation string\n */\nfunction process_radius(radius) {\n  if (!radius) {\n    return radius;\n  }\n  if (!isArray(radius)) {\n    radius = [radius];\n  }\n  if (radius.length === 0 || radius.length > 4) {\n    throw new Error(\"Radius array should contain between 1 and 4 values\");\n  }\n  if (radius.findIndex(x => x === null) >= 0) {\n    throw new Error(\"Corner: Cannot be null\");\n  }\n  return radius.map(normalize_expression).join(':');\n}\n\nfunction build_upload_params(options) {\n  let params = {\n    access_mode: options.access_mode,\n    allowed_formats: options.allowed_formats && toArray(options.allowed_formats).join(\",\"),\n    async: utils.as_safe_bool(options.async),\n    backup: utils.as_safe_bool(options.backup),\n    callback: options.callback,\n    cinemagraph_analysis: utils.as_safe_bool(options.cinemagraph_analysis),\n    colors: utils.as_safe_bool(options.colors),\n    discard_original_filename: utils.as_safe_bool(options.discard_original_filename),\n    eager: utils.build_eager(options.eager),\n    eager_async: utils.as_safe_bool(options.eager_async),\n    eager_notification_url: options.eager_notification_url,\n    eval: options.eval,\n    exif: utils.as_safe_bool(options.exif),\n    faces: utils.as_safe_bool(options.faces),\n    folder: options.folder,\n    format: options.format,\n    image_metadata: utils.as_safe_bool(options.image_metadata),\n    invalidate: utils.as_safe_bool(options.invalidate),\n    moderation: options.moderation,\n    notification_url: options.notification_url,\n    overwrite: utils.as_safe_bool(options.overwrite),\n    phash: utils.as_safe_bool(options.phash),\n    proxy: options.proxy,\n    public_id: options.public_id,\n    quality_analysis: utils.as_safe_bool(options.quality_analysis),\n    responsive_breakpoints: utils.generate_responsive_breakpoints_string(options.responsive_breakpoints),\n    return_delete_token: utils.as_safe_bool(options.return_delete_token),\n    timestamp: options.timestamp || exports.timestamp(),\n    transformation: utils.generate_transformation_string(clone(options)),\n    type: options.type,\n    unique_filename: utils.as_safe_bool(options.unique_filename),\n    upload_preset: options.upload_preset,\n    use_filename: utils.as_safe_bool(options.use_filename),\n    quality_override: options.quality_override\n  };\n  return utils.updateable_resource_params(options, params);\n}\n\nfunction encode_key_value(arg) {\n  if (!isObject(arg)) { return arg; }\n  return entries(arg).map(([k, v]) => `${k}=${v}`).join('|');\n}\n\n\n/**\n * @description Escape = and | with two backslashes \\\\\n * @param {string|number} value\n * @return {string}\n */\nfunction escapeMetadataValue(value) {\n  return value.toString().replace(/([=|])/g, '\\\\$&');\n}\n\n\n/**\n *\n * @description Encode metadata fields based on incoming value.\n *              If array, escape as color_id=[\\\"green\\\",\\\"red\\\"]\n *              If string/number, escape as in_stock_id=50\n *\n *              Joins resulting values with a pipe:\n *              in_stock_id=50|color_id=[\\\"green\\\",\\\"red\\\"]\n *\n *              = and | and escaped by default (this can't be turned off)\n *\n * @param metadataObj\n * @return {string}\n */\nfunction encode_context(metadataObj) {\n  if (!isObject(metadataObj)) { return metadataObj; }\n\n  return entries(metadataObj).map(([key, value]) => {\n    // if string, simply parse the value and move on\n    if (isString(value)) {\n      return `${key}=${escapeMetadataValue(value)}`;\n\n      // If array, parse each item individually\n    } else if (isArray(value)) {\n      let values = value.map((innerVal) => {\n        return `\\\"${escapeMetadataValue(innerVal)}\\\"`\n      }).join(',');\n      return `${key}=[${values}]`\n      // if unknown, return the value as string\n    } else {\n      return value.toString();\n    }\n  }).join('|');\n}\n\nfunction build_eager(transformations) {\n  return toArray(transformations)\n    .map((transformation) => {\n      const transformationString = utils.generate_transformation_string(clone(transformation));\n      const format = transformation.format;\n      return format == null ? transformationString : `${transformationString}/${format}`;\n    }).join('|');\n}\n/**\n * Build the custom headers for the request\n * @private\n * @param headers\n * @return {Array<string>|object|string} An object of name and value,\n *         an array of header strings, or a string of headers\n */\nfunction build_custom_headers(headers) {\n  switch (true) {\n  case headers == null:\n    return void 0;\n  case isArray(headers):\n    return headers.join(\"\\n\");\n  case isObject(headers):\n    return entries(headers).map(([k, v]) => `${k}:${v}`).join(\"\\n\");\n  default:\n    return headers;\n  }\n}\n\nfunction generate_transformation_string(options) {\n  if (utils.isString(options)) {\n    return options;\n  }\n  if (isArray(options)) {\n    return options.map(t => utils.generate_transformation_string(clone(t))).filter(utils.present).join('/');\n  }\n\n  let responsive_width = consumeOption(options, \"responsive_width\", config().responsive_width);\n  let width = options.width;\n  let height = options.height;\n  let size = consumeOption(options, \"size\");\n  if (size) {\n    [width, height] = size.split(\"x\");\n    [options.width, options.height] = [width, height];\n  }\n  let has_layer = options.overlay || options.underlay;\n  let crop = consumeOption(options, \"crop\");\n  let angle = toArray(consumeOption(options, \"angle\")).join(\".\");\n  let no_html_sizes = has_layer || utils.present(angle) || crop === \"fit\" || crop === \"limit\" || responsive_width;\n  if (width && (width.toString().indexOf(\"auto\") === 0 || no_html_sizes || parseFloat(width) < 1)) {\n    delete options.width;\n  }\n  if (height && (no_html_sizes || parseFloat(height) < 1)) {\n    delete options.height;\n  }\n  let background = consumeOption(options, \"background\");\n  background = background && background.replace(/^#/, \"rgb:\");\n  let color = consumeOption(options, \"color\");\n  color = color && color.replace(/^#/, \"rgb:\");\n  let base_transformations = toArray(consumeOption(options, \"transformation\", []));\n  let named_transformation = [];\n  if (base_transformations.some(isObject)) {\n    base_transformations = base_transformations.map(tr => utils.generate_transformation_string(\n      isObject(tr) ? clone(tr) : { transformation: tr }\n    ));\n  } else {\n    named_transformation = base_transformations.join(\".\");\n    base_transformations = [];\n  }\n  let effect = consumeOption(options, \"effect\");\n  if (isArray(effect)) {\n    effect = effect.join(\":\");\n  } else if (isObject(effect)) {\n    effect = entries(effect).map(\n      ([key, value]) => `${key}:${value}`\n    );\n  }\n  let border = consumeOption(options, \"border\");\n  if (isObject(border)) {\n    border = `${border.width != null ? border.width : 2}px_solid_${(border.color != null ? border.color : \"black\").replace(/^#/, 'rgb:')}`;\n  } else if (/^\\d+$/.exec(border)) { // fallback to html border attributes\n    options.border = border;\n    border = void 0;\n  }\n  let flags = toArray(consumeOption(options, \"flags\")).join(\".\");\n  let dpr = consumeOption(options, \"dpr\", config().dpr);\n  if (options.offset != null) {\n    [options.start_offset, options.end_offset] = split_range(consumeOption(options, \"offset\"));\n  }\n  let overlay = process_layer(consumeOption(options, \"overlay\"));\n  let radius = process_radius(consumeOption(options, \"radius\"));\n  let underlay = process_layer(consumeOption(options, \"underlay\"));\n  let ifValue = process_if(consumeOption(options, \"if\"));\n  let custom_function = process_custom_function(consumeOption(options, \"custom_function\"));\n  let custom_pre_function = process_custom_pre_function(consumeOption(options, \"custom_pre_function\"));\n  let fps = consumeOption(options, 'fps');\n  if (isArray(fps)) {\n    fps = fps.join('-');\n  }\n  let params = {\n    a: normalize_expression(angle),\n    ar: normalize_expression(consumeOption(options, \"aspect_ratio\")),\n    b: background,\n    bo: border,\n    c: crop,\n    co: color,\n    dpr: normalize_expression(dpr),\n    e: normalize_expression(effect),\n    fl: flags,\n    fn: custom_function || custom_pre_function,\n    fps: fps,\n    h: normalize_expression(height),\n    ki: normalize_expression(consumeOption(options, \"keyframe_interval\")),\n    l: overlay,\n    o: normalize_expression(consumeOption(options, \"opacity\")),\n    q: normalize_expression(consumeOption(options, \"quality\")),\n    r: radius,\n    t: named_transformation,\n    u: underlay,\n    w: normalize_expression(width),\n    x: normalize_expression(consumeOption(options, \"x\")),\n    y: normalize_expression(consumeOption(options, \"y\")),\n    z: normalize_expression(consumeOption(options, \"zoom\"))\n  };\n\n  SIMPLE_PARAMS.forEach(([name, short]) => {\n    let value = consumeOption(options, name);\n    if (value !== undefined) {\n      params[short] = value;\n    }\n  });\n  if (params.vc != null) {\n    params.vc = process_video_params(params.vc);\n  }\n  [\"so\", \"eo\", \"du\"].forEach((short) => {\n    if (params[short] !== undefined) {\n      params[short] = norm_range_value(params[short]);\n    }\n  });\n\n  let variablesParam = consumeOption(options, \"variables\", []);\n  let variables = entries(options)\n    .filter(([key, value]) => key.startsWith('$'))\n    .map(([key, value]) => {\n      delete options[key];\n      return `${key}_${normalize_expression(value)}`;\n    }).sort().concat(\n      variablesParam.map(([name, value]) => `${name}_${normalize_expression(value)}`)\n    ).join(',');\n\n  let transformations = entries(params)\n    .filter(([key, value]) => utils.present(value))\n    .map(([key, value]) => key + '_' + value)\n    .sort()\n    .join(',');\n\n  let raw_transformation = consumeOption(options, 'raw_transformation');\n  transformations = compact([ifValue, variables, transformations, raw_transformation]).join(\",\");\n  base_transformations.push(transformations);\n  transformations = base_transformations;\n  if (responsive_width) {\n    let responsive_width_transformation = config().responsive_width_transformation\n      || DEFAULT_RESPONSIVE_WIDTH_TRANSFORMATION;\n\n    transformations.push(utils.generate_transformation_string(clone(responsive_width_transformation)));\n  }\n  if (String(width).startsWith(\"auto\") || responsive_width) {\n    options.responsive = true;\n  }\n  if (dpr === \"auto\") {\n    options.hidpi = true;\n  }\n  return filter(transformations, utils.present).join(\"/\");\n}\n\nfunction updateable_resource_params(options, params = {}) {\n  if (options.access_control != null) {\n    params.access_control = utils.jsonArrayParam(options.access_control);\n  }\n  if (options.auto_tagging != null) {\n    params.auto_tagging = options.auto_tagging;\n  }\n  if (options.background_removal != null) {\n    params.background_removal = options.background_removal;\n  }\n  if (options.categorization != null) {\n    params.categorization = options.categorization;\n  }\n  if (options.context != null) {\n    params.context = utils.encode_context(options.context);\n  }\n  if (options.metadata != null) {\n    params.metadata = utils.encode_context(options.metadata);\n  }\n  if (options.custom_coordinates != null) {\n    params.custom_coordinates = encodeDoubleArray(options.custom_coordinates);\n  }\n  if (options.detection != null) {\n    params.detection = options.detection;\n  }\n  if (options.face_coordinates != null) {\n    params.face_coordinates = encodeDoubleArray(options.face_coordinates);\n  }\n  if (options.headers != null) {\n    params.headers = utils.build_custom_headers(options.headers);\n  }\n  if (options.notification_url != null) {\n    params.notification_url = options.notification_url;\n  }\n  if (options.ocr != null) {\n    params.ocr = options.ocr;\n  }\n  if (options.raw_convert != null) {\n    params.raw_convert = options.raw_convert;\n  }\n  if (options.similarity_search != null) {\n    params.similarity_search = options.similarity_search;\n  }\n  if (options.tags != null) {\n    params.tags = toArray(options.tags).join(\",\");\n  }\n  if (options.quality_override != null) {\n    params.quality_override = options.quality_override;\n  }\n  return params;\n}\n\n/**\n * A list of keys used by the url() function.\n * @private\n */\nconst URL_KEYS = [\n  'api_secret',\n  'auth_token',\n  'cdn_subdomain',\n  'cloud_name',\n  'cname',\n  'format',\n  'long_url_signature',\n  'private_cdn',\n  'resource_type',\n  'secure',\n  'secure_cdn_subdomain',\n  'secure_distribution',\n  'shorten',\n  'sign_url',\n  'ssl_detected',\n  'type',\n  'url_suffix',\n  'use_root_path',\n  'version'\n];\n\n/**\n * Create a new object with only URL parameters\n * @param {object} options The source object\n * @return {Object} An object containing only URL parameters\n */\n\nfunction extractUrlParams(options) {\n  return pickOnlyExistingValues(options, ...URL_KEYS);\n}\n\n/**\n * Create a new object with only transformation parameters\n * @param {object} options The source object\n * @return {Object} An object containing only transformation parameters\n */\n\nfunction extractTransformationParams(options) {\n  return pickOnlyExistingValues(options, ...TRANSFORMATION_PARAMS);\n}\n\n/**\n * Handle the format parameter for fetch urls\n * @private\n * @param options url and transformation options. This argument may be changed by the function!\n */\n\nfunction patchFetchFormat(options = {}) {\n  if (options.type === \"fetch\") {\n    if (options.fetch_format == null) {\n      options.fetch_format = consumeOption(options, \"format\");\n    }\n  }\n}\n\nfunction url(public_id, options = {}) {\n  let signature, source_to_sign;\n  utils.patchFetchFormat(options);\n  let type = consumeOption(options, \"type\", null);\n  let transformation = utils.generate_transformation_string(options);\n\n  let resource_type = consumeOption(options, \"resource_type\", \"image\");\n  let version = consumeOption(options, \"version\");\n  let force_version = consumeOption(options, \"force_version\", config().force_version);\n  if (force_version == null) {\n    force_version = true;\n  }\n  let long_url_signature = !!consumeOption(options, \"long_url_signature\", config().long_url_signature);\n  let format = consumeOption(options, \"format\");\n  let cloud_name = consumeOption(options, \"cloud_name\", config().cloud_name);\n  if (!cloud_name) {\n    throw \"Unknown cloud_name\";\n  }\n  let private_cdn = consumeOption(options, \"private_cdn\", config().private_cdn);\n  let secure_distribution = consumeOption(options, \"secure_distribution\", config().secure_distribution);\n  let secure = consumeOption(options, \"secure\", null);\n  let ssl_detected = consumeOption(options, \"ssl_detected\", config().ssl_detected);\n  if (secure === null) {\n    secure = ssl_detected || config().secure;\n  }\n  let cdn_subdomain = consumeOption(options, \"cdn_subdomain\", config().cdn_subdomain);\n  let secure_cdn_subdomain = consumeOption(options, \"secure_cdn_subdomain\", config().secure_cdn_subdomain);\n  let cname = consumeOption(options, \"cname\", config().cname);\n  let shorten = consumeOption(options, \"shorten\", config().shorten);\n  let sign_url = consumeOption(options, \"sign_url\", config().sign_url);\n  let api_secret = consumeOption(options, \"api_secret\", config().api_secret);\n  let url_suffix = consumeOption(options, \"url_suffix\");\n  let use_root_path = consumeOption(options, \"use_root_path\", config().use_root_path);\n  let auth_token = consumeOption(options, \"auth_token\");\n  if (auth_token !== false) {\n    auth_token = exports.merge(config().auth_token, auth_token);\n  }\n  let preloaded = /^(image|raw)\\/([a-z0-9_]+)\\/v(\\d+)\\/([^#]+)$/.exec(public_id);\n  if (preloaded) {\n    resource_type = preloaded[1];\n    type = preloaded[2];\n    version = preloaded[3];\n    public_id = preloaded[4];\n  }\n  let original_source = public_id;\n  if (public_id == null) {\n    return original_source;\n  }\n  public_id = public_id.toString();\n  if (type === null && public_id.match(/^https?:\\//i)) {\n    return original_source;\n  }\n  [resource_type, type] = finalize_resource_type(resource_type, type, url_suffix, use_root_path, shorten);\n  [public_id, source_to_sign] = finalize_source(public_id, format, url_suffix);\n\n  if (version == null && force_version && source_to_sign.indexOf(\"/\") >= 0 && !source_to_sign.match(/^v[0-9]+/) && !source_to_sign.match(/^https?:\\//)) {\n    version = 1;\n  }\n  if (version != null) {\n    version = `v${version}`;\n  } else {\n    version = null;\n  }\n\n  transformation = transformation.replace(/([^:])\\/\\//g, '$1/');\n  if (sign_url && isEmpty(auth_token)) {\n    let to_sign = [transformation, source_to_sign].filter(function (part) {\n      return (part != null) && part !== '';\n    }).join('/');\n    try {\n      for (let i = 0; to_sign !== decodeURIComponent(to_sign) && i < 10; i++) {\n        to_sign = decodeURIComponent(to_sign);\n      }\n      // eslint-disable-next-line no-empty\n    } catch (error) {\n    }\n    let shasum = crypto.createHash(long_url_signature ? 'sha256' : 'sha1');\n    shasum.update(utf8_encode(to_sign + api_secret), 'binary');\n    signature = shasum.digest('base64').replace(/\\//g, '_').replace(/\\+/g, '-').substring(0, long_url_signature ? 32 : 8);\n    signature = `s--${signature}--`;\n  }\n  let prefix = unsigned_url_prefix(\n    public_id,\n    cloud_name,\n    private_cdn,\n    cdn_subdomain,\n    secure_cdn_subdomain,\n    cname,\n    secure,\n    secure_distribution\n  );\n  let resultUrl = [prefix, resource_type, type, signature, transformation, version, public_id].filter(function (part) {\n    return (part != null) && part !== '';\n  }).join('/').replace(' ', '%20');\n  if (sign_url && !isEmpty(auth_token)) {\n    auth_token.url = urlParse(resultUrl).path;\n    let token = generate_token(auth_token);\n    resultUrl += `?${token}`;\n  }\n\n  let urlAnalytics = ensureOption(options, 'urlAnalytics', false);\n\n  if (urlAnalytics === true) {\n    let sdkVersions = getSDKVersions();\n    let analyticsOptions = getAnalyticsOptions(Object.assign({}, options, sdkVersions));\n\n    let sdkAnalyticsSignature = getSDKAnalyticsSignature(analyticsOptions);\n\n    // url might already have a '?' query param\n    let appender = '?';\n    if (resultUrl.indexOf('?') >= 0) {\n      appender = '&';\n    }\n    resultUrl = `${resultUrl}${appender}_s=${sdkAnalyticsSignature}`;\n  }\n\n  return resultUrl;\n}\n\nfunction video_url(public_id, options) {\n  options = extend({\n    resource_type: 'video'\n  }, options);\n  return utils.url(public_id, options);\n}\n\nfunction finalize_source(source, format, url_suffix) {\n  let source_to_sign;\n  source = source.replace(/([^:])\\/\\//g, '$1/');\n  if (source.match(/^https?:\\//i)) {\n    source = smart_escape(source);\n    source_to_sign = source;\n  } else {\n    source = encodeURIComponent(decodeURIComponent(source)).replace(/%3A/g, \":\").replace(/%2F/g, \"/\");\n    source_to_sign = source;\n    if (url_suffix) {\n      if (url_suffix.match(/[\\.\\/]/)) {\n        throw new Error('url_suffix should not include . or /');\n      }\n      source = source + '/' + url_suffix;\n    }\n    if (format != null) {\n      source = source + '.' + format;\n      source_to_sign = source_to_sign + '.' + format;\n    }\n  }\n  return [source, source_to_sign];\n}\n\nfunction video_thumbnail_url(public_id, options) {\n  options = extend({}, DEFAULT_POSTER_OPTIONS, options);\n  return utils.url(public_id, options);\n}\n\nfunction finalize_resource_type(resource_type, type, url_suffix, use_root_path, shorten) {\n  if (type == null) {\n    type = 'upload';\n  }\n  if (url_suffix != null) {\n    if (resource_type === 'image' && type === 'upload') {\n      resource_type = \"images\";\n      type = null;\n    } else if (resource_type === 'image' && type === 'private') {\n      resource_type = 'private_images';\n      type = null;\n    } else if (resource_type === 'image' && type === 'authenticated') {\n      resource_type = 'authenticated_images';\n      type = null;\n    } else if (resource_type === 'raw' && type === 'upload') {\n      resource_type = 'files';\n      type = null;\n    } else if (resource_type === 'video' && type === 'upload') {\n      resource_type = 'videos';\n      type = null;\n    } else {\n      throw new Error(\"URL Suffix only supported for image/upload, image/private, image/authenticated, video/upload and raw/upload\");\n    }\n  }\n  if (use_root_path) {\n    if ((resource_type === 'image' && type === 'upload') || (resource_type === 'images' && (type == null))) {\n      resource_type = null;\n      type = null;\n    } else {\n      throw new Error(\"Root path only supported for image/upload\");\n    }\n  }\n  if (shorten && resource_type === 'image' && type === 'upload') {\n    resource_type = 'iu';\n    type = null;\n  }\n  return [resource_type, type];\n}\n// cdn_subdomain and secure_cdn_subdomain\n// 1) Customers in shared distribution (e.g. res.cloudinary.com)\n//    if cdn_domain is true uses res-[1-5].cloudinary.com for both http and https.\n//    Setting secure_cdn_subdomain to false disables this for https.\n// 2) Customers with private cdn\n//    if cdn_domain is true uses cloudname-res-[1-5].cloudinary.com for http\n//    if secure_cdn_domain is true uses cloudname-res-[1-5].cloudinary.com for https\n//      (please contact support if you require this)\n// 3) Customers with cname\n//    if cdn_domain is true uses a[1-5].cname for http.\n//    For https, uses the same naming scheme as 1 for shared distribution and as 2 for private distribution.\n\nfunction unsigned_url_prefix(\n  source,\n  cloud_name,\n  private_cdn,\n  cdn_subdomain,\n  secure_cdn_subdomain,\n  cname,\n  secure,\n  secure_distribution\n) {\n  let prefix;\n  if (cloud_name.indexOf(\"/\") === 0) {\n    return '/res' + cloud_name;\n  }\n  let shared_domain = !private_cdn;\n  if (secure) {\n    if ((secure_distribution == null) || secure_distribution === exports.OLD_AKAMAI_SHARED_CDN) {\n      secure_distribution = private_cdn ? cloud_name + \"-res.cloudinary.com\" : exports.SHARED_CDN;\n    }\n    if (shared_domain == null) {\n      shared_domain = secure_distribution === exports.SHARED_CDN;\n    }\n    if ((secure_cdn_subdomain == null) && shared_domain) {\n      secure_cdn_subdomain = cdn_subdomain;\n    }\n    if (secure_cdn_subdomain) {\n      secure_distribution = secure_distribution.replace('res.cloudinary.com', 'res-' + ((crc32(source) % 5) + 1 + '.cloudinary.com'));\n    }\n    prefix = 'https://' + secure_distribution;\n  } else if (cname) {\n    let subdomain = cdn_subdomain ? 'a' + ((crc32(source) % 5) + 1) + '.' : '';\n    prefix = 'http://' + subdomain + cname;\n  } else {\n    let cdn_part = private_cdn ? cloud_name + '-' : '';\n    let subdomain_part = cdn_subdomain ? '-' + ((crc32(source) % 5) + 1) : '';\n    let host = [cdn_part, 'res', subdomain_part, '.cloudinary.com'].join('');\n    prefix = 'http://' + host;\n  }\n  if (shared_domain) {\n    prefix += '/' + cloud_name;\n  }\n  return prefix;\n}\n\nfunction base_api_url(path= [], options = {}) {\n  let cloudinary = ensureOption(options, \"upload_prefix\", UPLOAD_PREFIX);\n  let cloud_name = ensureOption(options, \"cloud_name\");\n  return [cloudinary, \"v1_1\", cloud_name].concat(path).join(\"/\");\n}\n\nfunction api_url(action = 'upload', options = {}) {\n  let resource_type = options.resource_type || \"image\";\n  return base_api_url([resource_type, action], options);\n}\n\nfunction random_public_id() {\n  return crypto.randomBytes(12).toString('base64').replace(/[^a-z0-9]/g, \"\");\n}\n\nfunction signed_preloaded_image(result) {\n  return `${result.resource_type}/upload/v${result.version}/${filter([result.public_id, result.format], utils.present).join(\".\")}#${result.signature}`;\n}\n\nfunction api_sign_request(params_to_sign, api_secret) {\n  let to_sign = entries(params_to_sign).filter(\n    ([k, v]) => utils.present(v)\n  ).map(\n    ([k, v]) => `${k}=${toArray(v).join(\",\")}`\n  ).sort().join(\"&\");\n  let shasum = crypto.createHash('sha1');\n  shasum.update(utf8_encode(to_sign + api_secret), 'binary');\n  return shasum.digest('hex');\n}\n\nfunction clear_blank(hash) {\n  let filtered_hash = {};\n  entries(hash).filter(\n    ([k, v]) => utils.present(v)\n  ).forEach(\n    ([k, v]) => { filtered_hash[k] = v; }\n  );\n  return filtered_hash;\n}\n\nfunction merge(hash1, hash2) {\n  return { ...hash1, ...hash2 };\n}\n\nfunction sign_request(params, options = {}) {\n  let apiKey = ensureOption(options, 'api_key');\n  let apiSecret = ensureOption(options, 'api_secret');\n  params = exports.clear_blank(params);\n  params.signature = exports.api_sign_request(params, apiSecret);\n  params.api_key = apiKey;\n  return params;\n}\n\nfunction webhook_signature(data, timestamp, options = {}) {\n  ensurePresenceOf({ data, timestamp });\n\n  let api_secret = ensureOption(options, 'api_secret');\n  let shasum = crypto.createHash('sha1');\n  shasum.update(data + timestamp + api_secret, 'binary');\n  return shasum.digest('hex');\n}\n\n/**\n * Verifies the authenticity of a notification signature\n *\n * @param {string} body JSON of the request's body\n * @param {number} timestamp Unix timestamp. Can be retrieved from the X-Cld-Timestamp header\n * @param {string} signature Actual signature. Can be retrieved from the X-Cld-Signature header\n * @param {number} [valid_for=7200] The desired time in seconds for considering the request valid\n *\n * @return {boolean}\n */\nfunction verifyNotificationSignature(body, timestamp, signature, valid_for = 7200) {\n  // verify that signature is valid for the given timestamp\n  if (timestamp < Date.now() - valid_for) {\n    return false;\n  }\n  const payload_hash = utils.webhook_signature(body, timestamp, { api_secret: config().api_secret });\n  return signature === payload_hash;\n}\n\nfunction process_request_params(params, options) {\n  if ((options.unsigned != null) && options.unsigned) {\n    params = exports.clear_blank(params);\n    delete params.timestamp;\n  } else if (options.signature) {\n    params = exports.clear_blank(options);\n  } else {\n    params = exports.sign_request(params, options);\n  }\n  return params;\n}\n\nfunction private_download_url(public_id, format, options = {}) {\n  let params = exports.sign_request({\n    timestamp: options.timestamp || exports.timestamp(),\n    public_id: public_id,\n    format: format,\n    type: options.type,\n    attachment: options.attachment,\n    expires_at: options.expires_at\n  }, options);\n  return exports.api_url(\"download\", options) + \"?\" + querystring.stringify(params);\n}\n\n/**\n * Utility method that uses the deprecated ZIP download API.\n * @deprecated Replaced by {download_zip_url} that uses the more advanced and robust archive generation and download API\n */\n\nfunction zip_download_url(tag, options = {}) {\n  let params = exports.sign_request({\n    timestamp: options.timestamp || exports.timestamp(),\n    tag: tag,\n    transformation: utils.generate_transformation_string(options)\n  }, options);\n  return exports.api_url(\"download_tag.zip\", options) + \"?\" + hashToQuery(params);\n}\n\n/**\n * The returned url should allow downloading the backedup asset based on the\n * version and asset id\n * asset and version id are returned with resource(<PUBLIC_ID1>, { versions: true })\n * @param asset_id\n * @param version_id\n * @param options\n * @returns {string }\n */\nfunction download_backedup_asset(asset_id, version_id, options = {}) {\n  let params = exports.sign_request({\n    timestamp: options.timestamp || exports.timestamp(),\n    asset_id: asset_id,\n    version_id: version_id\n  }, options);\n  return exports.base_api_url(['download_backup'], options) + \"?\" + hashToQuery(params);\n}\n\n/**\n * Returns a URL that when invokes creates an archive and returns it.\n * @param {object} options\n * @param {string} [options.resource_type=\"image\"] The resource type of files to include in the archive.\n *   Must be one of :image | :video | :raw\n * @param {string} [options.type=\"upload\"] The specific file type of resources: :upload|:private|:authenticated\n * @param {string|Array} [options.tags] list of tags to include in the archive\n * @param {string|Array<string>} [options.public_ids] list of public_ids to include in the archive\n * @param {string|Array<string>} [options.prefixes]  list of prefixes of public IDs (e.g., folders).\n * @param {string|Array<string>} [options.fully_qualified_public_ids] list of fully qualified public_ids to include\n *   in the archive.\n * @param {string|Array<string>} [options.transformations]  list of transformations.\n *   The derived images of the given transformations are included in the archive. Using the string representation of\n *   multiple chained transformations as we use for the 'eager' upload parameter.\n * @param {string} [options.mode=\"create\"] return the generated archive file or to store it as a raw resource and\n *   return a JSON with URLs for accessing the archive. Possible values: :download, :create\n * @param {string} [options.target_format=\"zip\"]\n * @param {string} [options.target_public_id]  public ID of the generated raw resource.\n *   Relevant only for the create mode. If not specified, random public ID is generated.\n * @param {boolean} [options.flatten_folders=false] If true, flatten public IDs with folders to be in the root\n *   of the archive. Add numeric counter to the file name in case of a name conflict.\n * @param {boolean} [options.flatten_transformations=false] If true, and multiple transformations are given,\n *   flatten the folder structure of derived images and store the transformation details on the file name instead.\n * @param {boolean} [options.use_original_filename] Use the original file name of included images\n *   (if available) instead of the public ID.\n * @param {boolean} [options.async=false] If true, return immediately and perform archive creation in the background.\n *   Relevant only for the create mode.\n * @param {string} [options.notification_url] URL to send an HTTP post request (webhook) to when the\n *   archive creation is completed.\n * @param {string|Array<string>} [options.target_tags=] Allows assigning one or more tags to the generated archive file\n *   (for later housekeeping via the admin API).\n * @param {string} [options.keep_derived=false] keep the derived images used for generating the archive\n * @return {String} archive url\n */\nfunction download_archive_url(options = {}) {\n  let cloudinary_params = exports.sign_request(exports.archive_params(merge(options, {\n    mode: \"download\"\n  })), options);\n  return exports.api_url(\"generate_archive\", options) + \"?\" + hashToQuery(cloudinary_params);\n}\n\n/**\n * Returns a URL that when invokes creates an zip archive and returns it.\n * @see download_archive_url\n */\n\nfunction download_zip_url(options = {}) {\n  return exports.download_archive_url(merge(options, {\n    target_format: \"zip\"\n  }));\n}\n\n/**\n * Creates and returns a URL that when invoked creates an archive of a folder\n * @param {string} folder_path Full path (from the root) of the folder to download\n * @param {object} options Additional options\n * @returns {string} Url for downloading an archive of a folder\n */\nfunction download_folder(folder_path, options = {}) {\n  options.resource_type = options.resource_type || \"all\";\n  options.prefixes = folder_path;\n  let cloudinary_params = exports.sign_request(exports.archive_params(merge(options, {\n    mode: \"download\"\n  })), options);\n  return exports.api_url(\"generate_archive\", options) + \"?\" + hashToQuery(cloudinary_params);\n}\n\n/**\n * Render the key/value pair as an HTML tag attribute\n * @private\n * @param {string} key\n * @param {string|boolean|number} [value]\n * @return {string} A string representing the HTML attribute\n */\nfunction join_pair(key, value) {\n  if (!value) { return void 0; }\n  return value === true ? key : key + \"='\" + value + \"'\";\n}\n\n/**\n * If the given value is a string, replaces single or double quotes with character entities\n * @private\n * @param {*} value The string to encode quotes in\n * @return {*} Encoded string or original value if not a string\n */\nfunction escapeQuotes(value) {\n  return isString(value) ? value.replace('\"', '&#34;').replace(\"'\", '&#39;') : value;\n}\n\n/**\n *\n * @param attrs\n * @return {*}\n */\nexports.html_attrs = function html_attrs(attrs) {\n  return filter(map(attrs, function (value, key) {\n    return join_pair(key, escapeQuotes(value));\n  })).sort().join(\" \");\n};\n\nconst CLOUDINARY_JS_CONFIG_PARAMS = ['api_key', 'cloud_name', 'private_cdn', 'secure_distribution', 'cdn_subdomain'];\n\nfunction cloudinary_js_config() {\n  let params = pickOnlyExistingValues(config(), ...CLOUDINARY_JS_CONFIG_PARAMS);\n  return `<script type='text/javascript'>\\n$.cloudinary.config(${JSON.stringify(params)});\\n</script>`;\n}\n\nfunction v1_result_adapter(callback) {\n  if (callback == null) { return undefined; }\n  return function (result) {\n    if (result.error != null) {\n      return callback(result.error);\n    }\n    return callback(void 0, result);\n  };\n}\n\nfunction v1_adapter(name, num_pass_args, v1) {\n  return function (...args) {\n    let pass_args = take(args, num_pass_args);\n    let options = args[num_pass_args];\n    let callback = args[num_pass_args + 1];\n    if ((callback == null) && isFunction(options)) {\n      callback = options;\n      options = {};\n    }\n    callback = v1_result_adapter(callback);\n    args = pass_args.concat([callback, options]);\n    return v1[name].apply(this, args);\n  };\n}\n\nfunction v1_adapters(exports, v1, mapping) {\n  return Object.keys(mapping).map((name) => {\n    let num_pass_args = mapping[name];\n    exports[name] = v1_adapter(name, num_pass_args, v1);\n    return exports[name];\n  });\n}\n\nfunction as_safe_bool(value) {\n  if (value == null) {\n    return void 0;\n  }\n  if (value === true || value === 'true' || value === '1') {\n    value = 1;\n  }\n  if (value === false || value === 'false' || value === '0') {\n    value = 0;\n  }\n  return value;\n}\n\nconst NUMBER_PATTERN = \"([0-9]*)\\\\.([0-9]+)|([0-9]+)\";\n\nconst OFFSET_ANY_PATTERN = `(${NUMBER_PATTERN})([%pP])?`;\nconst RANGE_VALUE_RE = RegExp(`^${OFFSET_ANY_PATTERN}$`);\nconst OFFSET_ANY_PATTERN_RE = RegExp(`(${OFFSET_ANY_PATTERN})\\\\.\\\\.(${OFFSET_ANY_PATTERN})`);\n\n// Split a range into the start and end values\nfunction split_range(range) { // :nodoc:\n  switch (range.constructor) {\n  case String:\n    if (!OFFSET_ANY_PATTERN_RE.test(range)) {\n      return range;\n    }\n    return range.split(\"..\");\n  case Array:\n    return [first(range), last(range)];\n  default:\n    return [null, null];\n  }\n}\n\nfunction norm_range_value(value) { // :nodoc:\n  let offset = String(value).match(RANGE_VALUE_RE);\n  if (offset) {\n    let modifier = offset[5] ? 'p' : '';\n    value = `${offset[1] || offset[4]}${modifier}`;\n  }\n  return value;\n}\n\n/**\n * A video codec parameter can be either a String or a Hash.\n * @param {Object} param <code>vc_<codec>[ : <profile> : [<level>]]</code>\n *                       or <code>{ codec: 'h264', profile: 'basic', level: '3.1' }</code>\n * @return {String} <code><codec> : <profile> : [<level>]]</code> if a Hash was provided\n *                   or the param if a String was provided.\n *                   Returns null if param is not a Hash or String\n */\nfunction process_video_params(param) {\n  switch (param.constructor) {\n  case Object: {\n    let video = \"\";\n    if ('codec' in param) {\n      video = param.codec;\n      if ('profile' in param) {\n        video += \":\" + param.profile;\n        if ('level' in param) {\n          video += \":\" + param.level;\n        }\n      }\n    }\n    return video;\n  }\n  case String:\n    return param;\n  default:\n    return null;\n  }\n}\n/**\n * Returns a Hash of parameters used to create an archive\n * @private\n * @param {object} options\n * @return {object} Archive API parameters\n */\n\nfunction archive_params(options = {}) {\n  return {\n    allow_missing: exports.as_safe_bool(options.allow_missing),\n    async: exports.as_safe_bool(options.async),\n    expires_at: options.expires_at,\n    flatten_folders: exports.as_safe_bool(options.flatten_folders),\n    flatten_transformations: exports.as_safe_bool(options.flatten_transformations),\n    keep_derived: exports.as_safe_bool(options.keep_derived),\n    mode: options.mode,\n    notification_url: options.notification_url,\n    prefixes: options.prefixes && toArray(options.prefixes),\n    fully_qualified_public_ids: options.fully_qualified_public_ids && toArray(options.fully_qualified_public_ids),\n    public_ids: options.public_ids && toArray(options.public_ids),\n    skip_transformation_name: exports.as_safe_bool(options.skip_transformation_name),\n    tags: options.tags && toArray(options.tags),\n    target_format: options.target_format,\n    target_public_id: options.target_public_id,\n    target_tags: options.target_tags && toArray(options.target_tags),\n    timestamp: options.timestamp || exports.timestamp(),\n    transformations: utils.build_eager(options.transformations),\n    type: options.type,\n    use_original_filename: exports.as_safe_bool(options.use_original_filename),\n    folder_path: options.folder_path\n  };\n}\n\nexports.create_source_tag = function create_source_tag(src, source_type, codecs = null) {\n  let video_type = source_type === 'ogv' ? 'ogg' : source_type;\n  let mime_type = `video/${video_type}`;\n  if (!isEmpty(codecs)) {\n    let codecs_str = isArray(codecs) ? codecs.join(', ') : codecs;\n    mime_type += `; codecs=${codecs_str}`;\n  }\n  return `<source ${utils.html_attrs({ src, type: mime_type })}>`;\n};\n\nfunction build_explicit_api_params(public_id, options = {}) {\n  return [exports.build_upload_params(extend({}, { public_id }, options))];\n}\n\nfunction generate_responsive_breakpoints_string(breakpoints) {\n  if (breakpoints == null) {\n    return null;\n  }\n  breakpoints = clone(breakpoints);\n  if (!isArray(breakpoints)) {\n    breakpoints = [breakpoints];\n  }\n  for (let j = 0; j < breakpoints.length; j++) {\n    let breakpoint_settings = breakpoints[j];\n    if (breakpoint_settings != null) {\n      if (breakpoint_settings.transformation) {\n        breakpoint_settings.transformation = utils.generate_transformation_string(\n          clone(breakpoint_settings.transformation)\n        );\n      }\n    }\n  }\n  return JSON.stringify(breakpoints);\n}\n\nfunction build_streaming_profiles_param(options = {}) {\n  let params = pickOnlyExistingValues(options, \"display_name\", \"representations\");\n  if (isArray(params.representations)) {\n    params.representations = JSON.stringify(params.representations.map(\n      r => ({\n        transformation: utils.generate_transformation_string(r.transformation)\n      })\n    ));\n  }\n  return params;\n}\n\nfunction hashToParameters(hash) {\n  return entries(hash).reduce((parameters, [key, value]) => {\n    if (isArray(value)) {\n      key = key.endsWith('[]') ? key : key + '[]';\n      const items = value.map(v => [key, v]);\n      parameters = parameters.concat(items);\n    } else {\n      parameters.push([key, value]);\n    }\n    return parameters;\n  }, []);\n}\n\n/**\n * Convert a hash of values to a URI query string.\n * Array values are spread as individual parameters.\n * @param {object} hash Key-value parameters\n * @return {string} A URI query string.\n */\nfunction hashToQuery(hash) {\n  return hashToParameters(hash).map(\n    ([key, value]) => `${querystring.escape(key)}=${querystring.escape(value)}`\n  ).join('&');\n}\n\n/**\n * Verify that the parameter `value` is defined and it's string value is not zero.\n * <br>This function should not be confused with `isEmpty()`.\n * @private\n * @param {string|number} value The value to check.\n * @return {boolean} True if the value is defined and not empty.\n */\n\nfunction present(value) {\n  return value != null && (\"\" + value).length > 0;\n}\n\n/**\n * Returns a new object with key values from source based on the keys.\n * `null` or `undefined` values are not copied.\n * @private\n * @param {object} source The object to pick values from.\n * @param {...string} keys One or more keys to copy from source.\n * @return {object} A new object with the required keys and values.\n */\n\nfunction pickOnlyExistingValues(source, ...keys) {\n  let result = {};\n  if (source) {\n    keys.forEach((key) => {\n      if (source[key] != null) {\n        result[key] = source[key];\n      }\n    });\n  }\n  return result;\n}\n\n/**\n * Returns a JSON array as String.\n * Yields the array before it is converted to JSON format\n * @private\n * @param {object|String|Array<object>} data\n * @param {function(*):*} [modifier] called with the array before the array is stringified\n * @return {String|null} a JSON array string or `null` if data is `null`\n */\n\nfunction jsonArrayParam(data, modifier) {\n  if (!data) {\n    return null;\n  }\n  if (isString(data)) {\n    data = JSON.parse(data);\n  }\n  if (!isArray(data)) {\n    data = [data];\n  }\n  if (isFunction(modifier)) {\n    data = modifier(data);\n  }\n  return JSON.stringify(data);\n}\n\n/**\n * Empty function - do nothing\n *\n */\nexports.NOP = function () {};\nexports.generate_auth_token = generate_auth_token;\nexports.getUserAgent = getUserAgent;\nexports.build_upload_params = build_upload_params;\nexports.timestamp = () => Math.floor(new Date().getTime() / 1000);\nexports.option_consume = consumeOption; // for backwards compatibility\nexports.build_array = toArray; // for backwards compatibility\nexports.encode_double_array = encodeDoubleArray;\nexports.encode_key_value = encode_key_value;\nexports.encode_context = encode_context;\nexports.build_eager = build_eager;\nexports.build_custom_headers = build_custom_headers;\nexports.generate_transformation_string = generate_transformation_string;\nexports.updateable_resource_params = updateable_resource_params;\nexports.extractUrlParams = extractUrlParams;\nexports.extractTransformationParams = extractTransformationParams;\nexports.patchFetchFormat = patchFetchFormat;\nexports.url = url;\nexports.video_url = video_url;\nexports.video_thumbnail_url = video_thumbnail_url;\nexports.api_url = api_url;\nexports.random_public_id = random_public_id;\nexports.signed_preloaded_image = signed_preloaded_image;\nexports.api_sign_request = api_sign_request;\nexports.clear_blank = clear_blank;\nexports.merge = merge;\nexports.sign_request = sign_request;\nexports.webhook_signature = webhook_signature;\nexports.verifyNotificationSignature = verifyNotificationSignature;\nexports.process_request_params = process_request_params;\nexports.private_download_url = private_download_url;\nexports.zip_download_url = zip_download_url;\nexports.download_archive_url = download_archive_url;\nexports.download_zip_url = download_zip_url;\nexports.cloudinary_js_config = cloudinary_js_config;\nexports.v1_adapters = v1_adapters;\nexports.as_safe_bool = as_safe_bool;\nexports.archive_params = archive_params;\nexports.build_explicit_api_params = build_explicit_api_params;\nexports.generate_responsive_breakpoints_string = generate_responsive_breakpoints_string;\nexports.build_streaming_profiles_param = build_streaming_profiles_param;\nexports.hashToParameters = hashToParameters;\nexports.present = present;\nexports.only = pickOnlyExistingValues; // for backwards compatibility\nexports.pickOnlyExistingValues = pickOnlyExistingValues;\nexports.jsonArrayParam = jsonArrayParam;\nexports.download_folder = download_folder;\nexports.base_api_url = base_api_url;\nexports.download_backedup_asset = download_backedup_asset;\n\n// was exported before, so kept for backwards compatibility\nexports.DEFAULT_POSTER_OPTIONS = DEFAULT_POSTER_OPTIONS;\nexports.DEFAULT_VIDEO_SOURCE_TYPES = DEFAULT_VIDEO_SOURCE_TYPES;\n\nObject.assign(module.exports, {\n  at,\n  clone,\n  extend,\n  filter,\n  includes,\n  isArray,\n  isEmpty,\n  isNumber,\n  isObject,\n  isRemoteUrl,\n  isString,\n  isUndefined,\n  keys: source => Object.keys(source),\n  ensurePresenceOf\n});\n"]},"metadata":{},"sourceType":"script"}