{"ast":null,"code":"\"use strict\";\n/* eslint-disable no-bitwise */\n// http://kevin.vanzonneveld.net\n// +   original by: Webtoolkit.info (http://www.webtoolkit.info/)\n// +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n// +   improved by: sowberry\n// +    tweaked by: Jack\n// +   bugfixed by: Onno Marsman\n// +   improved by: Yves Sucaet\n// +   bugfixed by: Onno Marsman\n// +   bugfixed by: Ulrich\n// +   bugfixed by: Rafal Kukawski\n// +   improved by: kirilloid\n// *     example 1: utf8_encode('Kevin van Zonneveld')\n// *     returns 1: 'Kevin van Zonneveld'\n\n/**\r\n * Encode the given string\r\n * @private\r\n * @param {string} argString the string to encode\r\n * @return {string}\r\n */\n\nmodule.exports = function utf8_encode(argString) {\n  var c1 = void 0,\n      enc = void 0,\n      n = void 0;\n\n  if (argString == null) {\n    return \"\";\n  }\n\n  var string = argString + \"\";\n  var utftext = \"\";\n  var start = 0;\n  var end = 0;\n  var stringl = string.length;\n  n = 0;\n\n  while (n < stringl) {\n    c1 = string.charCodeAt(n);\n    enc = null;\n\n    if (c1 < 128) {\n      end++;\n    } else if (c1 > 127 && c1 < 2048) {\n      enc = String.fromCharCode(c1 >> 6 | 192, c1 & 63 | 128);\n    } else {\n      enc = String.fromCharCode(c1 >> 12 | 224, c1 >> 6 & 63 | 128, c1 & 63 | 128);\n    }\n\n    if (enc !== null) {\n      if (end > start) {\n        utftext += string.slice(start, end);\n      }\n\n      utftext += enc;\n      start = n + 1;\n      end = start;\n    }\n\n    n++;\n  }\n\n  if (end > start) {\n    utftext += string.slice(start, stringl);\n  }\n\n  return utftext;\n};","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Backend/node_modules/cloudinary/lib-es5/utils/utf8_encode.js"],"names":["module","exports","utf8_encode","argString","c1","enc","n","string","utftext","start","end","stringl","length","charCodeAt","String","fromCharCode","slice"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,OAAP,GAAiB,SAASC,WAAT,CAAqBC,SAArB,EAAgC;AAC/C,MAAIC,EAAE,GAAG,KAAK,CAAd;AAAA,MACIC,GAAG,GAAG,KAAK,CADf;AAAA,MAEIC,CAAC,GAAG,KAAK,CAFb;;AAGA,MAAIH,SAAS,IAAI,IAAjB,EAAuB;AACrB,WAAO,EAAP;AACD;;AACD,MAAII,MAAM,GAAGJ,SAAS,GAAG,EAAzB;AACA,MAAIK,OAAO,GAAG,EAAd;AACA,MAAIC,KAAK,GAAG,CAAZ;AACA,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,OAAO,GAAGJ,MAAM,CAACK,MAArB;AACAN,EAAAA,CAAC,GAAG,CAAJ;;AACA,SAAOA,CAAC,GAAGK,OAAX,EAAoB;AAClBP,IAAAA,EAAE,GAAGG,MAAM,CAACM,UAAP,CAAkBP,CAAlB,CAAL;AACAD,IAAAA,GAAG,GAAG,IAAN;;AACA,QAAID,EAAE,GAAG,GAAT,EAAc;AACZM,MAAAA,GAAG;AACJ,KAFD,MAEO,IAAIN,EAAE,GAAG,GAAL,IAAYA,EAAE,GAAG,IAArB,EAA2B;AAChCC,MAAAA,GAAG,GAAGS,MAAM,CAACC,YAAP,CAAoBX,EAAE,IAAI,CAAN,GAAU,GAA9B,EAAmCA,EAAE,GAAG,EAAL,GAAU,GAA7C,CAAN;AACD,KAFM,MAEA;AACLC,MAAAA,GAAG,GAAGS,MAAM,CAACC,YAAP,CAAoBX,EAAE,IAAI,EAAN,GAAW,GAA/B,EAAoCA,EAAE,IAAI,CAAN,GAAU,EAAV,GAAe,GAAnD,EAAwDA,EAAE,GAAG,EAAL,GAAU,GAAlE,CAAN;AACD;;AACD,QAAIC,GAAG,KAAK,IAAZ,EAAkB;AAChB,UAAIK,GAAG,GAAGD,KAAV,EAAiB;AACfD,QAAAA,OAAO,IAAID,MAAM,CAACS,KAAP,CAAaP,KAAb,EAAoBC,GAApB,CAAX;AACD;;AACDF,MAAAA,OAAO,IAAIH,GAAX;AACAI,MAAAA,KAAK,GAAGH,CAAC,GAAG,CAAZ;AACAI,MAAAA,GAAG,GAAGD,KAAN;AACD;;AACDH,IAAAA,CAAC;AACF;;AACD,MAAII,GAAG,GAAGD,KAAV,EAAiB;AACfD,IAAAA,OAAO,IAAID,MAAM,CAACS,KAAP,CAAaP,KAAb,EAAoBE,OAApB,CAAX;AACD;;AACD,SAAOH,OAAP;AACD,CArCD","sourcesContent":["\"use strict\";\r\n\r\n/* eslint-disable no-bitwise */\r\n// http://kevin.vanzonneveld.net\r\n// +   original by: Webtoolkit.info (http://www.webtoolkit.info/)\r\n// +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\r\n// +   improved by: sowberry\r\n// +    tweaked by: Jack\r\n// +   bugfixed by: Onno Marsman\r\n// +   improved by: Yves Sucaet\r\n// +   bugfixed by: Onno Marsman\r\n// +   bugfixed by: Ulrich\r\n// +   bugfixed by: Rafal Kukawski\r\n// +   improved by: kirilloid\r\n// *     example 1: utf8_encode('Kevin van Zonneveld')\r\n// *     returns 1: 'Kevin van Zonneveld'\r\n\r\n/**\r\n * Encode the given string\r\n * @private\r\n * @param {string} argString the string to encode\r\n * @return {string}\r\n */\r\nmodule.exports = function utf8_encode(argString) {\r\n  var c1 = void 0,\r\n      enc = void 0,\r\n      n = void 0;\r\n  if (argString == null) {\r\n    return \"\";\r\n  }\r\n  var string = argString + \"\";\r\n  var utftext = \"\";\r\n  var start = 0;\r\n  var end = 0;\r\n  var stringl = string.length;\r\n  n = 0;\r\n  while (n < stringl) {\r\n    c1 = string.charCodeAt(n);\r\n    enc = null;\r\n    if (c1 < 128) {\r\n      end++;\r\n    } else if (c1 > 127 && c1 < 2048) {\r\n      enc = String.fromCharCode(c1 >> 6 | 192, c1 & 63 | 128);\r\n    } else {\r\n      enc = String.fromCharCode(c1 >> 12 | 224, c1 >> 6 & 63 | 128, c1 & 63 | 128);\r\n    }\r\n    if (enc !== null) {\r\n      if (end > start) {\r\n        utftext += string.slice(start, end);\r\n      }\r\n      utftext += enc;\r\n      start = n + 1;\r\n      end = start;\r\n    }\r\n    n++;\r\n  }\r\n  if (end > start) {\r\n    utftext += string.slice(start, stringl);\r\n  }\r\n  return utftext;\r\n};"]},"metadata":{},"sourceType":"script"}