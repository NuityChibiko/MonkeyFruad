{"ast":null,"code":"\"use strict\";\n/*!\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * A DocumentChange represents a change to the documents matching a query.\r\n * It contains the document affected and the type of change that occurred.\r\n *\r\n * @class DocumentChange\r\n */\n\nclass DocumentChange {\n  /**\r\n   * @hideconstructor\r\n   *\r\n   * @param {string} type 'added' | 'removed' | 'modified'.\r\n   * @param {QueryDocumentSnapshot} document The document.\r\n   * @param {number} oldIndex The index in the documents array prior to this\r\n   * change.\r\n   * @param {number} newIndex The index in the documents array after this\r\n   * change.\r\n   */\n  constructor(type, document, oldIndex, newIndex) {\n    this._type = type;\n    this._document = document;\n    this._oldIndex = oldIndex;\n    this._newIndex = newIndex;\n  }\n  /**\r\n   * The type of change ('added', 'modified', or 'removed').\r\n   *\r\n   * @type {string}\r\n   * @name DocumentChange#type\r\n   * @readonly\r\n   *\r\n   * @example\r\n   * let query = firestore.collection('col').where('foo', '==', 'bar');\r\n   * let docsArray = [];\r\n   *\r\n   * let unsubscribe = query.onSnapshot(querySnapshot => {\r\n   *   for (let change of querySnapshot.docChanges) {\r\n   *     console.log(`Type of change is ${change.type}`);\r\n   *   }\r\n   * });\r\n   *\r\n   * // Remove this listener.\r\n   * unsubscribe();\r\n   */\n\n\n  get type() {\n    return this._type;\n  }\n  /**\r\n   * The document affected by this change.\r\n   *\r\n   * @type {QueryDocumentSnapshot}\r\n   * @name DocumentChange#doc\r\n   * @readonly\r\n   *\r\n   * @example\r\n   * let query = firestore.collection('col').where('foo', '==', 'bar');\r\n   *\r\n   * let unsubscribe = query.onSnapshot(querySnapshot => {\r\n   *   for (let change of querySnapshot.docChanges) {\r\n   *     console.log(change.doc.data());\r\n   *   }\r\n   * });\r\n   *\r\n   * // Remove this listener.\r\n   * unsubscribe();\r\n   */\n\n\n  get doc() {\n    return this._document;\n  }\n  /**\r\n   * The index of the changed document in the result set immediately prior to\r\n   * this DocumentChange (i.e. supposing that all prior DocumentChange objects\r\n   * have been applied). Is -1 for 'added' events.\r\n   *\r\n   * @type {number}\r\n   * @name DocumentChange#oldIndex\r\n   * @readonly\r\n   *\r\n   * @example\r\n   * let query = firestore.collection('col').where('foo', '==', 'bar');\r\n   * let docsArray = [];\r\n   *\r\n   * let unsubscribe = query.onSnapshot(querySnapshot => {\r\n   *   for (let change of querySnapshot.docChanges) {\r\n   *     if (change.oldIndex !== -1) {\r\n   *       docsArray.splice(change.oldIndex, 1);\r\n   *     }\r\n   *     if (change.newIndex !== -1) {\r\n   *       docsArray.splice(change.newIndex, 0, change.doc);\r\n   *     }\r\n   *   }\r\n   * });\r\n   *\r\n   * // Remove this listener.\r\n   * unsubscribe();\r\n   */\n\n\n  get oldIndex() {\n    return this._oldIndex;\n  }\n  /**\r\n   * The index of the changed document in the result set immediately after\r\n   * this DocumentChange (i.e. supposing that all prior DocumentChange\r\n   * objects and the current DocumentChange object have been applied).\r\n   * Is -1 for 'removed' events.\r\n   *\r\n   * @type {number}\r\n   * @name DocumentChange#newIndex\r\n   * @readonly\r\n   *\r\n   * @example\r\n   * let query = firestore.collection('col').where('foo', '==', 'bar');\r\n   * let docsArray = [];\r\n   *\r\n   * let unsubscribe = query.onSnapshot(querySnapshot => {\r\n   *   for (let change of querySnapshot.docChanges) {\r\n   *     if (change.oldIndex !== -1) {\r\n   *       docsArray.splice(change.oldIndex, 1);\r\n   *     }\r\n   *     if (change.newIndex !== -1) {\r\n   *       docsArray.splice(change.newIndex, 0, change.doc);\r\n   *     }\r\n   *   }\r\n   * });\r\n   *\r\n   * // Remove this listener.\r\n   * unsubscribe();\r\n   */\n\n\n  get newIndex() {\n    return this._newIndex;\n  }\n  /**\r\n   * Returns true if the data in this `DocumentChange` is equal to the provided\r\n   * value.\r\n   *\r\n   * @param {*} other The value to compare against.\r\n   * @return true if this `DocumentChange` is equal to the provided value.\r\n   */\n\n\n  isEqual(other) {\n    if (this === other) {\n      return true;\n    }\n\n    return other instanceof DocumentChange && this._type === other._type && this._oldIndex === other._oldIndex && this._newIndex === other._newIndex && this._document.isEqual(other._document);\n  }\n\n}\n\nexports.DocumentChange = DocumentChange;","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Backend/node_modules/@google-cloud/firestore/build/src/document-change.js"],"names":["Object","defineProperty","exports","value","DocumentChange","constructor","type","document","oldIndex","newIndex","_type","_document","_oldIndex","_newIndex","doc","isEqual","other"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,cAAN,CAAqB;AACjB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,EAAAA,WAAW,CAACC,IAAD,EAAOC,QAAP,EAAiBC,QAAjB,EAA2BC,QAA3B,EAAqC;AAC5C,SAAKC,KAAL,GAAaJ,IAAb;AACA,SAAKK,SAAL,GAAiBJ,QAAjB;AACA,SAAKK,SAAL,GAAiBJ,QAAjB;AACA,SAAKK,SAAL,GAAiBJ,QAAjB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,MAAIH,IAAJ,GAAW;AACP,WAAO,KAAKI,KAAZ;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,MAAII,GAAJ,GAAU;AACN,WAAO,KAAKH,SAAZ;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,MAAIH,QAAJ,GAAe;AACX,WAAO,KAAKI,SAAZ;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,MAAIH,QAAJ,GAAe;AACX,WAAO,KAAKI,SAAZ;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIE,EAAAA,OAAO,CAACC,KAAD,EAAQ;AACX,QAAI,SAASA,KAAb,EAAoB;AAChB,aAAO,IAAP;AACH;;AACD,WAAQA,KAAK,YAAYZ,cAAjB,IACJ,KAAKM,KAAL,KAAeM,KAAK,CAACN,KADjB,IAEJ,KAAKE,SAAL,KAAmBI,KAAK,CAACJ,SAFrB,IAGJ,KAAKC,SAAL,KAAmBG,KAAK,CAACH,SAHrB,IAIJ,KAAKF,SAAL,CAAeI,OAAf,CAAuBC,KAAK,CAACL,SAA7B,CAJJ;AAKH;;AA3IgB;;AA6IrBT,OAAO,CAACE,cAAR,GAAyBA,cAAzB","sourcesContent":["\"use strict\";\r\n/*!\r\n * Copyright 2018 Google Inc. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * A DocumentChange represents a change to the documents matching a query.\r\n * It contains the document affected and the type of change that occurred.\r\n *\r\n * @class DocumentChange\r\n */\r\nclass DocumentChange {\r\n    /**\r\n     * @hideconstructor\r\n     *\r\n     * @param {string} type 'added' | 'removed' | 'modified'.\r\n     * @param {QueryDocumentSnapshot} document The document.\r\n     * @param {number} oldIndex The index in the documents array prior to this\r\n     * change.\r\n     * @param {number} newIndex The index in the documents array after this\r\n     * change.\r\n     */\r\n    constructor(type, document, oldIndex, newIndex) {\r\n        this._type = type;\r\n        this._document = document;\r\n        this._oldIndex = oldIndex;\r\n        this._newIndex = newIndex;\r\n    }\r\n    /**\r\n     * The type of change ('added', 'modified', or 'removed').\r\n     *\r\n     * @type {string}\r\n     * @name DocumentChange#type\r\n     * @readonly\r\n     *\r\n     * @example\r\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\r\n     * let docsArray = [];\r\n     *\r\n     * let unsubscribe = query.onSnapshot(querySnapshot => {\r\n     *   for (let change of querySnapshot.docChanges) {\r\n     *     console.log(`Type of change is ${change.type}`);\r\n     *   }\r\n     * });\r\n     *\r\n     * // Remove this listener.\r\n     * unsubscribe();\r\n     */\r\n    get type() {\r\n        return this._type;\r\n    }\r\n    /**\r\n     * The document affected by this change.\r\n     *\r\n     * @type {QueryDocumentSnapshot}\r\n     * @name DocumentChange#doc\r\n     * @readonly\r\n     *\r\n     * @example\r\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\r\n     *\r\n     * let unsubscribe = query.onSnapshot(querySnapshot => {\r\n     *   for (let change of querySnapshot.docChanges) {\r\n     *     console.log(change.doc.data());\r\n     *   }\r\n     * });\r\n     *\r\n     * // Remove this listener.\r\n     * unsubscribe();\r\n     */\r\n    get doc() {\r\n        return this._document;\r\n    }\r\n    /**\r\n     * The index of the changed document in the result set immediately prior to\r\n     * this DocumentChange (i.e. supposing that all prior DocumentChange objects\r\n     * have been applied). Is -1 for 'added' events.\r\n     *\r\n     * @type {number}\r\n     * @name DocumentChange#oldIndex\r\n     * @readonly\r\n     *\r\n     * @example\r\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\r\n     * let docsArray = [];\r\n     *\r\n     * let unsubscribe = query.onSnapshot(querySnapshot => {\r\n     *   for (let change of querySnapshot.docChanges) {\r\n     *     if (change.oldIndex !== -1) {\r\n     *       docsArray.splice(change.oldIndex, 1);\r\n     *     }\r\n     *     if (change.newIndex !== -1) {\r\n     *       docsArray.splice(change.newIndex, 0, change.doc);\r\n     *     }\r\n     *   }\r\n     * });\r\n     *\r\n     * // Remove this listener.\r\n     * unsubscribe();\r\n     */\r\n    get oldIndex() {\r\n        return this._oldIndex;\r\n    }\r\n    /**\r\n     * The index of the changed document in the result set immediately after\r\n     * this DocumentChange (i.e. supposing that all prior DocumentChange\r\n     * objects and the current DocumentChange object have been applied).\r\n     * Is -1 for 'removed' events.\r\n     *\r\n     * @type {number}\r\n     * @name DocumentChange#newIndex\r\n     * @readonly\r\n     *\r\n     * @example\r\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\r\n     * let docsArray = [];\r\n     *\r\n     * let unsubscribe = query.onSnapshot(querySnapshot => {\r\n     *   for (let change of querySnapshot.docChanges) {\r\n     *     if (change.oldIndex !== -1) {\r\n     *       docsArray.splice(change.oldIndex, 1);\r\n     *     }\r\n     *     if (change.newIndex !== -1) {\r\n     *       docsArray.splice(change.newIndex, 0, change.doc);\r\n     *     }\r\n     *   }\r\n     * });\r\n     *\r\n     * // Remove this listener.\r\n     * unsubscribe();\r\n     */\r\n    get newIndex() {\r\n        return this._newIndex;\r\n    }\r\n    /**\r\n     * Returns true if the data in this `DocumentChange` is equal to the provided\r\n     * value.\r\n     *\r\n     * @param {*} other The value to compare against.\r\n     * @return true if this `DocumentChange` is equal to the provided value.\r\n     */\r\n    isEqual(other) {\r\n        if (this === other) {\r\n            return true;\r\n        }\r\n        return (other instanceof DocumentChange &&\r\n            this._type === other._type &&\r\n            this._oldIndex === other._oldIndex &&\r\n            this._newIndex === other._newIndex &&\r\n            this._document.isEqual(other._document));\r\n    }\r\n}\r\nexports.DocumentChange = DocumentChange;\r\n//# sourceMappingURL=document-change.js.map"]},"metadata":{},"sourceType":"script"}