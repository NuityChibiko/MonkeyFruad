{"ast":null,"code":"'use strict';\n\nvar utils = require('./index');\n\nvar generateBreakpoints = require('./generateBreakpoints');\n\nvar Cache = require('../cache');\n\nvar isEmpty = utils.isEmpty;\n/**\r\n * Options used to generate the srcset attribute.\r\n * @typedef {object} srcset\r\n * @property {(number[]|string[])}   [breakpoints] An array of breakpoints.\r\n * @property {number}                [min_width]   Minimal width of the srcset images.\r\n * @property {number}                [max_width]   Maximal width of the srcset images.\r\n * @property {number}                [max_images]  Number of srcset images to generate.\r\n * @property {object|string}         [transformation] The transformation to use in the srcset urls.\r\n * @property {boolean}               [sizes] Whether to calculate and add the sizes attribute.\r\n */\n\n/**\r\n * Helper function. Generates a single srcset item url\r\n *\r\n * @private\r\n * @param {string} public_id  Public ID of the resource.\r\n * @param {number} width      Width in pixels of the srcset item.\r\n * @param {object|string} transformation\r\n * @param {object} options    Additional options.\r\n *\r\n * @return {string} Resulting URL of the item\r\n */\n\nfunction scaledUrl(public_id, width, transformation) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var configParams = utils.extractUrlParams(options);\n  transformation = transformation || options;\n  configParams.raw_transformation = utils.generate_transformation_string([utils.extend({}, transformation), {\n    crop: 'scale',\n    width: width\n  }]);\n  return utils.url(public_id, configParams);\n}\n/**\r\n * If cache is enabled, get the breakpoints from the cache. If the values were not found in the cache,\r\n * or cache is not enabled, generate the values.\r\n * @param {srcset} srcset The srcset configuration parameters\r\n * @param {string} public_id\r\n * @param {object} options\r\n * @return {*|Array}\r\n */\n\n\nfunction getOrGenerateBreakpoints(public_id) {\n  var srcset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var breakpoints = [];\n\n  if (srcset.useCache) {\n    breakpoints = Cache.get(public_id, options);\n\n    if (!breakpoints) {\n      breakpoints = [];\n    }\n  } else {\n    breakpoints = generateBreakpoints(srcset);\n  }\n\n  return breakpoints;\n}\n/**\r\n * Helper function. Generates srcset attribute value of the HTML img tag\r\n * @private\r\n *\r\n * @param {string} public_id  Public ID of the resource\r\n * @param {number[]} breakpoints An array of breakpoints (in pixels)\r\n * @param {object} transformation The transformation\r\n * @param {object} options Includes html tag options, transformation options\r\n * @return {string} Resulting srcset attribute value\r\n */\n\n\nfunction generateSrcsetAttribute(public_id, breakpoints, transformation, options) {\n  options = utils.clone(options);\n  utils.patchFetchFormat(options);\n  return breakpoints.map(function (width) {\n    return `${scaledUrl(public_id, width, transformation, options)} ${width}w`;\n  }).join(', ');\n}\n/**\r\n * Helper function. Generates sizes attribute value of the HTML img tag\r\n * @private\r\n * @param {number[]} breakpoints An array of breakpoints.\r\n * @return {string} Resulting sizes attribute value\r\n */\n\n\nfunction generateSizesAttribute() {\n  var breakpoints = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return breakpoints.map(function (width) {\n    return `(max-width: ${width}px) ${width}px`;\n  }).join(', ');\n}\n/**\r\n * Helper function. Generates srcset and sizes attributes of the image tag\r\n *\r\n * Generated attributes are added to attributes argument\r\n *\r\n * @private\r\n * @param {string}    publicId  The public ID of the resource\r\n * @param {object}    attributes Existing HTML attributes.\r\n * @param {srcset}    srcsetData\r\n * @param {object}    options    Additional options.\r\n *\r\n * @return array The responsive attributes\r\n */\n\n\nfunction generateImageResponsiveAttributes(publicId) {\n  var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var srcsetData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {}; // Create both srcset and sizes here to avoid fetching breakpoints twice\n\n  var responsiveAttributes = {};\n\n  if (isEmpty(srcsetData)) {\n    return responsiveAttributes;\n  }\n\n  var generateSizes = !attributes.sizes && srcsetData.sizes === true;\n  var generateSrcset = !attributes.srcset;\n\n  if (generateSrcset || generateSizes) {\n    var breakpoints = getOrGenerateBreakpoints(publicId, srcsetData, options);\n\n    if (generateSrcset) {\n      var transformation = srcsetData.transformation;\n      var srcsetAttr = generateSrcsetAttribute(publicId, breakpoints, transformation, options);\n\n      if (!isEmpty(srcsetAttr)) {\n        responsiveAttributes.srcset = srcsetAttr;\n      }\n    }\n\n    if (generateSizes) {\n      var sizesAttr = generateSizesAttribute(breakpoints);\n\n      if (!isEmpty(sizesAttr)) {\n        responsiveAttributes.sizes = sizesAttr;\n      }\n    }\n  }\n\n  return responsiveAttributes;\n}\n/**\r\n * Generate a media query\r\n *\r\n * @private\r\n * @param {object} options configuration options\r\n * @param {number|string} options.min_width\r\n * @param {number|string} options.max_width\r\n * @return {string} a media query string\r\n */\n\n\nfunction generateMediaAttr() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var mediaQuery = [];\n\n  if (options.min_width != null) {\n    mediaQuery.push(`(min-width: ${options.min_width}px)`);\n  }\n\n  if (options.max_width != null) {\n    mediaQuery.push(`(max-width: ${options.max_width}px)`);\n  }\n\n  return mediaQuery.join(' and ');\n}\n\nmodule.exports = {\n  srcsetUrl: scaledUrl,\n  generateSrcsetAttribute,\n  generateSizesAttribute,\n  generateMediaAttr,\n  generateImageResponsiveAttributes\n};","map":{"version":3,"sources":["D:/PROJECT ALL/MonkeyFruad/Backend/node_modules/cloudinary/lib-es5/utils/srcsetUtils.js"],"names":["utils","require","generateBreakpoints","Cache","isEmpty","scaledUrl","public_id","width","transformation","options","arguments","length","undefined","configParams","extractUrlParams","raw_transformation","generate_transformation_string","extend","crop","url","getOrGenerateBreakpoints","srcset","breakpoints","useCache","get","generateSrcsetAttribute","clone","patchFetchFormat","map","join","generateSizesAttribute","generateImageResponsiveAttributes","publicId","attributes","srcsetData","responsiveAttributes","generateSizes","sizes","generateSrcset","srcsetAttr","sizesAttr","generateMediaAttr","mediaQuery","min_width","push","max_width","module","exports","srcsetUrl"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nvar utils = require('./index');\r\nvar generateBreakpoints = require('./generateBreakpoints');\r\nvar Cache = require('../cache');\r\n\r\nvar isEmpty = utils.isEmpty;\r\n\r\n/**\r\n * Options used to generate the srcset attribute.\r\n * @typedef {object} srcset\r\n * @property {(number[]|string[])}   [breakpoints] An array of breakpoints.\r\n * @property {number}                [min_width]   Minimal width of the srcset images.\r\n * @property {number}                [max_width]   Maximal width of the srcset images.\r\n * @property {number}                [max_images]  Number of srcset images to generate.\r\n * @property {object|string}         [transformation] The transformation to use in the srcset urls.\r\n * @property {boolean}               [sizes] Whether to calculate and add the sizes attribute.\r\n */\r\n\r\n/**\r\n * Helper function. Generates a single srcset item url\r\n *\r\n * @private\r\n * @param {string} public_id  Public ID of the resource.\r\n * @param {number} width      Width in pixels of the srcset item.\r\n * @param {object|string} transformation\r\n * @param {object} options    Additional options.\r\n *\r\n * @return {string} Resulting URL of the item\r\n */\r\nfunction scaledUrl(public_id, width, transformation) {\r\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\r\n\r\n  var configParams = utils.extractUrlParams(options);\r\n  transformation = transformation || options;\r\n  configParams.raw_transformation = utils.generate_transformation_string([utils.extend({}, transformation), { crop: 'scale', width: width }]);\r\n\r\n  return utils.url(public_id, configParams);\r\n}\r\n\r\n/**\r\n * If cache is enabled, get the breakpoints from the cache. If the values were not found in the cache,\r\n * or cache is not enabled, generate the values.\r\n * @param {srcset} srcset The srcset configuration parameters\r\n * @param {string} public_id\r\n * @param {object} options\r\n * @return {*|Array}\r\n */\r\nfunction getOrGenerateBreakpoints(public_id) {\r\n  var srcset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\r\n\r\n  var breakpoints = [];\r\n  if (srcset.useCache) {\r\n    breakpoints = Cache.get(public_id, options);\r\n    if (!breakpoints) {\r\n      breakpoints = [];\r\n    }\r\n  } else {\r\n    breakpoints = generateBreakpoints(srcset);\r\n  }\r\n  return breakpoints;\r\n}\r\n\r\n/**\r\n * Helper function. Generates srcset attribute value of the HTML img tag\r\n * @private\r\n *\r\n * @param {string} public_id  Public ID of the resource\r\n * @param {number[]} breakpoints An array of breakpoints (in pixels)\r\n * @param {object} transformation The transformation\r\n * @param {object} options Includes html tag options, transformation options\r\n * @return {string} Resulting srcset attribute value\r\n */\r\nfunction generateSrcsetAttribute(public_id, breakpoints, transformation, options) {\r\n  options = utils.clone(options);\r\n  utils.patchFetchFormat(options);\r\n  return breakpoints.map(function (width) {\r\n    return `${scaledUrl(public_id, width, transformation, options)} ${width}w`;\r\n  }).join(', ');\r\n}\r\n\r\n/**\r\n * Helper function. Generates sizes attribute value of the HTML img tag\r\n * @private\r\n * @param {number[]} breakpoints An array of breakpoints.\r\n * @return {string} Resulting sizes attribute value\r\n */\r\nfunction generateSizesAttribute() {\r\n  var breakpoints = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\r\n\r\n  return breakpoints.map(function (width) {\r\n    return `(max-width: ${width}px) ${width}px`;\r\n  }).join(', ');\r\n}\r\n\r\n/**\r\n * Helper function. Generates srcset and sizes attributes of the image tag\r\n *\r\n * Generated attributes are added to attributes argument\r\n *\r\n * @private\r\n * @param {string}    publicId  The public ID of the resource\r\n * @param {object}    attributes Existing HTML attributes.\r\n * @param {srcset}    srcsetData\r\n * @param {object}    options    Additional options.\r\n *\r\n * @return array The responsive attributes\r\n */\r\nfunction generateImageResponsiveAttributes(publicId) {\r\n  var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n  var srcsetData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\r\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\r\n\r\n  // Create both srcset and sizes here to avoid fetching breakpoints twice\r\n\r\n  var responsiveAttributes = {};\r\n  if (isEmpty(srcsetData)) {\r\n    return responsiveAttributes;\r\n  }\r\n\r\n  var generateSizes = !attributes.sizes && srcsetData.sizes === true;\r\n\r\n  var generateSrcset = !attributes.srcset;\r\n  if (generateSrcset || generateSizes) {\r\n    var breakpoints = getOrGenerateBreakpoints(publicId, srcsetData, options);\r\n\r\n    if (generateSrcset) {\r\n      var transformation = srcsetData.transformation;\r\n      var srcsetAttr = generateSrcsetAttribute(publicId, breakpoints, transformation, options);\r\n      if (!isEmpty(srcsetAttr)) {\r\n        responsiveAttributes.srcset = srcsetAttr;\r\n      }\r\n    }\r\n\r\n    if (generateSizes) {\r\n      var sizesAttr = generateSizesAttribute(breakpoints);\r\n      if (!isEmpty(sizesAttr)) {\r\n        responsiveAttributes.sizes = sizesAttr;\r\n      }\r\n    }\r\n  }\r\n  return responsiveAttributes;\r\n}\r\n\r\n/**\r\n * Generate a media query\r\n *\r\n * @private\r\n * @param {object} options configuration options\r\n * @param {number|string} options.min_width\r\n * @param {number|string} options.max_width\r\n * @return {string} a media query string\r\n */\r\nfunction generateMediaAttr() {\r\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n\r\n  var mediaQuery = [];\r\n  if (options.min_width != null) {\r\n    mediaQuery.push(`(min-width: ${options.min_width}px)`);\r\n  }\r\n  if (options.max_width != null) {\r\n    mediaQuery.push(`(max-width: ${options.max_width}px)`);\r\n  }\r\n  return mediaQuery.join(' and ');\r\n}\r\n\r\nmodule.exports = {\r\n  srcsetUrl: scaledUrl,\r\n  generateSrcsetAttribute,\r\n  generateSizesAttribute,\r\n  generateMediaAttr,\r\n  generateImageResponsiveAttributes\r\n};"]},"metadata":{},"sourceType":"script"}