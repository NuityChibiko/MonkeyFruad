{"ast":null,"code":"\"use strict\";\n/*!\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TeenyStatistics = exports.TeenyStatisticsWarning = void 0;\n/**\r\n * @class TeenyStatisticsWarning\r\n * @extends Error\r\n * @description While an error, is used for emitting warnings when\r\n *   meeting certain configured thresholds.\r\n * @see process.emitWarning\r\n */\n\nclass TeenyStatisticsWarning extends Error {\n  /**\r\n   * @param {string} message\r\n   */\n  constructor(message) {\n    super(message);\n    this.threshold = 0;\n    this.type = '';\n    this.value = 0;\n    this.name = this.constructor.name;\n    Error.captureStackTrace(this, this.constructor);\n  }\n\n}\n\nexports.TeenyStatisticsWarning = TeenyStatisticsWarning;\nTeenyStatisticsWarning.CONCURRENT_REQUESTS = 'ConcurrentRequestsExceededWarning';\n/**\r\n * @class TeenyStatistics\r\n * @description Maintain various statistics internal to teeny-request. Tracking\r\n *   is not automatic and must be instrumented within teeny-request.\r\n */\n\nclass TeenyStatistics {\n  /**\r\n   * @param {TeenyStatisticsOptions} [opts]\r\n   */\n  constructor(opts) {\n    /**\r\n     * @type {number}\r\n     * @private\r\n     * @default 0\r\n     */\n    this._concurrentRequests = 0;\n    /**\r\n     * @type {boolean}\r\n     * @private\r\n     * @default false\r\n     */\n\n    this._didConcurrentRequestWarn = false;\n    this._options = TeenyStatistics._prepareOptions(opts);\n  }\n  /**\r\n   * Returns a copy of the current options.\r\n   * @return {TeenyStatisticsOptions}\r\n   */\n\n\n  getOptions() {\n    return Object.assign({}, this._options);\n  }\n  /**\r\n   * Change configured statistics options. This will not preserve unspecified\r\n   *   options that were previously specified, i.e. this is a reset of options.\r\n   * @param {TeenyStatisticsOptions} [opts]\r\n   * @returns {TeenyStatisticsConfig} The previous options.\r\n   * @see _prepareOptions\r\n   */\n\n\n  setOptions(opts) {\n    const oldOpts = this._options;\n    this._options = TeenyStatistics._prepareOptions(opts);\n    return oldOpts;\n  }\n  /**\r\n   * @readonly\r\n   * @return {TeenyStatisticsCounters}\r\n   */\n\n\n  get counters() {\n    return {\n      concurrentRequests: this._concurrentRequests\n    };\n  }\n  /**\r\n   * @description Should call this right before making a request.\r\n   */\n\n\n  requestStarting() {\n    this._concurrentRequests++;\n\n    if (this._options.concurrentRequests > 0 && this._concurrentRequests >= this._options.concurrentRequests && !this._didConcurrentRequestWarn) {\n      this._didConcurrentRequestWarn = true;\n      const warning = new TeenyStatisticsWarning('Possible excessive concurrent requests detected. ' + this._concurrentRequests + ' requests in-flight, which exceeds the configured threshold of ' + this._options.concurrentRequests + '. Use the TEENY_REQUEST_WARN_CONCURRENT_REQUESTS environment ' + 'variable or the concurrentRequests option of teeny-request to ' + 'increase or disable (0) this warning.');\n      warning.type = TeenyStatisticsWarning.CONCURRENT_REQUESTS;\n      warning.value = this._concurrentRequests;\n      warning.threshold = this._options.concurrentRequests;\n      process.emitWarning(warning);\n    }\n  }\n  /**\r\n   * @description When using `requestStarting`, call this after the request\r\n   *   has finished.\r\n   */\n\n\n  requestFinished() {\n    // TODO negative?\n    this._concurrentRequests--;\n  }\n  /**\r\n   * Configuration Precedence:\r\n   *   1. Dependency inversion via defined option.\r\n   *   2. Global numeric environment variable.\r\n   *   3. Built-in default.\r\n   * This will not preserve unspecified options previously specified.\r\n   * @param {TeenyStatisticsOptions} [opts]\r\n   * @returns {TeenyStatisticsOptions}\r\n   * @private\r\n   */\n\n\n  static _prepareOptions({\n    concurrentRequests: diConcurrentRequests\n  } = {}) {\n    let concurrentRequests = this.DEFAULT_WARN_CONCURRENT_REQUESTS;\n    const envConcurrentRequests = Number(process.env.TEENY_REQUEST_WARN_CONCURRENT_REQUESTS);\n\n    if (diConcurrentRequests !== undefined) {\n      concurrentRequests = diConcurrentRequests;\n    } else if (!Number.isNaN(envConcurrentRequests)) {\n      concurrentRequests = envConcurrentRequests;\n    }\n\n    return {\n      concurrentRequests\n    };\n  }\n\n}\n\nexports.TeenyStatistics = TeenyStatistics;\n/**\r\n * @description A default threshold representing when to warn about excessive\r\n *   in-flight/concurrent requests.\r\n * @type {number}\r\n * @static\r\n * @readonly\r\n * @default 5000\r\n */\n\nTeenyStatistics.DEFAULT_WARN_CONCURRENT_REQUESTS = 5000;","map":{"version":3,"sources":["../../src/TeenyStatistics.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\n/*!\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.TeenyStatistics = exports.TeenyStatisticsWarning = void 0;\r\n/**\r\n * @class TeenyStatisticsWarning\r\n * @extends Error\r\n * @description While an error, is used for emitting warnings when\r\n *   meeting certain configured thresholds.\r\n * @see process.emitWarning\r\n */\r\nclass TeenyStatisticsWarning extends Error {\r\n    /**\r\n     * @param {string} message\r\n     */\r\n    constructor(message) {\r\n        super(message);\r\n        this.threshold = 0;\r\n        this.type = '';\r\n        this.value = 0;\r\n        this.name = this.constructor.name;\r\n        Error.captureStackTrace(this, this.constructor);\r\n    }\r\n}\r\nexports.TeenyStatisticsWarning = TeenyStatisticsWarning;\r\nTeenyStatisticsWarning.CONCURRENT_REQUESTS = 'ConcurrentRequestsExceededWarning';\r\n/**\r\n * @class TeenyStatistics\r\n * @description Maintain various statistics internal to teeny-request. Tracking\r\n *   is not automatic and must be instrumented within teeny-request.\r\n */\r\nclass TeenyStatistics {\r\n    /**\r\n     * @param {TeenyStatisticsOptions} [opts]\r\n     */\r\n    constructor(opts) {\r\n        /**\r\n         * @type {number}\r\n         * @private\r\n         * @default 0\r\n         */\r\n        this._concurrentRequests = 0;\r\n        /**\r\n         * @type {boolean}\r\n         * @private\r\n         * @default false\r\n         */\r\n        this._didConcurrentRequestWarn = false;\r\n        this._options = TeenyStatistics._prepareOptions(opts);\r\n    }\r\n    /**\r\n     * Returns a copy of the current options.\r\n     * @return {TeenyStatisticsOptions}\r\n     */\r\n    getOptions() {\r\n        return Object.assign({}, this._options);\r\n    }\r\n    /**\r\n     * Change configured statistics options. This will not preserve unspecified\r\n     *   options that were previously specified, i.e. this is a reset of options.\r\n     * @param {TeenyStatisticsOptions} [opts]\r\n     * @returns {TeenyStatisticsConfig} The previous options.\r\n     * @see _prepareOptions\r\n     */\r\n    setOptions(opts) {\r\n        const oldOpts = this._options;\r\n        this._options = TeenyStatistics._prepareOptions(opts);\r\n        return oldOpts;\r\n    }\r\n    /**\r\n     * @readonly\r\n     * @return {TeenyStatisticsCounters}\r\n     */\r\n    get counters() {\r\n        return {\r\n            concurrentRequests: this._concurrentRequests,\r\n        };\r\n    }\r\n    /**\r\n     * @description Should call this right before making a request.\r\n     */\r\n    requestStarting() {\r\n        this._concurrentRequests++;\r\n        if (this._options.concurrentRequests > 0 &&\r\n            this._concurrentRequests >= this._options.concurrentRequests &&\r\n            !this._didConcurrentRequestWarn) {\r\n            this._didConcurrentRequestWarn = true;\r\n            const warning = new TeenyStatisticsWarning('Possible excessive concurrent requests detected. ' +\r\n                this._concurrentRequests +\r\n                ' requests in-flight, which exceeds the configured threshold of ' +\r\n                this._options.concurrentRequests +\r\n                '. Use the TEENY_REQUEST_WARN_CONCURRENT_REQUESTS environment ' +\r\n                'variable or the concurrentRequests option of teeny-request to ' +\r\n                'increase or disable (0) this warning.');\r\n            warning.type = TeenyStatisticsWarning.CONCURRENT_REQUESTS;\r\n            warning.value = this._concurrentRequests;\r\n            warning.threshold = this._options.concurrentRequests;\r\n            process.emitWarning(warning);\r\n        }\r\n    }\r\n    /**\r\n     * @description When using `requestStarting`, call this after the request\r\n     *   has finished.\r\n     */\r\n    requestFinished() {\r\n        // TODO negative?\r\n        this._concurrentRequests--;\r\n    }\r\n    /**\r\n     * Configuration Precedence:\r\n     *   1. Dependency inversion via defined option.\r\n     *   2. Global numeric environment variable.\r\n     *   3. Built-in default.\r\n     * This will not preserve unspecified options previously specified.\r\n     * @param {TeenyStatisticsOptions} [opts]\r\n     * @returns {TeenyStatisticsOptions}\r\n     * @private\r\n     */\r\n    static _prepareOptions({ concurrentRequests: diConcurrentRequests, } = {}) {\r\n        let concurrentRequests = this.DEFAULT_WARN_CONCURRENT_REQUESTS;\r\n        const envConcurrentRequests = Number(process.env.TEENY_REQUEST_WARN_CONCURRENT_REQUESTS);\r\n        if (diConcurrentRequests !== undefined) {\r\n            concurrentRequests = diConcurrentRequests;\r\n        }\r\n        else if (!Number.isNaN(envConcurrentRequests)) {\r\n            concurrentRequests = envConcurrentRequests;\r\n        }\r\n        return { concurrentRequests };\r\n    }\r\n}\r\nexports.TeenyStatistics = TeenyStatistics;\r\n/**\r\n * @description A default threshold representing when to warn about excessive\r\n *   in-flight/concurrent requests.\r\n * @type {number}\r\n * @static\r\n * @readonly\r\n * @default 5000\r\n */\r\nTeenyStatistics.DEFAULT_WARN_CONCURRENT_REQUESTS = 5000;\r\n//# sourceMappingURL=TeenyStatistics.js.map"]},"metadata":{},"sourceType":"script"}